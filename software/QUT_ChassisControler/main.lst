   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.startup.main,"ax",@progbits
  12               	.global	main
  14               	main:
  15               	.LFB11:
  16               		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <string.h>
   6:main.c        **** #include <stdbool.h>	
   7:main.c        **** #include "utils/MCP2515.h"
   8:main.c        **** #include "utils/uart.h"
   9:main.c        **** #include "includes/chassisInit.h"
  10:main.c        **** #include "includes/chassisUART.h"
  11:main.c        **** #include "includes/chassisLED.h"
  12:main.c        **** #include "includes/chassisInput.h"
  13:main.c        **** #include "includes/chassisCAN.h"
  14:main.c        **** #include "includes/chassisError.h"
  15:main.c        **** 
  16:main.c        **** uint8_t buttonStateDebounceCount = 0; 
  17:main.c        **** bool buttonStateLock = 0;
  18:main.c        **** bool buttonState = 0;
  19:main.c        **** 
  20:main.c        **** // Variables used in the 1kHz CAN heartbeat loop
  21:main.c        **** #define CAN_HEARTBEAT_TIME_INVERTERS (10)   // Defines the 10ms (100Hz) for the inverter trigger
  22:main.c        **** #define CAN_HEARTBEAT_TIME_DATA (10)        // Defines the 10ms (100Hz) for the data trigger
  23:main.c        **** #define CAN_HEARTBEAT_TIME_POWER (50)       // Defines the 50ms (20Hz) for the power trigger
  24:main.c        **** uint8_t CAN_HEARTBEAT_COUNT_INVERTERS = 0;  // Number of iterations for the inverter heartbeat trig
  25:main.c        **** uint8_t CAN_HEARTBEAT_COUNT_DATA = 2;       // Number of iterations for the data heartbeat trigger
  26:main.c        **** uint8_t CAN_HEARTBEAT_COUNT_POWER = 4;      // Number of iterations for the power heartbeat trigger
  27:main.c        **** 
  28:main.c        **** #define CAN_HEARTBEAT_ERROR_DELAY (110)     // Milliseconds without return heartbeat, must be sligh
  29:main.c        **** uint8_t CAN_HEARTBEAT_ERROR_INVERTERS = 0;  // Time without successfull heartbeat for inverters
  30:main.c        **** uint8_t CAN_HEARTBEAT_ERROR_DATA = 2;       // Time without successfull heartbeat for data
  31:main.c        **** uint8_t CAN_HEARTBEAT_ERROR_POWER = 4;      // Time without successfull heartbeat for power
  32:main.c        **** 
  33:main.c        **** #define CAN_INPUT_SEND_DELAY (200)          // Defines the 200ms (5Hz) for the input send trigger
  34:main.c        **** uint8_t CAN_INPUT_SEND_TIME = 0;            // Number of iterations for the input send trigger
  35:main.c        **** 
  36:main.c        **** /**
  37:main.c        ****  * @brief 
  38:main.c        ****  * 
  39:main.c        ****  */
  40:main.c        **** void main() {
  17               		.loc 1 40 0
  18               		.cfi_startproc
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27 0004 00D0      		rcall .
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 6
  30 0006 CDB7      		in r28,__SP_L__
  31 0008 DEB7      		in r29,__SP_H__
  32               	.LCFI3:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 2 */
  36               	/* stack size = 4 */
  37               	.L__stack_usage = 4
  41:main.c        **** 
  42:main.c        ****     // Set Up
  43:main.c        ****     firmware_init();
  38               		.loc 1 43 0
  39 000a 0E94 0000 		call firmware_init
  40               	.LVL0:
  44:main.c        ****     timer_init();
  41               		.loc 1 44 0
  42 000e 0E94 0000 		call timer_init
  43               	.LVL1:
  44               	.L6:
  45               	.LBB2:
  45:main.c        **** 
  46:main.c        ****     // Main Poll
  47:main.c        ****     // ------------------------------------------------------------------------
  48:main.c        ****     while(1)
  49:main.c        ****     {
  50:main.c        ****         // Poll UART to see if there is anything there to use
  51:main.c        ****         // while(isCharAvailable_1()) 
  52:main.c        ****         // {
  53:main.c        ****         //     uint8_t *completedInt;
  54:main.c        ****         //     // if(uart_process_stdin(uart1_getc(), completedInt)) 
  55:main.c        ****         //     if(uart_process_stdin(receiveChar_1(), completedInt)) 
  56:main.c        ****         //     {
  57:main.c        **** 
  58:main.c        ****         //     }
  59:main.c        ****         // }
  60:main.c        **** 
  61:main.c        ****         // Poll inputs and store into variables
  62:main.c        ****         uint16_t tmpInputVal;
  63:main.c        ****         if(INPUT_get_accelPedal(&tmpInputVal) == 0) {
  46               		.loc 1 63 0
  47 0012 CE01      		movw r24,r28
  48 0014 0196      		adiw r24,1
  49 0016 0E94 0000 		call INPUT_get_accelPedal
  50               	.LVL2:
  51 001a 8111      		cpse r24,__zero_reg__
  52 001c 00C0      		rjmp .L2
  64:main.c        ****             INPUT_accelerationPedal = tmpInputVal;
  53               		.loc 1 64 0
  54 001e 8981      		ldd r24,Y+1
  55 0020 9A81      		ldd r25,Y+2
  56 0022 9093 0000 		sts INPUT_accelerationPedal+1,r25
  57 0026 8093 0000 		sts INPUT_accelerationPedal,r24
  58               	.L2:
  65:main.c        ****         }
  66:main.c        ****         if(INPUT_get_brakePedal(&tmpInputVal) == 0) {
  59               		.loc 1 66 0
  60 002a CE01      		movw r24,r28
  61 002c 0196      		adiw r24,1
  62 002e 0E94 0000 		call INPUT_get_brakePedal
  63               	.LVL3:
  64 0032 8111      		cpse r24,__zero_reg__
  65 0034 00C0      		rjmp .L3
  67:main.c        ****             INPUT_brakePedal = tmpInputVal;
  66               		.loc 1 67 0
  67 0036 8981      		ldd r24,Y+1
  68 0038 9A81      		ldd r25,Y+2
  69 003a 9093 0000 		sts INPUT_brakePedal+1,r25
  70 003e 8093 0000 		sts INPUT_brakePedal,r24
  71               	.L3:
  68:main.c        ****         }
  69:main.c        ****         if(INPUT_get_brakePressureBack(&tmpInputVal) == 0) {
  72               		.loc 1 69 0
  73 0042 CE01      		movw r24,r28
  74 0044 0196      		adiw r24,1
  75 0046 0E94 0000 		call INPUT_get_brakePressureBack
  76               	.LVL4:
  77 004a 8111      		cpse r24,__zero_reg__
  78 004c 00C0      		rjmp .L4
  70:main.c        ****             INPUT_brakePressureBack = tmpInputVal;
  79               		.loc 1 70 0
  80 004e 8981      		ldd r24,Y+1
  81 0050 9A81      		ldd r25,Y+2
  82 0052 9093 0000 		sts INPUT_brakePressureBack+1,r25
  83 0056 8093 0000 		sts INPUT_brakePressureBack,r24
  84               	.L4:
  71:main.c        ****         }
  72:main.c        ****         if(INPUT_get_brakePressureFront(&tmpInputVal) == 0) {
  85               		.loc 1 72 0
  86 005a CE01      		movw r24,r28
  87 005c 0196      		adiw r24,1
  88 005e 0E94 0000 		call INPUT_get_brakePressureFront
  89               	.LVL5:
  90 0062 8111      		cpse r24,__zero_reg__
  91 0064 00C0      		rjmp .L6
  73:main.c        ****             INPUT_brakePressureFront = tmpInputVal;
  92               		.loc 1 73 0
  93 0066 8981      		ldd r24,Y+1
  94 0068 9A81      		ldd r25,Y+2
  95 006a 9093 0000 		sts INPUT_brakePressureFront+1,r25
  96 006e 8093 0000 		sts INPUT_brakePressureFront,r24
  97               	.LBE2:
  49:main.c        ****         // Poll UART to see if there is anything there to use
  98               		.loc 1 49 0
  99 0072 00C0      		rjmp .L6
 100               		.cfi_endproc
 101               	.LFE11:
 103               		.section	.text.oneKHzTimer,"ax",@progbits
 104               	.global	oneKHzTimer
 106               	oneKHzTimer:
 107               	.LFB12:
  74:main.c        ****         }
  75:main.c        ****     }
  76:main.c        **** }
  77:main.c        **** 
  78:main.c        **** /**
  79:main.c        ****  * @brief Core system's timer, 1ms, core of the sudo-RTOS system
  80:main.c        ****  * 
  81:main.c        ****  */
  82:main.c        **** void oneKHzTimer() {
 108               		.loc 1 82 0
 109               		.cfi_startproc
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  83:main.c        **** 
  84:main.c        ****     // Check the button state
  85:main.c        ****     // -> 50ms Timer / State Change
  86:main.c        ****     // 50ms debounce, IE hold for 50ms and if held, change state
  87:main.c        ****     // ------------------------------------------------------------------------
  88:main.c        ****     // if(PRESSING_BUTTON) // No idea to which PIN set to check
  89:main.c        ****     // {
  90:main.c        ****     //     // Count up 1ms
  91:main.c        ****     //     buttonStateDebounceCount++;
  92:main.c        ****     //     // If 50ms have been counted
  93:main.c        ****     //     if(buttonStateDebounceCount >= 50) 
  94:main.c        ****     //     {
  95:main.c        ****     //         // Lock the state change till un-press of button
  96:main.c        ****     //         buttonStateLock = true;
  97:main.c        ****     //         // 
  98:main.c        ****     //         if(buttonStateDebounceCount > 254) { buttonStateDebounceCount = 50; }
  99:main.c        ****     //         // Triggering every 50ms
 100:main.c        ****     //         buttonState = !buttonState;
 101:main.c        ****     //         led_toggle();
 102:main.c        ****     //     }
 103:main.c        ****     // } 
 104:main.c        ****     // else 
 105:main.c        ****     // {
 106:main.c        ****     //     buttonStateLock = false;
 107:main.c        ****     //     buttonStateDebounceCount = 0;
 108:main.c        ****     // }
 109:main.c        **** 
 110:main.c        **** 
 111:main.c        **** 
 112:main.c        ****     // Send CAN heartbeats -> Inverters: 100Hz, Data: 100Hz, Power: 20Hz
 113:main.c        ****     // 100Hz = 1 / 100 = 0.01s = 10ms, 20Hz = 1 / 20 = 0.05s = 50ms
 114:main.c        ****     // ------------------------------------------------------------------------
 115:main.c        ****     if(CAN_HEARTBEAT_COUNT_INVERTERS > CAN_HEARTBEAT_TIME_INVERTERS)
 114               		.loc 1 115 0
 115 0000 8091 0000 		lds r24,CAN_HEARTBEAT_COUNT_INVERTERS
 116 0004 8B30      		cpi r24,lo8(11)
 117 0006 00F0      		brlo .L8
 116:main.c        ****     {
 117:main.c        ****         // Reset inverter heartbeat counter
 118:main.c        ****         CAN_HEARTBEAT_COUNT_INVERTERS = 0;
 118               		.loc 1 118 0
 119 0008 1092 0000 		sts CAN_HEARTBEAT_COUNT_INVERTERS,__zero_reg__
 120               	.L8:
 119:main.c        ****         // Send inverter system heartbeat
 120:main.c        ****         // CAN_send(MCP2515_CAN1, )
 121:main.c        ****     }
 122:main.c        ****     if(CAN_HEARTBEAT_COUNT_DATA > CAN_HEARTBEAT_TIME_DATA)
 121               		.loc 1 122 0
 122 000c 8091 0000 		lds r24,CAN_HEARTBEAT_COUNT_DATA
 123 0010 8B30      		cpi r24,lo8(11)
 124 0012 00F0      		brlo .L9
 123:main.c        ****     {
 124:main.c        ****         // Reset data heartbeat counter
 125:main.c        ****         CAN_HEARTBEAT_COUNT_DATA = 0;
 125               		.loc 1 125 0
 126 0014 1092 0000 		sts CAN_HEARTBEAT_COUNT_DATA,__zero_reg__
 127               	.L9:
 126:main.c        ****         // Send data system heartbeat
 127:main.c        ****         // CAN_send(MCP2515_CAN2, )
 128:main.c        ****     }
 129:main.c        ****     if(CAN_HEARTBEAT_COUNT_POWER > CAN_HEARTBEAT_TIME_POWER)
 128               		.loc 1 129 0
 129 0018 8091 0000 		lds r24,CAN_HEARTBEAT_COUNT_POWER
 130 001c 8333      		cpi r24,lo8(51)
 131 001e 00F0      		brlo .L10
 130:main.c        ****     {
 131:main.c        ****         // Reset power heartbeat counter
 132:main.c        ****         CAN_HEARTBEAT_COUNT_POWER = 0;
 132               		.loc 1 132 0
 133 0020 1092 0000 		sts CAN_HEARTBEAT_COUNT_POWER,__zero_reg__
 134               	.L10:
 133:main.c        ****         // Send power system heartbeat
 134:main.c        ****         // CAN_send(MCP2515_CAN2, )
 135:main.c        ****     }
 136:main.c        ****     CAN_HEARTBEAT_COUNT_INVERTERS++;
 135               		.loc 1 136 0
 136 0024 8091 0000 		lds r24,CAN_HEARTBEAT_COUNT_INVERTERS
 137 0028 8F5F      		subi r24,lo8(-(1))
 138 002a 8093 0000 		sts CAN_HEARTBEAT_COUNT_INVERTERS,r24
 137:main.c        ****     CAN_HEARTBEAT_COUNT_DATA++;
 139               		.loc 1 137 0
 140 002e 8091 0000 		lds r24,CAN_HEARTBEAT_COUNT_DATA
 141 0032 8F5F      		subi r24,lo8(-(1))
 142 0034 8093 0000 		sts CAN_HEARTBEAT_COUNT_DATA,r24
 138:main.c        ****     CAN_HEARTBEAT_COUNT_POWER++;
 143               		.loc 1 138 0
 144 0038 8091 0000 		lds r24,CAN_HEARTBEAT_COUNT_POWER
 145 003c 8F5F      		subi r24,lo8(-(1))
 146 003e 8093 0000 		sts CAN_HEARTBEAT_COUNT_POWER,r24
 139:main.c        **** 
 140:main.c        **** 
 141:main.c        **** 
 142:main.c        ****     // CAN Error counts -> Missing Receives
 143:main.c        ****     // ------------------------------------------------------------------------
 144:main.c        ****     if(CAN_HEARTBEAT_ERROR_INVERTERS > CAN_HEARTBEAT_ERROR_DELAY)
 147               		.loc 1 144 0
 148 0042 8091 0000 		lds r24,CAN_HEARTBEAT_ERROR_INVERTERS
 149 0046 8F36      		cpi r24,lo8(111)
 150 0048 00F0      		brlo .L11
 145:main.c        ****     {
 146:main.c        ****         throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_NO_RESPONSE);
 151               		.loc 1 146 0
 152 004a 6FE6      		ldi r22,lo8(111)
 153 004c 70E0      		ldi r23,0
 154 004e 82E0      		ldi r24,lo8(2)
 155 0050 90E0      		ldi r25,0
 156 0052 0E94 0000 		call throw_error_code
 157               	.LVL6:
 158               	.L11:
 147:main.c        ****     }
 148:main.c        ****     if(CAN_HEARTBEAT_ERROR_DATA > CAN_HEARTBEAT_ERROR_DELAY)
 159               		.loc 1 148 0
 160 0056 8091 0000 		lds r24,CAN_HEARTBEAT_ERROR_DATA
 161 005a 8F36      		cpi r24,lo8(111)
 162 005c 00F0      		brlo .L12
 149:main.c        ****     {
 150:main.c        ****         throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_NO_RESPONSE);
 163               		.loc 1 150 0
 164 005e 69E7      		ldi r22,lo8(121)
 165 0060 70E0      		ldi r23,0
 166 0062 82E0      		ldi r24,lo8(2)
 167 0064 90E0      		ldi r25,0
 168 0066 0E94 0000 		call throw_error_code
 169               	.LVL7:
 170               	.L12:
 151:main.c        ****     }
 152:main.c        ****     if(CAN_HEARTBEAT_ERROR_POWER > CAN_HEARTBEAT_ERROR_DELAY)
 171               		.loc 1 152 0
 172 006a 8091 0000 		lds r24,CAN_HEARTBEAT_ERROR_POWER
 173 006e 8F36      		cpi r24,lo8(111)
 174 0070 00F0      		brlo .L13
 153:main.c        ****     {
 154:main.c        ****         throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_NO_RESPONSE);
 175               		.loc 1 154 0
 176 0072 63E8      		ldi r22,lo8(-125)
 177 0074 70E0      		ldi r23,0
 178 0076 82E0      		ldi r24,lo8(2)
 179 0078 90E0      		ldi r25,0
 180 007a 0E94 0000 		call throw_error_code
 181               	.LVL8:
 182               	.L13:
 155:main.c        ****     }
 156:main.c        ****     CAN_HEARTBEAT_ERROR_INVERTERS++;
 183               		.loc 1 156 0
 184 007e 8091 0000 		lds r24,CAN_HEARTBEAT_ERROR_INVERTERS
 185 0082 8F5F      		subi r24,lo8(-(1))
 186 0084 8093 0000 		sts CAN_HEARTBEAT_ERROR_INVERTERS,r24
 157:main.c        ****     CAN_HEARTBEAT_ERROR_DATA++;
 187               		.loc 1 157 0
 188 0088 8091 0000 		lds r24,CAN_HEARTBEAT_ERROR_DATA
 189 008c 8F5F      		subi r24,lo8(-(1))
 190 008e 8093 0000 		sts CAN_HEARTBEAT_ERROR_DATA,r24
 158:main.c        ****     CAN_HEARTBEAT_ERROR_POWER++;
 191               		.loc 1 158 0
 192 0092 8091 0000 		lds r24,CAN_HEARTBEAT_ERROR_POWER
 193 0096 8F5F      		subi r24,lo8(-(1))
 194 0098 8093 0000 		sts CAN_HEARTBEAT_ERROR_POWER,r24
 195               	/* epilogue start */
 159:main.c        **** 
 160:main.c        **** 
 161:main.c        ****     // Send CAN input
 162:main.c        **** }
 196               		.loc 1 162 0
 197 009c 0895      		ret
 198               		.cfi_endproc
 199               	.LFE12:
 201               		.section	.text.__vector_2,"ax",@progbits
 202               	.global	__vector_2
 204               	__vector_2:
 205               	.LFB13:
 163:main.c        **** 
 164:main.c        **** // -------------------------------------------------- Interrupt Service Routines ------------------
 165:main.c        **** 
 166:main.c        **** 
 167:main.c        **** /**
 168:main.c        ****  * @brief Called whenever CANBUS 1 interupt is triggered
 169:main.c        ****  *        * When ever there is data waiting in CAN 1
 170:main.c        ****  */
 171:main.c        **** ISR(INT1_vect) {
 206               		.loc 1 171 0
 207               		.cfi_startproc
 208 0000 1F92      		push r1
 209               	.LCFI4:
 210               		.cfi_def_cfa_offset 3
 211               		.cfi_offset 1, -2
 212 0002 0F92      		push r0
 213               	.LCFI5:
 214               		.cfi_def_cfa_offset 4
 215               		.cfi_offset 0, -3
 216 0004 0FB6      		in r0,__SREG__
 217 0006 0F92      		push r0
 218 0008 1124      		clr __zero_reg__
 219 000a 0BB6      		in r0,__RAMPZ__
 220 000c 0F92      		push r0
 221 000e 2F93      		push r18
 222               	.LCFI6:
 223               		.cfi_def_cfa_offset 5
 224               		.cfi_offset 18, -4
 225 0010 3F93      		push r19
 226               	.LCFI7:
 227               		.cfi_def_cfa_offset 6
 228               		.cfi_offset 19, -5
 229 0012 4F93      		push r20
 230               	.LCFI8:
 231               		.cfi_def_cfa_offset 7
 232               		.cfi_offset 20, -6
 233 0014 5F93      		push r21
 234               	.LCFI9:
 235               		.cfi_def_cfa_offset 8
 236               		.cfi_offset 21, -7
 237 0016 6F93      		push r22
 238               	.LCFI10:
 239               		.cfi_def_cfa_offset 9
 240               		.cfi_offset 22, -8
 241 0018 7F93      		push r23
 242               	.LCFI11:
 243               		.cfi_def_cfa_offset 10
 244               		.cfi_offset 23, -9
 245 001a 8F93      		push r24
 246               	.LCFI12:
 247               		.cfi_def_cfa_offset 11
 248               		.cfi_offset 24, -10
 249 001c 9F93      		push r25
 250               	.LCFI13:
 251               		.cfi_def_cfa_offset 12
 252               		.cfi_offset 25, -11
 253 001e AF93      		push r26
 254               	.LCFI14:
 255               		.cfi_def_cfa_offset 13
 256               		.cfi_offset 26, -12
 257 0020 BF93      		push r27
 258               	.LCFI15:
 259               		.cfi_def_cfa_offset 14
 260               		.cfi_offset 27, -13
 261 0022 EF93      		push r30
 262               	.LCFI16:
 263               		.cfi_def_cfa_offset 15
 264               		.cfi_offset 30, -14
 265 0024 FF93      		push r31
 266               	.LCFI17:
 267               		.cfi_def_cfa_offset 16
 268               		.cfi_offset 31, -15
 269 0026 CF93      		push r28
 270               	.LCFI18:
 271               		.cfi_def_cfa_offset 17
 272               		.cfi_offset 28, -16
 273 0028 DF93      		push r29
 274               	.LCFI19:
 275               		.cfi_def_cfa_offset 18
 276               		.cfi_offset 29, -17
 277 002a CDB7      		in r28,__SP_L__
 278 002c DEB7      		in r29,__SP_H__
 279               	.LCFI20:
 280               		.cfi_def_cfa_register 28
 281 002e 2D97      		sbiw r28,13
 282               	.LCFI21:
 283               		.cfi_def_cfa_offset 31
 284 0030 DEBF      		out __SP_H__,r29
 285 0032 CDBF      		out __SP_L__,r28
 286               	/* prologue: Signal */
 287               	/* frame size = 13 */
 288               	/* stack size = 31 */
 289               	.L__stack_usage = 31
 172:main.c        **** 	// Details about the message we're attempting to pull from the CAN bus
 173:main.c        **** 	uint8_t data[8];
 174:main.c        **** 	uint32_t ID;
 175:main.c        **** 	uint8_t numBytes;
 176:main.c        **** 
 177:main.c        **** 	// Get the data from the CAN bus and process it
 178:main.c        **** 	CAN_pull_packet(MCP2515_CAN1, &numBytes, data, &ID);
 290               		.loc 1 178 0
 291 0034 9E01      		movw r18,r28
 292 0036 275F      		subi r18,-9
 293 0038 3F4F      		sbci r19,-1
 294 003a AE01      		movw r20,r28
 295 003c 4F5F      		subi r20,-1
 296 003e 5F4F      		sbci r21,-1
 297 0040 BE01      		movw r22,r28
 298 0042 635F      		subi r22,-13
 299 0044 7F4F      		sbci r23,-1
 300 0046 81E0      		ldi r24,lo8(1)
 301 0048 0E94 0000 		call CAN_pull_packet
 302               	.LVL9:
 303               	/* epilogue start */
 179:main.c        **** 
 180:main.c        ****     // If the data packet is crap
 181:main.c        ****     // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_RESPONSE_MALFORMED);
 182:main.c        **** }
 304               		.loc 1 182 0
 305 004c 2D96      		adiw r28,13
 306 004e 0FB6      		in __tmp_reg__,__SREG__
 307 0050 F894      		cli
 308 0052 DEBF      		out __SP_H__,r29
 309 0054 0FBE      		out __SREG__,__tmp_reg__
 310 0056 CDBF      		out __SP_L__,r28
 311 0058 DF91      		pop r29
 312 005a CF91      		pop r28
 313 005c FF91      		pop r31
 314 005e EF91      		pop r30
 315 0060 BF91      		pop r27
 316 0062 AF91      		pop r26
 317 0064 9F91      		pop r25
 318 0066 8F91      		pop r24
 319 0068 7F91      		pop r23
 320 006a 6F91      		pop r22
 321 006c 5F91      		pop r21
 322 006e 4F91      		pop r20
 323 0070 3F91      		pop r19
 324 0072 2F91      		pop r18
 325 0074 0F90      		pop r0
 326 0076 0BBE      		out __RAMPZ__,r0
 327 0078 0F90      		pop r0
 328 007a 0FBE      		out __SREG__,r0
 329 007c 0F90      		pop r0
 330 007e 1F90      		pop r1
 331 0080 1895      		reti
 332               		.cfi_endproc
 333               	.LFE13:
 335               		.section	.text.__vector_1,"ax",@progbits
 336               	.global	__vector_1
 338               	__vector_1:
 339               	.LFB14:
 183:main.c        **** 
 184:main.c        **** /**
 185:main.c        ****  * @brief Called whenever CANBUS 2 interupt is triggered
 186:main.c        ****  *        * When ever there is data waiting in CAN 2
 187:main.c        ****  */
 188:main.c        **** ISR(INT0_vect)	{
 340               		.loc 1 188 0
 341               		.cfi_startproc
 342 0000 1F92      		push r1
 343               	.LCFI22:
 344               		.cfi_def_cfa_offset 3
 345               		.cfi_offset 1, -2
 346 0002 0F92      		push r0
 347               	.LCFI23:
 348               		.cfi_def_cfa_offset 4
 349               		.cfi_offset 0, -3
 350 0004 0FB6      		in r0,__SREG__
 351 0006 0F92      		push r0
 352 0008 1124      		clr __zero_reg__
 353 000a 0BB6      		in r0,__RAMPZ__
 354 000c 0F92      		push r0
 355 000e 2F93      		push r18
 356               	.LCFI24:
 357               		.cfi_def_cfa_offset 5
 358               		.cfi_offset 18, -4
 359 0010 3F93      		push r19
 360               	.LCFI25:
 361               		.cfi_def_cfa_offset 6
 362               		.cfi_offset 19, -5
 363 0012 4F93      		push r20
 364               	.LCFI26:
 365               		.cfi_def_cfa_offset 7
 366               		.cfi_offset 20, -6
 367 0014 5F93      		push r21
 368               	.LCFI27:
 369               		.cfi_def_cfa_offset 8
 370               		.cfi_offset 21, -7
 371 0016 6F93      		push r22
 372               	.LCFI28:
 373               		.cfi_def_cfa_offset 9
 374               		.cfi_offset 22, -8
 375 0018 7F93      		push r23
 376               	.LCFI29:
 377               		.cfi_def_cfa_offset 10
 378               		.cfi_offset 23, -9
 379 001a 8F93      		push r24
 380               	.LCFI30:
 381               		.cfi_def_cfa_offset 11
 382               		.cfi_offset 24, -10
 383 001c 9F93      		push r25
 384               	.LCFI31:
 385               		.cfi_def_cfa_offset 12
 386               		.cfi_offset 25, -11
 387 001e AF93      		push r26
 388               	.LCFI32:
 389               		.cfi_def_cfa_offset 13
 390               		.cfi_offset 26, -12
 391 0020 BF93      		push r27
 392               	.LCFI33:
 393               		.cfi_def_cfa_offset 14
 394               		.cfi_offset 27, -13
 395 0022 EF93      		push r30
 396               	.LCFI34:
 397               		.cfi_def_cfa_offset 15
 398               		.cfi_offset 30, -14
 399 0024 FF93      		push r31
 400               	.LCFI35:
 401               		.cfi_def_cfa_offset 16
 402               		.cfi_offset 31, -15
 403 0026 CF93      		push r28
 404               	.LCFI36:
 405               		.cfi_def_cfa_offset 17
 406               		.cfi_offset 28, -16
 407 0028 DF93      		push r29
 408               	.LCFI37:
 409               		.cfi_def_cfa_offset 18
 410               		.cfi_offset 29, -17
 411 002a CDB7      		in r28,__SP_L__
 412 002c DEB7      		in r29,__SP_H__
 413               	.LCFI38:
 414               		.cfi_def_cfa_register 28
 415 002e 2D97      		sbiw r28,13
 416               	.LCFI39:
 417               		.cfi_def_cfa_offset 31
 418 0030 DEBF      		out __SP_H__,r29
 419 0032 CDBF      		out __SP_L__,r28
 420               	/* prologue: Signal */
 421               	/* frame size = 13 */
 422               	/* stack size = 31 */
 423               	.L__stack_usage = 31
 189:main.c        **** 	// Details about the message we're attempting to pull from the CAN bus
 190:main.c        **** 	uint8_t data[8];
 191:main.c        **** 	uint32_t ID;
 192:main.c        **** 	uint8_t numBytes;
 193:main.c        **** 
 194:main.c        **** 	// Get the data from the CAN bus and process it
 195:main.c        **** 	CAN_pull_packet(MCP2515_CAN2, &numBytes, data, &ID);
 424               		.loc 1 195 0
 425 0034 9E01      		movw r18,r28
 426 0036 275F      		subi r18,-9
 427 0038 3F4F      		sbci r19,-1
 428 003a AE01      		movw r20,r28
 429 003c 4F5F      		subi r20,-1
 430 003e 5F4F      		sbci r21,-1
 431 0040 BE01      		movw r22,r28
 432 0042 635F      		subi r22,-13
 433 0044 7F4F      		sbci r23,-1
 434 0046 82E0      		ldi r24,lo8(2)
 435 0048 0E94 0000 		call CAN_pull_packet
 436               	.LVL10:
 437               	/* epilogue start */
 196:main.c        **** 
 197:main.c        ****     // If the data packet is crap
 198:main.c        ****     // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
 199:main.c        **** }
 438               		.loc 1 199 0
 439 004c 2D96      		adiw r28,13
 440 004e 0FB6      		in __tmp_reg__,__SREG__
 441 0050 F894      		cli
 442 0052 DEBF      		out __SP_H__,r29
 443 0054 0FBE      		out __SREG__,__tmp_reg__
 444 0056 CDBF      		out __SP_L__,r28
 445 0058 DF91      		pop r29
 446 005a CF91      		pop r28
 447 005c FF91      		pop r31
 448 005e EF91      		pop r30
 449 0060 BF91      		pop r27
 450 0062 AF91      		pop r26
 451 0064 9F91      		pop r25
 452 0066 8F91      		pop r24
 453 0068 7F91      		pop r23
 454 006a 6F91      		pop r22
 455 006c 5F91      		pop r21
 456 006e 4F91      		pop r20
 457 0070 3F91      		pop r19
 458 0072 2F91      		pop r18
 459 0074 0F90      		pop r0
 460 0076 0BBE      		out __RAMPZ__,r0
 461 0078 0F90      		pop r0
 462 007a 0FBE      		out __SREG__,r0
 463 007c 0F90      		pop r0
 464 007e 1F90      		pop r1
 465 0080 1895      		reti
 466               		.cfi_endproc
 467               	.LFE14:
 469               		.section	.text.__vector_9,"ax",@progbits
 470               	.global	__vector_9
 472               	__vector_9:
 473               	.LFB15:
 200:main.c        **** 
 201:main.c        **** /**
 202:main.c        ****  * @brief Called whenever CANBUS 3 interupt is triggered
 203:main.c        ****  *        * When ever there is data waiting in CAN 3
 204:main.c        ****  */
 205:main.c        **** ISR(PCINT0_vect) {
 474               		.loc 1 205 0
 475               		.cfi_startproc
 476 0000 1F92      		push r1
 477               	.LCFI40:
 478               		.cfi_def_cfa_offset 3
 479               		.cfi_offset 1, -2
 480 0002 0F92      		push r0
 481               	.LCFI41:
 482               		.cfi_def_cfa_offset 4
 483               		.cfi_offset 0, -3
 484 0004 0FB6      		in r0,__SREG__
 485 0006 0F92      		push r0
 486 0008 1124      		clr __zero_reg__
 487 000a 0BB6      		in r0,__RAMPZ__
 488 000c 0F92      		push r0
 489 000e 2F93      		push r18
 490               	.LCFI42:
 491               		.cfi_def_cfa_offset 5
 492               		.cfi_offset 18, -4
 493 0010 3F93      		push r19
 494               	.LCFI43:
 495               		.cfi_def_cfa_offset 6
 496               		.cfi_offset 19, -5
 497 0012 4F93      		push r20
 498               	.LCFI44:
 499               		.cfi_def_cfa_offset 7
 500               		.cfi_offset 20, -6
 501 0014 5F93      		push r21
 502               	.LCFI45:
 503               		.cfi_def_cfa_offset 8
 504               		.cfi_offset 21, -7
 505 0016 6F93      		push r22
 506               	.LCFI46:
 507               		.cfi_def_cfa_offset 9
 508               		.cfi_offset 22, -8
 509 0018 7F93      		push r23
 510               	.LCFI47:
 511               		.cfi_def_cfa_offset 10
 512               		.cfi_offset 23, -9
 513 001a 8F93      		push r24
 514               	.LCFI48:
 515               		.cfi_def_cfa_offset 11
 516               		.cfi_offset 24, -10
 517 001c 9F93      		push r25
 518               	.LCFI49:
 519               		.cfi_def_cfa_offset 12
 520               		.cfi_offset 25, -11
 521 001e AF93      		push r26
 522               	.LCFI50:
 523               		.cfi_def_cfa_offset 13
 524               		.cfi_offset 26, -12
 525 0020 BF93      		push r27
 526               	.LCFI51:
 527               		.cfi_def_cfa_offset 14
 528               		.cfi_offset 27, -13
 529 0022 EF93      		push r30
 530               	.LCFI52:
 531               		.cfi_def_cfa_offset 15
 532               		.cfi_offset 30, -14
 533 0024 FF93      		push r31
 534               	.LCFI53:
 535               		.cfi_def_cfa_offset 16
 536               		.cfi_offset 31, -15
 537 0026 CF93      		push r28
 538               	.LCFI54:
 539               		.cfi_def_cfa_offset 17
 540               		.cfi_offset 28, -16
 541 0028 DF93      		push r29
 542               	.LCFI55:
 543               		.cfi_def_cfa_offset 18
 544               		.cfi_offset 29, -17
 545 002a CDB7      		in r28,__SP_L__
 546 002c DEB7      		in r29,__SP_H__
 547               	.LCFI56:
 548               		.cfi_def_cfa_register 28
 549 002e 2D97      		sbiw r28,13
 550               	.LCFI57:
 551               		.cfi_def_cfa_offset 31
 552 0030 DEBF      		out __SP_H__,r29
 553 0032 CDBF      		out __SP_L__,r28
 554               	/* prologue: Signal */
 555               	/* frame size = 13 */
 556               	/* stack size = 31 */
 557               	.L__stack_usage = 31
 206:main.c        **** 	// Details about the message we're attempting to pull from the CAN bus
 207:main.c        **** 	uint8_t data[8];
 208:main.c        **** 	uint32_t ID;
 209:main.c        **** 	uint8_t numBytes;
 210:main.c        **** 
 211:main.c        **** 	// Get the data from the CAN bus and process it
 212:main.c        **** 	CAN_pull_packet(MCP2515_CAN3, &numBytes, data, &ID);
 558               		.loc 1 212 0
 559 0034 9E01      		movw r18,r28
 560 0036 275F      		subi r18,-9
 561 0038 3F4F      		sbci r19,-1
 562 003a AE01      		movw r20,r28
 563 003c 4F5F      		subi r20,-1
 564 003e 5F4F      		sbci r21,-1
 565 0040 BE01      		movw r22,r28
 566 0042 635F      		subi r22,-13
 567 0044 7F4F      		sbci r23,-1
 568 0046 84E0      		ldi r24,lo8(4)
 569 0048 0E94 0000 		call CAN_pull_packet
 570               	.LVL11:
 571               	/* epilogue start */
 213:main.c        **** 
 214:main.c        ****     // If the data packet is crap
 215:main.c        ****     // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);
 216:main.c        **** }...
 572               		.loc 1 216 0
 573 004c 2D96      		adiw r28,13
 574 004e 0FB6      		in __tmp_reg__,__SREG__
 575 0050 F894      		cli
 576 0052 DEBF      		out __SP_H__,r29
 577 0054 0FBE      		out __SREG__,__tmp_reg__
 578 0056 CDBF      		out __SP_L__,r28
 579 0058 DF91      		pop r29
 580 005a CF91      		pop r28
 581 005c FF91      		pop r31
 582 005e EF91      		pop r30
 583 0060 BF91      		pop r27
 584 0062 AF91      		pop r26
 585 0064 9F91      		pop r25
 586 0066 8F91      		pop r24
 587 0068 7F91      		pop r23
 588 006a 6F91      		pop r22
 589 006c 5F91      		pop r21
 590 006e 4F91      		pop r20
 591 0070 3F91      		pop r19
 592 0072 2F91      		pop r18
 593 0074 0F90      		pop r0
 594 0076 0BBE      		out __RAMPZ__,r0
 595 0078 0F90      		pop r0
 596 007a 0FBE      		out __SREG__,r0
 597 007c 0F90      		pop r0
 598 007e 1F90      		pop r1
 599 0080 1895      		reti
 600               		.cfi_endproc
 601               	.LFE15:
 603               	.global	CAN_INPUT_SEND_TIME
 604               		.section .bss
 607               	CAN_INPUT_SEND_TIME:
 608 0000 00        		.zero	1
 609               	.global	CAN_HEARTBEAT_ERROR_POWER
 610               		.data
 613               	CAN_HEARTBEAT_ERROR_POWER:
 614 0000 04        		.byte	4
 615               	.global	CAN_HEARTBEAT_ERROR_DATA
 618               	CAN_HEARTBEAT_ERROR_DATA:
 619 0001 02        		.byte	2
 620               	.global	CAN_HEARTBEAT_ERROR_INVERTERS
 621               		.section .bss
 624               	CAN_HEARTBEAT_ERROR_INVERTERS:
 625 0001 00        		.zero	1
 626               	.global	CAN_HEARTBEAT_COUNT_POWER
 627               		.data
 630               	CAN_HEARTBEAT_COUNT_POWER:
 631 0002 04        		.byte	4
 632               	.global	CAN_HEARTBEAT_COUNT_DATA
 635               	CAN_HEARTBEAT_COUNT_DATA:
 636 0003 02        		.byte	2
 637               	.global	CAN_HEARTBEAT_COUNT_INVERTERS
 638               		.section .bss
 641               	CAN_HEARTBEAT_COUNT_INVERTERS:
 642 0002 00        		.zero	1
 643               	.global	buttonState
 646               	buttonState:
 647 0003 00        		.zero	1
 648               	.global	buttonStateLock
 651               	buttonStateLock:
 652 0004 00        		.zero	1
 653               	.global	buttonStateDebounceCount
 656               	buttonStateDebounceCount:
 657 0005 00        		.zero	1
 658               		.comm	portKey,1,1
 659               		.text
 660               	.Letext0:
 661               		.file 2 "/usr/local/Cellar/avr-gcc/7.3.0/avr/include/stdint.h"
 662               		.file 3 "/usr/local/Cellar/avr-gcc/7.3.0/lib/avr-gcc/7/gcc/avr/7.3.0/include/stddef.h"
 663               		.file 4 "/usr/local/Cellar/avr-gcc/7.3.0/avr/include/stdio.h"
 664               		.file 5 "/usr/local/Cellar/avr-gcc/7.3.0/avr/include/stdlib.h"
 665               		.file 6 "utils/uart.h"
 666               		.file 7 "includes/chassisInput.h"
 667               		.file 8 "includes/chassisCAN.h"
 668               		.file 9 "includes/chassisError.h"
 669               		.file 10 "includes/chassisInit.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:4      *ABS*:000000000000003f __SREG__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:14     .text.startup.main:0000000000000000 main
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:106    .text.oneKHzTimer:0000000000000000 oneKHzTimer
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:641    .bss:0000000000000002 CAN_HEARTBEAT_COUNT_INVERTERS
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:635    .data:0000000000000003 CAN_HEARTBEAT_COUNT_DATA
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:630    .data:0000000000000002 CAN_HEARTBEAT_COUNT_POWER
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:624    .bss:0000000000000001 CAN_HEARTBEAT_ERROR_INVERTERS
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:618    .data:0000000000000001 CAN_HEARTBEAT_ERROR_DATA
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:613    .data:0000000000000000 CAN_HEARTBEAT_ERROR_POWER
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:204    .text.__vector_2:0000000000000000 __vector_2
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:338    .text.__vector_1:0000000000000000 __vector_1
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:472    .text.__vector_9:0000000000000000 __vector_9
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:607    .bss:0000000000000000 CAN_INPUT_SEND_TIME
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:646    .bss:0000000000000003 buttonState
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:651    .bss:0000000000000004 buttonStateLock
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccr29Dwu.s:656    .bss:0000000000000005 buttonStateDebounceCount
                            *COM*:0000000000000001 portKey

UNDEFINED SYMBOLS
firmware_init
timer_init
INPUT_get_accelPedal
INPUT_accelerationPedal
INPUT_get_brakePedal
INPUT_brakePedal
INPUT_get_brakePressureBack
INPUT_brakePressureBack
INPUT_get_brakePressureFront
INPUT_brakePressureFront
throw_error_code
CAN_pull_packet
__do_copy_data
__do_clear_bss
