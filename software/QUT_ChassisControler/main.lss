
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000008ba  0000094e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b9  00800208  00800208  00000956  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c8a  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000196c  00000000  00000000  0000498a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000031ac  00000000  00000000  000062f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a1c  00000000  00000000  000094a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001026  00000000  00000000  00009ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003025  00000000  00000000  0000aee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000df0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	19 c1       	rjmp	.+562    	; 0x238 <__vector_1>
   6:	00 00       	nop
   8:	d7 c0       	rjmp	.+430    	; 0x1b8 <__vector_2>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	49 c1       	rjmp	.+658    	; 0x2b8 <__vector_9>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	92 c0       	rjmp	.+292    	; 0x16a <__vector_17>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	79 c2       	rjmp	.+1266   	; 0x558 <__vector_25>
  66:	00 00       	nop
  68:	cb c2       	rjmp	.+1430   	; 0x600 <__vector_26>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	8d c2       	rjmp	.+1306   	; 0x5ac <__vector_36>
  92:	00 00       	nop
  94:	de c2       	rjmp	.+1468   	; 0x652 <__vector_37>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ea eb       	ldi	r30, 0xBA	; 186
  f8:	f8 e0       	ldi	r31, 0x08	; 8
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a8 30       	cpi	r26, 0x08	; 8
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a8 e0       	ldi	r26, 0x08	; 8
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a1 3c       	cpi	r26, 0xC1	; 193
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	02 d0       	rcall	.+4      	; 0x120 <main>
 11c:	cc c3       	rjmp	.+1944   	; 0x8b6 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <main>:
uint8_t CAN_INPUT_SEND_TIME = 0;            // Number of iterations for the input send trigger

int main(void) {    

    // Set Up
    firmware_init();
 120:	6e d3       	rcall	.+1756   	; 0x7fe <firmware_init>
    timer_init();
 122:	77 d3       	rcall	.+1774   	; 0x812 <timer_init>
 124:	78 94       	sei

    // Enable Interupts
    sei();
 126:	80 ec       	ldi	r24, 0xC0	; 192
int main(void) {    
 128:	97 e2       	ldi	r25, 0x27	; 39
 12a:	a9 e0       	ldi	r26, 0x09	; 9
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
    // ------------------------------------------------------------------------
    while(1)
    {
        for(long i = 0; i < 600000; i++) {

        }
 130:	a1 09       	sbc	r26, r1
 132:	b1 09       	sbc	r27, r1
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0xe>
        for(long i = 0; i < 600000; i++) {
 136:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x7e0108>
        PORTK |= 0b00100000;
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7e0108>
        uart_putc(68);
 140:	84 e4       	ldi	r24, 0x44	; 68
 142:	e8 d2       	rcall	.+1488   	; 0x714 <uart_putc>
        uart1_putc(68);
 144:	84 e4       	ldi	r24, 0x44	; 68
 146:	16 d3       	rcall	.+1580   	; 0x774 <uart1_putc>
 148:	ee cf       	rjmp	.-36     	; 0x126 <main+0x6>

0000014a <oneKHzTimer>:
        for(long i = 0; i < 600000; i++) {
 14a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <INPUT_PEDAL_THROTTLE_COUNT>
    // CAN_HEARTBEAT_ERROR_POWER++;


    // Send CAN input
    // uint8_t tmpInputVal;
    if(INPUT_PEDAL_THROTTLE_COUNT > INPUT_TIME_PEDAL_THROTTLE)
 14e:	8b 30       	cpi	r24, 0x0B	; 11
 150:	30 f0       	brcs	.+12     	; 0x15e <oneKHzTimer+0x14>
    {
        INPUT_accelerationPedal = a2d_10bitCh(5);
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	1b d1       	rcall	.+566    	; 0x38c <a2d_10bitCh>
 156:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <INPUT_accelerationPedal>
        // if(INPUT_get_accelPedal(&tmpInputVal) == 0) {
        //     // PORTK |= 0b00100000;
        //     INPUT_accelerationPedal = tmpInputVal;
        // }
        INPUT_PEDAL_THROTTLE_COUNT = 0;
 15a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <INPUT_PEDAL_THROTTLE_COUNT>
    //     if(INPUT_get_brakePedal(&tmpInputVal) == 0) {
    //         INPUT_brakePedal = tmpInputVal;
    //     }
    //     INPUT_PEDAL_BRAKE_COUNT = 0;
    // }
    INPUT_PEDAL_THROTTLE_COUNT++;
 15e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <INPUT_PEDAL_THROTTLE_COUNT>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <INPUT_PEDAL_THROTTLE_COUNT>
    //     INPUT_brakePressureBack = tmpInputVal;
    // }
    // if(INPUT_get_brakePressureFront(&tmpInputVal) == 0) {
    //     INPUT_brakePressureFront = tmpInputVal;
    // }
}
 168:	08 95       	ret

0000016a <__vector_17>:

/**
 * @brief Called whenever the 1Khz timer triggers
 */
ISR(TIMER1_COMPA_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	0b b6       	in	r0, 0x3b	; 59
 176:	0f 92       	push	r0
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
    oneKHzTimer();
 190:	dc df       	rcall	.-72     	; 0x14a <oneKHzTimer>
    // led_toggle();
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0b be       	out	0x3b, r0	; 59
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__vector_2>:

/**
 * @brief Called whenever CANBUS 1 interupt is triggered
 *        * When ever there is data waiting in CAN 1
 */
ISR(INT1_vect) {
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	0b b6       	in	r0, 0x3b	; 59
 1c4:	0f 92       	push	r0
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	2d 97       	sbiw	r28, 0x0d	; 13
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN1, &numBytes, data, &ID);
 1ec:	9e 01       	movw	r18, r28
 1ee:	27 5f       	subi	r18, 0xF7	; 247
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	ae 01       	movw	r20, r28
 1f4:	4f 5f       	subi	r20, 0xFF	; 255
 1f6:	5f 4f       	sbci	r21, 0xFF	; 255
 1f8:	be 01       	movw	r22, r28
 1fa:	63 5f       	subi	r22, 0xF3	; 243
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	24 d3       	rcall	.+1608   	; 0x84a <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_RESPONSE_MALFORMED);
}
 202:	2d 96       	adiw	r28, 0x0d	; 13
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0b be       	out	0x3b, r0	; 59
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_1>:

/**
 * @brief Called whenever CANBUS 2 interupt is triggered
 *        * When ever there is data waiting in CAN 2
 */
ISR(INT0_vect)	{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	0b b6       	in	r0, 0x3b	; 59
 244:	0f 92       	push	r0
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	2d 97       	sbiw	r28, 0x0d	; 13
 268:	de bf       	out	0x3e, r29	; 62
 26a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN2, &numBytes, data, &ID);
 26c:	9e 01       	movw	r18, r28
 26e:	27 5f       	subi	r18, 0xF7	; 247
 270:	3f 4f       	sbci	r19, 0xFF	; 255
 272:	ae 01       	movw	r20, r28
 274:	4f 5f       	subi	r20, 0xFF	; 255
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	be 01       	movw	r22, r28
 27a:	63 5f       	subi	r22, 0xF3	; 243
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	e4 d2       	rcall	.+1480   	; 0x84a <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
}
 282:	2d 96       	adiw	r28, 0x0d	; 13
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0b be       	out	0x3b, r0	; 59
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__vector_9>:

/**
 * @brief Called whenever CANBUS 3 interupt is triggered
 *        * When ever there is data waiting in CAN 3
 */
ISR(PCINT0_vect) {
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	0b b6       	in	r0, 0x3b	; 59
 2c4:	0f 92       	push	r0
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	2d 97       	sbiw	r28, 0x0d	; 13
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN3, &numBytes, data, &ID);
 2ec:	9e 01       	movw	r18, r28
 2ee:	27 5f       	subi	r18, 0xF7	; 247
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	ae 01       	movw	r20, r28
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	be 01       	movw	r22, r28
 2fa:	63 5f       	subi	r22, 0xF3	; 243
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
 2fe:	84 e0       	ldi	r24, 0x04	; 4
 300:	a4 d2       	rcall	.+1352   	; 0x84a <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);
 302:	2d 96       	adiw	r28, 0x0d	; 13
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0b be       	out	0x3b, r0	; 59
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <a2dInit>:

// functions

// initialize a2d converter
void a2dInit(unsigned char prescale, unsigned char ref)
{
 338:	cf 93       	push	r28
 33a:	c6 2f       	mov	r28, r22
	// Set to Single Mode, ADC Auto Trigger OFF, ADC Int OFF, Prescale 0
	ADCSRA = 0; //clear!
 33c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// Right adjust result
	ADMUX &= ~(1<<ADLAR); //clear
 340:	ec e7       	ldi	r30, 0x7C	; 124
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	90 81       	ld	r25, Z
 346:	9f 7d       	andi	r25, 0xDF	; 223
 348:	90 83       	st	Z, r25

	// Set prescaler
	a2dSetPrescaler(prescale);
 34a:	0a d0       	rcall	.+20     	; 0x360 <a2dSetPrescaler>

	// Set default reference
	a2dSetReference(ref);	
 34c:	8c 2f       	mov	r24, r28
 34e:	11 d0       	rcall	.+34     	; 0x372 <a2dSetReference>
	// Turn ADC on
	a2dOn();

	// int input = a2d_10bit();
	// input = a2d_10bit();
}
 350:	cf 91       	pop	r28
	a2dOn();
 352:	00 c0       	rjmp	.+0      	; 0x354 <a2dOn>

00000354 <a2dOn>:
 354:	ea e7       	ldi	r30, 0x7A	; 122

// turn On a2d converter
void a2dOn(void)
{
	ADCSRA |= (1 << ADEN);				// enable ADC (turn on ADC power), Set
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	80 68       	ori	r24, 0x80	; 128
 35c:	80 83       	st	Z, r24
}
 35e:	08 95       	ret

00000360 <a2dSetPrescaler>:
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	ADCSRA &= ADC_PRESCALE_MASK;
 360:	ea e7       	ldi	r30, 0x7A	; 122
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	90 81       	ld	r25, Z
 366:	98 7f       	andi	r25, 0xF8	; 248
 368:	90 83       	st	Z, r25
	ADCSRA |= prescale;
 36a:	90 81       	ld	r25, Z
 36c:	89 2b       	or	r24, r25
 36e:	80 83       	st	Z, r24
}
 370:	08 95       	ret

00000372 <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	ADMUX &= ADC_REFERENCE_MASK;
 372:	ec e7       	ldi	r30, 0x7C	; 124
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	90 81       	ld	r25, Z
 378:	9c 7f       	andi	r25, 0xFC	; 252
 37a:	90 83       	st	Z, r25
	ADMUX |= (ref<<6);
 37c:	90 81       	ld	r25, Z
 37e:	40 e4       	ldi	r20, 0x40	; 64
 380:	84 9f       	mul	r24, r20
 382:	90 01       	movw	r18, r0
 384:	11 24       	eor	r1, r1
 386:	92 2b       	or	r25, r18
 388:	90 83       	st	Z, r25
}
 38a:	08 95       	ret

0000038c <a2d_10bitCh>:
// starts conversion, waits until conversion is done, and returns result
// modded for mega1280 by Ant
unsigned short a2d_10bitCh(unsigned char ch)
{
	// set channel
	ADMUX &= ADC_MUX_MASK;	
 38c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 390:	90 7e       	andi	r25, 0xE0	; 224
 392:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	if (ch > 7) 
	{
		ADCSRB |= 8;
 396:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	if (ch > 7) 
 39a:	88 30       	cpi	r24, 0x08	; 8
 39c:	b8 f0       	brcs	.+46     	; 0x3cc <a2d_10bitCh+0x40>
		ADCSRB |= 8;
 39e:	98 60       	ori	r25, 0x08	; 8
 3a0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ADMUX |= (ch - 8);
 3a4:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 3a8:	88 50       	subi	r24, 0x08	; 8
	}
	else
	{
		ADCSRB &= 247;
		ADMUX |= ch;
 3aa:	89 2b       	or	r24, r25
 3ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	}
	
	// ADMUX |= ch;	//comment out this line when using on 16ch parts

	// start conversion
	ADCSRA |= (1<<ADSC);
 3b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3b4:	80 64       	ori	r24, 0x40	; 64
 3b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	while(ADCSRA & (1 << ADSC)) {} // wait until conversion complete 
 3ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3be:	86 fd       	sbrc	r24, 6
 3c0:	fc cf       	rjmp	.-8      	; 0x3ba <a2d_10bitCh+0x2e>

	return ADC;                // read ADC (full 10 bits);
 3c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// return (8 << ADCH)|(ADCL); // read ADC (full 10 bits);
    // return ADCL;                // read ADC (first 8 bits)
}
 3ca:	08 95       	ret
		ADCSRB &= 247;
 3cc:	97 7f       	andi	r25, 0xF7	; 247
 3ce:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ADMUX |= ch;
 3d2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 3d6:	e9 cf       	rjmp	.-46     	; 0x3aa <a2d_10bitCh+0x1e>

000003d8 <MCP2515_CS_low>:
}


void MCP2515_CS_low(uint8_t CANbus)
{
	switch(CANbus)
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	51 f0       	breq	.+20     	; 0x3f0 <MCP2515_CS_low+0x18>
 3dc:	84 30       	cpi	r24, 0x04	; 4
 3de:	61 f0       	breq	.+24     	; 0x3f8 <MCP2515_CS_low+0x20>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	59 f4       	brne	.+22     	; 0x3fa <MCP2515_CS_low+0x22>
	{
		case MCP2515_CAN1:
			MCP2515_CAN1_PORT_CS &= ~(1<<MCP2515_CAN1_PIN_CS);
 3e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
 3e8:	8e 7f       	andi	r24, 0xFE	; 254
			break;
		case MCP2515_CAN2:
			MCP2515_CAN2_PORT_CS &= ~(1<<MCP2515_CAN2_PIN_CS);
 3ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
			break;
 3ee:	08 95       	ret
			MCP2515_CAN2_PORT_CS &= ~(1<<MCP2515_CAN2_PIN_CS);
 3f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
 3f4:	8d 7f       	andi	r24, 0xFD	; 253
 3f6:	f9 cf       	rjmp	.-14     	; 0x3ea <MCP2515_CS_low+0x12>
		case MCP2515_CAN3:
			MCP2515_CAN3_PORT_CS &= ~(1<<MCP2515_CAN3_PIN_CS);
 3f8:	28 98       	cbi	0x05, 0	; 5
			break;
		default:
			break;
	}
}
 3fa:	08 95       	ret

000003fc <MCP2515_CS_high>:

void MCP2515_CS_high(uint8_t CANbus)
{
	switch(CANbus)
 3fc:	82 30       	cpi	r24, 0x02	; 2
 3fe:	51 f0       	breq	.+20     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
 400:	84 30       	cpi	r24, 0x04	; 4
 402:	61 f0       	breq	.+24     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	59 f4       	brne	.+22     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
	{
		case MCP2515_CAN1:
			MCP2515_CAN1_PORT_CS |= (1<<MCP2515_CAN1_PIN_CS);
 408:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
 40c:	81 60       	ori	r24, 0x01	; 1
			break;
		case MCP2515_CAN2:
			MCP2515_CAN2_PORT_CS |= (1<<MCP2515_CAN2_PIN_CS);
 40e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
			break;
 412:	08 95       	ret
			MCP2515_CAN2_PORT_CS |= (1<<MCP2515_CAN2_PIN_CS);
 414:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	f9 cf       	rjmp	.-14     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
		case MCP2515_CAN3:
			MCP2515_CAN3_PORT_CS |= (1<<MCP2515_CAN3_PIN_CS);
 41c:	28 9a       	sbi	0x05, 0	; 5
			break;
		default:
			break;
	}
}
 41e:	08 95       	ret

00000420 <MCP2515_PullCanPacket>:
		data++;
	}
		MCP2515_CS_high(CANbus);				//raise CS.
}
void MCP2515_PullCanPacket(uint8_t CANbus, uint8_t mob,uint8_t * numBytes , uint8_t * data, uint32_t * ID)
{
 420:	4f 92       	push	r4
 422:	5f 92       	push	r5
 424:	6f 92       	push	r6
 426:	7f 92       	push	r7
 428:	bf 92       	push	r11
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	2d 97       	sbiw	r28, 0x0d	; 13
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	b8 2e       	mov	r11, r24
 44c:	6a 01       	movw	r12, r20
 44e:	79 01       	movw	r14, r18

	//the following line combines the instruction(0b10010000), with: 0b100 for rxb0 or 0b000 for rxb1, and: 0b10 for data starting at data0, or 0b00 for SIDH
	uint8_t instruction = 0b10010000|((mob > 0x70)<<2);
 450:	a0 e9       	ldi	r26, 0x90	; 144
 452:	7a 2e       	mov	r7, r26
 454:	61 37       	cpi	r22, 0x71	; 113
 456:	10 f0       	brcs	.+4      	; 0x45c <MCP2515_PullCanPacket+0x3c>
 458:	f4 e9       	ldi	r31, 0x94	; 148
 45a:	7f 2e       	mov	r7, r31
	MCP2515_CS_low(CANbus);			//lower CS.
 45c:	8b 2d       	mov	r24, r11
 45e:	bc df       	rcall	.-136    	; 0x3d8 <MCP2515_CS_low>
	SPI_send_byte(instruction);							//send instruction for stream of data
 460:	87 2d       	mov	r24, r7
 462:	74 d0       	rcall	.+232    	; 0x54c <SPI_send_byte>
	//loop counts to 8 or 12 depending on whether bit 1 of instruction is set.
	uint8_t tmpData[13];
	for(uint8_t counter = 0; counter < 13; counter++)
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	2c 01       	movw	r4, r24
 46a:	3e 01       	movw	r6, r28
 46c:	9e e0       	ldi	r25, 0x0E	; 14
 46e:	69 0e       	add	r6, r25
	{
		tmpData[counter] = SPI_send_byte(0x00);
 470:	71 1c       	adc	r7, r1
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	6b d0       	rcall	.+214    	; 0x54c <SPI_send_byte>
 476:	f2 01       	movw	r30, r4
 478:	81 93       	st	Z+, r24
 47a:	2f 01       	movw	r4, r30
	for(uint8_t counter = 0; counter < 13; counter++)
 47c:	e6 15       	cp	r30, r6
 47e:	f7 05       	cpc	r31, r7
 480:	c1 f7       	brne	.-16     	; 0x472 <MCP2515_PullCanPacket+0x52>
	}
	*ID  = ((uint32_t)(tmpData[0]&0b11111111)<<21);
	*ID |= ((uint32_t)(tmpData[1]&0b11100000)<<13);
 482:	4a 81       	ldd	r20, Y+2	; 0x02
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
	*ID  = ((uint32_t)(tmpData[0]&0b11111111)<<21);
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	a0 e0       	ldi	r26, 0x00	; 0
 492:	25 e1       	ldi	r18, 0x15	; 21
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	aa 1f       	adc	r26, r26
 49a:	bb 1f       	adc	r27, r27
 49c:	2a 95       	dec	r18
 49e:	d1 f7       	brne	.-12     	; 0x494 <MCP2515_PullCanPacket+0x74>
	*ID |= ((uint32_t)(tmpData[1]&0b00000011)<<16);
	*ID |= ((uint32_t)(tmpData[2]&0b11111111)<<8);
 4a0:	2b 81       	ldd	r18, Y+3	; 0x03
	*ID |= ((uint32_t)(tmpData[3]&0b11111111));
 4a2:	92 2b       	or	r25, r18
 4a4:	2c 81       	ldd	r18, Y+4	; 0x04
 4a6:	82 2b       	or	r24, r18
	*ID |= ((uint32_t)(tmpData[1]&0b11100000)<<13);
 4a8:	2a 01       	movw	r4, r20
 4aa:	3b 01       	movw	r6, r22
 4ac:	3d e0       	ldi	r19, 0x0D	; 13
 4ae:	44 0c       	add	r4, r4
 4b0:	55 1c       	adc	r5, r5
 4b2:	66 1c       	adc	r6, r6
 4b4:	77 1c       	adc	r7, r7
 4b6:	3a 95       	dec	r19
 4b8:	d1 f7       	brne	.-12     	; 0x4ae <MCP2515_PullCanPacket+0x8e>
 4ba:	44 24       	eor	r4, r4
 4bc:	55 24       	eor	r5, r5
 4be:	fc e1       	ldi	r31, 0x1C	; 28
 4c0:	6f 22       	and	r6, r31
 4c2:	77 24       	eor	r7, r7
	*ID |= ((uint32_t)(tmpData[3]&0b11111111));
 4c4:	84 29       	or	r24, r4
 4c6:	95 29       	or	r25, r5
 4c8:	a6 29       	or	r26, r6
 4ca:	b7 29       	or	r27, r7
	*ID |= ((uint32_t)(tmpData[1]&0b00000011)<<16);
 4cc:	ba 01       	movw	r22, r20
 4ce:	55 27       	eor	r21, r21
 4d0:	44 27       	eor	r20, r20
 4d2:	44 27       	eor	r20, r20
 4d4:	55 27       	eor	r21, r21
 4d6:	63 70       	andi	r22, 0x03	; 3
 4d8:	77 27       	eor	r23, r23
	*ID |= ((uint32_t)(tmpData[3]&0b11111111));
 4da:	84 2b       	or	r24, r20
 4dc:	95 2b       	or	r25, r21
 4de:	a6 2b       	or	r26, r22
 4e0:	b7 2b       	or	r27, r23
 4e2:	f8 01       	movw	r30, r16
 4e4:	80 83       	st	Z, r24
 4e6:	91 83       	std	Z+1, r25	; 0x01
 4e8:	a2 83       	std	Z+2, r26	; 0x02
 4ea:	b3 83       	std	Z+3, r27	; 0x03
	*numBytes = tmpData[12] & 0b00001111;
 4ec:	4d 85       	ldd	r20, Y+13	; 0x0d
 4ee:	4f 70       	andi	r20, 0x0F	; 15
 4f0:	f6 01       	movw	r30, r12
 4f2:	40 83       	st	Z, r20
	memcpy(data, &tmpData[4], *numBytes);
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	be 01       	movw	r22, r28
 4f8:	6b 5f       	subi	r22, 0xFB	; 251
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	c7 01       	movw	r24, r14
 4fe:	d2 d1       	rcall	.+932    	; 0x8a4 <memcpy>
	
	
	MCP2515_CS_high(CANbus);				//raise CS.
 500:	8b 2d       	mov	r24, r11
}
 502:	2d 96       	adiw	r28, 0x0d	; 13
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	ff 90       	pop	r15
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	cf 90       	pop	r12
 51e:	bf 90       	pop	r11
 520:	7f 90       	pop	r7
 522:	6f 90       	pop	r6
 524:	5f 90       	pop	r5
	MCP2515_CS_high(CANbus);				//raise CS.
 526:	4f 90       	pop	r4
 528:	69 cf       	rjmp	.-302    	; 0x3fc <MCP2515_CS_high>

0000052a <MCP2515_check_receive_status>:
	//PORTC |= (1<<PINC7);		
}


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 530:	53 df       	rcall	.-346    	; 0x3d8 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
 532:	80 eb       	ldi	r24, 0xB0	; 176
 534:	0b d0       	rcall	.+22     	; 0x54c <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	09 d0       	rcall	.+18     	; 0x54c <SPI_send_byte>
 53a:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	06 d0       	rcall	.+12     	; 0x54c <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
 540:	8c 2f       	mov	r24, r28
 542:	5c df       	rcall	.-328    	; 0x3fc <MCP2515_CS_high>
 544:	8d 2f       	mov	r24, r29
	return status;
}
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
 54c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 54e:	0d b4       	in	r0, 0x2d	; 45
 550:	07 fe       	sbrs	r0, 7
 552:	fd cf       	rjmp	.-6      	; 0x54e <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
 554:	8e b5       	in	r24, 0x2e	; 46
}
 556:	08 95       	ret

00000558 <__vector_25>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
//************************************************************************
//Function: UART Receive Complete interrupt
//Purpose:  called when the UART has received a character
//************************************************************************
{
 558:	2f 93       	push	r18
 55a:	2f b7       	in	r18, 0x3f	; 63
 55c:	2f 93       	push	r18
 55e:	2b b7       	in	r18, 0x3b	; 59
 560:	2f 93       	push	r18
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	ef 93       	push	r30
 568:	ff 93       	push	r31
    unsigned char lastRxError;

		
 
    // read UART status register and UART data register
    usr  = UART0_STATUS;
 56a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 56e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    // calculate buffer index 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 572:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <UART_RxHead>
 576:	ef 5f       	subi	r30, 0xFF	; 255
 578:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 57a:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <UART_RxTail>
 57e:	2e 17       	cp	r18, r30
 580:	99 f0       	breq	.+38     	; 0x5a8 <__vector_25+0x50>
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 582:	88 71       	andi	r24, 0x18	; 24
        // error: receive buffer overflow 
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        // store new index 
        UART_RxHead = tmphead;
 584:	e0 93 4f 02 	sts	0x024F, r30	; 0x80024f <UART_RxHead>
        // store received data in buffer 
       UART_RxBuf[tmphead] = data;
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	ee 5a       	subi	r30, 0xAE	; 174
 58c:	fd 4f       	sbci	r31, 0xFD	; 253
 58e:	90 83       	st	Z, r25
    }
    UART_LastRxError = lastRxError;   
 590:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <UART_LastRxError>
	
}
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	2f 91       	pop	r18
 59e:	2b bf       	out	0x3b, r18	; 59
 5a0:	2f 91       	pop	r18
 5a2:	2f bf       	out	0x3f, r18	; 63
 5a4:	2f 91       	pop	r18
 5a6:	18 95       	reti
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	f2 cf       	rjmp	.-28     	; 0x590 <__vector_25+0x38>

000005ac <__vector_36>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
//************************************************************************
//Function: UART Receive Complete interrupt
//Purpose:  called when the UART has received a character
//************************************************************************
{
 5ac:	2f 93       	push	r18
 5ae:	2f b7       	in	r18, 0x3f	; 63
 5b0:	2f 93       	push	r18
 5b2:	2b b7       	in	r18, 0x3b	; 59
 5b4:	2f 93       	push	r18
 5b6:	8f 93       	push	r24
 5b8:	9f 93       	push	r25
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
    unsigned char lastRxError1;

		
 
    // read UART status register and UART data register
    usr1  = UART1_STATUS;
 5be:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    data1 = UART1_DATA;
 5c2:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
#elif defined ( ATMEGA_UART )
    lastRxError1 = (usr1 & (_BV(FE)|_BV(DOR)) );
#endif
        
    // calculate buffer index 
    tmphead1 = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
 5c6:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <UART1_RxHead>
 5ca:	ef 5f       	subi	r30, 0xFF	; 255
 5cc:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead1 == UART1_RxTail ) {
 5ce:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <UART1_RxTail>
 5d2:	2e 17       	cp	r18, r30
 5d4:	99 f0       	breq	.+38     	; 0x5fc <__vector_36+0x50>
    lastRxError1 = (usr1 & (_BV(FE0)|_BV(DOR0)) );
 5d6:	88 71       	andi	r24, 0x18	; 24
        // error: receive buffer overflow 
        lastRxError1 = UART_BUFFER_OVERFLOW >> 8;
    }else{
        // store new index 
        UART1_RxHead = tmphead1;
 5d8:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <UART1_RxHead>
        // store received data in buffer 
       UART1_RxBuf[tmphead1] = data1;
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	e3 5f       	subi	r30, 0xF3	; 243
 5e0:	fd 4f       	sbci	r31, 0xFD	; 253
 5e2:	90 83       	st	Z, r25
    }
    UART1_LastRxError = lastRxError1;   
 5e4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
	
}
 5e8:	ff 91       	pop	r31
 5ea:	ef 91       	pop	r30
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	2f 91       	pop	r18
 5f2:	2b bf       	out	0x3b, r18	; 59
 5f4:	2f 91       	pop	r18
 5f6:	2f bf       	out	0x3f, r18	; 63
 5f8:	2f 91       	pop	r18
 5fa:	18 95       	reti
        lastRxError1 = UART_BUFFER_OVERFLOW >> 8;
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	f2 cf       	rjmp	.-28     	; 0x5e4 <__vector_36+0x38>

00000600 <__vector_26>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 600:	8f 93       	push	r24
 602:	8f b7       	in	r24, 0x3f	; 63
 604:	8f 93       	push	r24
 606:	8b b7       	in	r24, 0x3b	; 59
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
    unsigned char tmptail;
    
    if ( UART_TxHead != UART_TxTail) {
 610:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <UART_TxHead>
 614:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <UART_TxTail>
 618:	98 17       	cp	r25, r24
 61a:	a9 f0       	breq	.+42     	; 0x646 <__vector_26+0x46>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 61c:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <UART_TxTail>
 620:	ef 5f       	subi	r30, 0xFF	; 255
 622:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 624:	e0 93 50 02 	sts	0x0250, r30	; 0x800250 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	ee 58       	subi	r30, 0x8E	; 142
 62c:	fd 4f       	sbci	r31, 0xFD	; 253
 62e:	80 81       	ld	r24, Z
 630:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1 << UART0_UDRIE);
    }
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	8b bf       	out	0x3b, r24	; 59
 63e:	8f 91       	pop	r24
 640:	8f bf       	out	0x3f, r24	; 63
 642:	8f 91       	pop	r24
 644:	18 95       	reti
        UART0_CONTROL &= ~(1 << UART0_UDRIE);
 646:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 64a:	8f 7d       	andi	r24, 0xDF	; 223
 64c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
 650:	f1 cf       	rjmp	.-30     	; 0x634 <__vector_26+0x34>

00000652 <__vector_37>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 652:	8f 93       	push	r24
 654:	8f b7       	in	r24, 0x3f	; 63
 656:	8f 93       	push	r24
 658:	8b b7       	in	r24, 0x3b	; 59
 65a:	8f 93       	push	r24
 65c:	9f 93       	push	r25
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
    unsigned char tmptail1;

    
    if ( UART1_TxHead != UART1_TxTail) {
 662:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <UART1_TxHead>
 666:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <UART1_TxTail>
 66a:	98 17       	cp	r25, r24
 66c:	a9 f0       	breq	.+42     	; 0x698 <__vector_37+0x46>
        /* calculate and store new buffer index */
        tmptail1 = (UART1_TxTail + 1) & UART1_TX_BUFFER_MASK;
 66e:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <UART1_TxTail>
 672:	ef 5f       	subi	r30, 0xFF	; 255
 674:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail1;
 676:	e0 93 0b 02 	sts	0x020B, r30	; 0x80020b <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail1];  /* start transmission */
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	e3 5d       	subi	r30, 0xD3	; 211
 67e:	fd 4f       	sbci	r31, 0xFD	; 253
 680:	80 81       	ld	r24, Z
 682:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~(1 << UART1_UDRIE);
    }
}
 686:	ff 91       	pop	r31
 688:	ef 91       	pop	r30
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	8b bf       	out	0x3b, r24	; 59
 690:	8f 91       	pop	r24
 692:	8f bf       	out	0x3f, r24	; 63
 694:	8f 91       	pop	r24
 696:	18 95       	reti
        UART1_CONTROL &= ~(1 << UART1_UDRIE);
 698:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 69c:	8f 7d       	andi	r24, 0xDF	; 223
 69e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
}
 6a2:	f1 cf       	rjmp	.-30     	; 0x686 <__vector_37+0x34>

000006a4 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 6a4:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <UART_TxHead>
    UART_TxTail = 0;
 6a8:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <UART_TxTail>
    UART_RxHead = 0;
 6ac:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <UART_RxHead>
    UART_RxTail = 0;
 6b0:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <UART_RxTail>
    
	CLKPR = (1<<CLKPCE);  	//enable clock prescaler change
 6b4:	e1 e6       	ldi	r30, 0x61	; 97
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 e8       	ldi	r24, 0x80	; 128
 6ba:	80 83       	st	Z, r24
	CLKPR = 0x00;			//clock divide = 1  so  16MHz/1 = 16MHz
 6bc:	10 82       	st	Z, r1

  	UBRR0H = 0;
 6be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = 103;	//19200 baud for laptop/LCD info panel
 6c2:	87 e6       	ldi	r24, 0x67	; 103
 6c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
	UCSR0A = 2;		//2x on
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 24;	//tx and rx on  AND rxie on for testing
 6ce:	88 e1       	ldi	r24, 0x18	; 24
 6d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    UCSR0C = 6;		//8 - 1 - N
 6d4:	86 e0       	ldi	r24, 0x06	; 6
 6d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

}/* uart_init */
 6da:	08 95       	ret

000006dc <uart1_init>:

void uart1_init(unsigned int baudrate)
{
	UART1_TxHead = 0;
 6dc:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <UART1_TxHead>
    UART1_TxTail = 0;
 6e0:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <UART1_TxTail>
    UART1_RxHead = 0;
 6e4:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <UART1_RxHead>
    UART1_RxTail = 0;
 6e8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <UART1_RxTail>
	
	CLKPR = (1<<CLKPCE);  	//enable clock prescaler change
 6ec:	e1 e6       	ldi	r30, 0x61	; 97
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 e8       	ldi	r24, 0x80	; 128
 6f2:	80 83       	st	Z, r24
	CLKPR = 0x00;			//clock divide = 1  so  16MHz/1 = 16MHz
 6f4:	10 82       	st	Z, r1
	
	UBRR1H = 0;
 6f6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    UBRR1L = 103;	// now 250k for CAN  19200 for testing    //9600 baud for gsm modem (207 with 2x on)
 6fa:	87 e6       	ldi	r24, 0x67	; 103
 6fc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
	UCSR1A = 2;		//2x on
 700:	82 e0       	ldi	r24, 0x02	; 2
 702:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = 24;	//tx and rx on AND rxie on
 706:	88 e1       	ldi	r24, 0x18	; 24
 708:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    UCSR1C = 6;		//8 - 1 - N
 70c:	86 e0       	ldi	r24, 0x06	; 6
 70e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

}/* uart1_init */
 712:	08 95       	ret

00000714 <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{	
	unsigned char tmphead;
	
	if (portKey == 0)
 714:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <portKey>
 718:	91 11       	cpse	r25, r1
 71a:	15 c0       	rjmp	.+42     	; 0x746 <uart_putc+0x32>
	{
		tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 71c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <UART_TxHead>
 720:	9f 5f       	subi	r25, 0xFF	; 255
 722:	9f 71       	andi	r25, 0x1F	; 31
    
		while ( tmphead == UART_TxTail ){
 724:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <UART_TxTail>
 728:	29 17       	cp	r18, r25
 72a:	e1 f3       	breq	.-8      	; 0x724 <uart_putc+0x10>
			;// wait for free space in buffer 
		}
    
		UART_TxBuf[tmphead] = data;
 72c:	e9 2f       	mov	r30, r25
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	ee 58       	subi	r30, 0x8E	; 142
 732:	fd 4f       	sbci	r31, 0xFD	; 253
 734:	80 83       	st	Z, r24
		UART_TxHead = tmphead;
 736:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <UART_TxHead>

		// enable UDRE interrupt 
		UART0_CONTROL |= (1 << UART0_UDRIE);
 73a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 73e:	80 62       	ori	r24, 0x20	; 32
 740:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 744:	08 95       	ret
		
	}
	
	else if (portKey == 1)
 746:	91 30       	cpi	r25, 0x01	; 1
 748:	a1 f4       	brne	.+40     	; 0x772 <uart_putc+0x5e>
	{
		tmphead  = (UART1_TxHead + 1) & UART1_TX_BUFFER_MASK;
 74a:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <UART1_TxHead>
 74e:	9f 5f       	subi	r25, 0xFF	; 255
 750:	9f 71       	andi	r25, 0x1F	; 31
    
		while ( tmphead == UART1_TxTail ){
 752:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <UART1_TxTail>
 756:	92 17       	cp	r25, r18
 758:	e1 f3       	breq	.-8      	; 0x752 <uart_putc+0x3e>
			;// wait for free space in buffer 		
		}
		//PORTH &= 251;
    
		UART1_TxBuf[tmphead] = data;
 75a:	e9 2f       	mov	r30, r25
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	e3 5d       	subi	r30, 0xD3	; 211
 760:	fd 4f       	sbci	r31, 0xFD	; 253
 762:	80 83       	st	Z, r24
		UART1_TxHead = tmphead;
 764:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <UART1_TxHead>

		// enable UDRE interrupt 
		UART1_CONTROL |= (1 << UART1_UDRIE);	
 768:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 76c:	80 62       	ori	r24, 0x20	; 32
 76e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	}		
	
}/* uart_putc */
 772:	08 95       	ret

00000774 <uart1_putc>:

void uart1_putc(unsigned char data1)
{
	
	unsigned char tmphead;
	tmphead  = (UART1_TxHead + 1) & UART1_TX_BUFFER_MASK;
 774:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <UART1_TxHead>
 778:	9f 5f       	subi	r25, 0xFF	; 255
 77a:	9f 71       	andi	r25, 0x1F	; 31
    
		while ( tmphead == UART1_TxTail ){
 77c:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <UART1_TxTail>
 780:	29 17       	cp	r18, r25
 782:	e1 f3       	breq	.-8      	; 0x77c <uart1_putc+0x8>
			;// wait for free space in buffer 		
		}
		//PORTH &= 251;
    
		UART1_TxBuf[tmphead] = data1;
 784:	e9 2f       	mov	r30, r25
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	e3 5d       	subi	r30, 0xD3	; 211
 78a:	fd 4f       	sbci	r31, 0xFD	; 253
 78c:	80 83       	st	Z, r24
		UART1_TxHead = tmphead;
 78e:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <UART1_TxHead>

		// enable UDRE interrupt 
		UART1_CONTROL |= (1 << UART1_UDRIE);	
 792:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 796:	80 62       	ori	r24, 0x20	; 32
 798:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	    	
}/* uart1_putc */
 79c:	08 95       	ret

0000079e <external_interrupt_init>:
 * 
 */
void external_interrupt_init()
{
	//INT1 for CAN1, INT0 for CAN2, PCINT7 for CAN3
	EICRA |= (2<<ISC00)|(2<<ISC10);
 79e:	e9 e6       	ldi	r30, 0x69	; 105
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	8a 60       	ori	r24, 0x0A	; 10
 7a6:	80 83       	st	Z, r24
	EIMSK  = (1<<INT0) | (1<<INT1);
 7a8:	83 e0       	ldi	r24, 0x03	; 3
 7aa:	8d bb       	out	0x1d, r24	; 29
	//Enable interrupts for PCINT7:0
	PCICR  = (1<<PCIE0)|(1<<PCIE1);
 7ac:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 = (1<<PCINT7);
 7b0:	80 e8       	ldi	r24, 0x80	; 128
 7b2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK1 = (1<<PCINT15);
 7b6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
}
 7ba:	08 95       	ret

000007bc <io_init>:
 * 
 */
void io_init()
{
	//pins 8, 9 and 14 for MCP2515_STB high so the things respond (PE6, PE7, PH2)
	DDRE  = 0b11000010;		//PE0 = RS232 RX1; PE1 = RS232 TX1;  PE6 = STB_CAN1; PE7 = STB_CAN2;
 7bc:	82 ec       	ldi	r24, 0xC2	; 194
 7be:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000000;		
 7c0:	1e b8       	out	0x0e, r1	; 14
	DDRH  = 0b00000111;		//PH0 = CS_CAN1; PH1 = CS_CAN2; PH2 = STB_CAN3
 7c2:	87 e0       	ldi	r24, 0x07	; 7
 7c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	PORTH = 0b00000011;		//CS_CAN1 high; CS_CAN2 high;
 7c8:	83 e0       	ldi	r24, 0x03	; 3
 7ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	//pins 12, 13, 19 for the CS for each MCP2515 PH0, PH1, PB0)

	//pin 21 for MOSI, pin 20  for SCK (PB2, PB1)
	DDRB  = 0b01100111;		//PB0 = CS_CAN3; PB1 = SCK; PB2 = MOSI; PB3 = MISO; PB5 = High drive A; PB6 = Low drive A; PB7 = CAN3_INT; 
 7ce:	87 e6       	ldi	r24, 0x67	; 103
 7d0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;		//set CS_CAN3 high;
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	85 b9       	out	0x05, r24	; 5
	
	DDRL  = 0b00011000;		//PB3 = High drive B; PB4 = Low Drive B;
 7d6:	88 e1       	ldi	r24, 0x18	; 24
 7d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	PORTL = 0b00000000;
 7dc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	
	DDRD  = 0b11001000;		//PD0 = CAN2_INT; PD1 = CAN1_INT; PD2 = RS232 RX2; PD3 = RS232 TX2; PD6 = CAN1_TXPIN; PD7 = CAN2_TXPIN;
 7e0:	98 ec       	ldi	r25, 0xC8	; 200
 7e2:	9a b9       	out	0x0a, r25	; 10
	DDRD  = 0b00000000;
 7e4:	1a b8       	out	0x0a, r1	; 10
	
	DDRC  = 0b00001000;		//PC3 = CAN3_TXPIN;
 7e6:	98 e0       	ldi	r25, 0x08	; 8
 7e8:	97 b9       	out	0x07, r25	; 7
	PORTC = 0b00000000;
 7ea:	18 b8       	out	0x08, r1	; 8
	
	DDRJ  = 0b00000000;		//PORTJ is used for digital input;
 7ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	
	DDRA  = 0b00011000;		//PA3 = ENABLE_B; PA4 = ENABLE_A; PA1 = dig input; PA2 = dig input;
 7f0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00010000;
 7f2:	80 e1       	ldi	r24, 0x10	; 16
 7f4:	82 b9       	out	0x02, r24	; 2

	DDRK  = 0b00100000;		//PK5 = debugging LED;
 7f6:	80 e2       	ldi	r24, 0x20	; 32
 7f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7e0107>
	// PORTK = 0b00100000;
	
	// Enable external interrupts in order for the CAN bus to communicate with us
	external_interrupt_init();
 7fc:	d0 cf       	rjmp	.-96     	; 0x79e <external_interrupt_init>

000007fe <firmware_init>:
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
void firmware_init()
{
	io_init();
 7fe:	de df       	rcall	.-68     	; 0x7bc <io_init>
	// SPI_init();
    // // uart_init(UART_BAUD_SELECT(19200, 16UL));
    uart_init(19200);
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	9b e4       	ldi	r25, 0x4B	; 75
 804:	4f df       	rcall	.-354    	; 0x6a4 <uart_init>
    uart1_init(19200);
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	9b e4       	ldi	r25, 0x4B	; 75
 80a:	68 df       	rcall	.-304    	; 0x6dc <uart1_init>
	a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); // Turns ON ADC
 80c:	61 e0       	ldi	r22, 0x01	; 1
 80e:	86 e0       	ldi	r24, 0x06	; 6
 810:	93 cd       	rjmp	.-1242   	; 0x338 <a2dInit>

00000812 <timer_init>:
 812:	84 b5       	in	r24, 0x24	; 36
 */
void timer_init()
{
    // http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf
    // Set up 1Khz timer
    TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
 814:	82 60       	ori	r24, 0x02	; 2
 816:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
 818:	85 b5       	in	r24, 0x25	; 37
 81a:	83 60       	ori	r24, 0x03	; 3
 81c:	85 bd       	out	0x25, r24	; 37
    OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
 81e:	8a ef       	ldi	r24, 0xFA	; 250
 820:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);                // Enable COMPA interupt
 822:	ee e6       	ldi	r30, 0x6E	; 110
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	82 60       	ori	r24, 0x02	; 2
 82a:	80 83       	st	Z, r24

    // Set up 50Hz comm timer
	TCCR1A = 0b00000000;			//
 82c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00001101;			// CTC mode & prescale clock by 1024
 830:	8d e0       	ldi	r24, 0x0D	; 13
 832:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A =  15000;					// 312 gives 50Hz main comms speed
 836:	88 e9       	ldi	r24, 0x98	; 152
 838:	9a e3       	ldi	r25, 0x3A	; 58
 83a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 83e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 0b00000010;			// Turn on compare interrupt for OCR1A
 842:	82 e0       	ldi	r24, 0x02	; 2
 844:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 848:	08 95       	ret

0000084a <CAN_pull_packet>:
        status                      // SubID?
    );
}

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
 84a:	af 92       	push	r10
 84c:	bf 92       	push	r11
 84e:	cf 92       	push	r12
 850:	df 92       	push	r13
 852:	ef 92       	push	r14
 854:	ff 92       	push	r15
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	cf 93       	push	r28
 85c:	c8 2f       	mov	r28, r24
 85e:	7b 01       	movw	r14, r22
 860:	6a 01       	movw	r12, r20
 862:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
 864:	62 de       	rcall	.-828    	; 0x52a <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
 866:	82 95       	swap	r24
 868:	86 95       	lsr	r24
 86a:	86 95       	lsr	r24
 86c:	83 70       	andi	r24, 0x03	; 3
 86e:	29 f0       	breq	.+10     	; 0x87a <CAN_pull_packet+0x30>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 870:	85 01       	movw	r16, r10
 872:	83 30       	cpi	r24, 0x03	; 3
 874:	88 f0       	brcs	.+34     	; 0x898 <CAN_pull_packet+0x4e>
 876:	83 30       	cpi	r24, 0x03	; 3
 878:	51 f0       	breq	.+20     	; 0x88e <CAN_pull_packet+0x44>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
			break;
		default:
			break;
	}
}
 87a:	cf 91       	pop	r28
 87c:	1f 91       	pop	r17
 87e:	0f 91       	pop	r16
 880:	ff 90       	pop	r15
 882:	ef 90       	pop	r14
 884:	df 90       	pop	r13
 886:	cf 90       	pop	r12
 888:	bf 90       	pop	r11
 88a:	af 90       	pop	r10
 88c:	08 95       	ret
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 88e:	96 01       	movw	r18, r12
 890:	a7 01       	movw	r20, r14
 892:	61 e6       	ldi	r22, 0x61	; 97
 894:	8c 2f       	mov	r24, r28
 896:	c4 dd       	rcall	.-1144   	; 0x420 <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 898:	96 01       	movw	r18, r12
 89a:	a7 01       	movw	r20, r14
 89c:	61 e6       	ldi	r22, 0x61	; 97
 89e:	8c 2f       	mov	r24, r28
 8a0:	bf dd       	rcall	.-1154   	; 0x420 <MCP2515_PullCanPacket>
}
 8a2:	eb cf       	rjmp	.-42     	; 0x87a <CAN_pull_packet+0x30>

000008a4 <memcpy>:
 8a4:	fb 01       	movw	r30, r22
 8a6:	dc 01       	movw	r26, r24
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <memcpy+0xa>
 8aa:	01 90       	ld	r0, Z+
 8ac:	0d 92       	st	X+, r0
 8ae:	41 50       	subi	r20, 0x01	; 1
 8b0:	50 40       	sbci	r21, 0x00	; 0
 8b2:	d8 f7       	brcc	.-10     	; 0x8aa <memcpy+0x6>
 8b4:	08 95       	ret

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
