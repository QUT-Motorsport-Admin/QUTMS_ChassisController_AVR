
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000c34  00000cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  00800202  00800202  00000cca  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000cca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00000d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003021  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000178c  00000000  00000000  00004099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003079  00000000  00000000  00005825  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aec  00000000  00000000  000088a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000118d  00000000  00000000  0000938c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f6b  00000000  00000000  0000a519  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000c484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	4c c1       	rjmp	.+664    	; 0x29e <__vector_1>
   6:	00 00       	nop
   8:	0a c1       	rjmp	.+532    	; 0x21e <__vector_2>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c1       	rjmp	.+760    	; 0x31e <__vector_9>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	c5 c0       	rjmp	.+394    	; 0x1d0 <__vector_17>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	d5 c3       	rjmp	.+1962   	; 0x810 <__vector_25>
  66:	00 00       	nop
  68:	27 c4       	rjmp	.+2126   	; 0x8b8 <__vector_26>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	e9 c3       	rjmp	.+2002   	; 0x864 <__vector_36>
  92:	00 00       	nop
  94:	3a c4       	rjmp	.+2164   	; 0x90a <__vector_37>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e4 e3       	ldi	r30, 0x34	; 52
  f8:	fc e0       	ldi	r31, 0x0C	; 12
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a2 30       	cpi	r26, 0x02	; 2
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	23 e0       	ldi	r18, 0x03	; 3
 10c:	a2 e0       	ldi	r26, 0x02	; 2
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a5 31       	cpi	r26, 0x15	; 21
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	02 d0       	rcall	.+4      	; 0x120 <main>
 11c:	89 c5       	rjmp	.+2834   	; 0xc30 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <main>:
uint8_t shutdownState = 0;

int main(void) {    

    // Set Up
    firmware_init();
 120:	ce d4       	rcall	.+2460   	; 0xabe <firmware_init>
    timer_init();
 122:	df d4       	rcall	.+2494   	; 0xae2 <timer_init>
 124:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <shutdownState>

    // Grab the state of the shutdown circuity
    shutdownState = 0;
 128:	78 94       	sei

    // Enable Interupts
    sei();
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0xa>

0000012c <oneKHzTimer>:

    // Main Poll
    // ------------------------------------------------------------------------
    while(1) { }
 12c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7e0103>


    // Check the ignition button state
    // 1s debounce, IE hold for 50ms and if held, change state
    // ------------------------------------------------------------------------
    if(!(PINJ & (1<<PJ6))) // Checking Pin J6 (69)
 130:	86 fd       	sbrc	r24, 6
 132:	45 c0       	rjmp	.+138    	; 0x1be <oneKHzTimer+0x92>
    {
        ignitionState = 1; // Tracks that the ignition button is on
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <ignitionState>
        ignitionStateDebounceCount++; // Count up 1ms
 13a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 13e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 148:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
        if(ignitionStateDebounceCount >= 1000) // If 1s has been counted
 14c:	88 3e       	cpi	r24, 0xE8	; 232
 14e:	23 e0       	ldi	r18, 0x03	; 3
 150:	92 07       	cpc	r25, r18
 152:	b0 f0       	brcs	.+44     	; 0x180 <oneKHzTimer+0x54>
        {
            // Limit the range it exists in
            if(ignitionStateDebounceCount > 5000) { ignitionStateDebounceCount = 1001; }
 154:	89 38       	cpi	r24, 0x89	; 137
 156:	93 41       	sbci	r25, 0x13	; 19
 158:	30 f0       	brcs	.+12     	; 0x166 <oneKHzTimer+0x3a>
 15a:	89 ee       	ldi	r24, 0xE9	; 233
 15c:	93 e0       	ldi	r25, 0x03	; 3
 15e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 162:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
            // If this is the first time though from a previous press
            if(ignitionStateLock == 0) {
 166:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <ignitionStateLock>
 16a:	81 11       	cpse	r24, r1
 16c:	09 c0       	rjmp	.+18     	; 0x180 <oneKHzTimer+0x54>
                ignitionStateLock = 1; // Disabled first run though after press
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <ignitionStateLock>
                armedState = !armedState; // Flips armed state
 174:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <armedState>
 178:	91 11       	cpse	r25, r1
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <armedState>
    // CanHeartbeatErrorPower++;


    // Send CAN input
    // uint8_t tmpInputVal;
    if(InputPedalThrottleCount > INPUT_TIME_PEDAL_THROTTLE)
 180:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 184:	8b 30       	cpi	r24, 0x0B	; 11
 186:	30 f0       	brcs	.+12     	; 0x194 <oneKHzTimer+0x68>
    {
        INPUT_accelerationPedal = a2d_10bitCh(5);
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	82 d1       	rcall	.+772    	; 0x490 <a2d_10bitCh>
 18c:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <INPUT_accelerationPedal>
        // if(INPUT_get_accelPedal(&tmpInputVal) == 0) {
        //     // PORTK |= 0b00100000;
        //     INPUT_accelerationPedal = tmpInputVal;
        // }
        InputPedalThrottleCount = 0;
 190:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
    }

    if(InputPedalBrakeCount > INPUT_TIME_PEDAL_BRAKE)
 194:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <InputPedalBrakeCount.2634>
 198:	8b 30       	cpi	r24, 0x0B	; 11
 19a:	30 f0       	brcs	.+12     	; 0x1a8 <oneKHzTimer+0x7c>
    {
        INPUT_brakePedal = a2d_10bitCh(10);
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	78 d1       	rcall	.+752    	; 0x490 <a2d_10bitCh>
 1a0:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <INPUT_brakePedal>
        // if(INPUT_get_brakePedal(&tmpInputVal) == 0) {
        //     INPUT_brakePedal = tmpInputVal;
        // }
        InputPedalBrakeCount = 0;
 1a4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <InputPedalBrakeCount.2634>
    }
    InputPedalThrottleCount++;
 1a8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    InputPedalBrakeCount++;
 1b2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <InputPedalBrakeCount.2634>
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <InputPedalBrakeCount.2634>
    //     INPUT_brakePressureBack = tmpInputVal;
    // }
    // if(INPUT_get_brakePressureFront(&tmpInputVal) == 0) {
    //     INPUT_brakePressureFront = tmpInputVal;
    // }
}
 1bc:	08 95       	ret
        ignitionState = 0; // Tracks that the ignition button is off
 1be:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <ignitionState>
        ignitionStateLock = 0; // Re-enables the first run though after the timer has been reached
 1c2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <ignitionStateLock>
        ignitionStateDebounceCount = 0; // Resets the counter for time the button is pressed
 1c6:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
 1ca:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
 1ce:	d8 cf       	rjmp	.-80     	; 0x180 <oneKHzTimer+0x54>

000001d0 <__vector_17>:

/**
 * @brief Called whenever the 1Khz timer triggers
 */
ISR(TIMER1_COMPA_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	0b b6       	in	r0, 0x3b	; 59
 1dc:	0f 92       	push	r0
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
    oneKHzTimer();
 1f6:	9a df       	rcall	.-204    	; 0x12c <oneKHzTimer>
    // led_toggle();
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0b be       	out	0x3b, r0	; 59
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__vector_2>:

/**
 * @brief Called whenever CANBUS 1 interupt is triggered
 *        * When ever there is data waiting in CAN 1
 */
ISR(INT1_vect) {
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	0b b6       	in	r0, 0x3b	; 59
 22a:	0f 92       	push	r0
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	5f 93       	push	r21
 234:	6f 93       	push	r22
 236:	7f 93       	push	r23
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	2d 97       	sbiw	r28, 0x0d	; 13
 24e:	de bf       	out	0x3e, r29	; 62
 250:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN1, &numBytes, data, &ID);
 252:	9e 01       	movw	r18, r28
 254:	27 5f       	subi	r18, 0xF7	; 247
 256:	3f 4f       	sbci	r19, 0xFF	; 255
 258:	ae 01       	movw	r20, r28
 25a:	4f 5f       	subi	r20, 0xFF	; 255
 25c:	5f 4f       	sbci	r21, 0xFF	; 255
 25e:	be 01       	movw	r22, r28
 260:	63 5f       	subi	r22, 0xF3	; 243
 262:	7f 4f       	sbci	r23, 0xFF	; 255
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	7a d4       	rcall	.+2292   	; 0xb5c <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_RESPONSE_MALFORMED);
}
 268:	2d 96       	adiw	r28, 0x0d	; 13
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0b be       	out	0x3b, r0	; 59
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_1>:

/**
 * @brief Called whenever CANBUS 2 interupt is triggered
 *        * When ever there is data waiting in CAN 2
 */
ISR(INT0_vect)	{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	0b b6       	in	r0, 0x3b	; 59
 2aa:	0f 92       	push	r0
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	2d 97       	sbiw	r28, 0x0d	; 13
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN2, &numBytes, data, &ID);
 2d2:	9e 01       	movw	r18, r28
 2d4:	27 5f       	subi	r18, 0xF7	; 247
 2d6:	3f 4f       	sbci	r19, 0xFF	; 255
 2d8:	ae 01       	movw	r20, r28
 2da:	4f 5f       	subi	r20, 0xFF	; 255
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	be 01       	movw	r22, r28
 2e0:	63 5f       	subi	r22, 0xF3	; 243
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	3a d4       	rcall	.+2164   	; 0xb5c <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
}
 2e8:	2d 96       	adiw	r28, 0x0d	; 13
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0b be       	out	0x3b, r0	; 59
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_9>:

/**
 * @brief Called whenever CANBUS 3 interupt is triggered
 *        * When ever there is data waiting in CAN 3
 */
ISR(PCINT0_vect) {
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	0b b6       	in	r0, 0x3b	; 59
 32a:	0f 92       	push	r0
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	2d 97       	sbiw	r28, 0x0d	; 13
 34e:	de bf       	out	0x3e, r29	; 62
 350:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN3, &numBytes, data, &ID);
 352:	9e 01       	movw	r18, r28
 354:	27 5f       	subi	r18, 0xF7	; 247
 356:	3f 4f       	sbci	r19, 0xFF	; 255
 358:	ae 01       	movw	r20, r28
 35a:	4f 5f       	subi	r20, 0xFF	; 255
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	be 01       	movw	r22, r28
 360:	63 5f       	subi	r22, 0xF3	; 243
 362:	7f 4f       	sbci	r23, 0xFF	; 255
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	fa d3       	rcall	.+2036   	; 0xb5c <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);
 368:	2d 96       	adiw	r28, 0x0d	; 13
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0b be       	out	0x3b, r0	; 59
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <a2dInit>:

// functions

// initialize a2d converter
void a2dInit(unsigned char prescale, unsigned char ref)
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <a2dInit+0x6>
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	89 83       	std	Y+1, r24	; 0x01
 3aa:	6a 83       	std	Y+2, r22	; 0x02
	// Set to Single Mode, ADC Auto Trigger OFF, ADC Int OFF, Prescale 0
	ADCSRA = 0; //clear!
 3ac:	8a e7       	ldi	r24, 0x7A	; 122
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	10 82       	st	Z, r1

	// Right adjust result
	ADMUX &= ~(1<<ADLAR); //clear
 3b4:	8c e7       	ldi	r24, 0x7C	; 124
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 81       	ld	r18, Z
 3bc:	8c e7       	ldi	r24, 0x7C	; 124
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	2f 7d       	andi	r18, 0xDF	; 223
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18

	// Set prescaler
	a2dSetPrescaler(prescale);
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	1a d0       	rcall	.+52     	; 0x3fe <a2dSetPrescaler>

	// Set default reference
	a2dSetReference(ref);	
 3ca:	8a 81       	ldd	r24, Y+2	; 0x02

	// Turn ADC on
	a2dOn();
 3cc:	36 d0       	rcall	.+108    	; 0x43a <a2dSetReference>
 3ce:	06 d0       	rcall	.+12     	; 0x3dc <a2dOn>

	// int input = a2d_10bit();
	// input = a2d_10bit();
}
 3d0:	00 00       	nop
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <a2dOn>:

// turn On a2d converter
void a2dOn(void)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN);				// enable ADC (turn on ADC power), Set
 3e4:	8a e7       	ldi	r24, 0x7A	; 122
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 81       	ld	r18, Z
 3ec:	8a e7       	ldi	r24, 0x7A	; 122
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	20 68       	ori	r18, 0x80	; 128
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
}
 3f6:	00 00       	nop
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <a2dSetPrescaler>:
	ADCSRA &= ~(1 << ADEN);				// disable ADC (turn off ADC power), Clear
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	0f 92       	push	r0
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA &= ADC_PRESCALE_MASK;
 40a:	8a e7       	ldi	r24, 0x7A	; 122
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	fc 01       	movw	r30, r24
 410:	20 81       	ld	r18, Z
 412:	8a e7       	ldi	r24, 0x7A	; 122
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	28 7f       	andi	r18, 0xF8	; 248
 418:	fc 01       	movw	r30, r24
 41a:	20 83       	st	Z, r18
	ADCSRA |= prescale;
 41c:	8a e7       	ldi	r24, 0x7A	; 122
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	fc 01       	movw	r30, r24
 422:	30 81       	ld	r19, Z
 424:	8a e7       	ldi	r24, 0x7A	; 122
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	29 81       	ldd	r18, Y+1	; 0x01
 42a:	23 2b       	or	r18, r19
 42c:	fc 01       	movw	r30, r24
 42e:	20 83       	st	Z, r18
}
 430:	00 00       	nop
 432:	0f 90       	pop	r0
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	0f 92       	push	r0
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ADC_REFERENCE_MASK;
 446:	8c e7       	ldi	r24, 0x7C	; 124
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	fc 01       	movw	r30, r24
 44c:	40 81       	ld	r20, Z
 44e:	8c e7       	ldi	r24, 0x7C	; 124
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	4c 7f       	andi	r20, 0xFC	; 252
 454:	fc 01       	movw	r30, r24
 456:	40 83       	st	Z, r20
	ADMUX |= (ref<<6);
 458:	8c e7       	ldi	r24, 0x7C	; 124
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	fc 01       	movw	r30, r24
 45e:	80 81       	ld	r24, Z
 460:	48 2f       	mov	r20, r24
 462:	89 81       	ldd	r24, Y+1	; 0x01
 464:	88 2f       	mov	r24, r24
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	38 2f       	mov	r19, r24
 46a:	36 95       	lsr	r19
 46c:	36 95       	lsr	r19
 46e:	28 2f       	mov	r18, r24
 470:	22 95       	swap	r18
 472:	22 0f       	add	r18, r18
 474:	22 0f       	add	r18, r18
 476:	20 7c       	andi	r18, 0xC0	; 192
 478:	82 2f       	mov	r24, r18
 47a:	24 2f       	mov	r18, r20
 47c:	28 2b       	or	r18, r24
 47e:	8c e7       	ldi	r24, 0x7C	; 124
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	fc 01       	movw	r30, r24
 484:	20 83       	st	Z, r18
}
 486:	00 00       	nop
 488:	0f 90       	pop	r0
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <a2d_10bitCh>:

// Perform a 10-bit conversion on given channel
// starts conversion, waits until conversion is done, and returns result
// modded for mega1280 by Ant
unsigned short a2d_10bitCh(unsigned char ch)
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	0f 92       	push	r0
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	89 83       	std	Y+1, r24	; 0x01
	// set channel
	ADMUX &= ADC_MUX_MASK;	
 49c:	8c e7       	ldi	r24, 0x7C	; 124
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 81       	ld	r18, Z
 4a4:	8c e7       	ldi	r24, 0x7C	; 124
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	20 7e       	andi	r18, 0xE0	; 224
 4aa:	fc 01       	movw	r30, r24
 4ac:	20 83       	st	Z, r18
	
	if (ch > 7) 
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	88 30       	cpi	r24, 0x08	; 8
 4b2:	b8 f0       	brcs	.+46     	; 0x4e2 <a2d_10bitCh+0x52>
	{
		ADCSRB |= 8;
 4b4:	8b e7       	ldi	r24, 0x7B	; 123
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 81       	ld	r18, Z
 4bc:	8b e7       	ldi	r24, 0x7B	; 123
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	28 60       	ori	r18, 0x08	; 8
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
		ADMUX |= (ch - 8);
 4c6:	8c e7       	ldi	r24, 0x7C	; 124
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	fc 01       	movw	r30, r24
 4cc:	80 81       	ld	r24, Z
 4ce:	98 2f       	mov	r25, r24
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	88 50       	subi	r24, 0x08	; 8
 4d4:	29 2f       	mov	r18, r25
 4d6:	28 2b       	or	r18, r24
 4d8:	8c e7       	ldi	r24, 0x7C	; 124
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18
 4e0:	13 c0       	rjmp	.+38     	; 0x508 <a2d_10bitCh+0x78>
	}
	else
	{
		ADCSRB &= 247;
 4e2:	8b e7       	ldi	r24, 0x7B	; 123
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 81       	ld	r18, Z
 4ea:	8b e7       	ldi	r24, 0x7B	; 123
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	27 7f       	andi	r18, 0xF7	; 247
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
		ADMUX |= ch;
 4f4:	8c e7       	ldi	r24, 0x7C	; 124
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	fc 01       	movw	r30, r24
 4fa:	30 81       	ld	r19, Z
 4fc:	8c e7       	ldi	r24, 0x7C	; 124
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	29 81       	ldd	r18, Y+1	; 0x01
 502:	23 2b       	or	r18, r19
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
	}
	
	// ADMUX |= ch;	//comment out this line when using on 16ch parts

	// start conversion
	ADCSRA |= (1<<ADSC);
 508:	8a e7       	ldi	r24, 0x7A	; 122
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	fc 01       	movw	r30, r24
 50e:	20 81       	ld	r18, Z
 510:	8a e7       	ldi	r24, 0x7A	; 122
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	20 64       	ori	r18, 0x40	; 64
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18

	while(ADCSRA & (1 << ADSC)) {} // wait until conversion complete 
 51a:	00 00       	nop
 51c:	8a e7       	ldi	r24, 0x7A	; 122
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	fc 01       	movw	r30, r24
 522:	80 81       	ld	r24, Z
 524:	88 2f       	mov	r24, r24
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	80 74       	andi	r24, 0x40	; 64
 52a:	99 27       	eor	r25, r25
 52c:	89 2b       	or	r24, r25
 52e:	b1 f7       	brne	.-20     	; 0x51c <a2d_10bitCh+0x8c>

	return ADC;                // read ADC (full 10 bits);
 530:	88 e7       	ldi	r24, 0x78	; 120
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	fc 01       	movw	r30, r24
 536:	80 81       	ld	r24, Z
 538:	91 81       	ldd	r25, Z+1	; 0x01
	// return (8 << ADCH)|(ADCL); // read ADC (full 10 bits);
    // return ADCL;                // read ADC (first 8 bits)
}
 53a:	0f 90       	pop	r0
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <MCP2515_CS_low>:
	
}


void MCP2515_CS_low(uint8_t CANbus)
{
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	0f 92       	push	r0
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	89 83       	std	Y+1, r24	; 0x01
	switch(CANbus)
 54e:	89 81       	ldd	r24, Y+1	; 0x01
 550:	88 2f       	mov	r24, r24
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	82 30       	cpi	r24, 0x02	; 2
 556:	91 05       	cpc	r25, r1
 558:	79 f0       	breq	.+30     	; 0x578 <MCP2515_CS_low+0x36>
 55a:	84 30       	cpi	r24, 0x04	; 4
 55c:	91 05       	cpc	r25, r1
 55e:	b1 f0       	breq	.+44     	; 0x58c <MCP2515_CS_low+0x4a>
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f4       	brne	.+60     	; 0x5a0 <MCP2515_CS_low+0x5e>
	{
		case MCP2515_CAN1:
			MCP2515_CAN1_PORT_CS &= ~(1<<MCP2515_CAN1_PIN_CS);
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	fc 01       	movw	r30, r24
 56a:	20 81       	ld	r18, Z
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	2e 7f       	andi	r18, 0xFE	; 254
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
			break;
 576:	15 c0       	rjmp	.+42     	; 0x5a2 <MCP2515_CS_low+0x60>
		case MCP2515_CAN2:
			MCP2515_CAN2_PORT_CS &= ~(1<<MCP2515_CAN2_PIN_CS);
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	fc 01       	movw	r30, r24
 57e:	20 81       	ld	r18, Z
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	2d 7f       	andi	r18, 0xFD	; 253
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
			break;
 58a:	0b c0       	rjmp	.+22     	; 0x5a2 <MCP2515_CS_low+0x60>
		case MCP2515_CAN3:
			MCP2515_CAN3_PORT_CS &= ~(1<<MCP2515_CAN3_PIN_CS);
 58c:	85 e2       	ldi	r24, 0x25	; 37
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	fc 01       	movw	r30, r24
 592:	20 81       	ld	r18, Z
 594:	85 e2       	ldi	r24, 0x25	; 37
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	2e 7f       	andi	r18, 0xFE	; 254
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
			break;
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <MCP2515_CS_low+0x60>
		default:
			break;
 5a0:	00 00       	nop
	}
}
 5a2:	00 00       	nop
 5a4:	0f 90       	pop	r0
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <MCP2515_CS_high>:

void MCP2515_CS_high(uint8_t CANbus)
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	0f 92       	push	r0
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	89 83       	std	Y+1, r24	; 0x01
	switch(CANbus)
 5b8:	89 81       	ldd	r24, Y+1	; 0x01
 5ba:	88 2f       	mov	r24, r24
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	91 05       	cpc	r25, r1
 5c2:	79 f0       	breq	.+30     	; 0x5e2 <MCP2515_CS_high+0x36>
 5c4:	84 30       	cpi	r24, 0x04	; 4
 5c6:	91 05       	cpc	r25, r1
 5c8:	b1 f0       	breq	.+44     	; 0x5f6 <MCP2515_CS_high+0x4a>
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f4       	brne	.+60     	; 0x60a <MCP2515_CS_high+0x5e>
	{
		case MCP2515_CAN1:
			MCP2515_CAN1_PORT_CS |= (1<<MCP2515_CAN1_PIN_CS);
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 81       	ld	r18, Z
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	21 60       	ori	r18, 0x01	; 1
 5dc:	fc 01       	movw	r30, r24
 5de:	20 83       	st	Z, r18
			break;
 5e0:	15 c0       	rjmp	.+42     	; 0x60c <MCP2515_CS_high+0x60>
		case MCP2515_CAN2:
			MCP2515_CAN2_PORT_CS |= (1<<MCP2515_CAN2_PIN_CS);
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 81       	ld	r18, Z
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	22 60       	ori	r18, 0x02	; 2
 5f0:	fc 01       	movw	r30, r24
 5f2:	20 83       	st	Z, r18
			break;
 5f4:	0b c0       	rjmp	.+22     	; 0x60c <MCP2515_CS_high+0x60>
		case MCP2515_CAN3:
			MCP2515_CAN3_PORT_CS |= (1<<MCP2515_CAN3_PIN_CS);
 5f6:	85 e2       	ldi	r24, 0x25	; 37
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 81       	ld	r18, Z
 5fe:	85 e2       	ldi	r24, 0x25	; 37
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	21 60       	ori	r18, 0x01	; 1
 604:	fc 01       	movw	r30, r24
 606:	20 83       	st	Z, r18
			break;
 608:	01 c0       	rjmp	.+2      	; 0x60c <MCP2515_CS_high+0x60>
		default:
			break;
 60a:	00 00       	nop
	}
}
 60c:	00 00       	nop
 60e:	0f 90       	pop	r0
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <MCP2515_PullCanPacket>:
		data++;
	}
		MCP2515_CS_high(CANbus);				//raise CS.
}
void MCP2515_PullCanPacket(uint8_t CANbus, uint8_t mob,uint8_t * numBytes , uint8_t * data, uint32_t * ID)
{
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	67 97       	sbiw	r28, 0x17	; 23
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	88 8b       	std	Y+16, r24	; 0x10
 630:	69 8b       	std	Y+17, r22	; 0x11
 632:	5b 8b       	std	Y+19, r21	; 0x13
 634:	4a 8b       	std	Y+18, r20	; 0x12
 636:	3d 8b       	std	Y+21, r19	; 0x15
 638:	2c 8b       	std	Y+20, r18	; 0x14
 63a:	1f 8b       	std	Y+23, r17	; 0x17
 63c:	0e 8b       	std	Y+22, r16	; 0x16

	//the following line combines the instruction(0b10010000), with: 0b100 for rxb0 or 0b000 for rxb1, and: 0b10 for data starting at data0, or 0b00 for SIDH
	uint8_t instruction = 0b10010000|((mob > 0x70)<<2);
 63e:	89 89       	ldd	r24, Y+17	; 0x11
 640:	81 37       	cpi	r24, 0x71	; 113
 642:	10 f0       	brcs	.+4      	; 0x648 <MCP2515_PullCanPacket+0x32>
 644:	84 e9       	ldi	r24, 0x94	; 148
 646:	01 c0       	rjmp	.+2      	; 0x64a <MCP2515_PullCanPacket+0x34>
 648:	80 e9       	ldi	r24, 0x90	; 144
 64a:	8a 83       	std	Y+2, r24	; 0x02
	MCP2515_CS_low(CANbus);			//lower CS.
 64c:	88 89       	ldd	r24, Y+16	; 0x10
 64e:	79 df       	rcall	.-270    	; 0x542 <MCP2515_CS_low>
	SPI_send_byte(instruction);							//send instruction for stream of data
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	d8 d0       	rcall	.+432    	; 0x804 <SPI_send_byte>
	//loop counts to 8 or 12 depending on whether bit 1 of instruction is set.
	uint8_t tmpData[13];
	for(uint8_t counter = 0; counter < 13; counter++)
 654:	19 82       	std	Y+1, r1	; 0x01
 656:	0f c0       	rjmp	.+30     	; 0x676 <MCP2515_PullCanPacket+0x60>
	{
		tmpData[counter] = SPI_send_byte(0x00);
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	08 2f       	mov	r16, r24
 65c:	10 e0       	ldi	r17, 0x00	; 0
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	d1 d0       	rcall	.+418    	; 0x804 <SPI_send_byte>
 662:	28 2f       	mov	r18, r24
 664:	ce 01       	movw	r24, r28
 666:	03 96       	adiw	r24, 0x03	; 3
 668:	80 0f       	add	r24, r16
 66a:	91 1f       	adc	r25, r17
 66c:	fc 01       	movw	r30, r24
 66e:	20 83       	st	Z, r18
	for(uint8_t counter = 0; counter < 13; counter++)
 670:	89 81       	ldd	r24, Y+1	; 0x01
 672:	8f 5f       	subi	r24, 0xFF	; 255
 674:	89 83       	std	Y+1, r24	; 0x01
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	8d 30       	cpi	r24, 0x0D	; 13
 67a:	70 f3       	brcs	.-36     	; 0x658 <MCP2515_PullCanPacket+0x42>
	}
	*ID  = ((uint32_t)(tmpData[0]&0b11111111)<<21);
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	88 2f       	mov	r24, r24
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	a0 e0       	ldi	r26, 0x00	; 0
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	07 2e       	mov	r0, r23
 688:	75 e1       	ldi	r23, 0x15	; 21
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	aa 1f       	adc	r26, r26
 690:	bb 1f       	adc	r27, r27
 692:	7a 95       	dec	r23
 694:	d1 f7       	brne	.-12     	; 0x68a <MCP2515_PullCanPacket+0x74>
 696:	70 2d       	mov	r23, r0
 698:	2e 89       	ldd	r18, Y+22	; 0x16
 69a:	3f 89       	ldd	r19, Y+23	; 0x17
 69c:	f9 01       	movw	r30, r18
 69e:	80 83       	st	Z, r24
 6a0:	91 83       	std	Z+1, r25	; 0x01
 6a2:	a2 83       	std	Z+2, r26	; 0x02
 6a4:	b3 83       	std	Z+3, r27	; 0x03
	*ID |= ((uint32_t)(tmpData[1]&0b11100000)<<13);
 6a6:	8e 89       	ldd	r24, Y+22	; 0x16
 6a8:	9f 89       	ldd	r25, Y+23	; 0x17
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 81       	ld	r18, Z
 6ae:	31 81       	ldd	r19, Z+1	; 0x01
 6b0:	42 81       	ldd	r20, Z+2	; 0x02
 6b2:	53 81       	ldd	r21, Z+3	; 0x03
 6b4:	8c 81       	ldd	r24, Y+4	; 0x04
 6b6:	88 2f       	mov	r24, r24
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	a0 e0       	ldi	r26, 0x00	; 0
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	07 2e       	mov	r0, r23
 6c0:	7d e0       	ldi	r23, 0x0D	; 13
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	aa 1f       	adc	r26, r26
 6c8:	bb 1f       	adc	r27, r27
 6ca:	7a 95       	dec	r23
 6cc:	d1 f7       	brne	.-12     	; 0x6c2 <MCP2515_PullCanPacket+0xac>
 6ce:	70 2d       	mov	r23, r0
 6d0:	88 27       	eor	r24, r24
 6d2:	99 27       	eor	r25, r25
 6d4:	ac 71       	andi	r26, 0x1C	; 28
 6d6:	bb 27       	eor	r27, r27
 6d8:	82 2b       	or	r24, r18
 6da:	93 2b       	or	r25, r19
 6dc:	a4 2b       	or	r26, r20
 6de:	b5 2b       	or	r27, r21
 6e0:	2e 89       	ldd	r18, Y+22	; 0x16
 6e2:	3f 89       	ldd	r19, Y+23	; 0x17
 6e4:	f9 01       	movw	r30, r18
 6e6:	80 83       	st	Z, r24
 6e8:	91 83       	std	Z+1, r25	; 0x01
 6ea:	a2 83       	std	Z+2, r26	; 0x02
 6ec:	b3 83       	std	Z+3, r27	; 0x03
	*ID |= ((uint32_t)(tmpData[1]&0b00000011)<<16);
 6ee:	8e 89       	ldd	r24, Y+22	; 0x16
 6f0:	9f 89       	ldd	r25, Y+23	; 0x17
 6f2:	fc 01       	movw	r30, r24
 6f4:	20 81       	ld	r18, Z
 6f6:	31 81       	ldd	r19, Z+1	; 0x01
 6f8:	42 81       	ldd	r20, Z+2	; 0x02
 6fa:	53 81       	ldd	r21, Z+3	; 0x03
 6fc:	8c 81       	ldd	r24, Y+4	; 0x04
 6fe:	88 2f       	mov	r24, r24
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	a0 e0       	ldi	r26, 0x00	; 0
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	dc 01       	movw	r26, r24
 708:	99 27       	eor	r25, r25
 70a:	88 27       	eor	r24, r24
 70c:	88 27       	eor	r24, r24
 70e:	99 27       	eor	r25, r25
 710:	a3 70       	andi	r26, 0x03	; 3
 712:	bb 27       	eor	r27, r27
 714:	82 2b       	or	r24, r18
 716:	93 2b       	or	r25, r19
 718:	a4 2b       	or	r26, r20
 71a:	b5 2b       	or	r27, r21
 71c:	2e 89       	ldd	r18, Y+22	; 0x16
 71e:	3f 89       	ldd	r19, Y+23	; 0x17
 720:	f9 01       	movw	r30, r18
 722:	80 83       	st	Z, r24
 724:	91 83       	std	Z+1, r25	; 0x01
 726:	a2 83       	std	Z+2, r26	; 0x02
 728:	b3 83       	std	Z+3, r27	; 0x03
	*ID |= ((uint32_t)(tmpData[2]&0b11111111)<<8);
 72a:	8e 89       	ldd	r24, Y+22	; 0x16
 72c:	9f 89       	ldd	r25, Y+23	; 0x17
 72e:	fc 01       	movw	r30, r24
 730:	20 81       	ld	r18, Z
 732:	31 81       	ldd	r19, Z+1	; 0x01
 734:	42 81       	ldd	r20, Z+2	; 0x02
 736:	53 81       	ldd	r21, Z+3	; 0x03
 738:	8d 81       	ldd	r24, Y+5	; 0x05
 73a:	88 2f       	mov	r24, r24
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	a0 e0       	ldi	r26, 0x00	; 0
 740:	b0 e0       	ldi	r27, 0x00	; 0
 742:	ba 2f       	mov	r27, r26
 744:	a9 2f       	mov	r26, r25
 746:	98 2f       	mov	r25, r24
 748:	88 27       	eor	r24, r24
 74a:	82 2b       	or	r24, r18
 74c:	93 2b       	or	r25, r19
 74e:	a4 2b       	or	r26, r20
 750:	b5 2b       	or	r27, r21
 752:	2e 89       	ldd	r18, Y+22	; 0x16
 754:	3f 89       	ldd	r19, Y+23	; 0x17
 756:	f9 01       	movw	r30, r18
 758:	80 83       	st	Z, r24
 75a:	91 83       	std	Z+1, r25	; 0x01
 75c:	a2 83       	std	Z+2, r26	; 0x02
 75e:	b3 83       	std	Z+3, r27	; 0x03
	*ID |= ((uint32_t)(tmpData[3]&0b11111111));
 760:	8e 89       	ldd	r24, Y+22	; 0x16
 762:	9f 89       	ldd	r25, Y+23	; 0x17
 764:	fc 01       	movw	r30, r24
 766:	20 81       	ld	r18, Z
 768:	31 81       	ldd	r19, Z+1	; 0x01
 76a:	42 81       	ldd	r20, Z+2	; 0x02
 76c:	53 81       	ldd	r21, Z+3	; 0x03
 76e:	8e 81       	ldd	r24, Y+6	; 0x06
 770:	88 2f       	mov	r24, r24
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	a0 e0       	ldi	r26, 0x00	; 0
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	82 2b       	or	r24, r18
 77a:	93 2b       	or	r25, r19
 77c:	a4 2b       	or	r26, r20
 77e:	b5 2b       	or	r27, r21
 780:	2e 89       	ldd	r18, Y+22	; 0x16
 782:	3f 89       	ldd	r19, Y+23	; 0x17
 784:	f9 01       	movw	r30, r18
 786:	80 83       	st	Z, r24
 788:	91 83       	std	Z+1, r25	; 0x01
 78a:	a2 83       	std	Z+2, r26	; 0x02
 78c:	b3 83       	std	Z+3, r27	; 0x03
	*numBytes = tmpData[12] & 0b00001111;
 78e:	8f 85       	ldd	r24, Y+15	; 0x0f
 790:	28 2f       	mov	r18, r24
 792:	2f 70       	andi	r18, 0x0F	; 15
 794:	8a 89       	ldd	r24, Y+18	; 0x12
 796:	9b 89       	ldd	r25, Y+19	; 0x13
 798:	fc 01       	movw	r30, r24
 79a:	20 83       	st	Z, r18
	memcpy(data, &tmpData[4], *numBytes);
 79c:	8a 89       	ldd	r24, Y+18	; 0x12
 79e:	9b 89       	ldd	r25, Y+19	; 0x13
 7a0:	fc 01       	movw	r30, r24
 7a2:	80 81       	ld	r24, Z
 7a4:	48 2f       	mov	r20, r24
 7a6:	50 e0       	ldi	r21, 0x00	; 0
 7a8:	ce 01       	movw	r24, r28
 7aa:	03 96       	adiw	r24, 0x03	; 3
 7ac:	9c 01       	movw	r18, r24
 7ae:	2c 5f       	subi	r18, 0xFC	; 252
 7b0:	3f 4f       	sbci	r19, 0xFF	; 255
 7b2:	8c 89       	ldd	r24, Y+20	; 0x14
 7b4:	9d 89       	ldd	r25, Y+21	; 0x15
 7b6:	b9 01       	movw	r22, r18
	
	
	MCP2515_CS_high(CANbus);				//raise CS.
 7b8:	32 d2       	rcall	.+1124   	; 0xc1e <memcpy>
 7ba:	88 89       	ldd	r24, Y+16	; 0x10
 7bc:	f7 de       	rcall	.-530    	; 0x5ac <MCP2515_CS_high>
}
 7be:	00 00       	nop
 7c0:	67 96       	adiw	r28, 0x17	; 23
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	f8 94       	cli
 7c6:	de bf       	out	0x3e, r29	; 62
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	cd bf       	out	0x3d, r28	; 61
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	1f 91       	pop	r17
 7d2:	0f 91       	pop	r16
 7d4:	08 95       	ret

000007d6 <MCP2515_check_receive_status>:
	//PORTC |= (1<<PINC7);		
}


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
 7d6:	cf 93       	push	r28
 7d8:	df 93       	push	r29
 7da:	00 d0       	rcall	.+0      	; 0x7dc <MCP2515_check_receive_status+0x6>
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62
 7e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 7e2:	8a 81       	ldd	r24, Y+2	; 0x02
 7e4:	ae de       	rcall	.-676    	; 0x542 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
 7e6:	80 eb       	ldi	r24, 0xB0	; 176
 7e8:	0d d0       	rcall	.+26     	; 0x804 <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	0b d0       	rcall	.+22     	; 0x804 <SPI_send_byte>
 7ee:	89 83       	std	Y+1, r24	; 0x01
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	08 d0       	rcall	.+16     	; 0x804 <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
 7f4:	8a 81       	ldd	r24, Y+2	; 0x02
 7f6:	da de       	rcall	.-588    	; 0x5ac <MCP2515_CS_high>
 7f8:	89 81       	ldd	r24, Y+1	; 0x01
	return status;
 7fa:	0f 90       	pop	r0
}
 7fc:	0f 90       	pop	r0
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
 804:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 806:	0d b4       	in	r0, 0x2d	; 45
 808:	07 fe       	sbrs	r0, 7
 80a:	fd cf       	rjmp	.-6      	; 0x806 <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
 80c:	8e b5       	in	r24, 0x2e	; 46
}
 80e:	08 95       	ret

00000810 <__vector_25>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
//************************************************************************
//Function: UART Receive Complete interrupt
//Purpose:  called when the UART has received a character
//************************************************************************
{
 810:	2f 93       	push	r18
 812:	2f b7       	in	r18, 0x3f	; 63
 814:	2f 93       	push	r18
 816:	2b b7       	in	r18, 0x3b	; 59
 818:	2f 93       	push	r18
 81a:	8f 93       	push	r24
 81c:	9f 93       	push	r25
 81e:	ef 93       	push	r30
 820:	ff 93       	push	r31
    unsigned char lastRxError;

		
 
    // read UART status register and UART data register
    usr  = UART0_STATUS;
 822:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 826:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    // calculate buffer index 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 82a:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <UART_RxHead>
 82e:	ef 5f       	subi	r30, 0xFF	; 255
 830:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 832:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <UART_RxTail>
 836:	2e 17       	cp	r18, r30
 838:	99 f0       	breq	.+38     	; 0x860 <__vector_25+0x50>
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 83a:	88 71       	andi	r24, 0x18	; 24
        // error: receive buffer overflow 
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        // store new index 
        UART_RxHead = tmphead;
 83c:	e0 93 4f 02 	sts	0x024F, r30	; 0x80024f <UART_RxHead>
        // store received data in buffer 
       UART_RxBuf[tmphead] = data;
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	ee 5a       	subi	r30, 0xAE	; 174
 844:	fd 4f       	sbci	r31, 0xFD	; 253
 846:	90 83       	st	Z, r25
    }
    UART_LastRxError = lastRxError;   
 848:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <UART_LastRxError>
	
}
 84c:	ff 91       	pop	r31
 84e:	ef 91       	pop	r30
 850:	9f 91       	pop	r25
 852:	8f 91       	pop	r24
 854:	2f 91       	pop	r18
 856:	2b bf       	out	0x3b, r18	; 59
 858:	2f 91       	pop	r18
 85a:	2f bf       	out	0x3f, r18	; 63
 85c:	2f 91       	pop	r18
 85e:	18 95       	reti
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	f2 cf       	rjmp	.-28     	; 0x848 <__vector_25+0x38>

00000864 <__vector_36>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
//************************************************************************
//Function: UART Receive Complete interrupt
//Purpose:  called when the UART has received a character
//************************************************************************
{
 864:	2f 93       	push	r18
 866:	2f b7       	in	r18, 0x3f	; 63
 868:	2f 93       	push	r18
 86a:	2b b7       	in	r18, 0x3b	; 59
 86c:	2f 93       	push	r18
 86e:	8f 93       	push	r24
 870:	9f 93       	push	r25
 872:	ef 93       	push	r30
 874:	ff 93       	push	r31
    unsigned char lastRxError1;

		
 
    // read UART status register and UART data register
    usr1  = UART1_STATUS;
 876:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    data1 = UART1_DATA;
 87a:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
#elif defined ( ATMEGA_UART )
    lastRxError1 = (usr1 & (_BV(FE)|_BV(DOR)) );
#endif
        
    // calculate buffer index 
    tmphead1 = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
 87e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <UART1_RxHead>
 882:	ef 5f       	subi	r30, 0xFF	; 255
 884:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead1 == UART1_RxTail ) {
 886:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <UART1_RxTail>
 88a:	2e 17       	cp	r18, r30
 88c:	99 f0       	breq	.+38     	; 0x8b4 <__vector_36+0x50>
    lastRxError1 = (usr1 & (_BV(FE0)|_BV(DOR0)) );
 88e:	88 71       	andi	r24, 0x18	; 24
        // error: receive buffer overflow 
        lastRxError1 = UART_BUFFER_OVERFLOW >> 8;
    }else{
        // store new index 
        UART1_RxHead = tmphead1;
 890:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <UART1_RxHead>
        // store received data in buffer 
       UART1_RxBuf[tmphead1] = data1;
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	e3 5f       	subi	r30, 0xF3	; 243
 898:	fd 4f       	sbci	r31, 0xFD	; 253
 89a:	90 83       	st	Z, r25
    }
    UART1_LastRxError = lastRxError1;   
 89c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <UART1_LastRxError>
	
}
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	2f 91       	pop	r18
 8aa:	2b bf       	out	0x3b, r18	; 59
 8ac:	2f 91       	pop	r18
 8ae:	2f bf       	out	0x3f, r18	; 63
 8b0:	2f 91       	pop	r18
 8b2:	18 95       	reti
        lastRxError1 = UART_BUFFER_OVERFLOW >> 8;
 8b4:	82 e0       	ldi	r24, 0x02	; 2
 8b6:	f2 cf       	rjmp	.-28     	; 0x89c <__vector_36+0x38>

000008b8 <__vector_26>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 8b8:	8f 93       	push	r24
 8ba:	8f b7       	in	r24, 0x3f	; 63
 8bc:	8f 93       	push	r24
 8be:	8b b7       	in	r24, 0x3b	; 59
 8c0:	8f 93       	push	r24
 8c2:	9f 93       	push	r25
 8c4:	ef 93       	push	r30
 8c6:	ff 93       	push	r31
    unsigned char tmptail;
    
    if ( UART_TxHead != UART_TxTail) {
 8c8:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <UART_TxHead>
 8cc:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <UART_TxTail>
 8d0:	98 17       	cp	r25, r24
 8d2:	a9 f0       	breq	.+42     	; 0x8fe <__vector_26+0x46>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 8d4:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <UART_TxTail>
 8d8:	ef 5f       	subi	r30, 0xFF	; 255
 8da:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 8dc:	e0 93 50 02 	sts	0x0250, r30	; 0x800250 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	ee 58       	subi	r30, 0x8E	; 142
 8e4:	fd 4f       	sbci	r31, 0xFD	; 253
 8e6:	80 81       	ld	r24, Z
 8e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1 << UART0_UDRIE);
    }
}
 8ec:	ff 91       	pop	r31
 8ee:	ef 91       	pop	r30
 8f0:	9f 91       	pop	r25
 8f2:	8f 91       	pop	r24
 8f4:	8b bf       	out	0x3b, r24	; 59
 8f6:	8f 91       	pop	r24
 8f8:	8f bf       	out	0x3f, r24	; 63
 8fa:	8f 91       	pop	r24
 8fc:	18 95       	reti
        UART0_CONTROL &= ~(1 << UART0_UDRIE);
 8fe:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 902:	8f 7d       	andi	r24, 0xDF	; 223
 904:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
 908:	f1 cf       	rjmp	.-30     	; 0x8ec <__vector_26+0x34>

0000090a <__vector_37>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 90a:	8f 93       	push	r24
 90c:	8f b7       	in	r24, 0x3f	; 63
 90e:	8f 93       	push	r24
 910:	8b b7       	in	r24, 0x3b	; 59
 912:	8f 93       	push	r24
 914:	9f 93       	push	r25
 916:	ef 93       	push	r30
 918:	ff 93       	push	r31
    unsigned char tmptail1;

    
    if ( UART1_TxHead != UART1_TxTail) {
 91a:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <UART1_TxHead>
 91e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <UART1_TxTail>
 922:	98 17       	cp	r25, r24
 924:	a9 f0       	breq	.+42     	; 0x950 <__vector_37+0x46>
        /* calculate and store new buffer index */
        tmptail1 = (UART1_TxTail + 1) & UART1_TX_BUFFER_MASK;
 926:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <UART1_TxTail>
 92a:	ef 5f       	subi	r30, 0xFF	; 255
 92c:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail1;
 92e:	e0 93 0b 02 	sts	0x020B, r30	; 0x80020b <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail1];  /* start transmission */
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	e3 5d       	subi	r30, 0xD3	; 211
 936:	fd 4f       	sbci	r31, 0xFD	; 253
 938:	80 81       	ld	r24, Z
 93a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~(1 << UART1_UDRIE);
    }
}
 93e:	ff 91       	pop	r31
 940:	ef 91       	pop	r30
 942:	9f 91       	pop	r25
 944:	8f 91       	pop	r24
 946:	8b bf       	out	0x3b, r24	; 59
 948:	8f 91       	pop	r24
 94a:	8f bf       	out	0x3f, r24	; 63
 94c:	8f 91       	pop	r24
 94e:	18 95       	reti
        UART1_CONTROL &= ~(1 << UART1_UDRIE);
 950:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 954:	8f 7d       	andi	r24, 0xDF	; 223
 956:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
}
 95a:	f1 cf       	rjmp	.-30     	; 0x93e <__vector_37+0x34>

0000095c <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 95c:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <UART_TxHead>
    UART_TxTail = 0;
 960:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <UART_TxTail>
    UART_RxHead = 0;
 964:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <UART_RxHead>
    UART_RxTail = 0;
 968:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <UART_RxTail>
    
	CLKPR = (1<<CLKPCE);  	//enable clock prescaler change
 96c:	e1 e6       	ldi	r30, 0x61	; 97
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	80 e8       	ldi	r24, 0x80	; 128
 972:	80 83       	st	Z, r24
	CLKPR = 0x00;			//clock divide = 1  so  16MHz/1 = 16MHz
 974:	10 82       	st	Z, r1

  	UBRR0H = 0;
 976:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = 103;	//19200 baud for laptop/LCD info panel
 97a:	87 e6       	ldi	r24, 0x67	; 103
 97c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
	UCSR0A = 2;		//2x on
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 24;	//tx and rx on  AND rxie on for testing
 986:	88 e1       	ldi	r24, 0x18	; 24
 988:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    UCSR0C = 6;		//8 - 1 - N
 98c:	86 e0       	ldi	r24, 0x06	; 6
 98e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

}/* uart_init */
 992:	08 95       	ret

00000994 <uart1_init>:

void uart1_init(unsigned int baudrate)
{
	UART1_TxHead = 0;
 994:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <UART1_TxHead>
    UART1_TxTail = 0;
 998:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <UART1_TxTail>
    UART1_RxHead = 0;
 99c:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <UART1_RxHead>
    UART1_RxTail = 0;
 9a0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <UART1_RxTail>
	
	CLKPR = (1<<CLKPCE);  	//enable clock prescaler change
 9a4:	e1 e6       	ldi	r30, 0x61	; 97
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 e8       	ldi	r24, 0x80	; 128
 9aa:	80 83       	st	Z, r24
	CLKPR = 0x00;			//clock divide = 1  so  16MHz/1 = 16MHz
 9ac:	10 82       	st	Z, r1
	
	UBRR1H = 0;
 9ae:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    UBRR1L = 103;	// now 250k for CAN  19200 for testing    //9600 baud for gsm modem (207 with 2x on)
 9b2:	87 e6       	ldi	r24, 0x67	; 103
 9b4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
	UCSR1A = 2;		//2x on
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = 24;	//tx and rx on AND rxie on
 9be:	88 e1       	ldi	r24, 0x18	; 24
 9c0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    UCSR1C = 6;		//8 - 1 - N
 9c4:	86 e0       	ldi	r24, 0x06	; 6
 9c6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

}/* uart1_init */
 9ca:	08 95       	ret

000009cc <external_interrupt_init>:
 * 
 * Reference: ATmega Datasheet Chapter 15 (External Interrupts)
 * 
 */
void external_interrupt_init()
{
 9cc:	cf 93       	push	r28
 9ce:	df 93       	push	r29
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
	//INT1 for CAN1, INT0 for CAN2, PCINT7 for CAN3
	EICRA |= (2<<ISC00)|(2<<ISC10);
 9d4:	89 e6       	ldi	r24, 0x69	; 105
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	fc 01       	movw	r30, r24
 9da:	20 81       	ld	r18, Z
 9dc:	89 e6       	ldi	r24, 0x69	; 105
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	2a 60       	ori	r18, 0x0A	; 10
 9e2:	fc 01       	movw	r30, r24
 9e4:	20 83       	st	Z, r18
	EIMSK  = (1<<INT0) | (1<<INT1);
 9e6:	8d e3       	ldi	r24, 0x3D	; 61
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	23 e0       	ldi	r18, 0x03	; 3
 9ec:	fc 01       	movw	r30, r24
 9ee:	20 83       	st	Z, r18
	//Enable interrupts for PCINT7:0
	PCICR  = (1<<PCIE0)|(1<<PCIE1);
 9f0:	88 e6       	ldi	r24, 0x68	; 104
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	23 e0       	ldi	r18, 0x03	; 3
 9f6:	fc 01       	movw	r30, r24
 9f8:	20 83       	st	Z, r18
	PCMSK0 = (1<<PCINT7);
 9fa:	8b e6       	ldi	r24, 0x6B	; 107
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	20 e8       	ldi	r18, 0x80	; 128
 a00:	fc 01       	movw	r30, r24
 a02:	20 83       	st	Z, r18
	PCMSK1 = (1<<PCINT15);
 a04:	8c e6       	ldi	r24, 0x6C	; 108
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	20 e8       	ldi	r18, 0x80	; 128
 a0a:	fc 01       	movw	r30, r24
 a0c:	20 83       	st	Z, r18
}
 a0e:	00 00       	nop
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	08 95       	ret

00000a16 <io_init>:
 * 
 * Reference: ATmega Datasheet Chapter 13 (I/O-Ports)
 * 
 */
void io_init()
{
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
	//pins 8, 9 and 14 for MCP2515_STB high so the things respond (PE6, PE7, PH2)
	DDRE  = 0b11000010;		//PE0 = RS232 RX1; PE1 = RS232 TX1;  PE6 = STB_CAN1; PE7 = STB_CAN2;
 a1e:	8d e2       	ldi	r24, 0x2D	; 45
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	22 ec       	ldi	r18, 0xC2	; 194
 a24:	fc 01       	movw	r30, r24
 a26:	20 83       	st	Z, r18
	PORTE = 0b00000000;		
 a28:	8e e2       	ldi	r24, 0x2E	; 46
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	fc 01       	movw	r30, r24
 a2e:	10 82       	st	Z, r1
	DDRH  = 0b00000111;		//PH0 = CS_CAN1; PH1 = CS_CAN2; PH2 = STB_CAN3
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	91 e0       	ldi	r25, 0x01	; 1
 a34:	27 e0       	ldi	r18, 0x07	; 7
 a36:	fc 01       	movw	r30, r24
 a38:	20 83       	st	Z, r18
	PORTH = 0b00000011;		//CS_CAN1 high; CS_CAN2 high;
 a3a:	82 e0       	ldi	r24, 0x02	; 2
 a3c:	91 e0       	ldi	r25, 0x01	; 1
 a3e:	23 e0       	ldi	r18, 0x03	; 3
 a40:	fc 01       	movw	r30, r24
 a42:	20 83       	st	Z, r18
	//pins 12, 13, 19 for the CS for each MCP2515 PH0, PH1, PB0)

	//pin 21 for MOSI, pin 20  for SCK (PB2, PB1)
	DDRB  = 0b01100111;		//PB0 = CS_CAN3; PB1 = SCK; PB2 = MOSI; PB3 = MISO; PB5 = High drive A; PB6 = Low drive A; PB7 = CAN3_INT; 
 a44:	84 e2       	ldi	r24, 0x24	; 36
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	27 e6       	ldi	r18, 0x67	; 103
 a4a:	fc 01       	movw	r30, r24
 a4c:	20 83       	st	Z, r18
	PORTB = 0b00000001;		//set CS_CAN3 high;
 a4e:	85 e2       	ldi	r24, 0x25	; 37
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	21 e0       	ldi	r18, 0x01	; 1
 a54:	fc 01       	movw	r30, r24
 a56:	20 83       	st	Z, r18
	
	DDRL  = 0b00011000;		//PB3 = High drive B; PB4 = Low Drive B;
 a58:	8a e0       	ldi	r24, 0x0A	; 10
 a5a:	91 e0       	ldi	r25, 0x01	; 1
 a5c:	28 e1       	ldi	r18, 0x18	; 24
 a5e:	fc 01       	movw	r30, r24
 a60:	20 83       	st	Z, r18
	PORTL = 0b00000000;
 a62:	8b e0       	ldi	r24, 0x0B	; 11
 a64:	91 e0       	ldi	r25, 0x01	; 1
 a66:	fc 01       	movw	r30, r24
 a68:	10 82       	st	Z, r1
	
	DDRD  = 0b11001000;		//PD0 = CAN2_INT; PD1 = CAN1_INT; PD2 = RS232 RX2; PD3 = RS232 TX2; PD6 = CAN1_TXPIN; PD7 = CAN2_TXPIN;
 a6a:	8a e2       	ldi	r24, 0x2A	; 42
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	28 ec       	ldi	r18, 0xC8	; 200
 a70:	fc 01       	movw	r30, r24
 a72:	20 83       	st	Z, r18
	DDRD  = 0b00000000;
 a74:	8a e2       	ldi	r24, 0x2A	; 42
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	fc 01       	movw	r30, r24
 a7a:	10 82       	st	Z, r1
	
	DDRC  = 0b00001000;		//PC3 = CAN3_TXPIN;
 a7c:	87 e2       	ldi	r24, 0x27	; 39
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	28 e0       	ldi	r18, 0x08	; 8
 a82:	fc 01       	movw	r30, r24
 a84:	20 83       	st	Z, r18
	PORTC = 0b00000000;
 a86:	88 e2       	ldi	r24, 0x28	; 40
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	fc 01       	movw	r30, r24
 a8c:	10 82       	st	Z, r1
	
	DDRJ  = 0b00000000;		//PORTJ is used for digital input;
 a8e:	84 e0       	ldi	r24, 0x04	; 4
 a90:	91 e0       	ldi	r25, 0x01	; 1
 a92:	fc 01       	movw	r30, r24
 a94:	10 82       	st	Z, r1
	
	DDRA  = 0b00011000;		//PA3 = ENABLE_B; PA4 = ENABLE_A; PA1 = dig input; PA2 = dig input;
 a96:	81 e2       	ldi	r24, 0x21	; 33
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	28 e1       	ldi	r18, 0x18	; 24
 a9c:	fc 01       	movw	r30, r24
 a9e:	20 83       	st	Z, r18
	PORTA = 0b00010000;
 aa0:	82 e2       	ldi	r24, 0x22	; 34
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	20 e1       	ldi	r18, 0x10	; 16
 aa6:	fc 01       	movw	r30, r24
 aa8:	20 83       	st	Z, r18

	DDRK  = 0b00100000;		//PK5 = debugging LED;
 aaa:	87 e0       	ldi	r24, 0x07	; 7
 aac:	91 e0       	ldi	r25, 0x01	; 1
 aae:	20 e2       	ldi	r18, 0x20	; 32
 ab0:	fc 01       	movw	r30, r24
 ab2:	20 83       	st	Z, r18
	// PORTK = 0b00100000;
	
	// Enable external interrupts in order for the CAN bus to communicate with us
	external_interrupt_init();
 ab4:	8b df       	rcall	.-234    	; 0x9cc <external_interrupt_init>
}
 ab6:	00 00       	nop
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	08 95       	ret

00000abe <firmware_init>:
/**
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
void firmware_init()
{
 abe:	cf 93       	push	r28
 ac0:	df 93       	push	r29
 ac2:	cd b7       	in	r28, 0x3d	; 61
 ac4:	de b7       	in	r29, 0x3e	; 62
	io_init();
 ac6:	a7 df       	rcall	.-178    	; 0xa16 <io_init>
	// SPI_init();
    // // uart_init(UART_BAUD_SELECT(19200, 16UL));
    uart_init(19200);
 ac8:	80 e0       	ldi	r24, 0x00	; 0
 aca:	9b e4       	ldi	r25, 0x4B	; 75
 acc:	47 df       	rcall	.-370    	; 0x95c <uart_init>
    uart1_init(19200);
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	9b e4       	ldi	r25, 0x4B	; 75
 ad2:	60 df       	rcall	.-320    	; 0x994 <uart1_init>
	a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); // Turns ON ADC
 ad4:	61 e0       	ldi	r22, 0x01	; 1
 ad6:	86 e0       	ldi	r24, 0x06	; 6
 ad8:	62 dc       	rcall	.-1852   	; 0x39e <a2dInit>
 ada:	00 00       	nop
	// 	inverters[i].RPM = 0;
	// 	inverters[i].temperature = 0;
	// }

	// accumulators[0].ID=ACCUMULATOR_FRONT;
}
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	08 95       	ret

00000ae2 <timer_init>:
 ae2:	cf 93       	push	r28
 * 
 * Reference: ATmega Datasheet Chapter 17 (16-bit Timer/Counter)
 * 
 */
void timer_init()
{
 ae4:	df 93       	push	r29
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
    // http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf
    // Set up 1Khz timer
    TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
 aea:	84 e4       	ldi	r24, 0x44	; 68
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	fc 01       	movw	r30, r24
 af0:	20 81       	ld	r18, Z
 af2:	84 e4       	ldi	r24, 0x44	; 68
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	22 60       	ori	r18, 0x02	; 2
 af8:	fc 01       	movw	r30, r24
 afa:	20 83       	st	Z, r18
    TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
 afc:	85 e4       	ldi	r24, 0x45	; 69
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	fc 01       	movw	r30, r24
 b02:	20 81       	ld	r18, Z
 b04:	85 e4       	ldi	r24, 0x45	; 69
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	23 60       	ori	r18, 0x03	; 3
 b0a:	fc 01       	movw	r30, r24
 b0c:	20 83       	st	Z, r18
    OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
 b0e:	87 e4       	ldi	r24, 0x47	; 71
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	2a ef       	ldi	r18, 0xFA	; 250
 b14:	fc 01       	movw	r30, r24
 b16:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);                // Enable COMPA interupt
 b18:	8e e6       	ldi	r24, 0x6E	; 110
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	fc 01       	movw	r30, r24
 b1e:	20 81       	ld	r18, Z
 b20:	8e e6       	ldi	r24, 0x6E	; 110
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	22 60       	ori	r18, 0x02	; 2
 b26:	fc 01       	movw	r30, r24
 b28:	20 83       	st	Z, r18

    // Set up 50Hz comm timer
	TCCR1A = 0b00000000;			//
 b2a:	80 e8       	ldi	r24, 0x80	; 128
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	fc 01       	movw	r30, r24
 b30:	10 82       	st	Z, r1
	TCCR1B = 0b00001101;			// CTC mode & prescale clock by 1024
 b32:	81 e8       	ldi	r24, 0x81	; 129
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	2d e0       	ldi	r18, 0x0D	; 13
 b38:	fc 01       	movw	r30, r24
 b3a:	20 83       	st	Z, r18
	OCR1A =  15000;					// 312 gives 50Hz main comms speed
 b3c:	88 e8       	ldi	r24, 0x88	; 136
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	28 e9       	ldi	r18, 0x98	; 152
 b42:	3a e3       	ldi	r19, 0x3A	; 58
 b44:	fc 01       	movw	r30, r24
 b46:	31 83       	std	Z+1, r19	; 0x01
 b48:	20 83       	st	Z, r18
	TIMSK1 = 0b00000010;			// Turn on compare interrupt for OCR1A
 b4a:	8f e6       	ldi	r24, 0x6F	; 111
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	22 e0       	ldi	r18, 0x02	; 2
 b50:	fc 01       	movw	r30, r24
 b52:	20 83       	st	Z, r18
 b54:	00 00       	nop
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	08 95       	ret

00000b5c <CAN_pull_packet>:
        status                      // SubID?
    );
}

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
 b5c:	0f 93       	push	r16
 b5e:	1f 93       	push	r17
 b60:	cf 93       	push	r28
 b62:	df 93       	push	r29
 b64:	cd b7       	in	r28, 0x3d	; 61
 b66:	de b7       	in	r29, 0x3e	; 62
 b68:	28 97       	sbiw	r28, 0x08	; 8
 b6a:	0f b6       	in	r0, 0x3f	; 63
 b6c:	f8 94       	cli
 b6e:	de bf       	out	0x3e, r29	; 62
 b70:	0f be       	out	0x3f, r0	; 63
 b72:	cd bf       	out	0x3d, r28	; 61
 b74:	8a 83       	std	Y+2, r24	; 0x02
 b76:	7c 83       	std	Y+4, r23	; 0x04
 b78:	6b 83       	std	Y+3, r22	; 0x03
 b7a:	5e 83       	std	Y+6, r21	; 0x06
 b7c:	4d 83       	std	Y+5, r20	; 0x05
 b7e:	38 87       	std	Y+8, r19	; 0x08
 b80:	2f 83       	std	Y+7, r18	; 0x07
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
 b82:	8a 81       	ldd	r24, Y+2	; 0x02
 b84:	28 de       	rcall	.-944    	; 0x7d6 <MCP2515_check_receive_status>
 b86:	89 83       	std	Y+1, r24	; 0x01
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
 b88:	89 81       	ldd	r24, Y+1	; 0x01
 b8a:	82 95       	swap	r24
 b8c:	86 95       	lsr	r24
 b8e:	86 95       	lsr	r24
 b90:	83 70       	andi	r24, 0x03	; 3
 b92:	88 2f       	mov	r24, r24
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	82 30       	cpi	r24, 0x02	; 2
 b98:	91 05       	cpc	r25, r1
 b9a:	89 f0       	breq	.+34     	; 0xbbe <CAN_pull_packet+0x62>
 b9c:	83 30       	cpi	r24, 0x03	; 3
 b9e:	91 05       	cpc	r25, r1
 ba0:	d1 f0       	breq	.+52     	; 0xbd6 <CAN_pull_packet+0x7a>
 ba2:	01 97       	sbiw	r24, 0x01	; 1
 ba4:	79 f5       	brne	.+94     	; 0xc04 <CAN_pull_packet+0xa8>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 ba6:	4f 81       	ldd	r20, Y+7	; 0x07
 ba8:	58 85       	ldd	r21, Y+8	; 0x08
 baa:	2d 81       	ldd	r18, Y+5	; 0x05
 bac:	3e 81       	ldd	r19, Y+6	; 0x06
 bae:	8b 81       	ldd	r24, Y+3	; 0x03
 bb0:	9c 81       	ldd	r25, Y+4	; 0x04
 bb2:	8a 01       	movw	r16, r20
 bb4:	ac 01       	movw	r20, r24
 bb6:	61 e6       	ldi	r22, 0x61	; 97
 bb8:	8a 81       	ldd	r24, Y+2	; 0x02
 bba:	2d dd       	rcall	.-1446   	; 0x616 <MCP2515_PullCanPacket>
			break;
 bbc:	24 c0       	rjmp	.+72     	; 0xc06 <CAN_pull_packet+0xaa>
		case 2: // Message in RXB1
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 bbe:	4f 81       	ldd	r20, Y+7	; 0x07
 bc0:	58 85       	ldd	r21, Y+8	; 0x08
 bc2:	2d 81       	ldd	r18, Y+5	; 0x05
 bc4:	3e 81       	ldd	r19, Y+6	; 0x06
 bc6:	8b 81       	ldd	r24, Y+3	; 0x03
 bc8:	9c 81       	ldd	r25, Y+4	; 0x04
 bca:	8a 01       	movw	r16, r20
 bcc:	ac 01       	movw	r20, r24
 bce:	61 e6       	ldi	r22, 0x61	; 97
 bd0:	8a 81       	ldd	r24, Y+2	; 0x02
 bd2:	21 dd       	rcall	.-1470   	; 0x616 <MCP2515_PullCanPacket>
			break;
 bd4:	18 c0       	rjmp	.+48     	; 0xc06 <CAN_pull_packet+0xaa>
		case 3: // Message in both buffers
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 bd6:	4f 81       	ldd	r20, Y+7	; 0x07
 bd8:	58 85       	ldd	r21, Y+8	; 0x08
 bda:	2d 81       	ldd	r18, Y+5	; 0x05
 bdc:	3e 81       	ldd	r19, Y+6	; 0x06
 bde:	8b 81       	ldd	r24, Y+3	; 0x03
 be0:	9c 81       	ldd	r25, Y+4	; 0x04
 be2:	8a 01       	movw	r16, r20
 be4:	ac 01       	movw	r20, r24
 be6:	61 e6       	ldi	r22, 0x61	; 97
 be8:	8a 81       	ldd	r24, Y+2	; 0x02
 bea:	15 dd       	rcall	.-1494   	; 0x616 <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 bec:	4f 81       	ldd	r20, Y+7	; 0x07
 bee:	58 85       	ldd	r21, Y+8	; 0x08
 bf0:	2d 81       	ldd	r18, Y+5	; 0x05
 bf2:	3e 81       	ldd	r19, Y+6	; 0x06
 bf4:	8b 81       	ldd	r24, Y+3	; 0x03
 bf6:	9c 81       	ldd	r25, Y+4	; 0x04
 bf8:	8a 01       	movw	r16, r20
 bfa:	ac 01       	movw	r20, r24
 bfc:	61 e6       	ldi	r22, 0x61	; 97
 bfe:	8a 81       	ldd	r24, Y+2	; 0x02
 c00:	0a dd       	rcall	.-1516   	; 0x616 <MCP2515_PullCanPacket>
			break;
 c02:	01 c0       	rjmp	.+2      	; 0xc06 <CAN_pull_packet+0xaa>
		default:
			break;
 c04:	00 00       	nop
	}
}
 c06:	00 00       	nop
 c08:	28 96       	adiw	r28, 0x08	; 8
 c0a:	0f b6       	in	r0, 0x3f	; 63
 c0c:	f8 94       	cli
 c0e:	de bf       	out	0x3e, r29	; 62
 c10:	0f be       	out	0x3f, r0	; 63
 c12:	cd bf       	out	0x3d, r28	; 61
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	1f 91       	pop	r17
 c1a:	0f 91       	pop	r16
 c1c:	08 95       	ret

00000c1e <memcpy>:
 c1e:	fb 01       	movw	r30, r22
 c20:	dc 01       	movw	r26, r24
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <memcpy+0xa>
 c24:	01 90       	ld	r0, Z+
 c26:	0d 92       	st	X+, r0
 c28:	41 50       	subi	r20, 0x01	; 1
 c2a:	50 40       	sbci	r21, 0x00	; 0
 c2c:	d8 f7       	brcc	.-10     	; 0xc24 <memcpy+0x6>
 c2e:	08 95       	ret

00000c30 <_exit>:
 c30:	f8 94       	cli

00000c32 <__stop_program>:
 c32:	ff cf       	rjmp	.-2      	; 0xc32 <__stop_program>
