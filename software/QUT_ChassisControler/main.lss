
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000081e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  00800200  00800200  0000081e  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000880  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e0b  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001513  00000000  00000000  00003903  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bb8  00000000  00000000  00004e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  000069d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d0f  00000000  00000000  00007150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e0d  00000000  00000000  00007e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009c6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	f9 c0       	rjmp	.+498    	; 0x1f8 <__vector_1>
   6:	00 00       	nop
   8:	b7 c0       	rjmp	.+366    	; 0x178 <__vector_2>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c1       	rjmp	.+594    	; 0x278 <__vector_9>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	98 c0       	rjmp	.+304    	; 0x176 <__vector_17>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	66 c2       	rjmp	.+1228   	; 0x532 <__vector_25>
  66:	00 00       	nop
  68:	b8 c2       	rjmp	.+1392   	; 0x5da <__vector_26>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	7a c2       	rjmp	.+1268   	; 0x586 <__vector_36>
  92:	00 00       	nop
  94:	cb c2       	rjmp	.+1430   	; 0x62c <__vector_37>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ea ea       	ldi	r30, 0xAA	; 170
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 30       	cpi	r26, 0x00	; 0
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	aa 38       	cpi	r26, 0x8A	; 138
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	02 d0       	rcall	.+4      	; 0x120 <main>
 11c:	44 c3       	rjmp	.+1672   	; 0x7a6 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <main>:
uint8_t CAN_INPUT_SEND_TIME = 0;            // Number of iterations for the input send trigger

int main(void) {    

    // Set Up
    firmware_init();
 120:	de d2       	rcall	.+1468   	; 0x6de <firmware_init>
    timer_init();
 122:	ec d2       	rcall	.+1496   	; 0x6fc <timer_init>
 124:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    // ADCSRA |= (1 << ADEN);
    // a2dSetChannel(5);

    // // Testing pure ADC implementation, not working
    // -----------------
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 128:	87 60       	ori	r24, 0x07	; 7
 12a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 12e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

    ADMUX |= (1 << REFS0);  // Set ADC reference to AVCC
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 138:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADMUX &= ~(1 << ADLAR);  // Right adjust ADC result to allow easy 8 bit reading
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 142:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

    ADMUX |= 0b00000101;    // Setting to ADC5
 146:	85 60       	ori	r24, 0x05	; 5
 148:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 14c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

    // ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode

    ADCSRA |= (1 << ADEN);  // Enable ADC
 150:	80 68       	ori	r24, 0x80	; 128
 152:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 156:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    ADCSRA |= (1 << ADSC);  // Start A2D Conversions
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 160:	80 e2       	ldi	r24, 0x20	; 32
    {

        // // Part of near-pure ADC implementation testing
        if(ADCL > 9) 
        {
            PORTK = 0b00100000;
 162:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
        if(ADCL > 9) 
 166:	9a 30       	cpi	r25, 0x0A	; 10
 168:	18 f0       	brcs	.+6      	; 0x170 <main+0x50>
 16a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7e0108>
            PORTK = 0b00100000;
 16e:	f9 cf       	rjmp	.-14     	; 0x162 <main+0x42>
 170:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7e0108>
        } 
        else 
        { 
            PORTK = 0b00000000; 
 174:	f6 cf       	rjmp	.-20     	; 0x162 <main+0x42>

00000176 <__vector_17>:
 176:	18 95       	reti

00000178 <__vector_2>:

/**
 * @brief Called whenever CANBUS 1 interupt is triggered
 *        * When ever there is data waiting in CAN 1
 */
ISR(INT1_vect) {
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	0b b6       	in	r0, 0x3b	; 59
 184:	0f 92       	push	r0
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	2d 97       	sbiw	r28, 0x0d	; 13
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN1, &numBytes, data, &ID);
 1ac:	9e 01       	movw	r18, r28
 1ae:	27 5f       	subi	r18, 0xF7	; 247
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	ae 01       	movw	r20, r28
 1b4:	4f 5f       	subi	r20, 0xFF	; 255
 1b6:	5f 4f       	sbci	r21, 0xFF	; 255
 1b8:	be 01       	movw	r22, r28
 1ba:	63 5f       	subi	r22, 0xF3	; 243
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	bb d2       	rcall	.+1398   	; 0x738 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_RESPONSE_MALFORMED);
}
 1c2:	2d 96       	adiw	r28, 0x0d	; 13
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0b be       	out	0x3b, r0	; 59
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_1>:

/**
 * @brief Called whenever CANBUS 2 interupt is triggered
 *        * When ever there is data waiting in CAN 2
 */
ISR(INT0_vect)	{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	0b b6       	in	r0, 0x3b	; 59
 204:	0f 92       	push	r0
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	2d 97       	sbiw	r28, 0x0d	; 13
 228:	de bf       	out	0x3e, r29	; 62
 22a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN2, &numBytes, data, &ID);
 22c:	9e 01       	movw	r18, r28
 22e:	27 5f       	subi	r18, 0xF7	; 247
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	ae 01       	movw	r20, r28
 234:	4f 5f       	subi	r20, 0xFF	; 255
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	be 01       	movw	r22, r28
 23a:	63 5f       	subi	r22, 0xF3	; 243
 23c:	7f 4f       	sbci	r23, 0xFF	; 255
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	7b d2       	rcall	.+1270   	; 0x738 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
}
 242:	2d 96       	adiw	r28, 0x0d	; 13
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0b be       	out	0x3b, r0	; 59
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_9>:

/**
 * @brief Called whenever CANBUS 3 interupt is triggered
 *        * When ever there is data waiting in CAN 3
 */
ISR(PCINT0_vect) {
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	0b b6       	in	r0, 0x3b	; 59
 284:	0f 92       	push	r0
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	2d 97       	sbiw	r28, 0x0d	; 13
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN3, &numBytes, data, &ID);
 2ac:	9e 01       	movw	r18, r28
 2ae:	27 5f       	subi	r18, 0xF7	; 247
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
 2b2:	ae 01       	movw	r20, r28
 2b4:	4f 5f       	subi	r20, 0xFF	; 255
 2b6:	5f 4f       	sbci	r21, 0xFF	; 255
 2b8:	be 01       	movw	r22, r28
 2ba:	63 5f       	subi	r22, 0xF3	; 243
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	3b d2       	rcall	.+1142   	; 0x738 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);
 2c2:	2d 96       	adiw	r28, 0x0d	; 13
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0b be       	out	0x3b, r0	; 59
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <MCP2515_CS_low>:
}


void MCP2515_CS_low(uint8_t CANbus)
{
	switch(CANbus)
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	51 f0       	breq	.+20     	; 0x310 <MCP2515_CS_low+0x18>
 2fc:	84 30       	cpi	r24, 0x04	; 4
 2fe:	61 f0       	breq	.+24     	; 0x318 <MCP2515_CS_low+0x20>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	59 f4       	brne	.+22     	; 0x31a <MCP2515_CS_low+0x22>
	{
		case MCP2515_CAN1:
			MCP2515_CAN1_PORT_CS &= ~(1<<MCP2515_CAN1_PIN_CS);
 304:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
 308:	8e 7f       	andi	r24, 0xFE	; 254
			break;
		case MCP2515_CAN2:
			MCP2515_CAN2_PORT_CS &= ~(1<<MCP2515_CAN2_PIN_CS);
 30a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
			break;
 30e:	08 95       	ret
			MCP2515_CAN2_PORT_CS &= ~(1<<MCP2515_CAN2_PIN_CS);
 310:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
 314:	8d 7f       	andi	r24, 0xFD	; 253
 316:	f9 cf       	rjmp	.-14     	; 0x30a <MCP2515_CS_low+0x12>
		case MCP2515_CAN3:
			MCP2515_CAN3_PORT_CS &= ~(1<<MCP2515_CAN3_PIN_CS);
 318:	28 98       	cbi	0x05, 0	; 5
			break;
		default:
			break;
	}
}
 31a:	08 95       	ret

0000031c <MCP2515_CS_high>:

void MCP2515_CS_high(uint8_t CANbus)
{
	switch(CANbus)
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	51 f0       	breq	.+20     	; 0x334 <MCP2515_CS_high+0x18>
 320:	84 30       	cpi	r24, 0x04	; 4
 322:	61 f0       	breq	.+24     	; 0x33c <MCP2515_CS_high+0x20>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	59 f4       	brne	.+22     	; 0x33e <MCP2515_CS_high+0x22>
	{
		case MCP2515_CAN1:
			MCP2515_CAN1_PORT_CS |= (1<<MCP2515_CAN1_PIN_CS);
 328:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
 32c:	81 60       	ori	r24, 0x01	; 1
			break;
		case MCP2515_CAN2:
			MCP2515_CAN2_PORT_CS |= (1<<MCP2515_CAN2_PIN_CS);
 32e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
			break;
 332:	08 95       	ret
			MCP2515_CAN2_PORT_CS |= (1<<MCP2515_CAN2_PIN_CS);
 334:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
 338:	82 60       	ori	r24, 0x02	; 2
 33a:	f9 cf       	rjmp	.-14     	; 0x32e <MCP2515_CS_high+0x12>
		case MCP2515_CAN3:
			MCP2515_CAN3_PORT_CS |= (1<<MCP2515_CAN3_PIN_CS);
 33c:	28 9a       	sbi	0x05, 0	; 5
			break;
		default:
			break;
	}
}
 33e:	08 95       	ret

00000340 <MCP2515_reg_write>:

void MCP2515_reg_write(uint8_t CANbus, uint8_t reg_address, uint8_t reg_value)
{
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	c8 2f       	mov	r28, r24
 348:	16 2f       	mov	r17, r22
 34a:	d4 2f       	mov	r29, r20
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 34c:	d5 df       	rcall	.-86     	; 0x2f8 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_WRITE);
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	e4 d0       	rcall	.+456    	; 0x51a <SPI_send_byte>
	SPI_send_byte(reg_address);
 352:	81 2f       	mov	r24, r17
 354:	e2 d0       	rcall	.+452    	; 0x51a <SPI_send_byte>
	SPI_send_byte(reg_value);
 356:	8d 2f       	mov	r24, r29
 358:	e0 d0       	rcall	.+448    	; 0x51a <SPI_send_byte>
 35a:	8c 2f       	mov	r24, r28
	MCP2515_CS_high(CANbus);			//set the CS.
	//if(MCP2515_reg_read(CANbus, reg_address) == reg_value)flash_LED(1,RED_LED);
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
	MCP2515_CS_high(CANbus);			//set the CS.
 362:	dc cf       	rjmp	.-72     	; 0x31c <MCP2515_CS_high>

00000364 <MCP2515_instruction>:
 364:	cf 93       	push	r28

void MCP2515_instruction(uint8_t CANbus, uint8_t instruction)
{
 366:	df 93       	push	r29
 368:	c8 2f       	mov	r28, r24
 36a:	d6 2f       	mov	r29, r22
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 36c:	c5 df       	rcall	.-118    	; 0x2f8 <MCP2515_CS_low>
	SPI_send_byte(instruction);
 36e:	8d 2f       	mov	r24, r29
 370:	d4 d0       	rcall	.+424    	; 0x51a <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS.
 372:	8c 2f       	mov	r24, r28
}
 374:	df 91       	pop	r29
	MCP2515_CS_high(CANbus);			//set the CS.
 376:	cf 91       	pop	r28
 378:	d1 cf       	rjmp	.-94     	; 0x31c <MCP2515_CS_high>

0000037a <MCP2515_bit_modify>:


void MCP2515_bit_modify(uint8_t CANbus,uint8_t reg_address, uint8_t reg_value, uint8_t reg_mask)
{
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	c8 2f       	mov	r28, r24
 384:	06 2f       	mov	r16, r22
 386:	d4 2f       	mov	r29, r20
 388:	12 2f       	mov	r17, r18
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 38a:	b6 df       	rcall	.-148    	; 0x2f8 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_BITMODIFY);		//send instruction of bitmodify
 38c:	85 e0       	ldi	r24, 0x05	; 5
 38e:	c5 d0       	rcall	.+394    	; 0x51a <SPI_send_byte>
	SPI_send_byte(reg_address);				//send address
 390:	80 2f       	mov	r24, r16
 392:	c3 d0       	rcall	.+390    	; 0x51a <SPI_send_byte>
	SPI_send_byte(reg_mask);				//send the mask
 394:	81 2f       	mov	r24, r17
 396:	c1 d0       	rcall	.+386    	; 0x51a <SPI_send_byte>
	SPI_send_byte(reg_value);				//send the data
 398:	8d 2f       	mov	r24, r29
 39a:	bf d0       	rcall	.+382    	; 0x51a <SPI_send_byte>
 39c:	8c 2f       	mov	r24, r28
	MCP2515_CS_high(CANbus);			//set the CS.
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
	MCP2515_CS_high(CANbus);			//set the CS.
 3a6:	ba cf       	rjmp	.-140    	; 0x31c <MCP2515_CS_high>

000003a8 <MCP2515_init>:
 3a8:	cf 93       	push	r28
{
 3aa:	c8 2f       	mov	r28, r24
	MCP2515_instruction(CANbus, MCP2515_RESET); //instead of hard reset, perform software rest.
 3ac:	60 ec       	ldi	r22, 0xC0	; 192
 3ae:	da df       	rcall	.-76     	; 0x364 <MCP2515_instruction>
	MCP2515_bit_modify(CANbus, MCP2515_CANCTRL,128,0xE0);		//put the device into configuration mode.
 3b0:	20 ee       	ldi	r18, 0xE0	; 224
 3b2:	40 e8       	ldi	r20, 0x80	; 128
 3b4:	6f e0       	ldi	r22, 0x0F	; 15
 3b6:	8c 2f       	mov	r24, r28
 3b8:	e0 df       	rcall	.-64     	; 0x37a <MCP2515_bit_modify>
	MCP2515_reg_write(CANbus, MCP2515_CNF1, 0x04);	//SJW = 0(1),BRP = 4(5)--> number in brackets is actual value, as mcp2515 adds 1.
 3ba:	44 e0       	ldi	r20, 0x04	; 4
 3bc:	6a e2       	ldi	r22, 0x2A	; 42
 3be:	8c 2f       	mov	r24, r28
 3c0:	bf df       	rcall	.-130    	; 0x340 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, MCP2515_CNF2, 0xCA);	//BTL = 1, SAM = 1, PHSEG1 = 001(2), PRSEG = 010 (3)
 3c2:	4a ec       	ldi	r20, 0xCA	; 202
 3c4:	69 e2       	ldi	r22, 0x29	; 41
 3c6:	8c 2f       	mov	r24, r28
 3c8:	bb df       	rcall	.-138    	; 0x340 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, MCP2515_CNF3, 0x01);	//SOF = 0, WAKFIL = 0, PHSEG2 = 001(2).
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	68 e2       	ldi	r22, 0x28	; 40
 3ce:	8c 2f       	mov	r24, r28
 3d0:	b7 df       	rcall	.-146    	; 0x340 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, MCP2515_CANINTE, 0b00000011);	//enable interrupt in rx0, rx1, tx0, tx1, tx2.
 3d2:	43 e0       	ldi	r20, 0x03	; 3
 3d4:	6b e2       	ldi	r22, 0x2B	; 43
 3d6:	8c 2f       	mov	r24, r28
 3d8:	b3 df       	rcall	.-154    	; 0x340 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, MCP2515_RTSCTRL, 0x01); //probably want to move this to a tx init function. eventually. if it aint broke don't fix it...
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	6d e0       	ldi	r22, 0x0D	; 13
 3de:	8c 2f       	mov	r24, r28
 3e0:	af df       	rcall	.-162    	; 0x340 <MCP2515_reg_write>
	MCP2515_bit_modify(CANbus, MCP2515_CANCTRL, 0x00, 0xE0);		//put the device into it's functional mode currently: normal 0xE0, listen is 0x60
 3e2:	20 ee       	ldi	r18, 0xE0	; 224
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	6f e0       	ldi	r22, 0x0F	; 15
 3e8:	8c 2f       	mov	r24, r28
}
 3ea:	cf 91       	pop	r28
	MCP2515_bit_modify(CANbus, MCP2515_CANCTRL, 0x00, 0xE0);		//put the device into it's functional mode currently: normal 0xE0, listen is 0x60
 3ec:	c6 cf       	rjmp	.-116    	; 0x37a <MCP2515_bit_modify>

000003ee <MCP2515_PullCanPacket>:
 3ee:	4f 92       	push	r4
		data++;
	}
		MCP2515_CS_high(CANbus);				//raise CS.
}
void MCP2515_PullCanPacket(uint8_t CANbus, uint8_t mob,uint8_t * numBytes , uint8_t * data, uint32_t * ID)
{
 3f0:	5f 92       	push	r5
 3f2:	6f 92       	push	r6
 3f4:	7f 92       	push	r7
 3f6:	bf 92       	push	r11
 3f8:	cf 92       	push	r12
 3fa:	df 92       	push	r13
 3fc:	ef 92       	push	r14
 3fe:	ff 92       	push	r15
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	2d 97       	sbiw	r28, 0x0d	; 13
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	b8 2e       	mov	r11, r24
 41a:	6a 01       	movw	r12, r20
 41c:	79 01       	movw	r14, r18

	//the following line combines the instruction(0b10010000), with: 0b100 for rxb0 or 0b000 for rxb1, and: 0b10 for data starting at data0, or 0b00 for SIDH
	uint8_t instruction = 0b10010000|((mob > 0x70)<<2);
 41e:	a0 e9       	ldi	r26, 0x90	; 144
 420:	7a 2e       	mov	r7, r26
 422:	61 37       	cpi	r22, 0x71	; 113
 424:	10 f0       	brcs	.+4      	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 426:	f4 e9       	ldi	r31, 0x94	; 148
 428:	7f 2e       	mov	r7, r31
	MCP2515_CS_low(CANbus);			//lower CS.
 42a:	8b 2d       	mov	r24, r11
 42c:	65 df       	rcall	.-310    	; 0x2f8 <MCP2515_CS_low>
	SPI_send_byte(instruction);							//send instruction for stream of data
 42e:	87 2d       	mov	r24, r7
 430:	74 d0       	rcall	.+232    	; 0x51a <SPI_send_byte>
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	2c 01       	movw	r4, r24
 438:	3e 01       	movw	r6, r28
 43a:	9e e0       	ldi	r25, 0x0E	; 14
 43c:	69 0e       	add	r6, r25
 43e:	71 1c       	adc	r7, r1
	//loop counts to 8 or 12 depending on whether bit 1 of instruction is set.
	uint8_t tmpData[13];
	for(uint8_t counter = 0; counter < 13; counter++)
	{
		tmpData[counter] = SPI_send_byte(0x00);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	6b d0       	rcall	.+214    	; 0x51a <SPI_send_byte>
 444:	f2 01       	movw	r30, r4
 446:	81 93       	st	Z+, r24
 448:	2f 01       	movw	r4, r30
 44a:	e6 15       	cp	r30, r6
	for(uint8_t counter = 0; counter < 13; counter++)
 44c:	f7 05       	cpc	r31, r7
 44e:	c1 f7       	brne	.-16     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 450:	4a 81       	ldd	r20, Y+2	; 0x02
	}
	*ID  = ((uint32_t)(tmpData[0]&0b11111111)<<21);
	*ID |= ((uint32_t)(tmpData[1]&0b11100000)<<13);
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	89 81       	ldd	r24, Y+1	; 0x01
	*ID  = ((uint32_t)(tmpData[0]&0b11111111)<<21);
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	a0 e0       	ldi	r26, 0x00	; 0
 460:	25 e1       	ldi	r18, 0x15	; 21
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	aa 1f       	adc	r26, r26
 468:	bb 1f       	adc	r27, r27
 46a:	2a 95       	dec	r18
 46c:	d1 f7       	brne	.-12     	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
 46e:	2b 81       	ldd	r18, Y+3	; 0x03
	*ID |= ((uint32_t)(tmpData[1]&0b00000011)<<16);
	*ID |= ((uint32_t)(tmpData[2]&0b11111111)<<8);
 470:	92 2b       	or	r25, r18
	*ID |= ((uint32_t)(tmpData[3]&0b11111111));
 472:	2c 81       	ldd	r18, Y+4	; 0x04
 474:	82 2b       	or	r24, r18
 476:	2a 01       	movw	r4, r20
	*ID |= ((uint32_t)(tmpData[1]&0b11100000)<<13);
 478:	3b 01       	movw	r6, r22
 47a:	3d e0       	ldi	r19, 0x0D	; 13
 47c:	44 0c       	add	r4, r4
 47e:	55 1c       	adc	r5, r5
 480:	66 1c       	adc	r6, r6
 482:	77 1c       	adc	r7, r7
 484:	3a 95       	dec	r19
 486:	d1 f7       	brne	.-12     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
 488:	44 24       	eor	r4, r4
 48a:	55 24       	eor	r5, r5
 48c:	fc e1       	ldi	r31, 0x1C	; 28
 48e:	6f 22       	and	r6, r31
 490:	77 24       	eor	r7, r7
 492:	84 29       	or	r24, r4
	*ID |= ((uint32_t)(tmpData[3]&0b11111111));
 494:	95 29       	or	r25, r5
 496:	a6 29       	or	r26, r6
 498:	b7 29       	or	r27, r7
 49a:	ba 01       	movw	r22, r20
	*ID |= ((uint32_t)(tmpData[1]&0b00000011)<<16);
 49c:	55 27       	eor	r21, r21
 49e:	44 27       	eor	r20, r20
 4a0:	44 27       	eor	r20, r20
 4a2:	55 27       	eor	r21, r21
 4a4:	63 70       	andi	r22, 0x03	; 3
 4a6:	77 27       	eor	r23, r23
 4a8:	84 2b       	or	r24, r20
	*ID |= ((uint32_t)(tmpData[3]&0b11111111));
 4aa:	95 2b       	or	r25, r21
 4ac:	a6 2b       	or	r26, r22
 4ae:	b7 2b       	or	r27, r23
 4b0:	f8 01       	movw	r30, r16
 4b2:	80 83       	st	Z, r24
 4b4:	91 83       	std	Z+1, r25	; 0x01
 4b6:	a2 83       	std	Z+2, r26	; 0x02
 4b8:	b3 83       	std	Z+3, r27	; 0x03
 4ba:	4d 85       	ldd	r20, Y+13	; 0x0d
	*numBytes = tmpData[12] & 0b00001111;
 4bc:	4f 70       	andi	r20, 0x0F	; 15
 4be:	f6 01       	movw	r30, r12
 4c0:	40 83       	st	Z, r20
 4c2:	50 e0       	ldi	r21, 0x00	; 0
	memcpy(data, &tmpData[4], *numBytes);
 4c4:	be 01       	movw	r22, r28
 4c6:	6b 5f       	subi	r22, 0xFB	; 251
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	c7 01       	movw	r24, r14
 4cc:	63 d1       	rcall	.+710    	; 0x794 <memcpy>
 4ce:	8b 2d       	mov	r24, r11
	
	
	MCP2515_CS_high(CANbus);				//raise CS.
 4d0:	2d 96       	adiw	r28, 0x0d	; 13
}
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	1f 91       	pop	r17
 4e2:	0f 91       	pop	r16
 4e4:	ff 90       	pop	r15
 4e6:	ef 90       	pop	r14
 4e8:	df 90       	pop	r13
 4ea:	cf 90       	pop	r12
 4ec:	bf 90       	pop	r11
 4ee:	7f 90       	pop	r7
 4f0:	6f 90       	pop	r6
 4f2:	5f 90       	pop	r5
 4f4:	4f 90       	pop	r4
	MCP2515_CS_high(CANbus);				//raise CS.
 4f6:	12 cf       	rjmp	.-476    	; 0x31c <MCP2515_CS_high>

000004f8 <MCP2515_check_receive_status>:
 4f8:	cf 93       	push	r28
	//PORTC |= (1<<PINC7);		
}


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
 4fa:	df 93       	push	r29
 4fc:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 4fe:	fc de       	rcall	.-520    	; 0x2f8 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
 500:	80 eb       	ldi	r24, 0xB0	; 176
 502:	0b d0       	rcall	.+22     	; 0x51a <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	09 d0       	rcall	.+18     	; 0x51a <SPI_send_byte>
 508:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	06 d0       	rcall	.+12     	; 0x51a <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
 50e:	8c 2f       	mov	r24, r28
 510:	05 df       	rcall	.-502    	; 0x31c <MCP2515_CS_high>
 512:	8d 2f       	mov	r24, r29
	return status;
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
 51a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 51c:	0d b4       	in	r0, 0x2d	; 45
 51e:	07 fe       	sbrs	r0, 7
 520:	fd cf       	rjmp	.-6      	; 0x51c <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
 522:	8e b5       	in	r24, 0x2e	; 46
}
 524:	08 95       	ret

00000526 <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
 526:	81 e5       	ldi	r24, 0x51	; 81
 528:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
 52e:	1e bc       	out	0x2e, r1	; 46
 530:	08 95       	ret

00000532 <__vector_25>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
//************************************************************************
//Function: UART Receive Complete interrupt
//Purpose:  called when the UART has received a character
//************************************************************************
{
 532:	2f 93       	push	r18
 534:	2f b7       	in	r18, 0x3f	; 63
 536:	2f 93       	push	r18
 538:	2b b7       	in	r18, 0x3b	; 59
 53a:	2f 93       	push	r18
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
    unsigned char lastRxError;

		
 
    // read UART status register and UART data register
    usr  = UART0_STATUS;
 544:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 548:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    // calculate buffer index 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 54c:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <UART_RxHead>
 550:	ef 5f       	subi	r30, 0xFF	; 255
 552:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 554:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <UART_RxTail>
 558:	2e 17       	cp	r18, r30
 55a:	99 f0       	breq	.+38     	; 0x582 <__vector_25+0x50>
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 55c:	88 71       	andi	r24, 0x18	; 24
        // error: receive buffer overflow 
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        // store new index 
        UART_RxHead = tmphead;
 55e:	e0 93 47 02 	sts	0x0247, r30	; 0x800247 <UART_RxHead>
        // store received data in buffer 
       UART_RxBuf[tmphead] = data;
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	e6 5b       	subi	r30, 0xB6	; 182
 566:	fd 4f       	sbci	r31, 0xFD	; 253
 568:	90 83       	st	Z, r25
    }
    UART_LastRxError = lastRxError;   
 56a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <UART_LastRxError>
	
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	2f 91       	pop	r18
 578:	2b bf       	out	0x3b, r18	; 59
 57a:	2f 91       	pop	r18
 57c:	2f bf       	out	0x3f, r18	; 63
 57e:	2f 91       	pop	r18
 580:	18 95       	reti
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	f2 cf       	rjmp	.-28     	; 0x56a <__vector_25+0x38>

00000586 <__vector_36>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
//************************************************************************
//Function: UART Receive Complete interrupt
//Purpose:  called when the UART has received a character
//************************************************************************
{
 586:	2f 93       	push	r18
 588:	2f b7       	in	r18, 0x3f	; 63
 58a:	2f 93       	push	r18
 58c:	2b b7       	in	r18, 0x3b	; 59
 58e:	2f 93       	push	r18
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	ef 93       	push	r30
 596:	ff 93       	push	r31
    unsigned char lastRxError1;

		
 
    // read UART status register and UART data register
    usr1  = UART1_STATUS;
 598:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    data1 = UART1_DATA;
 59c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
#elif defined ( ATMEGA_UART )
    lastRxError1 = (usr1 & (_BV(FE)|_BV(DOR)) );
#endif
        
    // calculate buffer index 
    tmphead1 = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
 5a0:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <UART1_RxHead>
 5a4:	ef 5f       	subi	r30, 0xFF	; 255
 5a6:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead1 == UART1_RxTail ) {
 5a8:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <UART1_RxTail>
 5ac:	2e 17       	cp	r18, r30
 5ae:	99 f0       	breq	.+38     	; 0x5d6 <__vector_36+0x50>
    lastRxError1 = (usr1 & (_BV(FE0)|_BV(DOR0)) );
 5b0:	88 71       	andi	r24, 0x18	; 24
        // error: receive buffer overflow 
        lastRxError1 = UART_BUFFER_OVERFLOW >> 8;
    }else{
        // store new index 
        UART1_RxHead = tmphead1;
 5b2:	e0 93 02 02 	sts	0x0202, r30	; 0x800202 <UART1_RxHead>
        // store received data in buffer 
       UART1_RxBuf[tmphead1] = data1;
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	eb 5f       	subi	r30, 0xFB	; 251
 5ba:	fd 4f       	sbci	r31, 0xFD	; 253
 5bc:	90 83       	st	Z, r25
    }
    UART1_LastRxError = lastRxError1;   
 5be:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
	
}
 5c2:	ff 91       	pop	r31
 5c4:	ef 91       	pop	r30
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	2f 91       	pop	r18
 5cc:	2b bf       	out	0x3b, r18	; 59
 5ce:	2f 91       	pop	r18
 5d0:	2f bf       	out	0x3f, r18	; 63
 5d2:	2f 91       	pop	r18
 5d4:	18 95       	reti
        lastRxError1 = UART_BUFFER_OVERFLOW >> 8;
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	f2 cf       	rjmp	.-28     	; 0x5be <__vector_36+0x38>

000005da <__vector_26>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 5da:	8f 93       	push	r24
 5dc:	8f b7       	in	r24, 0x3f	; 63
 5de:	8f 93       	push	r24
 5e0:	8b b7       	in	r24, 0x3b	; 59
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	ef 93       	push	r30
 5e8:	ff 93       	push	r31
    unsigned char tmptail;
    
    if ( UART_TxHead != UART_TxTail) {
 5ea:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <UART_TxHead>
 5ee:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <UART_TxTail>
 5f2:	98 17       	cp	r25, r24
 5f4:	a9 f0       	breq	.+42     	; 0x620 <__vector_26+0x46>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 5f6:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <UART_TxTail>
 5fa:	ef 5f       	subi	r30, 0xFF	; 255
 5fc:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 5fe:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	e6 59       	subi	r30, 0x96	; 150
 606:	fd 4f       	sbci	r31, 0xFD	; 253
 608:	80 81       	ld	r24, Z
 60a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1 << UART0_UDRIE);
    }
}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	8b bf       	out	0x3b, r24	; 59
 618:	8f 91       	pop	r24
 61a:	8f bf       	out	0x3f, r24	; 63
 61c:	8f 91       	pop	r24
 61e:	18 95       	reti
        UART0_CONTROL &= ~(1 << UART0_UDRIE);
 620:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 624:	8f 7d       	andi	r24, 0xDF	; 223
 626:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
 62a:	f1 cf       	rjmp	.-30     	; 0x60e <__vector_26+0x34>

0000062c <__vector_37>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 62c:	8f 93       	push	r24
 62e:	8f b7       	in	r24, 0x3f	; 63
 630:	8f 93       	push	r24
 632:	8b b7       	in	r24, 0x3b	; 59
 634:	8f 93       	push	r24
 636:	9f 93       	push	r25
 638:	ef 93       	push	r30
 63a:	ff 93       	push	r31
    unsigned char tmptail1;

    
    if ( UART1_TxHead != UART1_TxTail) {
 63c:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <UART1_TxHead>
 640:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <UART1_TxTail>
 644:	98 17       	cp	r25, r24
 646:	a9 f0       	breq	.+42     	; 0x672 <__vector_37+0x46>
        /* calculate and store new buffer index */
        tmptail1 = (UART1_TxTail + 1) & UART1_TX_BUFFER_MASK;
 648:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <UART1_TxTail>
 64c:	ef 5f       	subi	r30, 0xFF	; 255
 64e:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail1;
 650:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail1];  /* start transmission */
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	eb 5d       	subi	r30, 0xDB	; 219
 658:	fd 4f       	sbci	r31, 0xFD	; 253
 65a:	80 81       	ld	r24, Z
 65c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~(1 << UART1_UDRIE);
    }
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	8b bf       	out	0x3b, r24	; 59
 66a:	8f 91       	pop	r24
 66c:	8f bf       	out	0x3f, r24	; 63
 66e:	8f 91       	pop	r24
 670:	18 95       	reti
        UART1_CONTROL &= ~(1 << UART1_UDRIE);
 672:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 676:	8f 7d       	andi	r24, 0xDF	; 223
 678:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
}
 67c:	f1 cf       	rjmp	.-30     	; 0x660 <__vector_37+0x34>

0000067e <external_interrupt_init>:
 * 
 */
void external_interrupt_init()
{
	//INT1 for CAN1, INT0 for CAN2, PCINT7 for CAN3
	EICRA |= (2<<ISC00)|(2<<ISC10);
 67e:	e9 e6       	ldi	r30, 0x69	; 105
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	8a 60       	ori	r24, 0x0A	; 10
 686:	80 83       	st	Z, r24
	EIMSK  = (1<<INT0) | (1<<INT1);
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	8d bb       	out	0x1d, r24	; 29
	//Enable interrupts for PCINT7:0
	PCICR  = (1<<PCIE0)|(1<<PCIE1);
 68c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 = (1<<PCINT7);
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK1 = (1<<PCINT15);
 696:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
}
 69a:	08 95       	ret

0000069c <io_init>:
 * 
 */
void io_init()
{
	//pins 8, 9 and 14 for MCP2515_STB high so the things respond (PE6, PE7, PH2)
	DDRE  = 0b11000010;		//PE0 = RS232 RX1; PE1 = RS232 TX1;  PE6 = STB_CAN1; PE7 = STB_CAN2;
 69c:	82 ec       	ldi	r24, 0xC2	; 194
 69e:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000000;		
 6a0:	1e b8       	out	0x0e, r1	; 14
	DDRH  = 0b00000111;		//PH0 = CS_CAN1; PH1 = CS_CAN2; PH2 = STB_CAN3
 6a2:	87 e0       	ldi	r24, 0x07	; 7
 6a4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	PORTH = 0b00000011;		//CS_CAN1 high; CS_CAN2 high;
 6a8:	83 e0       	ldi	r24, 0x03	; 3
 6aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	//pins 12, 13, 19 for the CS for each MCP2515 PH0, PH1, PB0)

	//pin 21 for MOSI, pin 20  for SCK (PB2, PB1)
	DDRB  = 0b01100111;		//PB0 = CS_CAN3; PB1 = SCK; PB2 = MOSI; PB3 = MISO; PB5 = High drive A; PB6 = Low drive A; PB7 = CAN3_INT; 
 6ae:	87 e6       	ldi	r24, 0x67	; 103
 6b0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;		//set CS_CAN3 high;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	85 b9       	out	0x05, r24	; 5
	
	DDRL  = 0b00011000;		//PB3 = High drive B; PB4 = Low Drive B;
 6b6:	88 e1       	ldi	r24, 0x18	; 24
 6b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	PORTL = 0b00000000;
 6bc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	
	DDRD  = 0b11001000;		//PD0 = CAN2_INT; PD1 = CAN1_INT; PD2 = RS232 RX2; PD3 = RS232 TX2; PD6 = CAN1_TXPIN; PD7 = CAN2_TXPIN;
 6c0:	98 ec       	ldi	r25, 0xC8	; 200
 6c2:	9a b9       	out	0x0a, r25	; 10
	DDRD  = 0b00000000;
 6c4:	1a b8       	out	0x0a, r1	; 10
	
	DDRC  = 0b00001000;		//PC3 = CAN3_TXPIN;
 6c6:	98 e0       	ldi	r25, 0x08	; 8
 6c8:	97 b9       	out	0x07, r25	; 7
	PORTC = 0b00000000;
 6ca:	18 b8       	out	0x08, r1	; 8
	
	DDRJ  = 0b00000000;		//PORTJ is used for digital input;
 6cc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	
	DDRA  = 0b00011000;		//PA3 = ENABLE_B; PA4 = ENABLE_A; PA1 = dig input; PA2 = dig input;
 6d0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00010000;
 6d2:	80 e1       	ldi	r24, 0x10	; 16
 6d4:	82 b9       	out	0x02, r24	; 2

	DDRK  = 0b00100000;		//PK5 = debugging LED;
 6d6:	80 e2       	ldi	r24, 0x20	; 32
 6d8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7e0107>
	// PORTK = 0b00100000;
	
	// Enable external interrupts in order for the CAN bus to communicate with us
	external_interrupt_init();
 6dc:	d0 cf       	rjmp	.-96     	; 0x67e <external_interrupt_init>

000006de <firmware_init>:
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
void firmware_init()
{
	io_init();
 6de:	de df       	rcall	.-68     	; 0x69c <io_init>
	SPI_init();
 6e0:	22 df       	rcall	.-444    	; 0x526 <SPI_init>
    // uart_init(UART_BAUD_SELECT(19200, 16UL));
    // uart1_init(UART_BAUD_SELECT(19200, 16UL));
	// a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); // Turns ON also
	MCP2515_init(MCP2515_CAN1);
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	61 de       	rcall	.-830    	; 0x3a8 <MCP2515_init>
	MCP2515_init(MCP2515_CAN2);
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	5f de       	rcall	.-834    	; 0x3a8 <MCP2515_init>
	MCP2515_init(MCP2515_CAN3);
 6ea:	84 e0       	ldi	r24, 0x04	; 4
 6ec:	5d de       	rcall	.-838    	; 0x3a8 <MCP2515_init>
 6ee:	78 94       	sei
	
	// Enable interrupts
	sei();
 6f0:	e5 e0       	ldi	r30, 0x05	; 5

	// Enable the pullup on the input. This allows the pin to be active low
	PORTJ |= (1<<PINJ6);
 6f2:	f1 e0       	ldi	r31, 0x01	; 1
 6f4:	80 81       	ld	r24, Z
 6f6:	80 64       	ori	r24, 0x40	; 64
 6f8:	80 83       	st	Z, r24
 6fa:	08 95       	ret

000006fc <timer_init>:
	// 	inverters[i].RPM = 0;
	// 	inverters[i].temperature = 0;
	// }

	// accumulators[0].ID=ACCUMULATOR_FRONT;
}
 6fc:	84 b5       	in	r24, 0x24	; 36
 */
void timer_init()
{
    // http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf
    // Set up 1Khz timer
    TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
 6fe:	82 60       	ori	r24, 0x02	; 2
 700:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
 702:	85 b5       	in	r24, 0x25	; 37
 704:	83 60       	ori	r24, 0x03	; 3
 706:	85 bd       	out	0x25, r24	; 37
    // For interupts \/ \/ \/
    OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
 708:	8a ef       	ldi	r24, 0xFA	; 250
 70a:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A)|(1 << TOIE0);   // Enable COMPA & 0VF interupt
 70c:	ee e6       	ldi	r30, 0x6E	; 110
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	83 60       	ori	r24, 0x03	; 3
 714:	80 83       	st	Z, r24
    TCNT0 = 0;                              // Set timer val to 0
 716:	16 bc       	out	0x26, r1	; 38

    // Set up 50Hz comm timer
	TCCR1A = 0b00000000;			//CTC mode
 718:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00001101;			//prescale clock by 1024
 71c:	8d e0       	ldi	r24, 0x0D	; 13
 71e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A =  15000;					//312 gives 50Hz main comms speed
 722:	88 e9       	ldi	r24, 0x98	; 152
 724:	9a e3       	ldi	r25, 0x3A	; 58
 726:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 72a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 0b00000010;			//turn on compare interrupt for OCR1A
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

    sei();
 734:	78 94       	sei
 736:	08 95       	ret

00000738 <CAN_pull_packet>:
        status                      // SubID?
    );
}

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
 738:	af 92       	push	r10
 73a:	bf 92       	push	r11
 73c:	cf 92       	push	r12
 73e:	df 92       	push	r13
 740:	ef 92       	push	r14
 742:	ff 92       	push	r15
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	c8 2f       	mov	r28, r24
 74c:	7b 01       	movw	r14, r22
 74e:	6a 01       	movw	r12, r20
 750:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
 752:	d2 de       	rcall	.-604    	; 0x4f8 <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
 754:	82 95       	swap	r24
 756:	86 95       	lsr	r24
 758:	86 95       	lsr	r24
 75a:	83 70       	andi	r24, 0x03	; 3
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	28 f0       	brcs	.+10     	; 0x76a <CAN_pull_packet+0x32>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 760:	85 01       	movw	r16, r10
	switch(status>>6) {
 762:	83 30       	cpi	r24, 0x03	; 3
 764:	88 f0       	brcs	.+34     	; 0x788 <CAN_pull_packet+0x50>
 766:	83 30       	cpi	r24, 0x03	; 3
 768:	51 f0       	breq	.+20     	; 0x77e <CAN_pull_packet+0x46>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
			break;
		default:
			break;
	}
}
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	ff 90       	pop	r15
 772:	ef 90       	pop	r14
 774:	df 90       	pop	r13
 776:	cf 90       	pop	r12
 778:	bf 90       	pop	r11
 77a:	af 90       	pop	r10
 77c:	08 95       	ret
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 77e:	96 01       	movw	r18, r12
 780:	a7 01       	movw	r20, r14
 782:	61 e6       	ldi	r22, 0x61	; 97
 784:	8c 2f       	mov	r24, r28
 786:	33 de       	rcall	.-922    	; 0x3ee <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 788:	96 01       	movw	r18, r12
 78a:	a7 01       	movw	r20, r14
 78c:	61 e6       	ldi	r22, 0x61	; 97
 78e:	8c 2f       	mov	r24, r28
 790:	2e de       	rcall	.-932    	; 0x3ee <MCP2515_PullCanPacket>
}
 792:	eb cf       	rjmp	.-42     	; 0x76a <CAN_pull_packet+0x32>

00000794 <memcpy>:
 794:	fb 01       	movw	r30, r22
 796:	dc 01       	movw	r26, r24
 798:	02 c0       	rjmp	.+4      	; 0x79e <memcpy+0xa>
 79a:	01 90       	ld	r0, Z+
 79c:	0d 92       	st	X+, r0
 79e:	41 50       	subi	r20, 0x01	; 1
 7a0:	50 40       	sbci	r21, 0x00	; 0
 7a2:	d8 f7       	brcc	.-10     	; 0x79a <memcpy+0x6>
 7a4:	08 95       	ret

000007a6 <_exit>:
 7a6:	f8 94       	cli

000007a8 <__stop_program>:
 7a8:	ff cf       	rjmp	.-2      	; 0x7a8 <__stop_program>
