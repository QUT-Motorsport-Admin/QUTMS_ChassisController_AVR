
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000c4e  00000ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  00800208  00800208  00000cea  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00000d40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030be  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000179a  00000000  00000000  00004156  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f5a  00000000  00000000  000058f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aec  00000000  00000000  0000884c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001224  00000000  00000000  00009338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc0  00000000  00000000  0000a55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000c51c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	14 c1       	rjmp	.+552    	; 0x22e <__vector_1>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__vector_2>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	44 c1       	rjmp	.+648    	; 0x2ae <__vector_9>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	8d c0       	rjmp	.+282    	; 0x160 <__vector_17>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	9d c3       	rjmp	.+1850   	; 0x7a0 <__vector_25>
  66:	00 00       	nop
  68:	ef c3       	rjmp	.+2014   	; 0x848 <__vector_26>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	b1 c3       	rjmp	.+1890   	; 0x7f4 <__vector_36>
  92:	00 00       	nop
  94:	02 c4       	rjmp	.+2052   	; 0x89a <__vector_37>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ee e4       	ldi	r30, 0x4E	; 78
  f8:	fc e0       	ldi	r31, 0x0C	; 12
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a8 30       	cpi	r26, 0x08	; 8
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	23 e0       	ldi	r18, 0x03	; 3
 10c:	a8 e0       	ldi	r26, 0x08	; 8
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a6 31       	cpi	r26, 0x16	; 22
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	02 d0       	rcall	.+4      	; 0x120 <main>
 11c:	96 c5       	rjmp	.+2860   	; 0xc4a <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <main>:
bool buttonState = 0;

int main(void) {    

    // Set Up
    firmware_init();
 120:	db d4       	rcall	.+2486   	; 0xad8 <firmware_init>
    timer_init();
 122:	ec d4       	rcall	.+2520   	; 0xafc <timer_init>
 124:	78 94       	sei

    // Enable Interupts
    sei();
 126:	80 ec       	ldi	r24, 0xC0	; 192
int main(void) {    
 128:	97 e2       	ldi	r25, 0x27	; 39
 12a:	a9 e0       	ldi	r26, 0x09	; 9
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
    // ------------------------------------------------------------------------
    while(1)
    {
        for(long i = 0; i < 600000; i++) {

        }
 130:	a1 09       	sbc	r26, r1
 132:	b1 09       	sbc	r27, r1
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0xe>
        uart_putc(68);
 136:	84 e4       	ldi	r24, 0x44	; 68
 138:	11 d4       	rcall	.+2082   	; 0x95c <uart_putc>
        uart1_putc(68);
 13a:	84 e4       	ldi	r24, 0x44	; 68
 13c:	3f d4       	rcall	.+2174   	; 0x9bc <uart1_putc>
 13e:	f3 cf       	rjmp	.-26     	; 0x126 <main+0x6>

00000140 <oneKHzTimer>:
        for(long i = 0; i < 600000; i++) {
 140:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <InputPedalThrottleCount>
    // CanHeartbeatErrorPower++;


    // Send CAN input
    // uint8_t tmpInputVal;
    if(InputPedalThrottleCount > INPUT_TIME_PEDAL_THROTTLE)
 144:	8b 30       	cpi	r24, 0x0B	; 11
 146:	30 f0       	brcs	.+12     	; 0x154 <oneKHzTimer+0x14>
    {
        INPUT_accelerationPedal = a2d_10bitCh(5);
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	6a d1       	rcall	.+724    	; 0x420 <a2d_10bitCh>
 14c:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <INPUT_accelerationPedal>
        // if(INPUT_get_accelPedal(&tmpInputVal) == 0) {
        //     // PORTK |= 0b00100000;
        //     INPUT_accelerationPedal = tmpInputVal;
        // }
        InputPedalThrottleCount = 0;
 150:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <InputPedalThrottleCount>
    //     if(INPUT_get_brakePedal(&tmpInputVal) == 0) {
    //         INPUT_brakePedal = tmpInputVal;
    //     }
    //     InputPedalBrakeCount = 0;
    // }
    InputPedalThrottleCount++;
 154:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <InputPedalThrottleCount>
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <InputPedalThrottleCount>
    //     INPUT_brakePressureBack = tmpInputVal;
    // }
    // if(INPUT_get_brakePressureFront(&tmpInputVal) == 0) {
    //     INPUT_brakePressureFront = tmpInputVal;
    // }
}
 15e:	08 95       	ret

00000160 <__vector_17>:

/**
 * @brief Called whenever the 1Khz timer triggers
 */
ISR(TIMER1_COMPA_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	0b b6       	in	r0, 0x3b	; 59
 16c:	0f 92       	push	r0
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
    oneKHzTimer();
 186:	dc df       	rcall	.-72     	; 0x140 <oneKHzTimer>
    // led_toggle();
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0b be       	out	0x3b, r0	; 59
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <__vector_2>:

/**
 * @brief Called whenever CANBUS 1 interupt is triggered
 *        * When ever there is data waiting in CAN 1
 */
ISR(INT1_vect) {
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	0b b6       	in	r0, 0x3b	; 59
 1ba:	0f 92       	push	r0
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	2d 97       	sbiw	r28, 0x0d	; 13
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN1, &numBytes, data, &ID);
 1e2:	9e 01       	movw	r18, r28
 1e4:	27 5f       	subi	r18, 0xF7	; 247
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	ae 01       	movw	r20, r28
 1ea:	4f 5f       	subi	r20, 0xFF	; 255
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	be 01       	movw	r22, r28
 1f0:	63 5f       	subi	r22, 0xF3	; 243
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	bf d4       	rcall	.+2430   	; 0xb76 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_RESPONSE_MALFORMED);
}
 1f8:	2d 96       	adiw	r28, 0x0d	; 13
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0b be       	out	0x3b, r0	; 59
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_1>:

/**
 * @brief Called whenever CANBUS 2 interupt is triggered
 *        * When ever there is data waiting in CAN 2
 */
ISR(INT0_vect)	{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	0b b6       	in	r0, 0x3b	; 59
 23a:	0f 92       	push	r0
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	2d 97       	sbiw	r28, 0x0d	; 13
 25e:	de bf       	out	0x3e, r29	; 62
 260:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN2, &numBytes, data, &ID);
 262:	9e 01       	movw	r18, r28
 264:	27 5f       	subi	r18, 0xF7	; 247
 266:	3f 4f       	sbci	r19, 0xFF	; 255
 268:	ae 01       	movw	r20, r28
 26a:	4f 5f       	subi	r20, 0xFF	; 255
 26c:	5f 4f       	sbci	r21, 0xFF	; 255
 26e:	be 01       	movw	r22, r28
 270:	63 5f       	subi	r22, 0xF3	; 243
 272:	7f 4f       	sbci	r23, 0xFF	; 255
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	7f d4       	rcall	.+2302   	; 0xb76 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
}
 278:	2d 96       	adiw	r28, 0x0d	; 13
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0b be       	out	0x3b, r0	; 59
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_9>:

/**
 * @brief Called whenever CANBUS 3 interupt is triggered
 *        * When ever there is data waiting in CAN 3
 */
ISR(PCINT0_vect) {
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	0b b6       	in	r0, 0x3b	; 59
 2ba:	0f 92       	push	r0
 2bc:	2f 93       	push	r18
 2be:	3f 93       	push	r19
 2c0:	4f 93       	push	r20
 2c2:	5f 93       	push	r21
 2c4:	6f 93       	push	r22
 2c6:	7f 93       	push	r23
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	af 93       	push	r26
 2ce:	bf 93       	push	r27
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	2d 97       	sbiw	r28, 0x0d	; 13
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(MCP2515_CAN3, &numBytes, data, &ID);
 2e2:	9e 01       	movw	r18, r28
 2e4:	27 5f       	subi	r18, 0xF7	; 247
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	ae 01       	movw	r20, r28
 2ea:	4f 5f       	subi	r20, 0xFF	; 255
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255
 2ee:	be 01       	movw	r22, r28
 2f0:	63 5f       	subi	r22, 0xF3	; 243
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	84 e0       	ldi	r24, 0x04	; 4
 2f6:	3f d4       	rcall	.+2174   	; 0xb76 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);
 2f8:	2d 96       	adiw	r28, 0x0d	; 13
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0b be       	out	0x3b, r0	; 59
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <a2dInit>:

// functions

// initialize a2d converter
void a2dInit(unsigned char prescale, unsigned char ref)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	00 d0       	rcall	.+0      	; 0x334 <a2dInit+0x6>
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	6a 83       	std	Y+2, r22	; 0x02
	// Set to Single Mode, ADC Auto Trigger OFF, ADC Int OFF, Prescale 0
	ADCSRA = 0; //clear!
 33c:	8a e7       	ldi	r24, 0x7A	; 122
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	fc 01       	movw	r30, r24
 342:	10 82       	st	Z, r1

	// Right adjust result
	ADMUX &= ~(1<<ADLAR); //clear
 344:	8c e7       	ldi	r24, 0x7C	; 124
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	20 81       	ld	r18, Z
 34c:	8c e7       	ldi	r24, 0x7C	; 124
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	2f 7d       	andi	r18, 0xDF	; 223
 352:	fc 01       	movw	r30, r24
 354:	20 83       	st	Z, r18

	// Set prescaler
	a2dSetPrescaler(prescale);
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	1a d0       	rcall	.+52     	; 0x38e <a2dSetPrescaler>

	// Set default reference
	a2dSetReference(ref);	
 35a:	8a 81       	ldd	r24, Y+2	; 0x02

	// Turn ADC on
	a2dOn();
 35c:	36 d0       	rcall	.+108    	; 0x3ca <a2dSetReference>
 35e:	06 d0       	rcall	.+12     	; 0x36c <a2dOn>

	// int input = a2d_10bit();
	// input = a2d_10bit();
}
 360:	00 00       	nop
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <a2dOn>:

// turn On a2d converter
void a2dOn(void)
{
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN);				// enable ADC (turn on ADC power), Set
 374:	8a e7       	ldi	r24, 0x7A	; 122
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	20 81       	ld	r18, Z
 37c:	8a e7       	ldi	r24, 0x7A	; 122
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	20 68       	ori	r18, 0x80	; 128
 382:	fc 01       	movw	r30, r24
 384:	20 83       	st	Z, r18
}
 386:	00 00       	nop
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <a2dSetPrescaler>:
	ADCSRA &= ~(1 << ADEN);				// disable ADC (turn off ADC power), Clear
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	0f 92       	push	r0
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA &= ADC_PRESCALE_MASK;
 39a:	8a e7       	ldi	r24, 0x7A	; 122
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	20 81       	ld	r18, Z
 3a2:	8a e7       	ldi	r24, 0x7A	; 122
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	28 7f       	andi	r18, 0xF8	; 248
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
	ADCSRA |= prescale;
 3ac:	8a e7       	ldi	r24, 0x7A	; 122
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	30 81       	ld	r19, Z
 3b4:	8a e7       	ldi	r24, 0x7A	; 122
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	29 81       	ldd	r18, Y+1	; 0x01
 3ba:	23 2b       	or	r18, r19
 3bc:	fc 01       	movw	r30, r24
 3be:	20 83       	st	Z, r18
}
 3c0:	00 00       	nop
 3c2:	0f 90       	pop	r0
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	0f 92       	push	r0
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ADC_REFERENCE_MASK;
 3d6:	8c e7       	ldi	r24, 0x7C	; 124
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	fc 01       	movw	r30, r24
 3dc:	40 81       	ld	r20, Z
 3de:	8c e7       	ldi	r24, 0x7C	; 124
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	4c 7f       	andi	r20, 0xFC	; 252
 3e4:	fc 01       	movw	r30, r24
 3e6:	40 83       	st	Z, r20
	ADMUX |= (ref<<6);
 3e8:	8c e7       	ldi	r24, 0x7C	; 124
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	fc 01       	movw	r30, r24
 3ee:	80 81       	ld	r24, Z
 3f0:	48 2f       	mov	r20, r24
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	38 2f       	mov	r19, r24
 3fa:	36 95       	lsr	r19
 3fc:	36 95       	lsr	r19
 3fe:	28 2f       	mov	r18, r24
 400:	22 95       	swap	r18
 402:	22 0f       	add	r18, r18
 404:	22 0f       	add	r18, r18
 406:	20 7c       	andi	r18, 0xC0	; 192
 408:	82 2f       	mov	r24, r18
 40a:	24 2f       	mov	r18, r20
 40c:	28 2b       	or	r18, r24
 40e:	8c e7       	ldi	r24, 0x7C	; 124
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
}
 416:	00 00       	nop
 418:	0f 90       	pop	r0
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <a2d_10bitCh>:

// Perform a 10-bit conversion on given channel
// starts conversion, waits until conversion is done, and returns result
// modded for mega1280 by Ant
unsigned short a2d_10bitCh(unsigned char ch)
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	0f 92       	push	r0
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	89 83       	std	Y+1, r24	; 0x01
	// set channel
	ADMUX &= ADC_MUX_MASK;	
 42c:	8c e7       	ldi	r24, 0x7C	; 124
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	fc 01       	movw	r30, r24
 432:	20 81       	ld	r18, Z
 434:	8c e7       	ldi	r24, 0x7C	; 124
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	20 7e       	andi	r18, 0xE0	; 224
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
	
	if (ch > 7) 
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	88 30       	cpi	r24, 0x08	; 8
 442:	b8 f0       	brcs	.+46     	; 0x472 <a2d_10bitCh+0x52>
	{
		ADCSRB |= 8;
 444:	8b e7       	ldi	r24, 0x7B	; 123
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	20 81       	ld	r18, Z
 44c:	8b e7       	ldi	r24, 0x7B	; 123
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	28 60       	ori	r18, 0x08	; 8
 452:	fc 01       	movw	r30, r24
 454:	20 83       	st	Z, r18
		ADMUX |= (ch - 8);
 456:	8c e7       	ldi	r24, 0x7C	; 124
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	fc 01       	movw	r30, r24
 45c:	80 81       	ld	r24, Z
 45e:	98 2f       	mov	r25, r24
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	88 50       	subi	r24, 0x08	; 8
 464:	29 2f       	mov	r18, r25
 466:	28 2b       	or	r18, r24
 468:	8c e7       	ldi	r24, 0x7C	; 124
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	fc 01       	movw	r30, r24
 46e:	20 83       	st	Z, r18
 470:	13 c0       	rjmp	.+38     	; 0x498 <a2d_10bitCh+0x78>
	}
	else
	{
		ADCSRB &= 247;
 472:	8b e7       	ldi	r24, 0x7B	; 123
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	fc 01       	movw	r30, r24
 478:	20 81       	ld	r18, Z
 47a:	8b e7       	ldi	r24, 0x7B	; 123
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	27 7f       	andi	r18, 0xF7	; 247
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
		ADMUX |= ch;
 484:	8c e7       	ldi	r24, 0x7C	; 124
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	30 81       	ld	r19, Z
 48c:	8c e7       	ldi	r24, 0x7C	; 124
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	29 81       	ldd	r18, Y+1	; 0x01
 492:	23 2b       	or	r18, r19
 494:	fc 01       	movw	r30, r24
 496:	20 83       	st	Z, r18
	}
	
	// ADMUX |= ch;	//comment out this line when using on 16ch parts

	// start conversion
	ADCSRA |= (1<<ADSC);
 498:	8a e7       	ldi	r24, 0x7A	; 122
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	fc 01       	movw	r30, r24
 49e:	20 81       	ld	r18, Z
 4a0:	8a e7       	ldi	r24, 0x7A	; 122
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	20 64       	ori	r18, 0x40	; 64
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18

	while(ADCSRA & (1 << ADSC)) {} // wait until conversion complete 
 4aa:	00 00       	nop
 4ac:	8a e7       	ldi	r24, 0x7A	; 122
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	fc 01       	movw	r30, r24
 4b2:	80 81       	ld	r24, Z
 4b4:	88 2f       	mov	r24, r24
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	80 74       	andi	r24, 0x40	; 64
 4ba:	99 27       	eor	r25, r25
 4bc:	89 2b       	or	r24, r25
 4be:	b1 f7       	brne	.-20     	; 0x4ac <a2d_10bitCh+0x8c>

	return ADC;                // read ADC (full 10 bits);
 4c0:	88 e7       	ldi	r24, 0x78	; 120
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	91 81       	ldd	r25, Z+1	; 0x01
	// return (8 << ADCH)|(ADCL); // read ADC (full 10 bits);
    // return ADCL;                // read ADC (first 8 bits)
}
 4ca:	0f 90       	pop	r0
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <MCP2515_CS_low>:
	
}


void MCP2515_CS_low(uint8_t CANbus)
{
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	0f 92       	push	r0
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	89 83       	std	Y+1, r24	; 0x01
	switch(CANbus)
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	88 2f       	mov	r24, r24
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	91 05       	cpc	r25, r1
 4e8:	79 f0       	breq	.+30     	; 0x508 <MCP2515_CS_low+0x36>
 4ea:	84 30       	cpi	r24, 0x04	; 4
 4ec:	91 05       	cpc	r25, r1
 4ee:	b1 f0       	breq	.+44     	; 0x51c <MCP2515_CS_low+0x4a>
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f4       	brne	.+60     	; 0x530 <MCP2515_CS_low+0x5e>
	{
		case MCP2515_CAN1:
			MCP2515_CAN1_PORT_CS &= ~(1<<MCP2515_CAN1_PIN_CS);
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 81       	ld	r18, Z
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	2e 7f       	andi	r18, 0xFE	; 254
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
			break;
 506:	15 c0       	rjmp	.+42     	; 0x532 <MCP2515_CS_low+0x60>
		case MCP2515_CAN2:
			MCP2515_CAN2_PORT_CS &= ~(1<<MCP2515_CAN2_PIN_CS);
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	fc 01       	movw	r30, r24
 50e:	20 81       	ld	r18, Z
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	2d 7f       	andi	r18, 0xFD	; 253
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
			break;
 51a:	0b c0       	rjmp	.+22     	; 0x532 <MCP2515_CS_low+0x60>
		case MCP2515_CAN3:
			MCP2515_CAN3_PORT_CS &= ~(1<<MCP2515_CAN3_PIN_CS);
 51c:	85 e2       	ldi	r24, 0x25	; 37
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	fc 01       	movw	r30, r24
 522:	20 81       	ld	r18, Z
 524:	85 e2       	ldi	r24, 0x25	; 37
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	2e 7f       	andi	r18, 0xFE	; 254
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
			break;
 52e:	01 c0       	rjmp	.+2      	; 0x532 <MCP2515_CS_low+0x60>
		default:
			break;
 530:	00 00       	nop
	}
}
 532:	00 00       	nop
 534:	0f 90       	pop	r0
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <MCP2515_CS_high>:

void MCP2515_CS_high(uint8_t CANbus)
{
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	0f 92       	push	r0
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	89 83       	std	Y+1, r24	; 0x01
	switch(CANbus)
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	82 30       	cpi	r24, 0x02	; 2
 550:	91 05       	cpc	r25, r1
 552:	79 f0       	breq	.+30     	; 0x572 <MCP2515_CS_high+0x36>
 554:	84 30       	cpi	r24, 0x04	; 4
 556:	91 05       	cpc	r25, r1
 558:	b1 f0       	breq	.+44     	; 0x586 <MCP2515_CS_high+0x4a>
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f4       	brne	.+60     	; 0x59a <MCP2515_CS_high+0x5e>
	{
		case MCP2515_CAN1:
			MCP2515_CAN1_PORT_CS |= (1<<MCP2515_CAN1_PIN_CS);
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	fc 01       	movw	r30, r24
 564:	20 81       	ld	r18, Z
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	21 60       	ori	r18, 0x01	; 1
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
			break;
 570:	15 c0       	rjmp	.+42     	; 0x59c <MCP2515_CS_high+0x60>
		case MCP2515_CAN2:
			MCP2515_CAN2_PORT_CS |= (1<<MCP2515_CAN2_PIN_CS);
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	fc 01       	movw	r30, r24
 578:	20 81       	ld	r18, Z
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	22 60       	ori	r18, 0x02	; 2
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
			break;
 584:	0b c0       	rjmp	.+22     	; 0x59c <MCP2515_CS_high+0x60>
		case MCP2515_CAN3:
			MCP2515_CAN3_PORT_CS |= (1<<MCP2515_CAN3_PIN_CS);
 586:	85 e2       	ldi	r24, 0x25	; 37
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	fc 01       	movw	r30, r24
 58c:	20 81       	ld	r18, Z
 58e:	85 e2       	ldi	r24, 0x25	; 37
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	21 60       	ori	r18, 0x01	; 1
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
			break;
 598:	01 c0       	rjmp	.+2      	; 0x59c <MCP2515_CS_high+0x60>
		default:
			break;
 59a:	00 00       	nop
	}
}
 59c:	00 00       	nop
 59e:	0f 90       	pop	r0
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <MCP2515_PullCanPacket>:
		data++;
	}
		MCP2515_CS_high(CANbus);				//raise CS.
}
void MCP2515_PullCanPacket(uint8_t CANbus, uint8_t mob,uint8_t * numBytes , uint8_t * data, uint32_t * ID)
{
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	67 97       	sbiw	r28, 0x17	; 23
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
 5be:	88 8b       	std	Y+16, r24	; 0x10
 5c0:	69 8b       	std	Y+17, r22	; 0x11
 5c2:	5b 8b       	std	Y+19, r21	; 0x13
 5c4:	4a 8b       	std	Y+18, r20	; 0x12
 5c6:	3d 8b       	std	Y+21, r19	; 0x15
 5c8:	2c 8b       	std	Y+20, r18	; 0x14
 5ca:	1f 8b       	std	Y+23, r17	; 0x17
 5cc:	0e 8b       	std	Y+22, r16	; 0x16

	//the following line combines the instruction(0b10010000), with: 0b100 for rxb0 or 0b000 for rxb1, and: 0b10 for data starting at data0, or 0b00 for SIDH
	uint8_t instruction = 0b10010000|((mob > 0x70)<<2);
 5ce:	89 89       	ldd	r24, Y+17	; 0x11
 5d0:	81 37       	cpi	r24, 0x71	; 113
 5d2:	10 f0       	brcs	.+4      	; 0x5d8 <MCP2515_PullCanPacket+0x32>
 5d4:	84 e9       	ldi	r24, 0x94	; 148
 5d6:	01 c0       	rjmp	.+2      	; 0x5da <MCP2515_PullCanPacket+0x34>
 5d8:	80 e9       	ldi	r24, 0x90	; 144
 5da:	8a 83       	std	Y+2, r24	; 0x02
	MCP2515_CS_low(CANbus);			//lower CS.
 5dc:	88 89       	ldd	r24, Y+16	; 0x10
 5de:	79 df       	rcall	.-270    	; 0x4d2 <MCP2515_CS_low>
	SPI_send_byte(instruction);							//send instruction for stream of data
 5e0:	8a 81       	ldd	r24, Y+2	; 0x02
 5e2:	d8 d0       	rcall	.+432    	; 0x794 <SPI_send_byte>
	//loop counts to 8 or 12 depending on whether bit 1 of instruction is set.
	uint8_t tmpData[13];
	for(uint8_t counter = 0; counter < 13; counter++)
 5e4:	19 82       	std	Y+1, r1	; 0x01
 5e6:	0f c0       	rjmp	.+30     	; 0x606 <MCP2515_PullCanPacket+0x60>
	{
		tmpData[counter] = SPI_send_byte(0x00);
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	08 2f       	mov	r16, r24
 5ec:	10 e0       	ldi	r17, 0x00	; 0
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	d1 d0       	rcall	.+418    	; 0x794 <SPI_send_byte>
 5f2:	28 2f       	mov	r18, r24
 5f4:	ce 01       	movw	r24, r28
 5f6:	03 96       	adiw	r24, 0x03	; 3
 5f8:	80 0f       	add	r24, r16
 5fa:	91 1f       	adc	r25, r17
 5fc:	fc 01       	movw	r30, r24
 5fe:	20 83       	st	Z, r18
	for(uint8_t counter = 0; counter < 13; counter++)
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	8f 5f       	subi	r24, 0xFF	; 255
 604:	89 83       	std	Y+1, r24	; 0x01
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	8d 30       	cpi	r24, 0x0D	; 13
 60a:	70 f3       	brcs	.-36     	; 0x5e8 <MCP2515_PullCanPacket+0x42>
	}
	*ID  = ((uint32_t)(tmpData[0]&0b11111111)<<21);
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	88 2f       	mov	r24, r24
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	a0 e0       	ldi	r26, 0x00	; 0
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	07 2e       	mov	r0, r23
 618:	75 e1       	ldi	r23, 0x15	; 21
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	aa 1f       	adc	r26, r26
 620:	bb 1f       	adc	r27, r27
 622:	7a 95       	dec	r23
 624:	d1 f7       	brne	.-12     	; 0x61a <MCP2515_PullCanPacket+0x74>
 626:	70 2d       	mov	r23, r0
 628:	2e 89       	ldd	r18, Y+22	; 0x16
 62a:	3f 89       	ldd	r19, Y+23	; 0x17
 62c:	f9 01       	movw	r30, r18
 62e:	80 83       	st	Z, r24
 630:	91 83       	std	Z+1, r25	; 0x01
 632:	a2 83       	std	Z+2, r26	; 0x02
 634:	b3 83       	std	Z+3, r27	; 0x03
	*ID |= ((uint32_t)(tmpData[1]&0b11100000)<<13);
 636:	8e 89       	ldd	r24, Y+22	; 0x16
 638:	9f 89       	ldd	r25, Y+23	; 0x17
 63a:	fc 01       	movw	r30, r24
 63c:	20 81       	ld	r18, Z
 63e:	31 81       	ldd	r19, Z+1	; 0x01
 640:	42 81       	ldd	r20, Z+2	; 0x02
 642:	53 81       	ldd	r21, Z+3	; 0x03
 644:	8c 81       	ldd	r24, Y+4	; 0x04
 646:	88 2f       	mov	r24, r24
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	a0 e0       	ldi	r26, 0x00	; 0
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	07 2e       	mov	r0, r23
 650:	7d e0       	ldi	r23, 0x0D	; 13
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	aa 1f       	adc	r26, r26
 658:	bb 1f       	adc	r27, r27
 65a:	7a 95       	dec	r23
 65c:	d1 f7       	brne	.-12     	; 0x652 <MCP2515_PullCanPacket+0xac>
 65e:	70 2d       	mov	r23, r0
 660:	88 27       	eor	r24, r24
 662:	99 27       	eor	r25, r25
 664:	ac 71       	andi	r26, 0x1C	; 28
 666:	bb 27       	eor	r27, r27
 668:	82 2b       	or	r24, r18
 66a:	93 2b       	or	r25, r19
 66c:	a4 2b       	or	r26, r20
 66e:	b5 2b       	or	r27, r21
 670:	2e 89       	ldd	r18, Y+22	; 0x16
 672:	3f 89       	ldd	r19, Y+23	; 0x17
 674:	f9 01       	movw	r30, r18
 676:	80 83       	st	Z, r24
 678:	91 83       	std	Z+1, r25	; 0x01
 67a:	a2 83       	std	Z+2, r26	; 0x02
 67c:	b3 83       	std	Z+3, r27	; 0x03
	*ID |= ((uint32_t)(tmpData[1]&0b00000011)<<16);
 67e:	8e 89       	ldd	r24, Y+22	; 0x16
 680:	9f 89       	ldd	r25, Y+23	; 0x17
 682:	fc 01       	movw	r30, r24
 684:	20 81       	ld	r18, Z
 686:	31 81       	ldd	r19, Z+1	; 0x01
 688:	42 81       	ldd	r20, Z+2	; 0x02
 68a:	53 81       	ldd	r21, Z+3	; 0x03
 68c:	8c 81       	ldd	r24, Y+4	; 0x04
 68e:	88 2f       	mov	r24, r24
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	a0 e0       	ldi	r26, 0x00	; 0
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	dc 01       	movw	r26, r24
 698:	99 27       	eor	r25, r25
 69a:	88 27       	eor	r24, r24
 69c:	88 27       	eor	r24, r24
 69e:	99 27       	eor	r25, r25
 6a0:	a3 70       	andi	r26, 0x03	; 3
 6a2:	bb 27       	eor	r27, r27
 6a4:	82 2b       	or	r24, r18
 6a6:	93 2b       	or	r25, r19
 6a8:	a4 2b       	or	r26, r20
 6aa:	b5 2b       	or	r27, r21
 6ac:	2e 89       	ldd	r18, Y+22	; 0x16
 6ae:	3f 89       	ldd	r19, Y+23	; 0x17
 6b0:	f9 01       	movw	r30, r18
 6b2:	80 83       	st	Z, r24
 6b4:	91 83       	std	Z+1, r25	; 0x01
 6b6:	a2 83       	std	Z+2, r26	; 0x02
 6b8:	b3 83       	std	Z+3, r27	; 0x03
	*ID |= ((uint32_t)(tmpData[2]&0b11111111)<<8);
 6ba:	8e 89       	ldd	r24, Y+22	; 0x16
 6bc:	9f 89       	ldd	r25, Y+23	; 0x17
 6be:	fc 01       	movw	r30, r24
 6c0:	20 81       	ld	r18, Z
 6c2:	31 81       	ldd	r19, Z+1	; 0x01
 6c4:	42 81       	ldd	r20, Z+2	; 0x02
 6c6:	53 81       	ldd	r21, Z+3	; 0x03
 6c8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ca:	88 2f       	mov	r24, r24
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	a0 e0       	ldi	r26, 0x00	; 0
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	ba 2f       	mov	r27, r26
 6d4:	a9 2f       	mov	r26, r25
 6d6:	98 2f       	mov	r25, r24
 6d8:	88 27       	eor	r24, r24
 6da:	82 2b       	or	r24, r18
 6dc:	93 2b       	or	r25, r19
 6de:	a4 2b       	or	r26, r20
 6e0:	b5 2b       	or	r27, r21
 6e2:	2e 89       	ldd	r18, Y+22	; 0x16
 6e4:	3f 89       	ldd	r19, Y+23	; 0x17
 6e6:	f9 01       	movw	r30, r18
 6e8:	80 83       	st	Z, r24
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	a2 83       	std	Z+2, r26	; 0x02
 6ee:	b3 83       	std	Z+3, r27	; 0x03
	*ID |= ((uint32_t)(tmpData[3]&0b11111111));
 6f0:	8e 89       	ldd	r24, Y+22	; 0x16
 6f2:	9f 89       	ldd	r25, Y+23	; 0x17
 6f4:	fc 01       	movw	r30, r24
 6f6:	20 81       	ld	r18, Z
 6f8:	31 81       	ldd	r19, Z+1	; 0x01
 6fa:	42 81       	ldd	r20, Z+2	; 0x02
 6fc:	53 81       	ldd	r21, Z+3	; 0x03
 6fe:	8e 81       	ldd	r24, Y+6	; 0x06
 700:	88 2f       	mov	r24, r24
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	a0 e0       	ldi	r26, 0x00	; 0
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	82 2b       	or	r24, r18
 70a:	93 2b       	or	r25, r19
 70c:	a4 2b       	or	r26, r20
 70e:	b5 2b       	or	r27, r21
 710:	2e 89       	ldd	r18, Y+22	; 0x16
 712:	3f 89       	ldd	r19, Y+23	; 0x17
 714:	f9 01       	movw	r30, r18
 716:	80 83       	st	Z, r24
 718:	91 83       	std	Z+1, r25	; 0x01
 71a:	a2 83       	std	Z+2, r26	; 0x02
 71c:	b3 83       	std	Z+3, r27	; 0x03
	*numBytes = tmpData[12] & 0b00001111;
 71e:	8f 85       	ldd	r24, Y+15	; 0x0f
 720:	28 2f       	mov	r18, r24
 722:	2f 70       	andi	r18, 0x0F	; 15
 724:	8a 89       	ldd	r24, Y+18	; 0x12
 726:	9b 89       	ldd	r25, Y+19	; 0x13
 728:	fc 01       	movw	r30, r24
 72a:	20 83       	st	Z, r18
	memcpy(data, &tmpData[4], *numBytes);
 72c:	8a 89       	ldd	r24, Y+18	; 0x12
 72e:	9b 89       	ldd	r25, Y+19	; 0x13
 730:	fc 01       	movw	r30, r24
 732:	80 81       	ld	r24, Z
 734:	48 2f       	mov	r20, r24
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	ce 01       	movw	r24, r28
 73a:	03 96       	adiw	r24, 0x03	; 3
 73c:	9c 01       	movw	r18, r24
 73e:	2c 5f       	subi	r18, 0xFC	; 252
 740:	3f 4f       	sbci	r19, 0xFF	; 255
 742:	8c 89       	ldd	r24, Y+20	; 0x14
 744:	9d 89       	ldd	r25, Y+21	; 0x15
 746:	b9 01       	movw	r22, r18
	
	
	MCP2515_CS_high(CANbus);				//raise CS.
 748:	77 d2       	rcall	.+1262   	; 0xc38 <memcpy>
 74a:	88 89       	ldd	r24, Y+16	; 0x10
 74c:	f7 de       	rcall	.-530    	; 0x53c <MCP2515_CS_high>
}
 74e:	00 00       	nop
 750:	67 96       	adiw	r28, 0x17	; 23
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	1f 91       	pop	r17
 762:	0f 91       	pop	r16
 764:	08 95       	ret

00000766 <MCP2515_check_receive_status>:
	//PORTC |= (1<<PINC7);		
}


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	00 d0       	rcall	.+0      	; 0x76c <MCP2515_check_receive_status+0x6>
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
 772:	8a 81       	ldd	r24, Y+2	; 0x02
 774:	ae de       	rcall	.-676    	; 0x4d2 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
 776:	80 eb       	ldi	r24, 0xB0	; 176
 778:	0d d0       	rcall	.+26     	; 0x794 <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	0b d0       	rcall	.+22     	; 0x794 <SPI_send_byte>
 77e:	89 83       	std	Y+1, r24	; 0x01
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	08 d0       	rcall	.+16     	; 0x794 <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
 784:	8a 81       	ldd	r24, Y+2	; 0x02
 786:	da de       	rcall	.-588    	; 0x53c <MCP2515_CS_high>
 788:	89 81       	ldd	r24, Y+1	; 0x01
	return status;
 78a:	0f 90       	pop	r0
}
 78c:	0f 90       	pop	r0
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
 794:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 796:	0d b4       	in	r0, 0x2d	; 45
 798:	07 fe       	sbrs	r0, 7
 79a:	fd cf       	rjmp	.-6      	; 0x796 <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
 79c:	8e b5       	in	r24, 0x2e	; 46
}
 79e:	08 95       	ret

000007a0 <__vector_25>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
//************************************************************************
//Function: UART Receive Complete interrupt
//Purpose:  called when the UART has received a character
//************************************************************************
{
 7a0:	2f 93       	push	r18
 7a2:	2f b7       	in	r18, 0x3f	; 63
 7a4:	2f 93       	push	r18
 7a6:	2b b7       	in	r18, 0x3b	; 59
 7a8:	2f 93       	push	r18
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
    unsigned char lastRxError;

		
 
    // read UART status register and UART data register
    usr  = UART0_STATUS;
 7b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 7b6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    // calculate buffer index 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 7ba:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <UART_RxHead>
 7be:	ef 5f       	subi	r30, 0xFF	; 255
 7c0:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 7c2:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <UART_RxTail>
 7c6:	2e 17       	cp	r18, r30
 7c8:	99 f0       	breq	.+38     	; 0x7f0 <__vector_25+0x50>
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 7ca:	88 71       	andi	r24, 0x18	; 24
        // error: receive buffer overflow 
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        // store new index 
        UART_RxHead = tmphead;
 7cc:	e0 93 4f 02 	sts	0x024F, r30	; 0x80024f <UART_RxHead>
        // store received data in buffer 
       UART_RxBuf[tmphead] = data;
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	ee 5a       	subi	r30, 0xAE	; 174
 7d4:	fd 4f       	sbci	r31, 0xFD	; 253
 7d6:	90 83       	st	Z, r25
    }
    UART_LastRxError = lastRxError;   
 7d8:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <UART_LastRxError>
	
}
 7dc:	ff 91       	pop	r31
 7de:	ef 91       	pop	r30
 7e0:	9f 91       	pop	r25
 7e2:	8f 91       	pop	r24
 7e4:	2f 91       	pop	r18
 7e6:	2b bf       	out	0x3b, r18	; 59
 7e8:	2f 91       	pop	r18
 7ea:	2f bf       	out	0x3f, r18	; 63
 7ec:	2f 91       	pop	r18
 7ee:	18 95       	reti
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	f2 cf       	rjmp	.-28     	; 0x7d8 <__vector_25+0x38>

000007f4 <__vector_36>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
//************************************************************************
//Function: UART Receive Complete interrupt
//Purpose:  called when the UART has received a character
//************************************************************************
{
 7f4:	2f 93       	push	r18
 7f6:	2f b7       	in	r18, 0x3f	; 63
 7f8:	2f 93       	push	r18
 7fa:	2b b7       	in	r18, 0x3b	; 59
 7fc:	2f 93       	push	r18
 7fe:	8f 93       	push	r24
 800:	9f 93       	push	r25
 802:	ef 93       	push	r30
 804:	ff 93       	push	r31
    unsigned char lastRxError1;

		
 
    // read UART status register and UART data register
    usr1  = UART1_STATUS;
 806:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    data1 = UART1_DATA;
 80a:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
#elif defined ( ATMEGA_UART )
    lastRxError1 = (usr1 & (_BV(FE)|_BV(DOR)) );
#endif
        
    // calculate buffer index 
    tmphead1 = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
 80e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <UART1_RxHead>
 812:	ef 5f       	subi	r30, 0xFF	; 255
 814:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead1 == UART1_RxTail ) {
 816:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <UART1_RxTail>
 81a:	2e 17       	cp	r18, r30
 81c:	99 f0       	breq	.+38     	; 0x844 <__vector_36+0x50>
    lastRxError1 = (usr1 & (_BV(FE0)|_BV(DOR0)) );
 81e:	88 71       	andi	r24, 0x18	; 24
        // error: receive buffer overflow 
        lastRxError1 = UART_BUFFER_OVERFLOW >> 8;
    }else{
        // store new index 
        UART1_RxHead = tmphead1;
 820:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <UART1_RxHead>
        // store received data in buffer 
       UART1_RxBuf[tmphead1] = data1;
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	e3 5f       	subi	r30, 0xF3	; 243
 828:	fd 4f       	sbci	r31, 0xFD	; 253
 82a:	90 83       	st	Z, r25
    }
    UART1_LastRxError = lastRxError1;   
 82c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
	
}
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	9f 91       	pop	r25
 836:	8f 91       	pop	r24
 838:	2f 91       	pop	r18
 83a:	2b bf       	out	0x3b, r18	; 59
 83c:	2f 91       	pop	r18
 83e:	2f bf       	out	0x3f, r18	; 63
 840:	2f 91       	pop	r18
 842:	18 95       	reti
        lastRxError1 = UART_BUFFER_OVERFLOW >> 8;
 844:	82 e0       	ldi	r24, 0x02	; 2
 846:	f2 cf       	rjmp	.-28     	; 0x82c <__vector_36+0x38>

00000848 <__vector_26>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 848:	8f 93       	push	r24
 84a:	8f b7       	in	r24, 0x3f	; 63
 84c:	8f 93       	push	r24
 84e:	8b b7       	in	r24, 0x3b	; 59
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	ef 93       	push	r30
 856:	ff 93       	push	r31
    unsigned char tmptail;
    
    if ( UART_TxHead != UART_TxTail) {
 858:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <UART_TxHead>
 85c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <UART_TxTail>
 860:	98 17       	cp	r25, r24
 862:	a9 f0       	breq	.+42     	; 0x88e <__vector_26+0x46>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 864:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <UART_TxTail>
 868:	ef 5f       	subi	r30, 0xFF	; 255
 86a:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 86c:	e0 93 50 02 	sts	0x0250, r30	; 0x800250 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	ee 58       	subi	r30, 0x8E	; 142
 874:	fd 4f       	sbci	r31, 0xFD	; 253
 876:	80 81       	ld	r24, Z
 878:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1 << UART0_UDRIE);
    }
}
 87c:	ff 91       	pop	r31
 87e:	ef 91       	pop	r30
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	8b bf       	out	0x3b, r24	; 59
 886:	8f 91       	pop	r24
 888:	8f bf       	out	0x3f, r24	; 63
 88a:	8f 91       	pop	r24
 88c:	18 95       	reti
        UART0_CONTROL &= ~(1 << UART0_UDRIE);
 88e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 892:	8f 7d       	andi	r24, 0xDF	; 223
 894:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
 898:	f1 cf       	rjmp	.-30     	; 0x87c <__vector_26+0x34>

0000089a <__vector_37>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 89a:	8f 93       	push	r24
 89c:	8f b7       	in	r24, 0x3f	; 63
 89e:	8f 93       	push	r24
 8a0:	8b b7       	in	r24, 0x3b	; 59
 8a2:	8f 93       	push	r24
 8a4:	9f 93       	push	r25
 8a6:	ef 93       	push	r30
 8a8:	ff 93       	push	r31
    unsigned char tmptail1;

    
    if ( UART1_TxHead != UART1_TxTail) {
 8aa:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <UART1_TxHead>
 8ae:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <UART1_TxTail>
 8b2:	98 17       	cp	r25, r24
 8b4:	a9 f0       	breq	.+42     	; 0x8e0 <__vector_37+0x46>
        /* calculate and store new buffer index */
        tmptail1 = (UART1_TxTail + 1) & UART1_TX_BUFFER_MASK;
 8b6:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <UART1_TxTail>
 8ba:	ef 5f       	subi	r30, 0xFF	; 255
 8bc:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail1;
 8be:	e0 93 0b 02 	sts	0x020B, r30	; 0x80020b <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail1];  /* start transmission */
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	e3 5d       	subi	r30, 0xD3	; 211
 8c6:	fd 4f       	sbci	r31, 0xFD	; 253
 8c8:	80 81       	ld	r24, Z
 8ca:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~(1 << UART1_UDRIE);
    }
}
 8ce:	ff 91       	pop	r31
 8d0:	ef 91       	pop	r30
 8d2:	9f 91       	pop	r25
 8d4:	8f 91       	pop	r24
 8d6:	8b bf       	out	0x3b, r24	; 59
 8d8:	8f 91       	pop	r24
 8da:	8f bf       	out	0x3f, r24	; 63
 8dc:	8f 91       	pop	r24
 8de:	18 95       	reti
        UART1_CONTROL &= ~(1 << UART1_UDRIE);
 8e0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 8e4:	8f 7d       	andi	r24, 0xDF	; 223
 8e6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
}
 8ea:	f1 cf       	rjmp	.-30     	; 0x8ce <__vector_37+0x34>

000008ec <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 8ec:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <UART_TxHead>
    UART_TxTail = 0;
 8f0:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <UART_TxTail>
    UART_RxHead = 0;
 8f4:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <UART_RxHead>
    UART_RxTail = 0;
 8f8:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <UART_RxTail>
    
	CLKPR = (1<<CLKPCE);  	//enable clock prescaler change
 8fc:	e1 e6       	ldi	r30, 0x61	; 97
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 e8       	ldi	r24, 0x80	; 128
 902:	80 83       	st	Z, r24
	CLKPR = 0x00;			//clock divide = 1  so  16MHz/1 = 16MHz
 904:	10 82       	st	Z, r1

  	UBRR0H = 0;
 906:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = 103;	//19200 baud for laptop/LCD info panel
 90a:	87 e6       	ldi	r24, 0x67	; 103
 90c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
	UCSR0A = 2;		//2x on
 910:	82 e0       	ldi	r24, 0x02	; 2
 912:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 24;	//tx and rx on  AND rxie on for testing
 916:	88 e1       	ldi	r24, 0x18	; 24
 918:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    UCSR0C = 6;		//8 - 1 - N
 91c:	86 e0       	ldi	r24, 0x06	; 6
 91e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

}/* uart_init */
 922:	08 95       	ret

00000924 <uart1_init>:

void uart1_init(unsigned int baudrate)
{
	UART1_TxHead = 0;
 924:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <UART1_TxHead>
    UART1_TxTail = 0;
 928:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <UART1_TxTail>
    UART1_RxHead = 0;
 92c:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <UART1_RxHead>
    UART1_RxTail = 0;
 930:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <UART1_RxTail>
	
	CLKPR = (1<<CLKPCE);  	//enable clock prescaler change
 934:	e1 e6       	ldi	r30, 0x61	; 97
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 e8       	ldi	r24, 0x80	; 128
 93a:	80 83       	st	Z, r24
	CLKPR = 0x00;			//clock divide = 1  so  16MHz/1 = 16MHz
 93c:	10 82       	st	Z, r1
	
	UBRR1H = 0;
 93e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    UBRR1L = 103;	// now 250k for CAN  19200 for testing    //9600 baud for gsm modem (207 with 2x on)
 942:	87 e6       	ldi	r24, 0x67	; 103
 944:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
	UCSR1A = 2;		//2x on
 948:	82 e0       	ldi	r24, 0x02	; 2
 94a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = 24;	//tx and rx on AND rxie on
 94e:	88 e1       	ldi	r24, 0x18	; 24
 950:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    UCSR1C = 6;		//8 - 1 - N
 954:	86 e0       	ldi	r24, 0x06	; 6
 956:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

}/* uart1_init */
 95a:	08 95       	ret

0000095c <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{	
	unsigned char tmphead;
	
	if (portKey == 0)
 95c:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <portKey>
 960:	91 11       	cpse	r25, r1
 962:	15 c0       	rjmp	.+42     	; 0x98e <uart_putc+0x32>
	{
		tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 964:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <UART_TxHead>
 968:	9f 5f       	subi	r25, 0xFF	; 255
 96a:	9f 71       	andi	r25, 0x1F	; 31
    
		while ( tmphead == UART_TxTail ){
 96c:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <UART_TxTail>
 970:	29 17       	cp	r18, r25
 972:	e1 f3       	breq	.-8      	; 0x96c <uart_putc+0x10>
			;// wait for free space in buffer 
		}
    
		UART_TxBuf[tmphead] = data;
 974:	e9 2f       	mov	r30, r25
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	ee 58       	subi	r30, 0x8E	; 142
 97a:	fd 4f       	sbci	r31, 0xFD	; 253
 97c:	80 83       	st	Z, r24
		UART_TxHead = tmphead;
 97e:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <UART_TxHead>

		// enable UDRE interrupt 
		UART0_CONTROL |= (1 << UART0_UDRIE);
 982:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 986:	80 62       	ori	r24, 0x20	; 32
 988:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 98c:	08 95       	ret
		
	}
	
	else if (portKey == 1)
 98e:	91 30       	cpi	r25, 0x01	; 1
 990:	a1 f4       	brne	.+40     	; 0x9ba <uart_putc+0x5e>
	{
		tmphead  = (UART1_TxHead + 1) & UART1_TX_BUFFER_MASK;
 992:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <UART1_TxHead>
 996:	9f 5f       	subi	r25, 0xFF	; 255
 998:	9f 71       	andi	r25, 0x1F	; 31
    
		while ( tmphead == UART1_TxTail ){
 99a:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <UART1_TxTail>
 99e:	92 17       	cp	r25, r18
 9a0:	e1 f3       	breq	.-8      	; 0x99a <uart_putc+0x3e>
			;// wait for free space in buffer 		
		}
		//PORTH &= 251;
    
		UART1_TxBuf[tmphead] = data;
 9a2:	e9 2f       	mov	r30, r25
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	e3 5d       	subi	r30, 0xD3	; 211
 9a8:	fd 4f       	sbci	r31, 0xFD	; 253
 9aa:	80 83       	st	Z, r24
		UART1_TxHead = tmphead;
 9ac:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <UART1_TxHead>

		// enable UDRE interrupt 
		UART1_CONTROL |= (1 << UART1_UDRIE);	
 9b0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 9b4:	80 62       	ori	r24, 0x20	; 32
 9b6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	}		
	
}/* uart_putc */
 9ba:	08 95       	ret

000009bc <uart1_putc>:

void uart1_putc(unsigned char data1)
{
	
	unsigned char tmphead;
	tmphead  = (UART1_TxHead + 1) & UART1_TX_BUFFER_MASK;
 9bc:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <UART1_TxHead>
 9c0:	9f 5f       	subi	r25, 0xFF	; 255
 9c2:	9f 71       	andi	r25, 0x1F	; 31
    
		while ( tmphead == UART1_TxTail ){
 9c4:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <UART1_TxTail>
 9c8:	29 17       	cp	r18, r25
 9ca:	e1 f3       	breq	.-8      	; 0x9c4 <uart1_putc+0x8>
			;// wait for free space in buffer 		
		}
		//PORTH &= 251;
    
		UART1_TxBuf[tmphead] = data1;
 9cc:	e9 2f       	mov	r30, r25
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	e3 5d       	subi	r30, 0xD3	; 211
 9d2:	fd 4f       	sbci	r31, 0xFD	; 253
 9d4:	80 83       	st	Z, r24
		UART1_TxHead = tmphead;
 9d6:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <UART1_TxHead>

		// enable UDRE interrupt 
		UART1_CONTROL |= (1 << UART1_UDRIE);	
 9da:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 9de:	80 62       	ori	r24, 0x20	; 32
 9e0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	    	
}/* uart1_putc */
 9e4:	08 95       	ret

000009e6 <external_interrupt_init>:
 * 
 * Reference: ATmega Datasheet Chapter 15 (External Interrupts)
 * 
 */
void external_interrupt_init()
{
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	cd b7       	in	r28, 0x3d	; 61
 9ec:	de b7       	in	r29, 0x3e	; 62
	//INT1 for CAN1, INT0 for CAN2, PCINT7 for CAN3
	EICRA |= (2<<ISC00)|(2<<ISC10);
 9ee:	89 e6       	ldi	r24, 0x69	; 105
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	fc 01       	movw	r30, r24
 9f4:	20 81       	ld	r18, Z
 9f6:	89 e6       	ldi	r24, 0x69	; 105
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	2a 60       	ori	r18, 0x0A	; 10
 9fc:	fc 01       	movw	r30, r24
 9fe:	20 83       	st	Z, r18
	EIMSK  = (1<<INT0) | (1<<INT1);
 a00:	8d e3       	ldi	r24, 0x3D	; 61
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	23 e0       	ldi	r18, 0x03	; 3
 a06:	fc 01       	movw	r30, r24
 a08:	20 83       	st	Z, r18
	//Enable interrupts for PCINT7:0
	PCICR  = (1<<PCIE0)|(1<<PCIE1);
 a0a:	88 e6       	ldi	r24, 0x68	; 104
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	23 e0       	ldi	r18, 0x03	; 3
 a10:	fc 01       	movw	r30, r24
 a12:	20 83       	st	Z, r18
	PCMSK0 = (1<<PCINT7);
 a14:	8b e6       	ldi	r24, 0x6B	; 107
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	20 e8       	ldi	r18, 0x80	; 128
 a1a:	fc 01       	movw	r30, r24
 a1c:	20 83       	st	Z, r18
	PCMSK1 = (1<<PCINT15);
 a1e:	8c e6       	ldi	r24, 0x6C	; 108
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	20 e8       	ldi	r18, 0x80	; 128
 a24:	fc 01       	movw	r30, r24
 a26:	20 83       	st	Z, r18
}
 a28:	00 00       	nop
 a2a:	df 91       	pop	r29
 a2c:	cf 91       	pop	r28
 a2e:	08 95       	ret

00000a30 <io_init>:
 * 
 * Reference: ATmega Datasheet Chapter 13 (I/O-Ports)
 * 
 */
void io_init()
{
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
	//pins 8, 9 and 14 for MCP2515_STB high so the things respond (PE6, PE7, PH2)
	DDRE  = 0b11000010;		//PE0 = RS232 RX1; PE1 = RS232 TX1;  PE6 = STB_CAN1; PE7 = STB_CAN2;
 a38:	8d e2       	ldi	r24, 0x2D	; 45
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	22 ec       	ldi	r18, 0xC2	; 194
 a3e:	fc 01       	movw	r30, r24
 a40:	20 83       	st	Z, r18
	PORTE = 0b00000000;		
 a42:	8e e2       	ldi	r24, 0x2E	; 46
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	fc 01       	movw	r30, r24
 a48:	10 82       	st	Z, r1
	DDRH  = 0b00000111;		//PH0 = CS_CAN1; PH1 = CS_CAN2; PH2 = STB_CAN3
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	91 e0       	ldi	r25, 0x01	; 1
 a4e:	27 e0       	ldi	r18, 0x07	; 7
 a50:	fc 01       	movw	r30, r24
 a52:	20 83       	st	Z, r18
	PORTH = 0b00000011;		//CS_CAN1 high; CS_CAN2 high;
 a54:	82 e0       	ldi	r24, 0x02	; 2
 a56:	91 e0       	ldi	r25, 0x01	; 1
 a58:	23 e0       	ldi	r18, 0x03	; 3
 a5a:	fc 01       	movw	r30, r24
 a5c:	20 83       	st	Z, r18
	//pins 12, 13, 19 for the CS for each MCP2515 PH0, PH1, PB0)

	//pin 21 for MOSI, pin 20  for SCK (PB2, PB1)
	DDRB  = 0b01100111;		//PB0 = CS_CAN3; PB1 = SCK; PB2 = MOSI; PB3 = MISO; PB5 = High drive A; PB6 = Low drive A; PB7 = CAN3_INT; 
 a5e:	84 e2       	ldi	r24, 0x24	; 36
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	27 e6       	ldi	r18, 0x67	; 103
 a64:	fc 01       	movw	r30, r24
 a66:	20 83       	st	Z, r18
	PORTB = 0b00000001;		//set CS_CAN3 high;
 a68:	85 e2       	ldi	r24, 0x25	; 37
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	21 e0       	ldi	r18, 0x01	; 1
 a6e:	fc 01       	movw	r30, r24
 a70:	20 83       	st	Z, r18
	
	DDRL  = 0b00011000;		//PB3 = High drive B; PB4 = Low Drive B;
 a72:	8a e0       	ldi	r24, 0x0A	; 10
 a74:	91 e0       	ldi	r25, 0x01	; 1
 a76:	28 e1       	ldi	r18, 0x18	; 24
 a78:	fc 01       	movw	r30, r24
 a7a:	20 83       	st	Z, r18
	PORTL = 0b00000000;
 a7c:	8b e0       	ldi	r24, 0x0B	; 11
 a7e:	91 e0       	ldi	r25, 0x01	; 1
 a80:	fc 01       	movw	r30, r24
 a82:	10 82       	st	Z, r1
	
	DDRD  = 0b11001000;		//PD0 = CAN2_INT; PD1 = CAN1_INT; PD2 = RS232 RX2; PD3 = RS232 TX2; PD6 = CAN1_TXPIN; PD7 = CAN2_TXPIN;
 a84:	8a e2       	ldi	r24, 0x2A	; 42
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	28 ec       	ldi	r18, 0xC8	; 200
 a8a:	fc 01       	movw	r30, r24
 a8c:	20 83       	st	Z, r18
	DDRD  = 0b00000000;
 a8e:	8a e2       	ldi	r24, 0x2A	; 42
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	fc 01       	movw	r30, r24
 a94:	10 82       	st	Z, r1
	
	DDRC  = 0b00001000;		//PC3 = CAN3_TXPIN;
 a96:	87 e2       	ldi	r24, 0x27	; 39
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	28 e0       	ldi	r18, 0x08	; 8
 a9c:	fc 01       	movw	r30, r24
 a9e:	20 83       	st	Z, r18
	PORTC = 0b00000000;
 aa0:	88 e2       	ldi	r24, 0x28	; 40
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	fc 01       	movw	r30, r24
 aa6:	10 82       	st	Z, r1
	
	DDRJ  = 0b00000000;		//PORTJ is used for digital input;
 aa8:	84 e0       	ldi	r24, 0x04	; 4
 aaa:	91 e0       	ldi	r25, 0x01	; 1
 aac:	fc 01       	movw	r30, r24
 aae:	10 82       	st	Z, r1
	
	DDRA  = 0b00011000;		//PA3 = ENABLE_B; PA4 = ENABLE_A; PA1 = dig input; PA2 = dig input;
 ab0:	81 e2       	ldi	r24, 0x21	; 33
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	28 e1       	ldi	r18, 0x18	; 24
 ab6:	fc 01       	movw	r30, r24
 ab8:	20 83       	st	Z, r18
	PORTA = 0b00010000;
 aba:	82 e2       	ldi	r24, 0x22	; 34
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	20 e1       	ldi	r18, 0x10	; 16
 ac0:	fc 01       	movw	r30, r24
 ac2:	20 83       	st	Z, r18

	DDRK  = 0b00100000;		//PK5 = debugging LED;
 ac4:	87 e0       	ldi	r24, 0x07	; 7
 ac6:	91 e0       	ldi	r25, 0x01	; 1
 ac8:	20 e2       	ldi	r18, 0x20	; 32
 aca:	fc 01       	movw	r30, r24
 acc:	20 83       	st	Z, r18
	// PORTK = 0b00100000;
	
	// Enable external interrupts in order for the CAN bus to communicate with us
	external_interrupt_init();
 ace:	8b df       	rcall	.-234    	; 0x9e6 <external_interrupt_init>
}
 ad0:	00 00       	nop
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	08 95       	ret

00000ad8 <firmware_init>:
/**
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
void firmware_init()
{
 ad8:	cf 93       	push	r28
 ada:	df 93       	push	r29
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
	io_init();
 ae0:	a7 df       	rcall	.-178    	; 0xa30 <io_init>
	// SPI_init();
    // // uart_init(UART_BAUD_SELECT(19200, 16UL));
    uart_init(19200);
 ae2:	80 e0       	ldi	r24, 0x00	; 0
 ae4:	9b e4       	ldi	r25, 0x4B	; 75
 ae6:	02 df       	rcall	.-508    	; 0x8ec <uart_init>
    uart1_init(19200);
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	9b e4       	ldi	r25, 0x4B	; 75
 aec:	1b df       	rcall	.-458    	; 0x924 <uart1_init>
	a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); // Turns ON ADC
 aee:	61 e0       	ldi	r22, 0x01	; 1
 af0:	86 e0       	ldi	r24, 0x06	; 6
 af2:	1d dc       	rcall	.-1990   	; 0x32e <a2dInit>
 af4:	00 00       	nop
	// 	inverters[i].RPM = 0;
	// 	inverters[i].temperature = 0;
	// }

	// accumulators[0].ID=ACCUMULATOR_FRONT;
}
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	08 95       	ret

00000afc <timer_init>:
 afc:	cf 93       	push	r28
 * 
 * Reference: ATmega Datasheet Chapter 17 (16-bit Timer/Counter)
 * 
 */
void timer_init()
{
 afe:	df 93       	push	r29
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
    // http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf
    // Set up 1Khz timer
    TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
 b04:	84 e4       	ldi	r24, 0x44	; 68
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	fc 01       	movw	r30, r24
 b0a:	20 81       	ld	r18, Z
 b0c:	84 e4       	ldi	r24, 0x44	; 68
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	22 60       	ori	r18, 0x02	; 2
 b12:	fc 01       	movw	r30, r24
 b14:	20 83       	st	Z, r18
    TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
 b16:	85 e4       	ldi	r24, 0x45	; 69
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	fc 01       	movw	r30, r24
 b1c:	20 81       	ld	r18, Z
 b1e:	85 e4       	ldi	r24, 0x45	; 69
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	23 60       	ori	r18, 0x03	; 3
 b24:	fc 01       	movw	r30, r24
 b26:	20 83       	st	Z, r18
    OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
 b28:	87 e4       	ldi	r24, 0x47	; 71
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	2a ef       	ldi	r18, 0xFA	; 250
 b2e:	fc 01       	movw	r30, r24
 b30:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);                // Enable COMPA interupt
 b32:	8e e6       	ldi	r24, 0x6E	; 110
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	fc 01       	movw	r30, r24
 b38:	20 81       	ld	r18, Z
 b3a:	8e e6       	ldi	r24, 0x6E	; 110
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	22 60       	ori	r18, 0x02	; 2
 b40:	fc 01       	movw	r30, r24
 b42:	20 83       	st	Z, r18

    // Set up 50Hz comm timer
	TCCR1A = 0b00000000;			//
 b44:	80 e8       	ldi	r24, 0x80	; 128
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	fc 01       	movw	r30, r24
 b4a:	10 82       	st	Z, r1
	TCCR1B = 0b00001101;			// CTC mode & prescale clock by 1024
 b4c:	81 e8       	ldi	r24, 0x81	; 129
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	2d e0       	ldi	r18, 0x0D	; 13
 b52:	fc 01       	movw	r30, r24
 b54:	20 83       	st	Z, r18
	OCR1A =  15000;					// 312 gives 50Hz main comms speed
 b56:	88 e8       	ldi	r24, 0x88	; 136
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	28 e9       	ldi	r18, 0x98	; 152
 b5c:	3a e3       	ldi	r19, 0x3A	; 58
 b5e:	fc 01       	movw	r30, r24
 b60:	31 83       	std	Z+1, r19	; 0x01
 b62:	20 83       	st	Z, r18
	TIMSK1 = 0b00000010;			// Turn on compare interrupt for OCR1A
 b64:	8f e6       	ldi	r24, 0x6F	; 111
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	22 e0       	ldi	r18, 0x02	; 2
 b6a:	fc 01       	movw	r30, r24
 b6c:	20 83       	st	Z, r18
 b6e:	00 00       	nop
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	08 95       	ret

00000b76 <CAN_pull_packet>:
        status                      // SubID?
    );
}

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
 b76:	0f 93       	push	r16
 b78:	1f 93       	push	r17
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	cd b7       	in	r28, 0x3d	; 61
 b80:	de b7       	in	r29, 0x3e	; 62
 b82:	28 97       	sbiw	r28, 0x08	; 8
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	f8 94       	cli
 b88:	de bf       	out	0x3e, r29	; 62
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	cd bf       	out	0x3d, r28	; 61
 b8e:	8a 83       	std	Y+2, r24	; 0x02
 b90:	7c 83       	std	Y+4, r23	; 0x04
 b92:	6b 83       	std	Y+3, r22	; 0x03
 b94:	5e 83       	std	Y+6, r21	; 0x06
 b96:	4d 83       	std	Y+5, r20	; 0x05
 b98:	38 87       	std	Y+8, r19	; 0x08
 b9a:	2f 83       	std	Y+7, r18	; 0x07
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
 b9c:	8a 81       	ldd	r24, Y+2	; 0x02
 b9e:	e3 dd       	rcall	.-1082   	; 0x766 <MCP2515_check_receive_status>
 ba0:	89 83       	std	Y+1, r24	; 0x01
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
 ba2:	89 81       	ldd	r24, Y+1	; 0x01
 ba4:	82 95       	swap	r24
 ba6:	86 95       	lsr	r24
 ba8:	86 95       	lsr	r24
 baa:	83 70       	andi	r24, 0x03	; 3
 bac:	88 2f       	mov	r24, r24
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	82 30       	cpi	r24, 0x02	; 2
 bb2:	91 05       	cpc	r25, r1
 bb4:	89 f0       	breq	.+34     	; 0xbd8 <CAN_pull_packet+0x62>
 bb6:	83 30       	cpi	r24, 0x03	; 3
 bb8:	91 05       	cpc	r25, r1
 bba:	d1 f0       	breq	.+52     	; 0xbf0 <CAN_pull_packet+0x7a>
 bbc:	01 97       	sbiw	r24, 0x01	; 1
 bbe:	79 f5       	brne	.+94     	; 0xc1e <CAN_pull_packet+0xa8>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 bc0:	4f 81       	ldd	r20, Y+7	; 0x07
 bc2:	58 85       	ldd	r21, Y+8	; 0x08
 bc4:	2d 81       	ldd	r18, Y+5	; 0x05
 bc6:	3e 81       	ldd	r19, Y+6	; 0x06
 bc8:	8b 81       	ldd	r24, Y+3	; 0x03
 bca:	9c 81       	ldd	r25, Y+4	; 0x04
 bcc:	8a 01       	movw	r16, r20
 bce:	ac 01       	movw	r20, r24
 bd0:	61 e6       	ldi	r22, 0x61	; 97
 bd2:	8a 81       	ldd	r24, Y+2	; 0x02
 bd4:	e8 dc       	rcall	.-1584   	; 0x5a6 <MCP2515_PullCanPacket>
			break;
 bd6:	24 c0       	rjmp	.+72     	; 0xc20 <CAN_pull_packet+0xaa>
		case 2: // Message in RXB1
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 bd8:	4f 81       	ldd	r20, Y+7	; 0x07
 bda:	58 85       	ldd	r21, Y+8	; 0x08
 bdc:	2d 81       	ldd	r18, Y+5	; 0x05
 bde:	3e 81       	ldd	r19, Y+6	; 0x06
 be0:	8b 81       	ldd	r24, Y+3	; 0x03
 be2:	9c 81       	ldd	r25, Y+4	; 0x04
 be4:	8a 01       	movw	r16, r20
 be6:	ac 01       	movw	r20, r24
 be8:	61 e6       	ldi	r22, 0x61	; 97
 bea:	8a 81       	ldd	r24, Y+2	; 0x02
 bec:	dc dc       	rcall	.-1608   	; 0x5a6 <MCP2515_PullCanPacket>
			break;
 bee:	18 c0       	rjmp	.+48     	; 0xc20 <CAN_pull_packet+0xaa>
		case 3: // Message in both buffers
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 bf0:	4f 81       	ldd	r20, Y+7	; 0x07
 bf2:	58 85       	ldd	r21, Y+8	; 0x08
 bf4:	2d 81       	ldd	r18, Y+5	; 0x05
 bf6:	3e 81       	ldd	r19, Y+6	; 0x06
 bf8:	8b 81       	ldd	r24, Y+3	; 0x03
 bfa:	9c 81       	ldd	r25, Y+4	; 0x04
 bfc:	8a 01       	movw	r16, r20
 bfe:	ac 01       	movw	r20, r24
 c00:	61 e6       	ldi	r22, 0x61	; 97
 c02:	8a 81       	ldd	r24, Y+2	; 0x02
 c04:	d0 dc       	rcall	.-1632   	; 0x5a6 <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
 c06:	4f 81       	ldd	r20, Y+7	; 0x07
 c08:	58 85       	ldd	r21, Y+8	; 0x08
 c0a:	2d 81       	ldd	r18, Y+5	; 0x05
 c0c:	3e 81       	ldd	r19, Y+6	; 0x06
 c0e:	8b 81       	ldd	r24, Y+3	; 0x03
 c10:	9c 81       	ldd	r25, Y+4	; 0x04
 c12:	8a 01       	movw	r16, r20
 c14:	ac 01       	movw	r20, r24
 c16:	61 e6       	ldi	r22, 0x61	; 97
 c18:	8a 81       	ldd	r24, Y+2	; 0x02
 c1a:	c5 dc       	rcall	.-1654   	; 0x5a6 <MCP2515_PullCanPacket>
			break;
 c1c:	01 c0       	rjmp	.+2      	; 0xc20 <CAN_pull_packet+0xaa>
		default:
			break;
 c1e:	00 00       	nop
	}
}
 c20:	00 00       	nop
 c22:	28 96       	adiw	r28, 0x08	; 8
 c24:	0f b6       	in	r0, 0x3f	; 63
 c26:	f8 94       	cli
 c28:	de bf       	out	0x3e, r29	; 62
 c2a:	0f be       	out	0x3f, r0	; 63
 c2c:	cd bf       	out	0x3d, r28	; 61
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	1f 91       	pop	r17
 c34:	0f 91       	pop	r16
 c36:	08 95       	ret

00000c38 <memcpy>:
 c38:	fb 01       	movw	r30, r22
 c3a:	dc 01       	movw	r26, r24
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <memcpy+0xa>
 c3e:	01 90       	ld	r0, Z+
 c40:	0d 92       	st	X+, r0
 c42:	41 50       	subi	r20, 0x01	; 1
 c44:	50 40       	sbci	r21, 0x00	; 0
 c46:	d8 f7       	brcc	.-10     	; 0xc3e <memcpy+0x6>
 c48:	08 95       	ret

00000c4a <_exit>:
 c4a:	f8 94       	cli

00000c4c <__stop_program>:
 c4c:	ff cf       	rjmp	.-2      	; 0xc4c <__stop_program>
