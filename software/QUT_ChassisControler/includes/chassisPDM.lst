   1               		.file	"chassisPDM.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.pdm_init,"ax",@progbits
  12               	.global	pdm_init
  14               	pdm_init:
  15               	.LFB10:
  16               		.file 1 "includes/chassisPDM.c"
   1:includes/chassisPDM.c **** /**
   2:includes/chassisPDM.c ****  * @file chassisPDM.c
   3:includes/chassisPDM.c ****  * @author Jonn Dillon
   4:includes/chassisPDM.c ****  * @date 16/4/2018
   5:includes/chassisPDM.c ****  * @brief Handles functions, calls and utilities related to the Power Distribution Board
   6:includes/chassisPDM.c ****  **/
   7:includes/chassisPDM.c **** 
   8:includes/chassisPDM.c **** #include "chassisPDM.h"
   9:includes/chassisPDM.c **** #include "chassisCAN.h"
  10:includes/chassisPDM.c **** 
  11:includes/chassisPDM.c **** /**
  12:includes/chassisPDM.c ****  * pdm_init()
  13:includes/chassisPDM.c ****  * Input:	none
  14:includes/chassisPDM.c ****  * Returns: none
  15:includes/chassisPDM.c ****  * 
  16:includes/chassisPDM.c ****  * Precharge the motor controllers and then enable relays to allow the starting of the car
  17:includes/chassisPDM.c ****  **/
  18:includes/chassisPDM.c **** void pdm_init()
  19:includes/chassisPDM.c **** {
  17               		.loc 1 19 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  20:includes/chassisPDM.c **** 	pdm.flags[0] |= PDM_ATOMIC_ALARM;						// Turn on the ready to drive alarm (RTD sound)
  23               		.loc 1 20 0
  24 0000 E0E0      		ldi r30,lo8(pdm)
  25 0002 F0E0      		ldi r31,hi8(pdm)
  26 0004 8081      		ld r24,Z
  27 0006 8062      		ori r24,lo8(32)
  28 0008 8083      		st Z,r24
  21:includes/chassisPDM.c **** 	pdm.flags[1] |= PDM_PRECHARGE;							// Begin precharging the Motor controllers
  29               		.loc 1 21 0
  30 000a 8181      		ldd r24,Z+1
  31 000c 8160      		ori r24,lo8(1)
  32 000e 8183      		std Z+1,r24
  33               	.LVL0:
  34               	.LBB4:
  35               	.LBB5:
  36               		.file 2 "/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/7.3.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  37               		.loc 2 187 0
  38 0010 2FEF      		ldi r18,lo8(6399999)
  39 0012 87EA      		ldi r24,hi8(6399999)
  40 0014 91E6      		ldi r25,hlo8(6399999)
  41 0016 2150      	1:	subi r18,1
  42 0018 8040      		sbci r24,0
  43 001a 9040      		sbci r25,0
  44 001c 01F4      		brne 1b
  45 001e 00C0      		rjmp .
  46 0020 0000      		nop
  47               	.LVL1:
  48               	.LBE5:
  49               	.LBE4:
  22:includes/chassisPDM.c **** 	// CAN_send_heartbeat(PDM_H, NORMAL, 1);
  23:includes/chassisPDM.c **** 	_delay_ms(2000);
  24:includes/chassisPDM.c **** 	pdm.flags[0] &= ~PDM_ATOMIC_ALARM;						// Stop sounding the RTD, we are ready to drive after one 
  50               		.loc 1 24 0
  51 0022 8081      		ld r24,Z
  52 0024 8F7D      		andi r24,lo8(-33)
  25:includes/chassisPDM.c **** 	pdm.flags[0] |= PDM_SHUTDOWN_PLUS|PDM_SHUTDOWN_MINUS;	// Enable the relays to allow the starting o
  53               		.loc 1 25 0
  54 0026 806C      		ori r24,lo8(-64)
  55 0028 8083      		st Z,r24
  26:includes/chassisPDM.c **** 	pdm.flags[1] &= ~(PDM_PRECHARGE);						// Shutdown the precharge circuit after 2 seconds. should b
  56               		.loc 1 26 0
  57 002a 8181      		ldd r24,Z+1
  58 002c 8E7F      		andi r24,lo8(-2)
  59 002e 8183      		std Z+1,r24
  60               	/* epilogue start */
  27:includes/chassisPDM.c **** 	// CAN_send_heartbeat(PDM_H, NORMAL, 1);
  28:includes/chassisPDM.c **** }...
  61               		.loc 1 28 0
  62 0030 0895      		ret
  63               		.cfi_endproc
  64               	.LFE10:
  66               	.global	PDM_data
  67               		.data
  70               	PDM_data:
  71 0000 02        		.byte	2
  72 0001 00        		.byte	0
  73 0002 00        		.byte	0
  74 0003 00        		.byte	0
  75               		.comm	pdm,4,1
  76               		.text
  77               	.Letext0:
  78               		.file 3 "/usr/local/Cellar/avr-gcc/7.3.0/avr/include/stdlib.h"
  79               		.file 4 "/usr/local/Cellar/avr-gcc/7.3.0/lib/avr-gcc/7/gcc/avr/7.3.0/include/stddef.h"
  80               		.file 5 "/usr/local/Cellar/avr-gcc/7.3.0/avr/include/stdint.h"
  81               		.file 6 "includes/chassisPDM.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chassisPDM.c
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccO0NjxK.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccO0NjxK.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccO0NjxK.s:4      *ABS*:000000000000003f __SREG__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccO0NjxK.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccO0NjxK.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccO0NjxK.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccO0NjxK.s:14     .text.pdm_init:0000000000000000 pdm_init
                            *COM*:0000000000000004 pdm
/var/folders/my/0z6f376568j9tywzmdyvysy80000gn/T//ccO0NjxK.s:70     .data:0000000000000000 PDM_data

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
