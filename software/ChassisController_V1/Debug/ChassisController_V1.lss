
ChassisController_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00001480  00001514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001480  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bd  00800242  00800242  00001556  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c53  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014b2  00000000  00000000  000054eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a50  00000000  00000000  0000699d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f0  00000000  00000000  000083f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f05  00000000  00000000  00008ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028d6  00000000  00000000  00009be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000c4bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	1c c6       	rjmp	.+3128   	; 0xc3e <__vector_1>
       6:	00 00       	nop
       8:	0f c6       	rjmp	.+3102   	; 0xc28 <__vector_2>
       a:	00 00       	nop
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c6       	rjmp	.+3118   	; 0xc54 <__vector_9>
      26:	00 00       	nop
      28:	20 c6       	rjmp	.+3136   	; 0xc6a <__vector_10>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	71 c6       	rjmp	.+3298   	; 0xd28 <__vector_17>
      46:	00 00       	nop
      48:	6b c0       	rjmp	.+214    	; 0x120 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	67 c0       	rjmp	.+206    	; 0x120 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_25>
      68:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__vector_26>
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	49 c0       	rjmp	.+146    	; 0x120 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__vector_36>
      94:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_37>
      98:	43 c0       	rjmp	.+134    	; 0x120 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	41 c0       	rjmp	.+130    	; 0x120 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3f c0       	rjmp	.+126    	; 0x120 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3d c0       	rjmp	.+122    	; 0x120 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3b c0       	rjmp	.+118    	; 0x120 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	39 c0       	rjmp	.+114    	; 0x120 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	37 c0       	rjmp	.+110    	; 0x120 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	35 c0       	rjmp	.+106    	; 0x120 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	33 c0       	rjmp	.+102    	; 0x120 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	31 c0       	rjmp	.+98     	; 0x120 <__bad_interrupt>
      be:	00 00       	nop
      c0:	2f c0       	rjmp	.+94     	; 0x120 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2d c0       	rjmp	.+90     	; 0x120 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2b c0       	rjmp	.+86     	; 0x120 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	29 c0       	rjmp	.+82     	; 0x120 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	27 c0       	rjmp	.+78     	; 0x120 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	25 c0       	rjmp	.+74     	; 0x120 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	23 c0       	rjmp	.+70     	; 0x120 <__bad_interrupt>
      da:	00 00       	nop
      dc:	21 c0       	rjmp	.+66     	; 0x120 <__bad_interrupt>
      de:	00 00       	nop
      e0:	1f c0       	rjmp	.+62     	; 0x120 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	e0 e8       	ldi	r30, 0x80	; 128
      f8:	f4 e1       	ldi	r31, 0x14	; 20
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a2 34       	cpi	r26, 0x42	; 66
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	24 e0       	ldi	r18, 0x04	; 4
     10c:	a2 e4       	ldi	r26, 0x42	; 66
     10e:	b2 e0       	ldi	r27, 0x02	; 2
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	af 3f       	cpi	r26, 0xFF	; 255
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	8f d3       	rcall	.+1822   	; 0x83a <main>
     11c:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <a2dOn>:
// starts conversion, waits until conversion is done, and returns result
unsigned char a2d_8bit()
{
	// do 10-bit conversion and return highest 8 bits
	return a2d_10bit()>>2;			// return ADC MSB byte
}
     122:	ea e7       	ldi	r30, 0x7A	; 122
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	80 68       	ori	r24, 0x80	; 128
     12a:	80 83       	st	Z, r24
     12c:	08 95       	ret

0000012e <a2dSetPrescaler>:
     12e:	ea e7       	ldi	r30, 0x7A	; 122
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	90 81       	ld	r25, Z
     134:	98 7f       	andi	r25, 0xF8	; 248
     136:	90 83       	st	Z, r25
     138:	90 81       	ld	r25, Z
     13a:	89 2b       	or	r24, r25
     13c:	80 83       	st	Z, r24
     13e:	08 95       	ret

00000140 <a2dSetReference>:
     140:	ec e7       	ldi	r30, 0x7C	; 124
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	90 81       	ld	r25, Z
     146:	9c 7f       	andi	r25, 0xFC	; 252
     148:	90 83       	st	Z, r25
     14a:	20 81       	ld	r18, Z
     14c:	30 e4       	ldi	r19, 0x40	; 64
     14e:	83 9f       	mul	r24, r19
     150:	c0 01       	movw	r24, r0
     152:	11 24       	eor	r1, r1
     154:	82 2b       	or	r24, r18
     156:	80 83       	st	Z, r24
     158:	08 95       	ret

0000015a <a2d_10bit>:
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 64       	ori	r24, 0x40	; 64
     162:	80 83       	st	Z, r24
     164:	80 81       	ld	r24, Z
     166:	86 fd       	sbrc	r24, 6
     168:	fd cf       	rjmp	.-6      	; 0x164 <a2d_10bit+0xa>
     16a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     16e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     172:	08 95       	ret

00000174 <a2dInit>:
     174:	cf 93       	push	r28
     176:	c6 2f       	mov	r28, r22
     178:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     17c:	ec e7       	ldi	r30, 0x7C	; 124
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	90 81       	ld	r25, Z
     182:	9f 7d       	andi	r25, 0xDF	; 223
     184:	90 83       	st	Z, r25
     186:	d3 df       	rcall	.-90     	; 0x12e <a2dSetPrescaler>
     188:	8c 2f       	mov	r24, r28
     18a:	da df       	rcall	.-76     	; 0x140 <a2dSetReference>
     18c:	ca df       	rcall	.-108    	; 0x122 <a2dOn>
     18e:	e5 df       	rcall	.-54     	; 0x15a <a2d_10bit>
     190:	e4 df       	rcall	.-56     	; 0x15a <a2d_10bit>
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <a2d_10bitCh>:
// starts conversion, waits until conversion is done, and returns result
// modded for mega1280 by Ant
unsigned short a2d_10bitCh(unsigned char ch)
{
	// set channel
	ADMUX &= ADC_MUX_MASK;	
     196:	ec e7       	ldi	r30, 0x7C	; 124
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	90 81       	ld	r25, Z
     19c:	90 7e       	andi	r25, 0xE0	; 224
     19e:	90 83       	st	Z, r25
		ADCSRB &= 247;
		ADMUX |= ch;
	}
	*/
	
	ADMUX |= ch;	//comment out this line when using on 16ch parts
     1a0:	90 81       	ld	r25, Z
     1a2:	89 2b       	or	r24, r25
     1a4:	80 83       	st	Z, r24

	// start conversion
	ADCSRA |= (1<<ADSC);
     1a6:	ea e7       	ldi	r30, 0x7A	; 122
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	80 64       	ori	r24, 0x40	; 64
     1ae:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC))
     1b0:	80 81       	ld	r24, Z
     1b2:	86 fd       	sbrc	r24, 6
     1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <a2d_10bitCh+0x1a>
	{
		// wait until conversion complete
	}

	return ADC;	// read ADC (full 10 bits);
     1b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     1be:	08 95       	ret

000001c0 <LED_toggle>:
	}
	return 0;
}

void CAN3_Process()
{
     1c0:	e8 e0       	ldi	r30, 0x08	; 8
     1c2:	f1 e0       	ldi	r31, 0x01	; 1
     1c4:	90 81       	ld	r25, Z
     1c6:	80 e2       	ldi	r24, 0x20	; 32
     1c8:	89 27       	eor	r24, r25
     1ca:	80 83       	st	Z, r24
     1cc:	08 95       	ret

000001ce <LED_off>:
     1ce:	e8 e0       	ldi	r30, 0x08	; 8
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	80 81       	ld	r24, Z
     1d4:	8f 7d       	andi	r24, 0xDF	; 223
     1d6:	80 83       	st	Z, r24
     1d8:	08 95       	ret

000001da <ExternalInterrupt_init>:
     1da:	e9 e6       	ldi	r30, 0x69	; 105
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	8a 60       	ori	r24, 0x0A	; 10
     1e2:	80 83       	st	Z, r24
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	8d bb       	out	0x1d, r24	; 29
     1e8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     1f2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     1f6:	08 95       	ret

000001f8 <IO_init>:
     1f8:	83 ec       	ldi	r24, 0xC3	; 195
     1fa:	8d b9       	out	0x0d, r24	; 13
     1fc:	1e b8       	out	0x0e, r1	; 14
     1fe:	87 e0       	ldi	r24, 0x07	; 7
     200:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
     204:	83 e0       	ldi	r24, 0x03	; 3
     206:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
     20a:	87 e6       	ldi	r24, 0x67	; 103
     20c:	84 b9       	out	0x04, r24	; 4
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	85 b9       	out	0x05, r24	; 5
     212:	88 e1       	ldi	r24, 0x18	; 24
     214:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
     218:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
     21c:	98 ec       	ldi	r25, 0xC8	; 200
     21e:	9a b9       	out	0x0a, r25	; 10
     220:	1a b8       	out	0x0a, r1	; 10
     222:	98 e0       	ldi	r25, 0x08	; 8
     224:	97 b9       	out	0x07, r25	; 7
     226:	18 b8       	out	0x08, r1	; 8
     228:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
     22c:	81 b9       	out	0x01, r24	; 1
     22e:	80 e2       	ldi	r24, 0x20	; 32
     230:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7e0107>
     234:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7e0108>
     238:	d0 cf       	rjmp	.-96     	; 0x1da <ExternalInterrupt_init>
     23a:	08 95       	ret

0000023c <Timer_init>:
     23c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     240:	8d e0       	ldi	r24, 0x0D	; 13
     242:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     246:	88 e3       	ldi	r24, 0x38	; 56
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     24e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     258:	08 95       	ret

0000025a <sendHeartbeat>:
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	c6 2f       	mov	r28, r22
     268:	d4 2f       	mov	r29, r20
     26a:	82 30       	cpi	r24, 0x02	; 2
     26c:	09 f4       	brne	.+2      	; 0x270 <sendHeartbeat+0x16>
     26e:	40 c0       	rjmp	.+128    	; 0x2f0 <sendHeartbeat+0x96>
     270:	18 f4       	brcc	.+6      	; 0x278 <sendHeartbeat+0x1e>
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	41 f0       	breq	.+16     	; 0x286 <sendHeartbeat+0x2c>
     276:	bf c0       	rjmp	.+382    	; 0x3f6 <sendHeartbeat+0x19c>
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	09 f4       	brne	.+2      	; 0x27e <sendHeartbeat+0x24>
     27c:	67 c0       	rjmp	.+206    	; 0x34c <sendHeartbeat+0xf2>
     27e:	84 30       	cpi	r24, 0x04	; 4
     280:	09 f4       	brne	.+2      	; 0x284 <sendHeartbeat+0x2a>
     282:	8f c0       	rjmp	.+286    	; 0x3a2 <sendHeartbeat+0x148>
     284:	b8 c0       	rjmp	.+368    	; 0x3f6 <sendHeartbeat+0x19c>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	cb d6       	rcall	.+3478   	; 0x1020 <MCP2515_findFreeTxBuffer>
     28a:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <inverterStatus>
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	8a 01       	movw	r16, r20
     296:	9b 01       	movw	r18, r22
     298:	3c 60       	ori	r19, 0x0C	; 12
     29a:	4d 2f       	mov	r20, r29
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	03 2e       	mov	r0, r19
     2a4:	3d e0       	ldi	r19, 0x0D	; 13
     2a6:	44 0f       	add	r20, r20
     2a8:	55 1f       	adc	r21, r21
     2aa:	66 1f       	adc	r22, r22
     2ac:	77 1f       	adc	r23, r23
     2ae:	3a 95       	dec	r19
     2b0:	d1 f7       	brne	.-12     	; 0x2a6 <sendHeartbeat+0x4c>
     2b2:	30 2d       	mov	r19, r0
     2b4:	40 2b       	or	r20, r16
     2b6:	51 2b       	or	r21, r17
     2b8:	62 2b       	or	r22, r18
     2ba:	73 2b       	or	r23, r19
     2bc:	0c 2f       	mov	r16, r28
     2be:	10 e0       	ldi	r17, 0x00	; 0
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	0f 2e       	mov	r0, r31
     2c6:	f2 e1       	ldi	r31, 0x12	; 18
     2c8:	00 0f       	add	r16, r16
     2ca:	11 1f       	adc	r17, r17
     2cc:	22 1f       	adc	r18, r18
     2ce:	33 1f       	adc	r19, r19
     2d0:	fa 95       	dec	r31
     2d2:	d1 f7       	brne	.-12     	; 0x2c8 <sendHeartbeat+0x6e>
     2d4:	f0 2d       	mov	r31, r0
     2d6:	78 01       	movw	r14, r16
     2d8:	89 01       	movw	r16, r18
     2da:	e4 2a       	or	r14, r20
     2dc:	f5 2a       	or	r15, r21
     2de:	06 2b       	or	r16, r22
     2e0:	17 2b       	or	r17, r23
     2e2:	2b e7       	ldi	r18, 0x7B	; 123
     2e4:	32 e0       	ldi	r19, 0x02	; 2
     2e6:	48 e0       	ldi	r20, 0x08	; 8
     2e8:	68 2f       	mov	r22, r24
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	b2 d6       	rcall	.+3428   	; 0x1052 <MCP2515_TX>
     2ee:	83 c0       	rjmp	.+262    	; 0x3f6 <sendHeartbeat+0x19c>
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	96 d6       	rcall	.+3372   	; 0x1020 <MCP2515_findFreeTxBuffer>
     2f4:	9a e0       	ldi	r25, 0x0A	; 10
     2f6:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <pdm>
     2fa:	4d 2f       	mov	r20, r29
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	03 2e       	mov	r0, r19
     304:	3d e0       	ldi	r19, 0x0D	; 13
     306:	44 0f       	add	r20, r20
     308:	55 1f       	adc	r21, r21
     30a:	66 1f       	adc	r22, r22
     30c:	77 1f       	adc	r23, r23
     30e:	3a 95       	dec	r19
     310:	d1 f7       	brne	.-12     	; 0x306 <sendHeartbeat+0xac>
     312:	30 2d       	mov	r19, r0
     314:	41 60       	ori	r20, 0x01	; 1
     316:	79 60       	ori	r23, 0x09	; 9
     318:	0c 2f       	mov	r16, r28
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	0f 2e       	mov	r0, r31
     322:	f2 e1       	ldi	r31, 0x12	; 18
     324:	00 0f       	add	r16, r16
     326:	11 1f       	adc	r17, r17
     328:	22 1f       	adc	r18, r18
     32a:	33 1f       	adc	r19, r19
     32c:	fa 95       	dec	r31
     32e:	d1 f7       	brne	.-12     	; 0x324 <sendHeartbeat+0xca>
     330:	f0 2d       	mov	r31, r0
     332:	78 01       	movw	r14, r16
     334:	89 01       	movw	r16, r18
     336:	e4 2a       	or	r14, r20
     338:	f5 2a       	or	r15, r21
     33a:	06 2b       	or	r16, r22
     33c:	17 2b       	or	r17, r23
     33e:	2c e2       	ldi	r18, 0x2C	; 44
     340:	34 e0       	ldi	r19, 0x04	; 4
     342:	44 e0       	ldi	r20, 0x04	; 4
     344:	68 2f       	mov	r22, r24
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	84 d6       	rcall	.+3336   	; 0x1052 <MCP2515_TX>
     34a:	55 c0       	rjmp	.+170    	; 0x3f6 <sendHeartbeat+0x19c>
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	68 d6       	rcall	.+3280   	; 0x1020 <MCP2515_findFreeTxBuffer>
     350:	4d 2f       	mov	r20, r29
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	03 2e       	mov	r0, r19
     35a:	3d e0       	ldi	r19, 0x0D	; 13
     35c:	44 0f       	add	r20, r20
     35e:	55 1f       	adc	r21, r21
     360:	66 1f       	adc	r22, r22
     362:	77 1f       	adc	r23, r23
     364:	3a 95       	dec	r19
     366:	d1 f7       	brne	.-12     	; 0x35c <sendHeartbeat+0x102>
     368:	30 2d       	mov	r19, r0
     36a:	41 60       	ori	r20, 0x01	; 1
     36c:	7a 60       	ori	r23, 0x0A	; 10
     36e:	0c 2f       	mov	r16, r28
     370:	10 e0       	ldi	r17, 0x00	; 0
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	0f 2e       	mov	r0, r31
     378:	f2 e1       	ldi	r31, 0x12	; 18
     37a:	00 0f       	add	r16, r16
     37c:	11 1f       	adc	r17, r17
     37e:	22 1f       	adc	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	fa 95       	dec	r31
     384:	d1 f7       	brne	.-12     	; 0x37a <sendHeartbeat+0x120>
     386:	f0 2d       	mov	r31, r0
     388:	78 01       	movw	r14, r16
     38a:	89 01       	movw	r16, r18
     38c:	e4 2a       	or	r14, r20
     38e:	f5 2a       	or	r15, r21
     390:	06 2b       	or	r16, r22
     392:	17 2b       	or	r17, r23
     394:	2f e1       	ldi	r18, 0x1F	; 31
     396:	33 e0       	ldi	r19, 0x03	; 3
     398:	44 e0       	ldi	r20, 0x04	; 4
     39a:	68 2f       	mov	r22, r24
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	59 d6       	rcall	.+3250   	; 0x1052 <MCP2515_TX>
     3a0:	2a c0       	rjmp	.+84     	; 0x3f6 <sendHeartbeat+0x19c>
     3a2:	84 e0       	ldi	r24, 0x04	; 4
     3a4:	3d d6       	rcall	.+3194   	; 0x1020 <MCP2515_findFreeTxBuffer>
     3a6:	4d 2f       	mov	r20, r29
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	03 2e       	mov	r0, r19
     3b0:	3d e0       	ldi	r19, 0x0D	; 13
     3b2:	44 0f       	add	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	66 1f       	adc	r22, r22
     3b8:	77 1f       	adc	r23, r23
     3ba:	3a 95       	dec	r19
     3bc:	d1 f7       	brne	.-12     	; 0x3b2 <sendHeartbeat+0x158>
     3be:	30 2d       	mov	r19, r0
     3c0:	41 60       	ori	r20, 0x01	; 1
     3c2:	60 64       	ori	r22, 0x40	; 64
     3c4:	0c 2f       	mov	r16, r28
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	0f 2e       	mov	r0, r31
     3ce:	f2 e1       	ldi	r31, 0x12	; 18
     3d0:	00 0f       	add	r16, r16
     3d2:	11 1f       	adc	r17, r17
     3d4:	22 1f       	adc	r18, r18
     3d6:	33 1f       	adc	r19, r19
     3d8:	fa 95       	dec	r31
     3da:	d1 f7       	brne	.-12     	; 0x3d0 <sendHeartbeat+0x176>
     3dc:	f0 2d       	mov	r31, r0
     3de:	78 01       	movw	r14, r16
     3e0:	89 01       	movw	r16, r18
     3e2:	e4 2a       	or	r14, r20
     3e4:	f5 2a       	or	r15, r21
     3e6:	06 2b       	or	r16, r22
     3e8:	17 2b       	or	r17, r23
     3ea:	2a ef       	ldi	r18, 0xFA	; 250
     3ec:	34 e0       	ldi	r19, 0x04	; 4
     3ee:	44 e0       	ldi	r20, 0x04	; 4
     3f0:	68 2f       	mov	r22, r24
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	2e d6       	rcall	.+3164   	; 0x1052 <MCP2515_TX>
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <ADC_read_AVG>:
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	d8 2f       	mov	r29, r24
     412:	ca e0       	ldi	r28, 0x0A	; 10
     414:	c1 2c       	mov	r12, r1
     416:	d1 2c       	mov	r13, r1
     418:	76 01       	movw	r14, r12
     41a:	8d 2f       	mov	r24, r29
     41c:	bc de       	rcall	.-648    	; 0x196 <a2d_10bitCh>
     41e:	c8 0e       	add	r12, r24
     420:	d9 1e       	adc	r13, r25
     422:	e1 1c       	adc	r14, r1
     424:	f1 1c       	adc	r15, r1
     426:	c1 50       	subi	r28, 0x01	; 1
     428:	c1 f7       	brne	.-16     	; 0x41a <ADC_read_AVG+0x16>
     42a:	c7 01       	movw	r24, r14
     42c:	b6 01       	movw	r22, r12
     42e:	2a e0       	ldi	r18, 0x0A	; 10
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	c4 d7       	rcall	.+3976   	; 0x13c0 <__udivmodsi4>
     438:	c9 01       	movw	r24, r18
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	08 95       	ret

00000448 <Pressure_brake_read>:
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	ec 01       	movw	r28, r24
     452:	8b 01       	movw	r16, r22
     454:	8b e0       	ldi	r24, 0x0B	; 11
     456:	d6 df       	rcall	.-84     	; 0x404 <ADC_read_AVG>
     458:	9c 01       	movw	r18, r24
     45a:	21 50       	subi	r18, 0x01	; 1
     45c:	31 09       	sbc	r19, r1
     45e:	2e 3f       	cpi	r18, 0xFE	; 254
     460:	33 40       	sbci	r19, 0x03	; 3
     462:	78 f4       	brcc	.+30     	; 0x482 <Pressure_brake_read+0x3a>
     464:	99 83       	std	Y+1, r25	; 0x01
     466:	88 83       	st	Y, r24
     468:	87 e0       	ldi	r24, 0x07	; 7
     46a:	cc df       	rcall	.-104    	; 0x404 <ADC_read_AVG>
     46c:	9c 01       	movw	r18, r24
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	31 09       	sbc	r19, r1
     472:	2e 3f       	cpi	r18, 0xFE	; 254
     474:	33 40       	sbci	r19, 0x03	; 3
     476:	38 f4       	brcc	.+14     	; 0x486 <Pressure_brake_read+0x3e>
     478:	f8 01       	movw	r30, r16
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	03 c0       	rjmp	.+6      	; 0x488 <Pressure_brake_read+0x40>
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	01 c0       	rjmp	.+2      	; 0x488 <Pressure_brake_read+0x40>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <Pedal_read>:
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	8c 01       	movw	r16, r24
     4a0:	7b 01       	movw	r14, r22
     4a2:	8a e0       	ldi	r24, 0x0A	; 10
     4a4:	af df       	rcall	.-162    	; 0x404 <ADC_read_AVG>
     4a6:	ec 01       	movw	r28, r24
     4a8:	9c 01       	movw	r18, r24
     4aa:	24 56       	subi	r18, 0x64	; 100
     4ac:	31 09       	sbc	r19, r1
     4ae:	21 32       	cpi	r18, 0x21	; 33
     4b0:	33 40       	sbci	r19, 0x03	; 3
     4b2:	08 f0       	brcs	.+2      	; 0x4b6 <Pedal_read+0x24>
     4b4:	46 c0       	rjmp	.+140    	; 0x542 <Pedal_read+0xb0>
     4b6:	88 e0       	ldi	r24, 0x08	; 8
     4b8:	a5 df       	rcall	.-182    	; 0x404 <ADC_read_AVG>
     4ba:	9c 01       	movw	r18, r24
     4bc:	24 56       	subi	r18, 0x64	; 100
     4be:	31 09       	sbc	r19, r1
     4c0:	21 32       	cpi	r18, 0x21	; 33
     4c2:	33 40       	sbci	r19, 0x03	; 3
     4c4:	08 f0       	brcs	.+2      	; 0x4c8 <Pedal_read+0x36>
     4c6:	3f c0       	rjmp	.+126    	; 0x546 <Pedal_read+0xb4>
     4c8:	9e 01       	movw	r18, r28
     4ca:	23 53       	subi	r18, 0x33	; 51
     4cc:	31 09       	sbc	r19, r1
     4ce:	f9 01       	movw	r30, r18
     4d0:	e8 1b       	sub	r30, r24
     4d2:	f9 0b       	sbc	r31, r25
     4d4:	e3 36       	cpi	r30, 0x63	; 99
     4d6:	f1 05       	cpc	r31, r1
     4d8:	c0 f5       	brcc	.+112    	; 0x54a <Pedal_read+0xb8>
     4da:	f8 01       	movw	r30, r16
     4dc:	d1 83       	std	Z+1, r29	; 0x01
     4de:	c0 83       	st	Z, r28
     4e0:	c1 30       	cpi	r28, 0x01	; 1
     4e2:	d2 40       	sbci	r29, 0x02	; 2
     4e4:	58 f0       	brcs	.+22     	; 0x4fc <Pedal_read+0x6a>
     4e6:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <pdm>
     4ea:	84 fd       	sbrc	r24, 4
     4ec:	07 c0       	rjmp	.+14     	; 0x4fc <Pedal_read+0x6a>
     4ee:	80 61       	ori	r24, 0x10	; 16
     4f0:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <pdm>
     4f4:	41 e0       	ldi	r20, 0x01	; 1
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	af de       	rcall	.-674    	; 0x25a <sendHeartbeat>
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	82 df       	rcall	.-252    	; 0x404 <ADC_read_AVG>
     500:	ec 01       	movw	r28, r24
     502:	84 56       	subi	r24, 0x64	; 100
     504:	91 09       	sbc	r25, r1
     506:	81 32       	cpi	r24, 0x21	; 33
     508:	93 40       	sbci	r25, 0x03	; 3
     50a:	08 f5       	brcc	.+66     	; 0x54e <Pedal_read+0xbc>
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	7a df       	rcall	.-268    	; 0x404 <ADC_read_AVG>
     510:	9c 01       	movw	r18, r24
     512:	24 56       	subi	r18, 0x64	; 100
     514:	31 09       	sbc	r19, r1
     516:	21 32       	cpi	r18, 0x21	; 33
     518:	33 40       	sbci	r19, 0x03	; 3
     51a:	d8 f4       	brcc	.+54     	; 0x552 <Pedal_read+0xc0>
     51c:	9e 01       	movw	r18, r28
     51e:	28 1b       	sub	r18, r24
     520:	39 0b       	sbc	r19, r25
     522:	c9 01       	movw	r24, r18
     524:	99 23       	and	r25, r25
     526:	24 f4       	brge	.+8      	; 0x530 <Pedal_read+0x9e>
     528:	88 27       	eor	r24, r24
     52a:	99 27       	eor	r25, r25
     52c:	82 1b       	sub	r24, r18
     52e:	93 0b       	sbc	r25, r19
     530:	c3 97       	sbiw	r24, 0x33	; 51
     532:	83 36       	cpi	r24, 0x63	; 99
     534:	91 05       	cpc	r25, r1
     536:	78 f4       	brcc	.+30     	; 0x556 <Pedal_read+0xc4>
     538:	f7 01       	movw	r30, r14
     53a:	d1 83       	std	Z+1, r29	; 0x01
     53c:	c0 83       	st	Z, r28
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	0b c0       	rjmp	.+22     	; 0x558 <Pedal_read+0xc6>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	09 c0       	rjmp	.+18     	; 0x558 <Pedal_read+0xc6>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	07 c0       	rjmp	.+14     	; 0x558 <Pedal_read+0xc6>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	05 c0       	rjmp	.+10     	; 0x558 <Pedal_read+0xc6>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	03 c0       	rjmp	.+6      	; 0x558 <Pedal_read+0xc6>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	01 c0       	rjmp	.+2      	; 0x558 <Pedal_read+0xc6>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	08 95       	ret

00000566 <UART_parsePoke>:
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	fc 01       	movw	r30, r24
     56c:	21 81       	ldd	r18, Z+1	; 0x01
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	32 2f       	mov	r19, r18
     572:	22 27       	eor	r18, r18
     574:	44 81       	ldd	r20, Z+4	; 0x04
     576:	c5 81       	ldd	r28, Z+5	; 0x05
     578:	d6 81       	ldd	r29, Z+6	; 0x06
     57a:	82 81       	ldd	r24, Z+2	; 0x02
     57c:	b9 01       	movw	r22, r18
     57e:	68 0f       	add	r22, r24
     580:	71 1d       	adc	r23, r1
     582:	68 3c       	cpi	r22, 0xC8	; 200
     584:	71 05       	cpc	r23, r1
     586:	29 f5       	brne	.+74     	; 0x5d2 <UART_parsePoke+0x6c>
     588:	92 b1       	in	r25, 0x02	; 2
     58a:	80 e2       	ldi	r24, 0x20	; 32
     58c:	89 27       	eor	r24, r25
     58e:	82 b9       	out	0x02, r24	; 2
     590:	84 2f       	mov	r24, r20
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	bc 01       	movw	r22, r24
     59a:	55 27       	eor	r21, r21
     59c:	44 27       	eor	r20, r20
     59e:	8c 2f       	mov	r24, r28
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a0 e0       	ldi	r26, 0x00	; 0
     5a4:	b0 e0       	ldi	r27, 0x00	; 0
     5a6:	ba 2f       	mov	r27, r26
     5a8:	a9 2f       	mov	r26, r25
     5aa:	98 2f       	mov	r25, r24
     5ac:	88 27       	eor	r24, r24
     5ae:	84 0f       	add	r24, r20
     5b0:	95 1f       	adc	r25, r21
     5b2:	a6 1f       	adc	r26, r22
     5b4:	b7 1f       	adc	r27, r23
     5b6:	8d 0f       	add	r24, r29
     5b8:	91 1d       	adc	r25, r1
     5ba:	a1 1d       	adc	r26, r1
     5bc:	b1 1d       	adc	r27, r1
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	a1 05       	cpc	r26, r1
     5c2:	b1 05       	cpc	r27, r1
     5c4:	21 f4       	brne	.+8      	; 0x5ce <UART_parsePoke+0x68>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <cellBalancing>
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <UART_parsePoke+0x6c>
     5ce:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <cellBalancing>
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <UART_sendRealTimeData>:
     5d8:	bf 92       	push	r11
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	a2 97       	sbiw	r28, 0x22	; 34
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	8d e2       	ldi	r24, 0x2D	; 45
     5fc:	89 83       	std	Y+1, r24	; 0x01
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	8a 83       	std	Y+2, r24	; 0x02
     602:	ef e1       	ldi	r30, 0x1F	; 31
     604:	f3 e0       	ldi	r31, 0x03	; 3
     606:	81 85       	ldd	r24, Z+9	; 0x09
     608:	92 85       	ldd	r25, Z+10	; 0x0a
     60a:	9b 83       	std	Y+3, r25	; 0x03
     60c:	8c 83       	std	Y+4, r24	; 0x04
     60e:	93 85       	ldd	r25, Z+11	; 0x0b
     610:	24 85       	ldd	r18, Z+12	; 0x0c
     612:	2d 83       	std	Y+5, r18	; 0x05
     614:	9e 83       	std	Y+6, r25	; 0x06
     616:	96 81       	ldd	r25, Z+6	; 0x06
     618:	9f 83       	std	Y+7, r25	; 0x07
     61a:	88 87       	std	Y+8, r24	; 0x08
     61c:	85 85       	ldd	r24, Z+13	; 0x0d
     61e:	96 85       	ldd	r25, Z+14	; 0x0e
     620:	99 87       	std	Y+9, r25	; 0x09
     622:	8a 87       	std	Y+10, r24	; 0x0a
     624:	87 81       	ldd	r24, Z+7	; 0x07
     626:	90 85       	ldd	r25, Z+8	; 0x08
     628:	9b 87       	std	Y+11, r25	; 0x0b
     62a:	8c 87       	std	Y+12, r24	; 0x0c
     62c:	87 85       	ldd	r24, Z+15	; 0x0f
     62e:	90 89       	ldd	r25, Z+16	; 0x10
     630:	9d 87       	std	Y+13, r25	; 0x0d
     632:	8e 87       	std	Y+14, r24	; 0x0e
     634:	ac ef       	ldi	r26, 0xFC	; 252
     636:	b3 e0       	ldi	r27, 0x03	; 3
     638:	13 96       	adiw	r26, 0x03	; 3
     63a:	8c 91       	ld	r24, X
     63c:	13 97       	sbiw	r26, 0x03	; 3
     63e:	14 96       	adiw	r26, 0x04	; 4
     640:	9c 91       	ld	r25, X
     642:	14 97       	sbiw	r26, 0x04	; 4
     644:	9f 87       	std	Y+15, r25	; 0x0f
     646:	88 8b       	std	Y+16, r24	; 0x10
     648:	15 96       	adiw	r26, 0x05	; 5
     64a:	8c 91       	ld	r24, X
     64c:	15 97       	sbiw	r26, 0x05	; 5
     64e:	16 96       	adiw	r26, 0x06	; 6
     650:	9c 91       	ld	r25, X
     652:	16 97       	sbiw	r26, 0x06	; 6
     654:	99 8b       	std	Y+17, r25	; 0x11
     656:	8a 8b       	std	Y+18, r24	; 0x12
     658:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <T1_temp>
     65c:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <T1_temp+0x1>
     660:	9b 8b       	std	Y+19, r25	; 0x13
     662:	8c 8b       	std	Y+20, r24	; 0x14
     664:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <pdm>
     668:	8d 8b       	std	Y+21, r24	; 0x15
     66a:	81 a1       	ldd	r24, Z+33	; 0x21
     66c:	8e 8b       	std	Y+22, r24	; 0x16
     66e:	eb e7       	ldi	r30, 0x7B	; 123
     670:	f2 e0       	ldi	r31, 0x02	; 2
     672:	80 81       	ld	r24, Z
     674:	91 81       	ldd	r25, Z+1	; 0x01
     676:	9f 8b       	std	Y+23, r25	; 0x17
     678:	88 8f       	std	Y+24, r24	; 0x18
     67a:	11 96       	adiw	r26, 0x01	; 1
     67c:	8c 91       	ld	r24, X
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	12 96       	adiw	r26, 0x02	; 2
     682:	9c 91       	ld	r25, X
     684:	99 8f       	std	Y+25, r25	; 0x19
     686:	8a 8f       	std	Y+26, r24	; 0x1a
     688:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <enableSwitch_A>
     68c:	8b 8f       	std	Y+27, r24	; 0x1b
     68e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <steeringAngle+0x1>
     692:	8d 8f       	std	Y+29, r24	; 0x1d
     694:	80 e8       	ldi	r24, 0x80	; 128
     696:	8e 8f       	std	Y+30, r24	; 0x1e
     698:	8f 8f       	std	Y+31, r24	; 0x1f
     69a:	88 a3       	std	Y+32, r24	; 0x20
     69c:	8e 01       	movw	r16, r28
     69e:	0f 5f       	subi	r16, 0xFF	; 255
     6a0:	1f 4f       	sbci	r17, 0xFF	; 255
     6a2:	de 01       	movw	r26, r28
     6a4:	5d 96       	adiw	r26, 0x1d	; 29
     6a6:	7d 01       	movw	r14, r26
     6a8:	a8 01       	movw	r20, r16
     6aa:	b1 2c       	mov	r11, r1
     6ac:	c1 2c       	mov	r12, r1
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	19 c0       	rjmp	.+50     	; 0x6e6 <UART_sendRealTimeData+0x10e>
     6b4:	20 81       	ld	r18, Z
     6b6:	24 34       	cpi	r18, 0x44	; 68
     6b8:	59 f4       	brne	.+22     	; 0x6d0 <UART_sendRealTimeData+0xf8>
     6ba:	dc 90       	ld	r13, X
     6bc:	9b 01       	movw	r18, r22
     6be:	08 2e       	mov	r0, r24
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <UART_sendRealTimeData+0xee>
     6c2:	22 0f       	add	r18, r18
     6c4:	33 1f       	adc	r19, r19
     6c6:	0a 94       	dec	r0
     6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <UART_sendRealTimeData+0xea>
     6ca:	2d 29       	or	r18, r13
     6cc:	2c 93       	st	X, r18
     6ce:	10 82       	st	Z, r1
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	31 96       	adiw	r30, 0x01	; 1
     6d4:	87 30       	cpi	r24, 0x07	; 7
     6d6:	91 05       	cpc	r25, r1
     6d8:	69 f7       	brne	.-38     	; 0x6b4 <UART_sendRealTimeData+0xdc>
     6da:	49 5f       	subi	r20, 0xF9	; 249
     6dc:	5f 4f       	sbci	r21, 0xFF	; 255
     6de:	11 96       	adiw	r26, 0x01	; 1
     6e0:	4e 15       	cp	r20, r14
     6e2:	5f 05       	cpc	r21, r15
     6e4:	21 f0       	breq	.+8      	; 0x6ee <UART_sendRealTimeData+0x116>
     6e6:	fa 01       	movw	r30, r20
     6e8:	8b 2d       	mov	r24, r11
     6ea:	9c 2d       	mov	r25, r12
     6ec:	e3 cf       	rjmp	.-58     	; 0x6b4 <UART_sendRealTimeData+0xdc>
     6ee:	7e 01       	movw	r14, r28
     6f0:	81 e2       	ldi	r24, 0x21	; 33
     6f2:	e8 0e       	add	r14, r24
     6f4:	f1 1c       	adc	r15, r1
     6f6:	f8 01       	movw	r30, r16
     6f8:	81 91       	ld	r24, Z+
     6fa:	8f 01       	movw	r16, r30
     6fc:	21 d6       	rcall	.+3138   	; 0x1340 <uart1_putc>
     6fe:	0e 15       	cp	r16, r14
     700:	1f 05       	cpc	r17, r15
     702:	c9 f7       	brne	.-14     	; 0x6f6 <UART_sendRealTimeData+0x11e>
     704:	a2 96       	adiw	r28, 0x22	; 34
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	08 95       	ret

00000724 <UART_parseInput>:
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	ec 01       	movw	r28, r24
     72a:	1d df       	rcall	.-454    	; 0x566 <UART_parsePoke>
     72c:	84 e4       	ldi	r24, 0x44	; 68
     72e:	08 d6       	rcall	.+3088   	; 0x1340 <uart1_putc>
     730:	53 df       	rcall	.-346    	; 0x5d8 <UART_sendRealTimeData>
     732:	18 82       	st	Y, r1
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <UART_processByte>:
     73a:	84 34       	cpi	r24, 0x44	; 68
     73c:	21 f4       	brne	.+8      	; 0x746 <UART_processByte+0xc>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <stringActive.2071>
     744:	0d c0       	rjmp	.+26     	; 0x760 <UART_processByte+0x26>
     746:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <stringActive.2071>
     74a:	91 30       	cpi	r25, 0x01	; 1
     74c:	49 f4       	brne	.+18     	; 0x760 <UART_processByte+0x26>
     74e:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <count.2069>
     752:	9e 0f       	add	r25, r30
     754:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <count.2069>
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	ee 5b       	subi	r30, 0xBE	; 190
     75c:	fd 4f       	sbci	r31, 0xFD	; 253
     75e:	80 83       	st	Z, r24
     760:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <count.2069>
     764:	e9 30       	cpi	r30, 0x09	; 9
     766:	58 f0       	brcs	.+22     	; 0x77e <UART_processByte+0x44>
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	ef 5b       	subi	r30, 0xBF	; 191
     76c:	fd 4f       	sbci	r31, 0xFD	; 253
     76e:	10 82       	st	Z, r1
     770:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <count.2069>
     774:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <stringActive.2071>
     778:	82 e4       	ldi	r24, 0x42	; 66
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	d3 cf       	rjmp	.-90     	; 0x724 <UART_parseInput>
     77e:	08 95       	ret

00000780 <CAN1_Process>:
     780:	da 01       	movw	r26, r20
     782:	c9 01       	movw	r24, r18
     784:	07 2e       	mov	r0, r23
     786:	7d e0       	ldi	r23, 0x0D	; 13
     788:	b6 95       	lsr	r27
     78a:	a7 95       	ror	r26
     78c:	97 95       	ror	r25
     78e:	87 95       	ror	r24
     790:	7a 95       	dec	r23
     792:	d1 f7       	brne	.-12     	; 0x788 <CAN1_Process+0x8>
     794:	70 2d       	mov	r23, r0
     796:	80 fd       	sbrc	r24, 0
     798:	0f c0       	rjmp	.+30     	; 0x7b8 <CAN1_Process+0x38>
     79a:	81 fd       	sbrc	r24, 1
     79c:	07 c0       	rjmp	.+14     	; 0x7ac <CAN1_Process+0x2c>
     79e:	82 fd       	sbrc	r24, 2
     7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <CAN1_Process+0x32>
     7a2:	83 ff       	sbrs	r24, 3
     7a4:	48 c0       	rjmp	.+144    	; 0x836 <CAN1_Process+0xb6>
     7a6:	23 e0       	ldi	r18, 0x03	; 3
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	08 c0       	rjmp	.+16     	; 0x7bc <CAN1_Process+0x3c>
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	05 c0       	rjmp	.+10     	; 0x7bc <CAN1_Process+0x3c>
     7b2:	22 e0       	ldi	r18, 0x02	; 2
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <CAN1_Process+0x3c>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	db 01       	movw	r26, r22
     7be:	11 96       	adiw	r26, 0x01	; 1
     7c0:	8c 91       	ld	r24, X
     7c2:	11 97       	sbiw	r26, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	f9 01       	movw	r30, r18
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	e2 0f       	add	r30, r18
     7d6:	f3 1f       	adc	r31, r19
     7d8:	e4 50       	subi	r30, 0x04	; 4
     7da:	fc 4f       	sbci	r31, 0xFC	; 252
     7dc:	92 83       	std	Z+2, r25	; 0x02
     7de:	81 83       	std	Z+1, r24	; 0x01
     7e0:	2c 91       	ld	r18, X
     7e2:	92 2b       	or	r25, r18
     7e4:	92 83       	std	Z+2, r25	; 0x02
     7e6:	81 83       	std	Z+1, r24	; 0x01
     7e8:	13 96       	adiw	r26, 0x03	; 3
     7ea:	8c 91       	ld	r24, X
     7ec:	13 97       	sbiw	r26, 0x03	; 3
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	94 83       	std	Z+4, r25	; 0x04
     7f2:	83 83       	std	Z+3, r24	; 0x03
     7f4:	12 96       	adiw	r26, 0x02	; 2
     7f6:	2c 91       	ld	r18, X
     7f8:	12 97       	sbiw	r26, 0x02	; 2
     7fa:	92 2b       	or	r25, r18
     7fc:	94 83       	std	Z+4, r25	; 0x04
     7fe:	83 83       	std	Z+3, r24	; 0x03
     800:	14 96       	adiw	r26, 0x04	; 4
     802:	8c 91       	ld	r24, X
     804:	14 97       	sbiw	r26, 0x04	; 4
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	96 83       	std	Z+6, r25	; 0x06
     80a:	85 83       	std	Z+5, r24	; 0x05
     80c:	15 96       	adiw	r26, 0x05	; 5
     80e:	2c 91       	ld	r18, X
     810:	15 97       	sbiw	r26, 0x05	; 5
     812:	92 2b       	or	r25, r18
     814:	96 83       	std	Z+6, r25	; 0x06
     816:	85 83       	std	Z+5, r24	; 0x05
     818:	17 96       	adiw	r26, 0x07	; 7
     81a:	9c 91       	ld	r25, X
     81c:	17 97       	sbiw	r26, 0x07	; 7
     81e:	29 2f       	mov	r18, r25
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	30 87       	std	Z+8, r19	; 0x08
     824:	27 83       	std	Z+7, r18	; 0x07
     826:	16 96       	adiw	r26, 0x06	; 6
     828:	8c 91       	ld	r24, X
     82a:	89 2b       	or	r24, r25
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	90 87       	std	Z+8, r25	; 0x08
     830:	87 83       	std	Z+7, r24	; 0x07
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	08 95       	ret
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret

0000083a <main>:
	
}

int main(void)
{
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	6d 97       	sbiw	r28, 0x1d	; 29
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84e:	8f e1       	ldi	r24, 0x1F	; 31
     850:	9e e4       	ldi	r25, 0x4E	; 78
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <main+0x18>
     856:	00 c0       	rjmp	.+0      	; 0x858 <main+0x1e>
     858:	00 00       	nop
	_delay_ms(5);
	IO_init();
     85a:	ce dc       	rcall	.-1636   	; 0x1f8 <IO_init>
	SPI_init();
     85c:	95 d4       	rcall	.+2346   	; 0x1188 <SPI_init>
	uart1_init(19200);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	9b e4       	ldi	r25, 0x4B	; 75
     862:	52 d5       	rcall	.+2724   	; 0x1308 <uart1_init>
	a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); //Turns ON also
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	86 e0       	ldi	r24, 0x06	; 6
     868:	85 dc       	rcall	.-1782   	; 0x174 <a2dInit>
	MCP2515_init(MCP2515_CAN1);
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	22 d3       	rcall	.+1604   	; 0xeb2 <MCP2515_init>
	MCP2515_init(MCP2515_CAN2);
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	20 d3       	rcall	.+1600   	; 0xeb2 <MCP2515_init>
	MCP2515_init(MCP2515_CAN3);
     872:	84 e0       	ldi	r24, 0x04	; 4
     874:	1e d3       	rcall	.+1596   	; 0xeb2 <MCP2515_init>
	
	sei();
     876:	78 94       	sei
	PORTJ |= (1<<PINJ6);
     878:	e5 e0       	ldi	r30, 0x05	; 5
     87a:	f1 e0       	ldi	r31, 0x01	; 1
     87c:	80 81       	ld	r24, Z
     87e:	80 64       	ori	r24, 0x40	; 64
     880:	80 83       	st	Z, r24
	Timer_init();
     882:	dc dc       	rcall	.-1608   	; 0x23c <Timer_init>
	while((STATUS_REG & IGNITION) == 0)
     884:	f3 99       	sbic	0x1e, 3	; 30
     886:	10 c0       	rjmp	.+32     	; 0x8a8 <main+0x6e>
	{
		sendHeartbeat(PDM_H, NORMAL, 1);
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	e5 dc       	rcall	.-1590   	; 0x25a <sendHeartbeat>
		LED_toggle();
     890:	97 dc       	rcall	.-1746   	; 0x1c0 <LED_toggle>
     892:	9f ef       	ldi	r25, 0xFF	; 255
     894:	e3 ed       	ldi	r30, 0xD3	; 211
     896:	f0 e3       	ldi	r31, 0x30	; 48
     898:	91 50       	subi	r25, 0x01	; 1
     89a:	e0 40       	sbci	r30, 0x00	; 0
     89c:	f0 40       	sbci	r31, 0x00	; 0
     89e:	e1 f7       	brne	.-8      	; 0x898 <main+0x5e>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <main+0x68>
     8a2:	00 00       	nop
	MCP2515_init(MCP2515_CAN3);
	
	sei();
	PORTJ |= (1<<PINJ6);
	Timer_init();
	while((STATUS_REG & IGNITION) == 0)
     8a4:	f3 9b       	sbis	0x1e, 3	; 30
     8a6:	f0 cf       	rjmp	.-32     	; 0x888 <main+0x4e>
		LED_toggle();
		_delay_ms(1000);
		
	}
	
	pdm.flags[0] |= PDM_ATOMIC_ALARM;
     8a8:	0c e2       	ldi	r16, 0x2C	; 44
     8aa:	14 e0       	ldi	r17, 0x04	; 4
     8ac:	f8 01       	movw	r30, r16
     8ae:	80 81       	ld	r24, Z
     8b0:	80 62       	ori	r24, 0x20	; 32
     8b2:	80 83       	st	Z, r24
	sendHeartbeat(PDM_H, NORMAL, 1);
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	cf dc       	rcall	.-1634   	; 0x25a <sendHeartbeat>
     8bc:	ff ef       	ldi	r31, 0xFF	; 255
     8be:	23 ed       	ldi	r18, 0xD3	; 211
     8c0:	80 e3       	ldi	r24, 0x30	; 48
     8c2:	f1 50       	subi	r31, 0x01	; 1
     8c4:	20 40       	sbci	r18, 0x00	; 0
     8c6:	80 40       	sbci	r24, 0x00	; 0
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <main+0x88>
     8ca:	00 c0       	rjmp	.+0      	; 0x8cc <main+0x92>
     8cc:	00 00       	nop
	_delay_ms(1000);
	pdm.flags[0] &= ~PDM_ATOMIC_ALARM;
     8ce:	f8 01       	movw	r30, r16
     8d0:	80 81       	ld	r24, Z
     8d2:	8f 7d       	andi	r24, 0xDF	; 223
	pdm.flags[0] |= PDM_SHUTDOWN_PLUS;
	pdm.flags[0] |= PDM_SHUTDOWN_MINUS;
     8d4:	80 6c       	ori	r24, 0xC0	; 192
     8d6:	80 83       	st	Z, r24
	sendHeartbeat(PDM_H, NORMAL, 1);
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	bd dc       	rcall	.-1670   	; 0x25a <sendHeartbeat>
     8e0:	ec ef       	ldi	r30, 0xFC	; 252
     8e2:	f3 e0       	ldi	r31, 0x03	; 3
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
	
	//initialise inverter structs
	for(uint8_t i = 0; i < NUM_INVERTERS; i++)
	{
		inverters[i].ID=1<<i;
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	32 2f       	mov	r19, r18
     8ec:	08 2e       	mov	r0, r24
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <main+0xb8>
     8f0:	33 0f       	add	r19, r19
     8f2:	0a 94       	dec	r0
     8f4:	ea f7       	brpl	.-6      	; 0x8f0 <main+0xb6>
     8f6:	30 83       	st	Z, r19
		inverters[i].current = 0;
     8f8:	16 82       	std	Z+6, r1	; 0x06
     8fa:	15 82       	std	Z+5, r1	; 0x05
		inverters[i].duty = 0;
     8fc:	10 86       	std	Z+8, r1	; 0x08
     8fe:	17 82       	std	Z+7, r1	; 0x07
		inverters[i].RPM = 0;
     900:	12 82       	std	Z+2, r1	; 0x02
     902:	11 82       	std	Z+1, r1	; 0x01
		inverters[i].temperature = 0;
     904:	14 82       	std	Z+4, r1	; 0x04
     906:	13 82       	std	Z+3, r1	; 0x03
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	39 96       	adiw	r30, 0x09	; 9
	pdm.flags[0] |= PDM_SHUTDOWN_PLUS;
	pdm.flags[0] |= PDM_SHUTDOWN_MINUS;
	sendHeartbeat(PDM_H, NORMAL, 1);
	
	//initialise inverter structs
	for(uint8_t i = 0; i < NUM_INVERTERS; i++)
     90c:	84 30       	cpi	r24, 0x04	; 4
     90e:	91 05       	cpc	r25, r1
     910:	61 f7       	brne	.-40     	; 0x8ea <main+0xb0>
		inverters[i].duty = 0;
		inverters[i].RPM = 0;
		inverters[i].temperature = 0;
	}

	accumulators[0].ID=ACCUMULATOR_FRONT;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <accumulators+0x4>
	
	//define the pedal positions.
	uint16_t throttle=0, brake=0, brakePressureF=0, brakePressureR=0;
     918:	1a 82       	std	Y+2, r1	; 0x02
     91a:	19 82       	std	Y+1, r1	; 0x01
     91c:	1c 82       	std	Y+4, r1	; 0x04
     91e:	1b 82       	std	Y+3, r1	; 0x03
     920:	1e 82       	std	Y+6, r1	; 0x06
     922:	1d 82       	std	Y+5, r1	; 0x05
     924:	18 86       	std	Y+8, r1	; 0x08
     926:	1f 82       	std	Y+7, r1	; 0x07
	//read the pedal values, error state if the thresholds are out of order.
	if(Pedal_read(&throttle, &brake) == 0)error_state(ERROR_PEDALS);
     928:	be 01       	movw	r22, r28
     92a:	6d 5f       	subi	r22, 0xFD	; 253
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	ce 01       	movw	r24, r28
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	af dd       	rcall	.-1186   	; 0x492 <Pedal_read>
	if(Pressure_brake_read(&brakePressureF, &brakePressureR) == 0)error_state(ERROR_BRAKE_PRESSURE);
     934:	be 01       	movw	r22, r28
     936:	69 5f       	subi	r22, 0xF9	; 249
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	ce 01       	movw	r24, r28
     93c:	05 96       	adiw	r24, 0x05	; 5
     93e:	84 dd       	rcall	.-1272   	; 0x448 <Pressure_brake_read>

	uint8_t steeringWheelData[8]={0,0,0,255,0,255,0,255};
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	e6 e3       	ldi	r30, 0x36	; 54
     944:	f2 e0       	ldi	r31, 0x02	; 2
     946:	de 01       	movw	r26, r28
     948:	19 96       	adiw	r26, 0x09	; 9
     94a:	01 90       	ld	r0, Z+
     94c:	0d 92       	st	X+, r0
     94e:	8a 95       	dec	r24
     950:	e1 f7       	brne	.-8      	; 0x94a <main+0x110>
		else inverterStatus = 1;
		
		unsigned int temp_currentTorqueDemand = AN1_voltage / 4;
		if (temp_currentTorqueDemand > 256) temp_currentTorqueDemand = 0;
		if (temp_currentTorqueDemand < 10) temp_currentTorqueDemand = 0;
		currentTorqueDemand[0] = temp_currentTorqueDemand;
     952:	0f 2e       	mov	r0, r31
     954:	fb e7       	ldi	r31, 0x7B	; 123
     956:	cf 2e       	mov	r12, r31
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	df 2e       	mov	r13, r31
     95c:	f0 2d       	mov	r31, r0
		
		
		uint16_t temp_ADC_read = a2d_10bitCh(1);
		int i = 0;
		
		while (radiator_cals_acewell_22k[i] > temp_ADC_read) i++;
     95e:	0f 2e       	mov	r0, r31
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	8f 2e       	mov	r8, r31
     964:	f2 e0       	ldi	r31, 0x02	; 2
     966:	9f 2e       	mov	r9, r31
     968:	f0 2d       	mov	r31, r0
		steeringAngle = ADC_read_AVG(STEERING_ANGLE);
		
		
		
		uint16_t temp_ADC_read = a2d_10bitCh(1);
		int i = 0;
     96a:	41 2c       	mov	r4, r1
     96c:	51 2c       	mov	r5, r1
     96e:	0f 2e       	mov	r0, r31
     970:	f2 e0       	ldi	r31, 0x02	; 2
     972:	6f 2e       	mov	r6, r31
     974:	f2 e0       	ldi	r31, 0x02	; 2
     976:	7f 2e       	mov	r7, r31
     978:	f0 2d       	mov	r31, r0
		T1_temp = temp_ADC_read + ((i * 3) + 25) * 10;
		
		// temp loop. if fan is off and temp is over x deg turn fan on
		// else if fan is on and temp is blow y deg turn fan off
		if((T1_temp > 500) && ((pdm.flags[0] & 1) == 0))pdm.flags[0] |= 1;			//turn fan on
		else if ((T1_temp < 480) && ((pdm.flags[0] & 1) == 1)) pdm.flags[0] &= ~1;	//turn fan off
     97a:	0f 2e       	mov	r0, r31
     97c:	fc e2       	ldi	r31, 0x2C	; 44
     97e:	af 2e       	mov	r10, r31
     980:	f4 e0       	ldi	r31, 0x04	; 4
     982:	bf 2e       	mov	r11, r31
     984:	f0 2d       	mov	r31, r0

	uint8_t steeringWheelData[8]={0,0,0,255,0,255,0,255};
    while (1) 
    {

		MCP2515_TX(MCP2515_CAN3, MCP2515_findFreeTxBuffer(MCP2515_CAN3),8,steeringWheelData,0x400000);
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	4b d3       	rcall	.+1686   	; 0x1020 <MCP2515_findFreeTxBuffer>
     98a:	e1 2c       	mov	r14, r1
     98c:	f1 2c       	mov	r15, r1
     98e:	00 e4       	ldi	r16, 0x40	; 64
     990:	10 e0       	ldi	r17, 0x00	; 0
     992:	9e 01       	movw	r18, r28
     994:	27 5f       	subi	r18, 0xF7	; 247
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	48 e0       	ldi	r20, 0x08	; 8
     99a:	68 2f       	mov	r22, r24
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	59 d3       	rcall	.+1714   	; 0x1052 <MCP2515_TX>
		steeringWheelData[1]++;
     9a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
     9a4:	8a 87       	std	Y+10, r24	; 0x0a
		
		
		//check for available TX buffer
		unsigned int AN1_voltage = a2d_10bitCh(4);
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	f6 db       	rcall	.-2068   	; 0x196 <a2d_10bitCh>
     9aa:	7c 01       	movw	r14, r24
		unsigned int AN2_voltage = a2d_10bitCh(3);
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	f3 db       	rcall	.-2074   	; 0x196 <a2d_10bitCh>
		
		
		if(STATUS_REG & CAN1_DataWaiting)
     9b0:	f0 9b       	sbis	0x1e, 0	; 30
     9b2:	60 c0       	rjmp	.+192    	; 0xa74 <main+0x23a>
		{
			uint8_t status = MCP2515_check_receive_status(MCP2515_CAN1);
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	d1 d3       	rcall	.+1954   	; 0x115a <MCP2515_check_receive_status>
			uint8_t data[8];
			uint32_t ID;
			uint8_t numBytes;
			switch(status>>6)
     9b8:	82 95       	swap	r24
     9ba:	86 95       	lsr	r24
     9bc:	86 95       	lsr	r24
     9be:	83 70       	andi	r24, 0x03	; 3
     9c0:	82 30       	cpi	r24, 0x02	; 2
     9c2:	d1 f0       	breq	.+52     	; 0x9f8 <main+0x1be>
     9c4:	83 30       	cpi	r24, 0x03	; 3
     9c6:	71 f1       	breq	.+92     	; 0xa24 <main+0x1ea>
     9c8:	81 30       	cpi	r24, 0x01	; 1
     9ca:	09 f0       	breq	.+2      	; 0x9ce <main+0x194>
     9cc:	52 c0       	rjmp	.+164    	; 0xa72 <main+0x238>
			{
				case 1:
					//pull the data off the MCP2515 and place in memory
					MCP2515_PullCanPacket(MCP2515_CAN1, MCP2515_RXB0SIDH, &numBytes, data, &ID);
     9ce:	8e 01       	movw	r16, r28
     9d0:	07 5e       	subi	r16, 0xE7	; 231
     9d2:	1f 4f       	sbci	r17, 0xFF	; 255
     9d4:	9e 01       	movw	r18, r28
     9d6:	2f 5e       	subi	r18, 0xEF	; 239
     9d8:	3f 4f       	sbci	r19, 0xFF	; 255
     9da:	ae 01       	movw	r20, r28
     9dc:	43 5e       	subi	r20, 0xE3	; 227
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	61 e6       	ldi	r22, 0x61	; 97
     9e2:	8b d2       	rcall	.+1302   	; 0xefa <MCP2515_PullCanPacket>
					if(CAN1_Process(numBytes, data, ID) == 0)error_state(ERROR_INVERTER_RESPONSE);
     9e4:	29 8d       	ldd	r18, Y+25	; 0x19
     9e6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     9e8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     9ea:	5c 8d       	ldd	r21, Y+28	; 0x1c
     9ec:	be 01       	movw	r22, r28
     9ee:	6f 5e       	subi	r22, 0xEF	; 239
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9f4:	c5 de       	rcall	.-630    	; 0x780 <CAN1_Process>
     9f6:	3d c0       	rjmp	.+122    	; 0xa72 <main+0x238>
					break;
				case 2:
					MCP2515_PullCanPacket(MCP2515_CAN1, MCP2515_RXB1SIDH, &numBytes, data, &ID );
     9f8:	8e 01       	movw	r16, r28
     9fa:	07 5e       	subi	r16, 0xE7	; 231
     9fc:	1f 4f       	sbci	r17, 0xFF	; 255
     9fe:	9e 01       	movw	r18, r28
     a00:	2f 5e       	subi	r18, 0xEF	; 239
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	ae 01       	movw	r20, r28
     a06:	43 5e       	subi	r20, 0xE3	; 227
     a08:	5f 4f       	sbci	r21, 0xFF	; 255
     a0a:	61 e7       	ldi	r22, 0x71	; 113
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	75 d2       	rcall	.+1258   	; 0xefa <MCP2515_PullCanPacket>
					if(CAN1_Process(numBytes, data, ID) == 0)error_state(ERROR_INVERTER_RESPONSE);
     a10:	29 8d       	ldd	r18, Y+25	; 0x19
     a12:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a14:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a16:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a18:	be 01       	movw	r22, r28
     a1a:	6f 5e       	subi	r22, 0xEF	; 239
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a20:	af de       	rcall	.-674    	; 0x780 <CAN1_Process>
     a22:	27 c0       	rjmp	.+78     	; 0xa72 <main+0x238>
					break;
				case 3:
					MCP2515_PullCanPacket(MCP2515_CAN1, MCP2515_RXB0SIDH, &numBytes, data, &ID );
     a24:	8e 01       	movw	r16, r28
     a26:	07 5e       	subi	r16, 0xE7	; 231
     a28:	1f 4f       	sbci	r17, 0xFF	; 255
     a2a:	9e 01       	movw	r18, r28
     a2c:	2f 5e       	subi	r18, 0xEF	; 239
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	ae 01       	movw	r20, r28
     a32:	43 5e       	subi	r20, 0xE3	; 227
     a34:	5f 4f       	sbci	r21, 0xFF	; 255
     a36:	61 e6       	ldi	r22, 0x61	; 97
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	5f d2       	rcall	.+1214   	; 0xefa <MCP2515_PullCanPacket>
					if(CAN1_Process(numBytes, data, ID) == 0)error_state(ERROR_INVERTER_RESPONSE);
     a3c:	29 8d       	ldd	r18, Y+25	; 0x19
     a3e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a40:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a42:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a44:	be 01       	movw	r22, r28
     a46:	6f 5e       	subi	r22, 0xEF	; 239
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a4c:	99 de       	rcall	.-718    	; 0x780 <CAN1_Process>
					MCP2515_PullCanPacket(MCP2515_CAN1, MCP2515_RXB1SIDH, &numBytes, data, &ID );
     a4e:	9e 01       	movw	r18, r28
     a50:	2f 5e       	subi	r18, 0xEF	; 239
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	ae 01       	movw	r20, r28
     a56:	43 5e       	subi	r20, 0xE3	; 227
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	61 e7       	ldi	r22, 0x71	; 113
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	4d d2       	rcall	.+1178   	; 0xefa <MCP2515_PullCanPacket>
					if(CAN1_Process(numBytes, data, ID) == 0)error_state(ERROR_INVERTER_RESPONSE);
     a60:	29 8d       	ldd	r18, Y+25	; 0x19
     a62:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a64:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a66:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a68:	be 01       	movw	r22, r28
     a6a:	6f 5e       	subi	r22, 0xEF	; 239
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a70:	87 de       	rcall	.-754    	; 0x780 <CAN1_Process>
					break;
				default:
					break;
			}
			STATUS_REG &= ~(CAN1_DataWaiting);
     a72:	f0 98       	cbi	0x1e, 0	; 30
		}
		
		
		if(STATUS_REG & CAN2_DataWaiting)
     a74:	f1 9b       	sbis	0x1e, 1	; 30
     a76:	3b c0       	rjmp	.+118    	; 0xaee <main+0x2b4>
		{
			uint8_t status = MCP2515_check_receive_status(MCP2515_CAN2);
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	6f d3       	rcall	.+1758   	; 0x115a <MCP2515_check_receive_status>
			uint8_t data[8];
			uint32_t ID;
			uint8_t numBytes;
			switch(status>>6)
     a7c:	82 95       	swap	r24
     a7e:	86 95       	lsr	r24
     a80:	86 95       	lsr	r24
     a82:	83 70       	andi	r24, 0x03	; 3
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	89 f0       	breq	.+34     	; 0xaaa <main+0x270>
     a88:	83 30       	cpi	r24, 0x03	; 3
     a8a:	e1 f0       	breq	.+56     	; 0xac4 <main+0x28a>
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	79 f5       	brne	.+94     	; 0xaee <main+0x2b4>
			{
				case 1:
					MCP2515_PullCanPacket(MCP2515_CAN2, MCP2515_RXB0SIDH, &numBytes, data, &ID);
     a90:	8e 01       	movw	r16, r28
     a92:	07 5e       	subi	r16, 0xE7	; 231
     a94:	1f 4f       	sbci	r17, 0xFF	; 255
     a96:	9e 01       	movw	r18, r28
     a98:	2f 5e       	subi	r18, 0xEF	; 239
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	ae 01       	movw	r20, r28
     a9e:	43 5e       	subi	r20, 0xE3	; 227
     aa0:	5f 4f       	sbci	r21, 0xFF	; 255
     aa2:	61 e6       	ldi	r22, 0x61	; 97
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	29 d2       	rcall	.+1106   	; 0xefa <MCP2515_PullCanPacket>
     aa8:	22 c0       	rjmp	.+68     	; 0xaee <main+0x2b4>
					if(CAN2_Process(numBytes, data, ID) == 0)error_state(ERROR_CAN2_RESPONSE);
					break;
				case 2:
					MCP2515_PullCanPacket(MCP2515_CAN2, MCP2515_RXB1SIDH, &numBytes, data, &ID);
     aaa:	8e 01       	movw	r16, r28
     aac:	07 5e       	subi	r16, 0xE7	; 231
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	9e 01       	movw	r18, r28
     ab2:	2f 5e       	subi	r18, 0xEF	; 239
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	ae 01       	movw	r20, r28
     ab8:	43 5e       	subi	r20, 0xE3	; 227
     aba:	5f 4f       	sbci	r21, 0xFF	; 255
     abc:	61 e7       	ldi	r22, 0x71	; 113
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	1c d2       	rcall	.+1080   	; 0xefa <MCP2515_PullCanPacket>
     ac2:	15 c0       	rjmp	.+42     	; 0xaee <main+0x2b4>
					if(CAN2_Process(numBytes, data, ID) == 0)error_state(ERROR_CAN2_RESPONSE);
					break;
				case 3:
					MCP2515_PullCanPacket(MCP2515_CAN2, MCP2515_RXB0SIDH, &numBytes, data, &ID);
     ac4:	8e 01       	movw	r16, r28
     ac6:	07 5e       	subi	r16, 0xE7	; 231
     ac8:	1f 4f       	sbci	r17, 0xFF	; 255
     aca:	9e 01       	movw	r18, r28
     acc:	2f 5e       	subi	r18, 0xEF	; 239
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	ae 01       	movw	r20, r28
     ad2:	43 5e       	subi	r20, 0xE3	; 227
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	61 e6       	ldi	r22, 0x61	; 97
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	0f d2       	rcall	.+1054   	; 0xefa <MCP2515_PullCanPacket>
					if(CAN2_Process(numBytes, data, ID) == 0)error_state(ERROR_CAN2_RESPONSE);
					MCP2515_PullCanPacket(MCP2515_CAN2, MCP2515_RXB1SIDH, &numBytes, data, &ID);
     adc:	9e 01       	movw	r18, r28
     ade:	2f 5e       	subi	r18, 0xEF	; 239
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	ae 01       	movw	r20, r28
     ae4:	43 5e       	subi	r20, 0xE3	; 227
     ae6:	5f 4f       	sbci	r21, 0xFF	; 255
     ae8:	61 e7       	ldi	r22, 0x71	; 113
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	06 d2       	rcall	.+1036   	; 0xefa <MCP2515_PullCanPacket>
					if(CAN2_Process(numBytes, data, ID) == 0)error_state(ERROR_CAN2_RESPONSE);
					break;
			}
		}
		if(STATUS_REG & CAN3_DataWaiting)
     aee:	8e b3       	in	r24, 0x1e	; 30
		}
		
		
		
		
		if((PINA & 128) == 128) inverterStatus = 0;
     af0:	07 9b       	sbis	0x00, 7	; 0
     af2:	03 c0       	rjmp	.+6      	; 0xafa <main+0x2c0>
     af4:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <inverterStatus>
     af8:	03 c0       	rjmp	.+6      	; 0xb00 <main+0x2c6>
		else inverterStatus = 1;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <inverterStatus>
		
		unsigned int temp_currentTorqueDemand = AN1_voltage / 4;
     b00:	c7 01       	movw	r24, r14
     b02:	96 95       	lsr	r25
     b04:	87 95       	ror	r24
     b06:	96 95       	lsr	r25
     b08:	87 95       	ror	r24
		if (temp_currentTorqueDemand > 256) temp_currentTorqueDemand = 0;
     b0a:	81 30       	cpi	r24, 0x01	; 1
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	9f 07       	cpc	r25, r31
     b10:	08 f0       	brcs	.+2      	; 0xb14 <main+0x2da>
     b12:	86 c0       	rjmp	.+268    	; 0xc20 <main+0x3e6>
		if (temp_currentTorqueDemand < 10) temp_currentTorqueDemand = 0;
     b14:	8a 30       	cpi	r24, 0x0A	; 10
     b16:	91 05       	cpc	r25, r1
     b18:	08 f4       	brcc	.+2      	; 0xb1c <main+0x2e2>
     b1a:	7a c0       	rjmp	.+244    	; 0xc10 <main+0x3d6>
		currentTorqueDemand[0] = temp_currentTorqueDemand;
     b1c:	f6 01       	movw	r30, r12
     b1e:	91 83       	std	Z+1, r25	; 0x01
     b20:	80 83       	st	Z, r24
		
		if(currentTorqueDemand[0] > 250) PORTA |= 32;
     b22:	8b 3f       	cpi	r24, 0xFB	; 251
     b24:	91 05       	cpc	r25, r1
     b26:	10 f0       	brcs	.+4      	; 0xb2c <main+0x2f2>
     b28:	15 9a       	sbi	0x02, 5	; 2
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <main+0x2f4>
		else PORTA &= 223;
     b2c:	15 98       	cbi	0x02, 5	; 2
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b2e:	4a e0       	ldi	r20, 0x0A	; 10
     b30:	60 e2       	ldi	r22, 0x20	; 32
     b32:	74 e0       	ldi	r23, 0x04	; 4
     b34:	f6 01       	movw	r30, r12
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	6d d4       	rcall	.+2266   	; 0x1416 <__itoa_ncheck>
		
		//CANreceiver = MCP2515_receive_status();
		itoa(currentTorqueDemand[0], tempBuffer, 10);
		uart1_puts(tempBuffer);
     b3c:	80 e2       	ldi	r24, 0x20	; 32
     b3e:	94 e0       	ldi	r25, 0x04	; 4
     b40:	14 d4       	rcall	.+2088   	; 0x136a <uart1_puts>
		uart1_puts("\r\n");
     b42:	8e e3       	ldi	r24, 0x3E	; 62
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	11 d4       	rcall	.+2082   	; 0x136a <uart1_puts>
		
		if(isCharAvailable_1() == 1)UART_processByte(receiveChar_1());
     b48:	1e d4       	rcall	.+2108   	; 0x1386 <isCharAvailable_1>
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	11 f4       	brne	.+4      	; 0xb52 <main+0x318>
     b4e:	21 d4       	rcall	.+2114   	; 0x1392 <receiveChar_1>
     b50:	f4 dd       	rcall	.-1048   	; 0x73a <UART_processByte>
		
		//NEW STUFF, COMMENT OUT WHEN ADDING IT
		//read the pedal values, error state if the thresholds are out of order.
		if(Pedal_read(&brake, &throttle) == 0)error_state(ERROR_PEDALS);
     b52:	be 01       	movw	r22, r28
     b54:	6f 5f       	subi	r22, 0xFF	; 255
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	ce 01       	movw	r24, r28
     b5a:	03 96       	adiw	r24, 0x03	; 3
     b5c:	9a dc       	rcall	.-1740   	; 0x492 <Pedal_read>
		//read the pressure readings, checking for invalid values.
		if(Pressure_brake_read(&brakePressureF, &brakePressureR) == 0)error_state(ERROR_BRAKE_PRESSURE);
     b5e:	be 01       	movw	r22, r28
     b60:	69 5f       	subi	r22, 0xF9	; 249
     b62:	7f 4f       	sbci	r23, 0xFF	; 255
     b64:	ce 01       	movw	r24, r28
     b66:	05 96       	adiw	r24, 0x05	; 5
     b68:	6f dc       	rcall	.-1826   	; 0x448 <Pressure_brake_read>
		
		steeringAngle = ADC_read_AVG(STEERING_ANGLE);
     b6a:	84 e0       	ldi	r24, 0x04	; 4
     b6c:	4b dc       	rcall	.-1898   	; 0x404 <ADC_read_AVG>
     b6e:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <steeringAngle+0x1>
     b72:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <steeringAngle>
		
		
		
		uint16_t temp_ADC_read = a2d_10bitCh(1);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	0e db       	rcall	.-2532   	; 0x196 <a2d_10bitCh>
		int i = 0;
		
		while (radiator_cals_acewell_22k[i] > temp_ADC_read) i++;
     b7a:	f4 01       	movw	r30, r8
     b7c:	40 81       	ld	r20, Z
     b7e:	51 81       	ldd	r21, Z+1	; 0x01
     b80:	84 17       	cp	r24, r20
     b82:	95 07       	cpc	r25, r21
     b84:	58 f4       	brcc	.+22     	; 0xb9c <main+0x362>
     b86:	f3 01       	movw	r30, r6
     b88:	24 2d       	mov	r18, r4
     b8a:	35 2d       	mov	r19, r5
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	41 91       	ld	r20, Z+
     b92:	51 91       	ld	r21, Z+
     b94:	84 17       	cp	r24, r20
     b96:	95 07       	cpc	r25, r21
     b98:	c8 f3       	brcs	.-14     	; 0xb8c <main+0x352>
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <main+0x366>
		steeringAngle = ADC_read_AVG(STEERING_ANGLE);
		
		
		
		uint16_t temp_ADC_read = a2d_10bitCh(1);
		int i = 0;
     b9c:	24 2d       	mov	r18, r4
     b9e:	35 2d       	mov	r19, r5
		
		while (radiator_cals_acewell_22k[i] > temp_ADC_read) i++;
		unsigned int j = ((radiator_cals_acewell_22k[i-1] - temp_ADC_read) * 30);
     ba0:	f9 01       	movw	r30, r18
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	e2 50       	subi	r30, 0x02	; 2
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	60 81       	ld	r22, Z
     bac:	71 81       	ldd	r23, Z+1	; 0x01
     bae:	db 01       	movw	r26, r22
     bb0:	a8 1b       	sub	r26, r24
     bb2:	b9 0b       	sbc	r27, r25
     bb4:	ee e1       	ldi	r30, 0x1E	; 30
     bb6:	ea 9f       	mul	r30, r26
     bb8:	c0 01       	movw	r24, r0
     bba:	eb 9f       	mul	r30, r27
     bbc:	90 0d       	add	r25, r0
     bbe:	11 24       	eor	r1, r1
		temp_ADC_read = j / (radiator_cals_acewell_22k[i-1] - radiator_cals_acewell_22k[i]);
		T1_temp = temp_ADC_read + ((i * 3) + 25) * 10;
     bc0:	e2 9f       	mul	r30, r18
     bc2:	d0 01       	movw	r26, r0
     bc4:	e3 9f       	mul	r30, r19
     bc6:	b0 0d       	add	r27, r0
     bc8:	11 24       	eor	r1, r1
     bca:	9d 01       	movw	r18, r26
     bcc:	26 50       	subi	r18, 0x06	; 6
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
		uint16_t temp_ADC_read = a2d_10bitCh(1);
		int i = 0;
		
		while (radiator_cals_acewell_22k[i] > temp_ADC_read) i++;
		unsigned int j = ((radiator_cals_acewell_22k[i-1] - temp_ADC_read) * 30);
		temp_ADC_read = j / (radiator_cals_acewell_22k[i-1] - radiator_cals_acewell_22k[i]);
     bd0:	64 1b       	sub	r22, r20
     bd2:	75 0b       	sbc	r23, r21
     bd4:	e1 d3       	rcall	.+1986   	; 0x1398 <__udivmodhi4>
		T1_temp = temp_ADC_read + ((i * 3) + 25) * 10;
     bd6:	62 0f       	add	r22, r18
     bd8:	73 1f       	adc	r23, r19
     bda:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <T1_temp+0x1>
     bde:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <T1_temp>
		
		// temp loop. if fan is off and temp is over x deg turn fan on
		// else if fan is on and temp is blow y deg turn fan off
		if((T1_temp > 500) && ((pdm.flags[0] & 1) == 0))pdm.flags[0] |= 1;			//turn fan on
     be2:	65 3f       	cpi	r22, 0xF5	; 245
     be4:	f1 e0       	ldi	r31, 0x01	; 1
     be6:	7f 07       	cpc	r23, r31
     be8:	38 f0       	brcs	.+14     	; 0xbf8 <main+0x3be>
     bea:	f5 01       	movw	r30, r10
     bec:	80 81       	ld	r24, Z
     bee:	80 fd       	sbrc	r24, 0
     bf0:	13 c0       	rjmp	.+38     	; 0xc18 <main+0x3de>
     bf2:	81 60       	ori	r24, 0x01	; 1
     bf4:	80 83       	st	Z, r24
     bf6:	c7 ce       	rjmp	.-626    	; 0x986 <main+0x14c>
		else if ((T1_temp < 480) && ((pdm.flags[0] & 1) == 1)) pdm.flags[0] &= ~1;	//turn fan off
     bf8:	60 3e       	cpi	r22, 0xE0	; 224
     bfa:	71 40       	sbci	r23, 0x01	; 1
     bfc:	08 f0       	brcs	.+2      	; 0xc00 <main+0x3c6>
     bfe:	c3 ce       	rjmp	.-634    	; 0x986 <main+0x14c>
     c00:	f5 01       	movw	r30, r10
     c02:	80 81       	ld	r24, Z
     c04:	80 ff       	sbrs	r24, 0
     c06:	bf ce       	rjmp	.-642    	; 0x986 <main+0x14c>
     c08:	8e 7f       	andi	r24, 0xFE	; 254
     c0a:	f5 01       	movw	r30, r10
     c0c:	80 83       	st	Z, r24
     c0e:	bb ce       	rjmp	.-650    	; 0x986 <main+0x14c>
		else inverterStatus = 1;
		
		unsigned int temp_currentTorqueDemand = AN1_voltage / 4;
		if (temp_currentTorqueDemand > 256) temp_currentTorqueDemand = 0;
		if (temp_currentTorqueDemand < 10) temp_currentTorqueDemand = 0;
		currentTorqueDemand[0] = temp_currentTorqueDemand;
     c10:	f6 01       	movw	r30, r12
     c12:	11 82       	std	Z+1, r1	; 0x01
     c14:	10 82       	st	Z, r1
     c16:	8a cf       	rjmp	.-236    	; 0xb2c <main+0x2f2>
		T1_temp = temp_ADC_read + ((i * 3) + 25) * 10;
		
		// temp loop. if fan is off and temp is over x deg turn fan on
		// else if fan is on and temp is blow y deg turn fan off
		if((T1_temp > 500) && ((pdm.flags[0] & 1) == 0))pdm.flags[0] |= 1;			//turn fan on
		else if ((T1_temp < 480) && ((pdm.flags[0] & 1) == 1)) pdm.flags[0] &= ~1;	//turn fan off
     c18:	60 3e       	cpi	r22, 0xE0	; 224
     c1a:	71 40       	sbci	r23, 0x01	; 1
     c1c:	a8 f3       	brcs	.-22     	; 0xc08 <main+0x3ce>
     c1e:	b3 ce       	rjmp	.-666    	; 0x986 <main+0x14c>
		else inverterStatus = 1;
		
		unsigned int temp_currentTorqueDemand = AN1_voltage / 4;
		if (temp_currentTorqueDemand > 256) temp_currentTorqueDemand = 0;
		if (temp_currentTorqueDemand < 10) temp_currentTorqueDemand = 0;
		currentTorqueDemand[0] = temp_currentTorqueDemand;
     c20:	f6 01       	movw	r30, r12
     c22:	11 82       	std	Z+1, r1	; 0x01
     c24:	10 82       	st	Z, r1
     c26:	82 cf       	rjmp	.-252    	; 0xb2c <main+0x2f2>

00000c28 <__vector_2>:
    }
	return 0;
}

ISR(INT1_vect)	//CAN 1
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
	STATUS_REG |= CAN1_DataWaiting;
     c32:	f0 9a       	sbi	0x1e, 0	; 30
}
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <__vector_1>:

ISR(INT0_vect)	//CAN 2
{
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	0f 92       	push	r0
     c46:	11 24       	eor	r1, r1
	STATUS_REG |= CAN2_DataWaiting;
     c48:	f1 9a       	sbi	0x1e, 1	; 30
}
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_9>:

ISR(PCINT0_vect)//CAN 3
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
	STATUS_REG |= CAN3_DataWaiting;
     c5e:	f2 9a       	sbi	0x1e, 2	; 30
}
     c60:	0f 90       	pop	r0
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	0f 90       	pop	r0
     c66:	1f 90       	pop	r1
     c68:	18 95       	reti

00000c6a <__vector_10>:

ISR(PCINT1_vect)		//ignition switch function
{
     c6a:	1f 92       	push	r1
     c6c:	0f 92       	push	r0
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	0f 92       	push	r0
     c72:	11 24       	eor	r1, r1
     c74:	0b b6       	in	r0, 0x3b	; 59
     c76:	0f 92       	push	r0
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	2f 93       	push	r18
     c7e:	3f 93       	push	r19
     c80:	4f 93       	push	r20
     c82:	5f 93       	push	r21
     c84:	6f 93       	push	r22
     c86:	7f 93       	push	r23
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	af 93       	push	r26
     c8e:	bf 93       	push	r27
     c90:	cf 93       	push	r28
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
	
	if((IGNITION_PORT & (1<<IGNITION_PIN)) == 0)	//only enter further if the pin has gone low(active low)
     c96:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7e0103>
     c9a:	86 fd       	sbrc	r24, 6
     c9c:	2e c0       	rjmp	.+92     	; 0xcfa <__vector_10+0x90>
	{
		if((STATUS_REG & IGNITION) == 0)	//only go further if we have not already ignited
     c9e:	f3 99       	sbic	0x1e, 3	; 30
     ca0:	19 c0       	rjmp	.+50     	; 0xcd4 <__vector_10+0x6a>
     ca2:	ce e1       	ldi	r28, 0x1E	; 30
		{
			for(uint8_t i = 0; i < 30; i++)	//loop 30 times in 0.1 second blocks checking that the pin is still low
			{
				_delay_ms(100);				//delay 100ms block
				LED_toggle();
				if(IGNITION_PORT & (1<<IGNITION_PIN))	//check if the pin is still low
     ca4:	03 e0       	ldi	r16, 0x03	; 3
     ca6:	11 e0       	ldi	r17, 0x01	; 1
     ca8:	2f ef       	ldi	r18, 0xFF	; 255
     caa:	81 ee       	ldi	r24, 0xE1	; 225
     cac:	94 e0       	ldi	r25, 0x04	; 4
     cae:	21 50       	subi	r18, 0x01	; 1
     cb0:	80 40       	sbci	r24, 0x00	; 0
     cb2:	90 40       	sbci	r25, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <__vector_10+0x44>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <__vector_10+0x4e>
     cb8:	00 00       	nop
		if((STATUS_REG & IGNITION) == 0)	//only go further if we have not already ignited
		{
			for(uint8_t i = 0; i < 30; i++)	//loop 30 times in 0.1 second blocks checking that the pin is still low
			{
				_delay_ms(100);				//delay 100ms block
				LED_toggle();
     cba:	82 da       	rcall	.-2812   	; 0x1c0 <LED_toggle>
				if(IGNITION_PORT & (1<<IGNITION_PIN))	//check if the pin is still low
     cbc:	f8 01       	movw	r30, r16
     cbe:	80 81       	ld	r24, Z
     cc0:	86 fd       	sbrc	r24, 6
     cc2:	1b c0       	rjmp	.+54     	; 0xcfa <__vector_10+0x90>
					break;
					
				if(i == 29)
     cc4:	c1 30       	cpi	r28, 0x01	; 1
     cc6:	19 f4       	brne	.+6      	; 0xcce <__vector_10+0x64>
				{
					STATUS_REG |= IGNITION;	//set ignition if its the last block of 100ms
     cc8:	f3 9a       	sbi	0x1e, 3	; 30
					LED_off();
     cca:	81 da       	rcall	.-2814   	; 0x1ce <LED_off>
     ccc:	16 c0       	rjmp	.+44     	; 0xcfa <__vector_10+0x90>
     cce:	c1 50       	subi	r28, 0x01	; 1
	
	if((IGNITION_PORT & (1<<IGNITION_PIN)) == 0)	//only enter further if the pin has gone low(active low)
	{
		if((STATUS_REG & IGNITION) == 0)	//only go further if we have not already ignited
		{
			for(uint8_t i = 0; i < 30; i++)	//loop 30 times in 0.1 second blocks checking that the pin is still low
     cd0:	59 f7       	brne	.-42     	; 0xca8 <__vector_10+0x3e>
     cd2:	13 c0       	rjmp	.+38     	; 0xcfa <__vector_10+0x90>
     cd4:	ca e0       	ldi	r28, 0x0A	; 10
		{
			for(uint8_t i = 0; i < 10; i++)	//loop 30 times in 0.1 second blocks checking that the pin is still low
			{
				_delay_ms(100);				//delay 100ms block
				LED_toggle();
				if(IGNITION_PORT & (1<<IGNITION_PIN))	//check if the pin is still low
     cd6:	03 e0       	ldi	r16, 0x03	; 3
     cd8:	11 e0       	ldi	r17, 0x01	; 1
     cda:	ff ef       	ldi	r31, 0xFF	; 255
     cdc:	21 ee       	ldi	r18, 0xE1	; 225
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	f1 50       	subi	r31, 0x01	; 1
     ce2:	20 40       	sbci	r18, 0x00	; 0
     ce4:	80 40       	sbci	r24, 0x00	; 0
     ce6:	e1 f7       	brne	.-8      	; 0xce0 <__vector_10+0x76>
     ce8:	00 c0       	rjmp	.+0      	; 0xcea <__vector_10+0x80>
     cea:	00 00       	nop
		else
		{
			for(uint8_t i = 0; i < 10; i++)	//loop 30 times in 0.1 second blocks checking that the pin is still low
			{
				_delay_ms(100);				//delay 100ms block
				LED_toggle();
     cec:	69 da       	rcall	.-2862   	; 0x1c0 <LED_toggle>
				if(IGNITION_PORT & (1<<IGNITION_PIN))	//check if the pin is still low
     cee:	f8 01       	movw	r30, r16
     cf0:	80 81       	ld	r24, Z
     cf2:	86 fd       	sbrc	r24, 6
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <__vector_10+0x90>
     cf6:	c1 50       	subi	r28, 0x01	; 1
				}
			}
		}
		else
		{
			for(uint8_t i = 0; i < 10; i++)	//loop 30 times in 0.1 second blocks checking that the pin is still low
     cf8:	81 f7       	brne	.-32     	; 0xcda <__vector_10+0x70>
				}
			}
		}
		
	}
	LED_off();	
     cfa:	69 da       	rcall	.-2862   	; 0x1ce <LED_off>
}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	cf 91       	pop	r28
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	0f 90       	pop	r0
     d1c:	0b be       	out	0x3b, r0	; 59
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	0b b6       	in	r0, 0x3b	; 59
     d34:	0f 92       	push	r0
     d36:	2f 93       	push	r18
     d38:	3f 93       	push	r19
     d3a:	4f 93       	push	r20
     d3c:	5f 93       	push	r21
     d3e:	6f 93       	push	r22
     d40:	7f 93       	push	r23
     d42:	8f 93       	push	r24
     d44:	9f 93       	push	r25
     d46:	af 93       	push	r26
     d48:	bf 93       	push	r27
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31
	//sendHeartbeat(INVERTERS);			//send can packets to devices at the prescribed intervals
	heartbeatTimer++;
     d4e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <heartbeatTimer>
     d52:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <heartbeatTimer+0x1>
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <heartbeatTimer+0x1>
     d5c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <heartbeatTimer>
	//LED_toggle();
	if((heartbeatTimer%2) > 0)sendHeartbeat(INVERTERS, TORQUE_COMMAND, INVERTERS_ALL);
     d60:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <heartbeatTimer>
     d64:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <heartbeatTimer+0x1>
     d68:	81 70       	andi	r24, 0x01	; 1
     d6a:	90 78       	andi	r25, 0x80	; 128
     d6c:	99 23       	and	r25, r25
     d6e:	24 f4       	brge	.+8      	; 0xd78 <__vector_17+0x50>
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	8e 6f       	ori	r24, 0xFE	; 254
     d74:	9f 6f       	ori	r25, 0xFF	; 255
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	18 16       	cp	r1, r24
     d7a:	19 06       	cpc	r1, r25
     d7c:	24 f4       	brge	.+8      	; 0xd86 <__vector_17+0x5e>
     d7e:	4f e0       	ldi	r20, 0x0F	; 15
     d80:	63 e0       	ldi	r22, 0x03	; 3
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	6a da       	rcall	.-2860   	; 0x25a <sendHeartbeat>
	
	switch(heartbeatTimer)
     d86:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <heartbeatTimer>
     d8a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <heartbeatTimer+0x1>
     d8e:	88 31       	cpi	r24, 0x18	; 24
     d90:	91 05       	cpc	r25, r1
     d92:	51 f0       	breq	.+20     	; 0xda8 <__vector_17+0x80>
     d94:	80 33       	cpi	r24, 0x30	; 48
     d96:	91 05       	cpc	r25, r1
     d98:	61 f0       	breq	.+24     	; 0xdb2 <__vector_17+0x8a>
     d9a:	0c 97       	sbiw	r24, 0x0c	; 12
     d9c:	71 f4       	brne	.+28     	; 0xdba <__vector_17+0x92>
	{
		case 12:
			sendHeartbeat(PDM_H, NORMAL, 1);
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	5a da       	rcall	.-2892   	; 0x25a <sendHeartbeat>
			break;
     da6:	09 c0       	rjmp	.+18     	; 0xdba <__vector_17+0x92>
		case 24:
			sendHeartbeat(AMU_H, NORMAL, ACCUMULATOR_FRONT);
     da8:	41 e0       	ldi	r20, 0x01	; 1
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	55 da       	rcall	.-2902   	; 0x25a <sendHeartbeat>
			break;
     db0:	04 c0       	rjmp	.+8      	; 0xdba <__vector_17+0x92>

		case 48:
			sendHeartbeat(WHEEL, NORMAL, 1);
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	84 e0       	ldi	r24, 0x04	; 4
     db8:	50 da       	rcall	.-2912   	; 0x25a <sendHeartbeat>
			break;
		default:
			break;
	}
	
	if(heartbeatTimer > 48)heartbeatTimer = 0;		//500ms round robin for comms updates
     dba:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <heartbeatTimer>
     dbe:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <heartbeatTimer+0x1>
     dc2:	c1 97       	sbiw	r24, 0x31	; 49
     dc4:	24 f0       	brlt	.+8      	; 0xdce <__vector_17+0xa6>
     dc6:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <heartbeatTimer+0x1>
     dca:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <heartbeatTimer>
	
	
	//	sendHeartbeat();			//send can packets to devices at the prescribed intervals
}
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0b be       	out	0x3b, r0	; 59
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <MCP2515_CS_low>:
			MCP2515_reg_write(CANbus, MCP2515_RXM1EID0, IDmsk & 0xFF );
			if(IDmsk) MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
			else MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
	}	
	return 1;
}
     df4:	82 30       	cpi	r24, 0x02	; 2
     df6:	51 f0       	breq	.+20     	; 0xe0c <MCP2515_CS_low+0x18>
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	71 f0       	breq	.+28     	; 0xe18 <MCP2515_CS_low+0x24>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	69 f4       	brne	.+26     	; 0xe1a <MCP2515_CS_low+0x26>
     e00:	e2 e0       	ldi	r30, 0x02	; 2
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	80 81       	ld	r24, Z
     e06:	8e 7f       	andi	r24, 0xFE	; 254
     e08:	80 83       	st	Z, r24
     e0a:	08 95       	ret
     e0c:	e2 e0       	ldi	r30, 0x02	; 2
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	80 81       	ld	r24, Z
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	80 83       	st	Z, r24
     e16:	08 95       	ret
     e18:	28 98       	cbi	0x05, 0	; 5
     e1a:	08 95       	ret

00000e1c <MCP2515_CS_high>:
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	51 f0       	breq	.+20     	; 0xe34 <MCP2515_CS_high+0x18>
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	71 f0       	breq	.+28     	; 0xe40 <MCP2515_CS_high+0x24>
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	69 f4       	brne	.+26     	; 0xe42 <MCP2515_CS_high+0x26>
     e28:	e2 e0       	ldi	r30, 0x02	; 2
     e2a:	f1 e0       	ldi	r31, 0x01	; 1
     e2c:	80 81       	ld	r24, Z
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	80 83       	st	Z, r24
     e32:	08 95       	ret
     e34:	e2 e0       	ldi	r30, 0x02	; 2
     e36:	f1 e0       	ldi	r31, 0x01	; 1
     e38:	80 81       	ld	r24, Z
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	80 83       	st	Z, r24
     e3e:	08 95       	ret
     e40:	28 9a       	sbi	0x05, 0	; 5
     e42:	08 95       	ret

00000e44 <MCP2515_reg_write>:
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	c8 2f       	mov	r28, r24
     e4c:	16 2f       	mov	r17, r22
     e4e:	d4 2f       	mov	r29, r20
     e50:	d1 df       	rcall	.-94     	; 0xdf4 <MCP2515_CS_low>
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	93 d1       	rcall	.+806    	; 0x117c <SPI_send_byte>
     e56:	81 2f       	mov	r24, r17
     e58:	91 d1       	rcall	.+802    	; 0x117c <SPI_send_byte>
     e5a:	8d 2f       	mov	r24, r29
     e5c:	8f d1       	rcall	.+798    	; 0x117c <SPI_send_byte>
     e5e:	8c 2f       	mov	r24, r28
     e60:	dd df       	rcall	.-70     	; 0xe1c <MCP2515_CS_high>
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	08 95       	ret

00000e6a <MCP2515_instruction>:
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	c8 2f       	mov	r28, r24
     e70:	d6 2f       	mov	r29, r22
     e72:	c0 df       	rcall	.-128    	; 0xdf4 <MCP2515_CS_low>
     e74:	8d 2f       	mov	r24, r29
     e76:	82 d1       	rcall	.+772    	; 0x117c <SPI_send_byte>
     e78:	8c 2f       	mov	r24, r28
     e7a:	d0 df       	rcall	.-96     	; 0xe1c <MCP2515_CS_high>
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <MCP2515_bit_modify>:
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	c8 2f       	mov	r28, r24
     e8c:	06 2f       	mov	r16, r22
     e8e:	d4 2f       	mov	r29, r20
     e90:	12 2f       	mov	r17, r18
     e92:	b0 df       	rcall	.-160    	; 0xdf4 <MCP2515_CS_low>
     e94:	85 e0       	ldi	r24, 0x05	; 5
     e96:	72 d1       	rcall	.+740    	; 0x117c <SPI_send_byte>
     e98:	80 2f       	mov	r24, r16
     e9a:	70 d1       	rcall	.+736    	; 0x117c <SPI_send_byte>
     e9c:	81 2f       	mov	r24, r17
     e9e:	6e d1       	rcall	.+732    	; 0x117c <SPI_send_byte>
     ea0:	8d 2f       	mov	r24, r29
     ea2:	6c d1       	rcall	.+728    	; 0x117c <SPI_send_byte>
     ea4:	8c 2f       	mov	r24, r28
     ea6:	ba df       	rcall	.-140    	; 0xe1c <MCP2515_CS_high>
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <MCP2515_init>:
     eb2:	cf 93       	push	r28
     eb4:	c8 2f       	mov	r28, r24
     eb6:	60 ec       	ldi	r22, 0xC0	; 192
     eb8:	d8 df       	rcall	.-80     	; 0xe6a <MCP2515_instruction>
     eba:	20 ee       	ldi	r18, 0xE0	; 224
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	6f e0       	ldi	r22, 0x0F	; 15
     ec0:	8c 2f       	mov	r24, r28
     ec2:	df df       	rcall	.-66     	; 0xe82 <MCP2515_bit_modify>
     ec4:	44 e0       	ldi	r20, 0x04	; 4
     ec6:	6a e2       	ldi	r22, 0x2A	; 42
     ec8:	8c 2f       	mov	r24, r28
     eca:	bc df       	rcall	.-136    	; 0xe44 <MCP2515_reg_write>
     ecc:	4a ec       	ldi	r20, 0xCA	; 202
     ece:	69 e2       	ldi	r22, 0x29	; 41
     ed0:	8c 2f       	mov	r24, r28
     ed2:	b8 df       	rcall	.-144    	; 0xe44 <MCP2515_reg_write>
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	68 e2       	ldi	r22, 0x28	; 40
     ed8:	8c 2f       	mov	r24, r28
     eda:	b4 df       	rcall	.-152    	; 0xe44 <MCP2515_reg_write>
     edc:	43 e0       	ldi	r20, 0x03	; 3
     ede:	6b e2       	ldi	r22, 0x2B	; 43
     ee0:	8c 2f       	mov	r24, r28
     ee2:	b0 df       	rcall	.-160    	; 0xe44 <MCP2515_reg_write>
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	6d e0       	ldi	r22, 0x0D	; 13
     ee8:	8c 2f       	mov	r24, r28
     eea:	ac df       	rcall	.-168    	; 0xe44 <MCP2515_reg_write>
     eec:	20 ee       	ldi	r18, 0xE0	; 224
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	6f e0       	ldi	r22, 0x0F	; 15
     ef2:	8c 2f       	mov	r24, r28
     ef4:	c6 df       	rcall	.-116    	; 0xe82 <MCP2515_bit_modify>
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <MCP2515_PullCanPacket>:
     efa:	7f 92       	push	r7
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	2d 97       	sbiw	r28, 0x0d	; 13
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	78 2e       	mov	r7, r24
     f26:	4a 01       	movw	r8, r20
     f28:	59 01       	movw	r10, r18
     f2a:	61 37       	cpi	r22, 0x71	; 113
     f2c:	28 f4       	brcc	.+10     	; 0xf38 <MCP2515_PullCanPacket+0x3e>
     f2e:	0f 2e       	mov	r0, r31
     f30:	f0 e9       	ldi	r31, 0x90	; 144
     f32:	ff 2e       	mov	r15, r31
     f34:	f0 2d       	mov	r31, r0
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <MCP2515_PullCanPacket+0x46>
     f38:	0f 2e       	mov	r0, r31
     f3a:	f4 e9       	ldi	r31, 0x94	; 148
     f3c:	ff 2e       	mov	r15, r31
     f3e:	f0 2d       	mov	r31, r0
     f40:	87 2d       	mov	r24, r7
     f42:	58 df       	rcall	.-336    	; 0xdf4 <MCP2515_CS_low>
     f44:	8f 2d       	mov	r24, r15
     f46:	1a d1       	rcall	.+564    	; 0x117c <SPI_send_byte>
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	7c 01       	movw	r14, r24
     f4e:	6e 01       	movw	r12, r28
     f50:	9e e0       	ldi	r25, 0x0E	; 14
     f52:	c9 0e       	add	r12, r25
     f54:	d1 1c       	adc	r13, r1
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	11 d1       	rcall	.+546    	; 0x117c <SPI_send_byte>
     f5a:	f7 01       	movw	r30, r14
     f5c:	81 93       	st	Z+, r24
     f5e:	7f 01       	movw	r14, r30
     f60:	ec 15       	cp	r30, r12
     f62:	fd 05       	cpc	r31, r13
     f64:	c1 f7       	brne	.-16     	; 0xf56 <MCP2515_PullCanPacket+0x5c>
     f66:	2a 81       	ldd	r18, Y+2	; 0x02
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 e0       	ldi	r26, 0x00	; 0
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	07 2e       	mov	r0, r23
     f72:	75 e1       	ldi	r23, 0x15	; 21
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	aa 1f       	adc	r26, r26
     f7a:	bb 1f       	adc	r27, r27
     f7c:	7a 95       	dec	r23
     f7e:	d1 f7       	brne	.-12     	; 0xf74 <MCP2515_PullCanPacket+0x7a>
     f80:	70 2d       	mov	r23, r0
     f82:	3c 81       	ldd	r19, Y+4	; 0x04
     f84:	83 2b       	or	r24, r19
     f86:	42 2f       	mov	r20, r18
     f88:	40 7e       	andi	r20, 0xE0	; 224
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	03 2e       	mov	r0, r19
     f92:	3d e0       	ldi	r19, 0x0D	; 13
     f94:	44 0f       	add	r20, r20
     f96:	55 1f       	adc	r21, r21
     f98:	66 1f       	adc	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	3a 95       	dec	r19
     f9e:	d1 f7       	brne	.-12     	; 0xf94 <MCP2515_PullCanPacket+0x9a>
     fa0:	30 2d       	mov	r19, r0
     fa2:	84 2b       	or	r24, r20
     fa4:	95 2b       	or	r25, r21
     fa6:	a6 2b       	or	r26, r22
     fa8:	b7 2b       	or	r27, r23
     faa:	23 70       	andi	r18, 0x03	; 3
     fac:	a2 2b       	or	r26, r18
     fae:	2b 81       	ldd	r18, Y+3	; 0x03
     fb0:	92 2b       	or	r25, r18
     fb2:	f8 01       	movw	r30, r16
     fb4:	80 83       	st	Z, r24
     fb6:	91 83       	std	Z+1, r25	; 0x01
     fb8:	a2 83       	std	Z+2, r26	; 0x02
     fba:	b3 83       	std	Z+3, r27	; 0x03
     fbc:	4d 85       	ldd	r20, Y+13	; 0x0d
     fbe:	4f 70       	andi	r20, 0x0F	; 15
     fc0:	f4 01       	movw	r30, r8
     fc2:	40 83       	st	Z, r20
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	be 01       	movw	r22, r28
     fc8:	6b 5f       	subi	r22, 0xFB	; 251
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	c5 01       	movw	r24, r10
     fce:	1a d2       	rcall	.+1076   	; 0x1404 <memcpy>
     fd0:	87 2d       	mov	r24, r7
     fd2:	24 df       	rcall	.-440    	; 0xe1c <MCP2515_CS_high>
     fd4:	2d 96       	adiw	r28, 0x0d	; 13
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	08 95       	ret

00000ffc <MCP2515_reg_read>:
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	c8 2f       	mov	r28, r24
    1002:	d6 2f       	mov	r29, r22
    1004:	f7 de       	rcall	.-530    	; 0xdf4 <MCP2515_CS_low>
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	b9 d0       	rcall	.+370    	; 0x117c <SPI_send_byte>
    100a:	8d 2f       	mov	r24, r29
    100c:	b7 d0       	rcall	.+366    	; 0x117c <SPI_send_byte>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	b5 d0       	rcall	.+362    	; 0x117c <SPI_send_byte>
    1012:	d8 2f       	mov	r29, r24
    1014:	8c 2f       	mov	r24, r28
    1016:	02 df       	rcall	.-508    	; 0xe1c <MCP2515_CS_high>
    1018:	8d 2f       	mov	r24, r29
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	08 95       	ret

00001020 <MCP2515_findFreeTxBuffer>:
    1020:	cf 93       	push	r28
    1022:	c8 2f       	mov	r28, r24
    1024:	60 e3       	ldi	r22, 0x30	; 48
    1026:	ea df       	rcall	.-44     	; 0xffc <MCP2515_reg_read>
    1028:	83 ff       	sbrs	r24, 3
    102a:	0c c0       	rjmp	.+24     	; 0x1044 <MCP2515_findFreeTxBuffer+0x24>
    102c:	60 e4       	ldi	r22, 0x40	; 64
    102e:	8c 2f       	mov	r24, r28
    1030:	e5 df       	rcall	.-54     	; 0xffc <MCP2515_reg_read>
    1032:	83 ff       	sbrs	r24, 3
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <MCP2515_findFreeTxBuffer+0x28>
    1036:	60 e5       	ldi	r22, 0x50	; 80
    1038:	8c 2f       	mov	r24, r28
    103a:	e0 df       	rcall	.-64     	; 0xffc <MCP2515_reg_read>
    103c:	83 ff       	sbrs	r24, 3
    103e:	06 c0       	rjmp	.+12     	; 0x104c <MCP2515_findFreeTxBuffer+0x2c>
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	05 c0       	rjmp	.+10     	; 0x104e <MCP2515_findFreeTxBuffer+0x2e>
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	03 c0       	rjmp	.+6      	; 0x104e <MCP2515_findFreeTxBuffer+0x2e>
    1048:	80 e4       	ldi	r24, 0x40	; 64
    104a:	01 c0       	rjmp	.+2      	; 0x104e <MCP2515_findFreeTxBuffer+0x2e>
    104c:	80 e5       	ldi	r24, 0x50	; 80
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <MCP2515_TX>:

void MCP2515_TX(uint8_t CANbus, int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID)
{
    1052:	4f 92       	push	r4
    1054:	5f 92       	push	r5
    1056:	6f 92       	push	r6
    1058:	7f 92       	push	r7
    105a:	af 92       	push	r10
    105c:	bf 92       	push	r11
    105e:	cf 92       	push	r12
    1060:	df 92       	push	r13
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	b8 2e       	mov	r11, r24
    1070:	a6 2e       	mov	r10, r22
    1072:	d4 2f       	mov	r29, r20
    1074:	69 01       	movw	r12, r18
    1076:	27 01       	movw	r4, r14
    1078:	38 01       	movw	r6, r16
	if(mob == 0)return;						//no free mob or invalid mob
    107a:	66 23       	and	r22, r22
    107c:	09 f4       	brne	.+2      	; 0x1080 <MCP2515_TX+0x2e>
    107e:	5e c0       	rjmp	.+188    	; 0x113c <MCP2515_TX+0xea>
	MCP2515_reg_write(CANbus, mob, 0x03);			//we shall set this to the highest priority so that it sends it immediately.
    1080:	43 e0       	ldi	r20, 0x03	; 3
    1082:	e0 de       	rcall	.-576    	; 0xe44 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+1, (ID>>21) & 0xFF);	//shift the ID data to fill the respective MCP registers
    1084:	b8 01       	movw	r22, r16
    1086:	a7 01       	movw	r20, r14
    1088:	03 2e       	mov	r0, r19
    108a:	35 e1       	ldi	r19, 0x15	; 21
    108c:	76 95       	lsr	r23
    108e:	67 95       	ror	r22
    1090:	57 95       	ror	r21
    1092:	47 95       	ror	r20
    1094:	3a 95       	dec	r19
    1096:	d1 f7       	brne	.-12     	; 0x108c <MCP2515_TX+0x3a>
    1098:	30 2d       	mov	r19, r0
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	6a 0d       	add	r22, r10
    109e:	8b 2d       	mov	r24, r11
    10a0:	d1 de       	rcall	.-606    	; 0xe44 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+2, (((ID>>13) & 224)| ((ID>>16) & 3) | ((1<<3) & 0xFF)));	//set the EXIDE bit, which makes it extended (CAN 2.0B)
    10a2:	b8 01       	movw	r22, r16
    10a4:	a7 01       	movw	r20, r14
    10a6:	03 2e       	mov	r0, r19
    10a8:	3d e0       	ldi	r19, 0x0D	; 13
    10aa:	76 95       	lsr	r23
    10ac:	67 95       	ror	r22
    10ae:	57 95       	ror	r21
    10b0:	47 95       	ror	r20
    10b2:	3a 95       	dec	r19
    10b4:	d1 f7       	brne	.-12     	; 0x10aa <MCP2515_TX+0x58>
    10b6:	30 2d       	mov	r19, r0
    10b8:	40 7e       	andi	r20, 0xE0	; 224
    10ba:	86 2d       	mov	r24, r6
    10bc:	83 70       	andi	r24, 0x03	; 3
    10be:	48 2b       	or	r20, r24
    10c0:	48 60       	ori	r20, 0x08	; 8
    10c2:	62 e0       	ldi	r22, 0x02	; 2
    10c4:	6a 0d       	add	r22, r10
    10c6:	8b 2d       	mov	r24, r11
    10c8:	bd de       	rcall	.-646    	; 0xe44 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+3, (ID>>8) & 0xFF );
    10ca:	77 27       	eor	r23, r23
    10cc:	61 2f       	mov	r22, r17
    10ce:	50 2f       	mov	r21, r16
    10d0:	4f 2d       	mov	r20, r15
    10d2:	63 e0       	ldi	r22, 0x03	; 3
    10d4:	6a 0d       	add	r22, r10
    10d6:	8b 2d       	mov	r24, r11
    10d8:	b5 de       	rcall	.-662    	; 0xe44 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+4, ID & 0xFF );
    10da:	4e 2d       	mov	r20, r14
    10dc:	64 e0       	ldi	r22, 0x04	; 4
    10de:	6a 0d       	add	r22, r10
    10e0:	8b 2d       	mov	r24, r11
    10e2:	b0 de       	rcall	.-672    	; 0xe44 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+5, numBytes);		//set how many bytes we wish to send
    10e4:	4d 2f       	mov	r20, r29
    10e6:	65 e0       	ldi	r22, 0x05	; 5
    10e8:	6a 0d       	add	r22, r10
    10ea:	8b 2d       	mov	r24, r11
    10ec:	ab de       	rcall	.-682    	; 0xe44 <MCP2515_reg_write>
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);
	
	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    10ee:	dd 23       	and	r29, r29
    10f0:	a9 f0       	breq	.+42     	; 0x111c <MCP2515_TX+0xca>
    10f2:	86 01       	movw	r16, r12
    10f4:	c6 e0       	ldi	r28, 0x06	; 6
    10f6:	ca 0d       	add	r28, r10
    10f8:	d1 50       	subi	r29, 0x01	; 1
    10fa:	ed 2e       	mov	r14, r29
    10fc:	f1 2c       	mov	r15, r1
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	e8 1a       	sub	r14, r24
    1102:	f8 0a       	sbc	r15, r24
    1104:	ec 0c       	add	r14, r12
    1106:	fd 1c       	adc	r15, r13
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
    1108:	f8 01       	movw	r30, r16
    110a:	41 91       	ld	r20, Z+
    110c:	8f 01       	movw	r16, r30
    110e:	6c 2f       	mov	r22, r28
    1110:	8b 2d       	mov	r24, r11
    1112:	98 de       	rcall	.-720    	; 0xe44 <MCP2515_reg_write>
    1114:	cf 5f       	subi	r28, 0xFF	; 255
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);
	
	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    1116:	0e 15       	cp	r16, r14
    1118:	1f 05       	cpc	r17, r15
    111a:	b1 f7       	brne	.-20     	; 0x1108 <MCP2515_TX+0xb6>
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
	}
	MCP2515_instruction(CANbus, 128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
    111c:	8a 2d       	mov	r24, r10
    111e:	85 95       	asr	r24
    1120:	85 95       	asr	r24
    1122:	85 95       	asr	r24
    1124:	85 95       	asr	r24
    1126:	83 50       	subi	r24, 0x03	; 3
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <MCP2515_TX+0xe0>
    112e:	66 0f       	add	r22, r22
    1130:	77 1f       	adc	r23, r23
    1132:	8a 95       	dec	r24
    1134:	e2 f7       	brpl	.-8      	; 0x112e <MCP2515_TX+0xdc>
    1136:	60 68       	ori	r22, 0x80	; 128
    1138:	8b 2d       	mov	r24, r11
    113a:	97 de       	rcall	.-722    	; 0xe6a <MCP2515_instruction>
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	bf 90       	pop	r11
    114e:	af 90       	pop	r10
    1150:	7f 90       	pop	r7
    1152:	6f 90       	pop	r6
    1154:	5f 90       	pop	r5
    1156:	4f 90       	pop	r4
    1158:	08 95       	ret

0000115a <MCP2515_check_receive_status>:


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
    1160:	49 de       	rcall	.-878    	; 0xdf4 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
    1162:	80 eb       	ldi	r24, 0xB0	; 176
    1164:	0b d0       	rcall	.+22     	; 0x117c <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	09 d0       	rcall	.+18     	; 0x117c <SPI_send_byte>
    116a:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	06 d0       	rcall	.+12     	; 0x117c <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
    1170:	8c 2f       	mov	r24, r28
    1172:	54 de       	rcall	.-856    	; 0xe1c <MCP2515_CS_high>
	return status;
}
    1174:	8d 2f       	mov	r24, r29
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	08 95       	ret

0000117c <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    117c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    117e:	0d b4       	in	r0, 0x2d	; 45
    1180:	07 fe       	sbrs	r0, 7
    1182:	fd cf       	rjmp	.-6      	; 0x117e <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    1184:	8e b5       	in	r24, 0x2e	; 46
}
    1186:	08 95       	ret

00001188 <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
    1188:	81 e5       	ldi	r24, 0x51	; 81
    118a:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
    1190:	1e bc       	out	0x2e, r1	; 46
    1192:	08 95       	ret

00001194 <__vector_25>:
char receiveChar()
{
	// Return the char in the UDR0 register
	return UDR0;
	
}
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	0b b6       	in	r0, 0x3b	; 59
    11a0:	0f 92       	push	r0
    11a2:	2f 93       	push	r18
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
    11ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    11b0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    11b4:	88 71       	andi	r24, 0x18	; 24
    11b6:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <UART_RxHead>
    11ba:	ef 5f       	subi	r30, 0xFF	; 255
    11bc:	ef 71       	andi	r30, 0x1F	; 31
    11be:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <UART_RxTail>
    11c2:	e9 17       	cp	r30, r25
    11c4:	39 f0       	breq	.+14     	; 0x11d4 <__vector_25+0x40>
    11c6:	e0 93 cc 02 	sts	0x02CC, r30	; 0x8002cc <UART_RxHead>
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	e1 53       	subi	r30, 0x31	; 49
    11ce:	fd 4f       	sbci	r31, 0xFD	; 253
    11d0:	20 83       	st	Z, r18
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <__vector_25+0x42>
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <UART_LastRxError>
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0b be       	out	0x3b, r0	; 59
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti

000011f2 <__vector_36>:
    11f2:	1f 92       	push	r1
    11f4:	0f 92       	push	r0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	0f 92       	push	r0
    11fa:	11 24       	eor	r1, r1
    11fc:	0b b6       	in	r0, 0x3b	; 59
    11fe:	0f 92       	push	r0
    1200:	2f 93       	push	r18
    1202:	8f 93       	push	r24
    1204:	9f 93       	push	r25
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
    120a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    120e:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1212:	88 71       	andi	r24, 0x18	; 24
    1214:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <UART1_RxHead>
    1218:	ef 5f       	subi	r30, 0xFF	; 255
    121a:	ef 71       	andi	r30, 0x1F	; 31
    121c:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <UART1_RxTail>
    1220:	e9 17       	cp	r30, r25
    1222:	39 f0       	breq	.+14     	; 0x1232 <__vector_36+0x40>
    1224:	e0 93 87 02 	sts	0x0287, r30	; 0x800287 <UART1_RxHead>
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	e6 57       	subi	r30, 0x76	; 118
    122c:	fd 4f       	sbci	r31, 0xFD	; 253
    122e:	20 83       	st	Z, r18
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <__vector_36+0x42>
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <UART1_LastRxError>
    1238:	ff 91       	pop	r31
    123a:	ef 91       	pop	r30
    123c:	9f 91       	pop	r25
    123e:	8f 91       	pop	r24
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0b be       	out	0x3b, r0	; 59
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	0f 90       	pop	r0
    124c:	1f 90       	pop	r1
    124e:	18 95       	reti

00001250 <__vector_26>:
    1250:	1f 92       	push	r1
    1252:	0f 92       	push	r0
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	0f 92       	push	r0
    1258:	11 24       	eor	r1, r1
    125a:	0b b6       	in	r0, 0x3b	; 59
    125c:	0f 92       	push	r0
    125e:	8f 93       	push	r24
    1260:	9f 93       	push	r25
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
    1266:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <UART_TxHead>
    126a:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <UART_TxTail>
    126e:	98 17       	cp	r25, r24
    1270:	69 f0       	breq	.+26     	; 0x128c <__vector_26+0x3c>
    1272:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <UART_TxTail>
    1276:	ef 5f       	subi	r30, 0xFF	; 255
    1278:	ef 71       	andi	r30, 0x1F	; 31
    127a:	e0 93 cd 02 	sts	0x02CD, r30	; 0x8002cd <UART_TxTail>
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	e1 51       	subi	r30, 0x11	; 17
    1282:	fd 4f       	sbci	r31, 0xFD	; 253
    1284:	80 81       	ld	r24, Z
    1286:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <__vector_26+0x46>
    128c:	e1 ec       	ldi	r30, 0xC1	; 193
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 7d       	andi	r24, 0xDF	; 223
    1294:	80 83       	st	Z, r24
    1296:	ff 91       	pop	r31
    1298:	ef 91       	pop	r30
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	0f 90       	pop	r0
    12a0:	0b be       	out	0x3b, r0	; 59
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_37>:
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	0b b6       	in	r0, 0x3b	; 59
    12b8:	0f 92       	push	r0
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	ef 93       	push	r30
    12c0:	ff 93       	push	r31
    12c2:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <UART1_TxHead>
    12c6:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <UART1_TxTail>
    12ca:	98 17       	cp	r25, r24
    12cc:	69 f0       	breq	.+26     	; 0x12e8 <__vector_37+0x3c>
    12ce:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <UART1_TxTail>
    12d2:	ef 5f       	subi	r30, 0xFF	; 255
    12d4:	ef 71       	andi	r30, 0x1F	; 31
    12d6:	e0 93 88 02 	sts	0x0288, r30	; 0x800288 <UART1_TxTail>
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	e6 55       	subi	r30, 0x56	; 86
    12de:	fd 4f       	sbci	r31, 0xFD	; 253
    12e0:	80 81       	ld	r24, Z
    12e2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <__vector_37+0x46>
    12e8:	e9 ec       	ldi	r30, 0xC9	; 201
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	8f 7d       	andi	r24, 0xDF	; 223
    12f0:	80 83       	st	Z, r24
    12f2:	ff 91       	pop	r31
    12f4:	ef 91       	pop	r30
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	0f 90       	pop	r0
    12fc:	0b be       	out	0x3b, r0	; 59
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	0f 90       	pop	r0
    1304:	1f 90       	pop	r1
    1306:	18 95       	reti

00001308 <uart1_init>:
    1308:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <UART1_TxHead>
    130c:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <UART1_TxTail>
    1310:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <UART1_RxHead>
    1314:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <UART1_RxTail>
    1318:	e1 e6       	ldi	r30, 0x61	; 97
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 e8       	ldi	r24, 0x80	; 128
    131e:	80 83       	st	Z, r24
    1320:	10 82       	st	Z, r1
    1322:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1326:	87 e6       	ldi	r24, 0x67	; 103
    1328:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1332:	88 e1       	ldi	r24, 0x18	; 24
    1334:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    1338:	86 e0       	ldi	r24, 0x06	; 6
    133a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    133e:	08 95       	ret

00001340 <uart1_putc>:
    1340:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <UART1_TxHead>
    1344:	2f 5f       	subi	r18, 0xFF	; 255
    1346:	2f 71       	andi	r18, 0x1F	; 31
    1348:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <UART1_TxTail>
    134c:	29 17       	cp	r18, r25
    134e:	e1 f3       	breq	.-8      	; 0x1348 <uart1_putc+0x8>
    1350:	e2 2f       	mov	r30, r18
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	e6 55       	subi	r30, 0x56	; 86
    1356:	fd 4f       	sbci	r31, 0xFD	; 253
    1358:	80 83       	st	Z, r24
    135a:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <UART1_TxHead>
    135e:	e9 ec       	ldi	r30, 0xC9	; 201
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	80 62       	ori	r24, 0x20	; 32
    1366:	80 83       	st	Z, r24
    1368:	08 95       	ret

0000136a <uart1_puts>:
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
    1370:	88 81       	ld	r24, Y
    1372:	88 23       	and	r24, r24
    1374:	29 f0       	breq	.+10     	; 0x1380 <uart1_puts+0x16>
    1376:	21 96       	adiw	r28, 0x01	; 1
    1378:	e3 df       	rcall	.-58     	; 0x1340 <uart1_putc>
    137a:	89 91       	ld	r24, Y+
    137c:	81 11       	cpse	r24, r1
    137e:	fc cf       	rjmp	.-8      	; 0x1378 <uart1_puts+0xe>
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <isCharAvailable_1>:
    1386:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    138a:	88 1f       	adc	r24, r24
    138c:	88 27       	eor	r24, r24
    138e:	88 1f       	adc	r24, r24
    1390:	08 95       	ret

00001392 <receiveChar_1>:

char receiveChar_1()
{
	// Return the char in the UDR2 register
	return UDR1;
    1392:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	
    1396:	08 95       	ret

00001398 <__udivmodhi4>:
    1398:	aa 1b       	sub	r26, r26
    139a:	bb 1b       	sub	r27, r27
    139c:	51 e1       	ldi	r21, 0x11	; 17
    139e:	07 c0       	rjmp	.+14     	; 0x13ae <__udivmodhi4_ep>

000013a0 <__udivmodhi4_loop>:
    13a0:	aa 1f       	adc	r26, r26
    13a2:	bb 1f       	adc	r27, r27
    13a4:	a6 17       	cp	r26, r22
    13a6:	b7 07       	cpc	r27, r23
    13a8:	10 f0       	brcs	.+4      	; 0x13ae <__udivmodhi4_ep>
    13aa:	a6 1b       	sub	r26, r22
    13ac:	b7 0b       	sbc	r27, r23

000013ae <__udivmodhi4_ep>:
    13ae:	88 1f       	adc	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	5a 95       	dec	r21
    13b4:	a9 f7       	brne	.-22     	; 0x13a0 <__udivmodhi4_loop>
    13b6:	80 95       	com	r24
    13b8:	90 95       	com	r25
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	08 95       	ret

000013c0 <__udivmodsi4>:
    13c0:	a1 e2       	ldi	r26, 0x21	; 33
    13c2:	1a 2e       	mov	r1, r26
    13c4:	aa 1b       	sub	r26, r26
    13c6:	bb 1b       	sub	r27, r27
    13c8:	fd 01       	movw	r30, r26
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <__udivmodsi4_ep>

000013cc <__udivmodsi4_loop>:
    13cc:	aa 1f       	adc	r26, r26
    13ce:	bb 1f       	adc	r27, r27
    13d0:	ee 1f       	adc	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	a2 17       	cp	r26, r18
    13d6:	b3 07       	cpc	r27, r19
    13d8:	e4 07       	cpc	r30, r20
    13da:	f5 07       	cpc	r31, r21
    13dc:	20 f0       	brcs	.+8      	; 0x13e6 <__udivmodsi4_ep>
    13de:	a2 1b       	sub	r26, r18
    13e0:	b3 0b       	sbc	r27, r19
    13e2:	e4 0b       	sbc	r30, r20
    13e4:	f5 0b       	sbc	r31, r21

000013e6 <__udivmodsi4_ep>:
    13e6:	66 1f       	adc	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	1a 94       	dec	r1
    13f0:	69 f7       	brne	.-38     	; 0x13cc <__udivmodsi4_loop>
    13f2:	60 95       	com	r22
    13f4:	70 95       	com	r23
    13f6:	80 95       	com	r24
    13f8:	90 95       	com	r25
    13fa:	9b 01       	movw	r18, r22
    13fc:	ac 01       	movw	r20, r24
    13fe:	bd 01       	movw	r22, r26
    1400:	cf 01       	movw	r24, r30
    1402:	08 95       	ret

00001404 <memcpy>:
    1404:	fb 01       	movw	r30, r22
    1406:	dc 01       	movw	r26, r24
    1408:	02 c0       	rjmp	.+4      	; 0x140e <memcpy+0xa>
    140a:	01 90       	ld	r0, Z+
    140c:	0d 92       	st	X+, r0
    140e:	41 50       	subi	r20, 0x01	; 1
    1410:	50 40       	sbci	r21, 0x00	; 0
    1412:	d8 f7       	brcc	.-10     	; 0x140a <memcpy+0x6>
    1414:	08 95       	ret

00001416 <__itoa_ncheck>:
    1416:	bb 27       	eor	r27, r27
    1418:	4a 30       	cpi	r20, 0x0A	; 10
    141a:	31 f4       	brne	.+12     	; 0x1428 <__itoa_ncheck+0x12>
    141c:	99 23       	and	r25, r25
    141e:	22 f4       	brpl	.+8      	; 0x1428 <__itoa_ncheck+0x12>
    1420:	bd e2       	ldi	r27, 0x2D	; 45
    1422:	90 95       	com	r25
    1424:	81 95       	neg	r24
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	01 c0       	rjmp	.+2      	; 0x142c <__utoa_common>

0000142a <__utoa_ncheck>:
    142a:	bb 27       	eor	r27, r27

0000142c <__utoa_common>:
    142c:	fb 01       	movw	r30, r22
    142e:	55 27       	eor	r21, r21
    1430:	aa 27       	eor	r26, r26
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	aa 1f       	adc	r26, r26
    1438:	a4 17       	cp	r26, r20
    143a:	10 f0       	brcs	.+4      	; 0x1440 <__utoa_common+0x14>
    143c:	a4 1b       	sub	r26, r20
    143e:	83 95       	inc	r24
    1440:	50 51       	subi	r21, 0x10	; 16
    1442:	b9 f7       	brne	.-18     	; 0x1432 <__utoa_common+0x6>
    1444:	a0 5d       	subi	r26, 0xD0	; 208
    1446:	aa 33       	cpi	r26, 0x3A	; 58
    1448:	08 f0       	brcs	.+2      	; 0x144c <__utoa_common+0x20>
    144a:	a9 5d       	subi	r26, 0xD9	; 217
    144c:	a1 93       	st	Z+, r26
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	79 f7       	brne	.-34     	; 0x1430 <__utoa_common+0x4>
    1452:	b1 11       	cpse	r27, r1
    1454:	b1 93       	st	Z+, r27
    1456:	11 92       	st	Z+, r1
    1458:	cb 01       	movw	r24, r22
    145a:	00 c0       	rjmp	.+0      	; 0x145c <strrev>

0000145c <strrev>:
    145c:	dc 01       	movw	r26, r24
    145e:	fc 01       	movw	r30, r24
    1460:	67 2f       	mov	r22, r23
    1462:	71 91       	ld	r23, Z+
    1464:	77 23       	and	r23, r23
    1466:	e1 f7       	brne	.-8      	; 0x1460 <strrev+0x4>
    1468:	32 97       	sbiw	r30, 0x02	; 2
    146a:	04 c0       	rjmp	.+8      	; 0x1474 <strrev+0x18>
    146c:	7c 91       	ld	r23, X
    146e:	6d 93       	st	X+, r22
    1470:	70 83       	st	Z, r23
    1472:	62 91       	ld	r22, -Z
    1474:	ae 17       	cp	r26, r30
    1476:	bf 07       	cpc	r27, r31
    1478:	c8 f3       	brcs	.-14     	; 0x146c <strrev+0x10>
    147a:	08 95       	ret

0000147c <_exit>:
    147c:	f8 94       	cli

0000147e <__stop_program>:
    147e:	ff cf       	rjmp	.-2      	; 0x147e <__stop_program>
