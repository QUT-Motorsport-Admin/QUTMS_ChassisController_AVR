
cc_merge2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006f2  00800200  00001efa  00001f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001efa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000110  008008f2  008008f2  00002680  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ca4  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018a7  00000000  00000000  00007788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002315  00000000  00000000  0000902f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be4  00000000  00000000  0000b344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012df  00000000  00000000  0000bf28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004709  00000000  00000000  0000d207  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  00011910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c0       	rjmp	.+492    	; 0x1ee <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__vector_1>
       8:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_2>
       c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
      12:	00 00       	nop
      14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
      16:	00 00       	nop
      18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_9>
      28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
      36:	00 00       	nop
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_17>
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_21>
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__vector_25>
      68:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_26>
      6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
      6e:	00 00       	nop
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__vector_36>
      94:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__vector_37>
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
      be:	00 00       	nop
      c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a8 c0       	rjmp	.+336    	; 0x22a <__bad_interrupt>
      da:	00 00       	nop
      dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
      de:	00 00       	nop
      e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	10 02       	muls	r17, r16
      e6:	71 04       	cpc	r7, r1
      e8:	cd 02       	muls	r28, r29
      ea:	e8 02       	muls	r30, r24
      ec:	03 03       	mulsu	r16, r19
      ee:	1e 03       	fmul	r17, r22
      f0:	39 03       	fmul	r19, r17
      f2:	54 03       	mulsu	r21, r20
      f4:	6f 03       	fmul	r22, r23
      f6:	8a 03       	fmulsu	r16, r18
      f8:	a5 03       	fmuls	r18, r21
      fa:	c0 03       	fmuls	r20, r16
      fc:	db 03       	fmulsu	r21, r19
      fe:	ed 03       	fmulsu	r22, r21
     100:	ff 03       	fmulsu	r23, r23
     102:	11 04       	cpc	r1, r1
     104:	23 04       	cpc	r2, r3
     106:	3e 04       	cpc	r3, r14
     108:	58 04       	cpc	r5, r8
     10a:	71 04       	cpc	r7, r1
     10c:	71 04       	cpc	r7, r1
     10e:	71 04       	cpc	r7, r1
     110:	71 04       	cpc	r7, r1
     112:	71 04       	cpc	r7, r1
     114:	71 04       	cpc	r7, r1
     116:	71 04       	cpc	r7, r1
     118:	71 04       	cpc	r7, r1
     11a:	71 04       	cpc	r7, r1
     11c:	71 04       	cpc	r7, r1
     11e:	71 04       	cpc	r7, r1
     120:	71 04       	cpc	r7, r1
     122:	71 04       	cpc	r7, r1
     124:	71 04       	cpc	r7, r1
     126:	71 04       	cpc	r7, r1
     128:	71 04       	cpc	r7, r1
     12a:	71 04       	cpc	r7, r1
     12c:	71 04       	cpc	r7, r1
     12e:	71 04       	cpc	r7, r1
     130:	71 04       	cpc	r7, r1
     132:	71 04       	cpc	r7, r1
     134:	71 04       	cpc	r7, r1
     136:	71 04       	cpc	r7, r1
     138:	71 04       	cpc	r7, r1
     13a:	71 04       	cpc	r7, r1
     13c:	71 04       	cpc	r7, r1
     13e:	71 04       	cpc	r7, r1
     140:	71 04       	cpc	r7, r1
     142:	71 04       	cpc	r7, r1
     144:	71 04       	cpc	r7, r1
     146:	71 04       	cpc	r7, r1
     148:	71 04       	cpc	r7, r1
     14a:	71 04       	cpc	r7, r1
     14c:	71 04       	cpc	r7, r1
     14e:	71 04       	cpc	r7, r1
     150:	71 04       	cpc	r7, r1
     152:	71 04       	cpc	r7, r1
     154:	71 04       	cpc	r7, r1
     156:	71 04       	cpc	r7, r1
     158:	71 04       	cpc	r7, r1
     15a:	71 04       	cpc	r7, r1
     15c:	71 04       	cpc	r7, r1
     15e:	71 04       	cpc	r7, r1
     160:	71 04       	cpc	r7, r1
     162:	71 04       	cpc	r7, r1
     164:	71 04       	cpc	r7, r1
     166:	71 04       	cpc	r7, r1
     168:	71 04       	cpc	r7, r1
     16a:	71 04       	cpc	r7, r1
     16c:	71 04       	cpc	r7, r1
     16e:	71 04       	cpc	r7, r1
     170:	71 04       	cpc	r7, r1
     172:	71 04       	cpc	r7, r1
     174:	71 04       	cpc	r7, r1
     176:	71 04       	cpc	r7, r1
     178:	71 04       	cpc	r7, r1
     17a:	71 04       	cpc	r7, r1
     17c:	71 04       	cpc	r7, r1
     17e:	71 04       	cpc	r7, r1
     180:	71 04       	cpc	r7, r1
     182:	71 04       	cpc	r7, r1
     184:	71 04       	cpc	r7, r1
     186:	71 04       	cpc	r7, r1
     188:	71 04       	cpc	r7, r1
     18a:	71 04       	cpc	r7, r1
     18c:	71 04       	cpc	r7, r1
     18e:	71 04       	cpc	r7, r1
     190:	71 04       	cpc	r7, r1
     192:	71 04       	cpc	r7, r1
     194:	71 04       	cpc	r7, r1
     196:	71 04       	cpc	r7, r1
     198:	71 04       	cpc	r7, r1
     19a:	71 04       	cpc	r7, r1
     19c:	71 04       	cpc	r7, r1
     19e:	71 04       	cpc	r7, r1
     1a0:	71 04       	cpc	r7, r1
     1a2:	71 04       	cpc	r7, r1
     1a4:	71 04       	cpc	r7, r1
     1a6:	71 04       	cpc	r7, r1
     1a8:	71 04       	cpc	r7, r1
     1aa:	71 04       	cpc	r7, r1
     1ac:	71 04       	cpc	r7, r1
     1ae:	71 04       	cpc	r7, r1
     1b0:	71 04       	cpc	r7, r1
     1b2:	71 04       	cpc	r7, r1
     1b4:	71 04       	cpc	r7, r1
     1b6:	71 04       	cpc	r7, r1
     1b8:	71 04       	cpc	r7, r1
     1ba:	71 04       	cpc	r7, r1
     1bc:	71 04       	cpc	r7, r1
     1be:	71 04       	cpc	r7, r1
     1c0:	71 04       	cpc	r7, r1
     1c2:	2b 02       	muls	r18, r27
     1c4:	46 02       	muls	r20, r22
     1c6:	71 04       	cpc	r7, r1
     1c8:	71 04       	cpc	r7, r1
     1ca:	71 04       	cpc	r7, r1
     1cc:	71 04       	cpc	r7, r1
     1ce:	71 04       	cpc	r7, r1
     1d0:	71 04       	cpc	r7, r1
     1d2:	71 04       	cpc	r7, r1
     1d4:	71 04       	cpc	r7, r1
     1d6:	61 02       	muls	r22, r17
     1d8:	7c 02       	muls	r23, r28
     1da:	71 04       	cpc	r7, r1
     1dc:	71 04       	cpc	r7, r1
     1de:	71 04       	cpc	r7, r1
     1e0:	71 04       	cpc	r7, r1
     1e2:	71 04       	cpc	r7, r1
     1e4:	71 04       	cpc	r7, r1
     1e6:	71 04       	cpc	r7, r1
     1e8:	71 04       	cpc	r7, r1
     1ea:	97 02       	muls	r25, r23
     1ec:	b2 02       	muls	r27, r18

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d1 e2       	ldi	r29, 0x21	; 33
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	18 e0       	ldi	r17, 0x08	; 8
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b2 e0       	ldi	r27, 0x02	; 2
     200:	ea ef       	ldi	r30, 0xFA	; 250
     202:	fe e1       	ldi	r31, 0x1E	; 30
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a2 3f       	cpi	r26, 0xF2	; 242
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	2a e0       	ldi	r18, 0x0A	; 10
     216:	a2 ef       	ldi	r26, 0xF2	; 242
     218:	b8 e0       	ldi	r27, 0x08	; 8
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a2 30       	cpi	r26, 0x02	; 2
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	45 d6       	rcall	.+3210   	; 0xeb0 <main>
     226:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <a2dOn>:
// starts conversion, waits until conversion is done, and returns result
unsigned char a2d_8bit()
{
	// do 10-bit conversion and return highest 8 bits
	return a2d_10bit()>>2;			// return ADC MSB byte
}
     22c:	ea e7       	ldi	r30, 0x7A	; 122
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	80 68       	ori	r24, 0x80	; 128
     234:	80 83       	st	Z, r24
     236:	08 95       	ret

00000238 <a2dSetPrescaler>:
     238:	ea e7       	ldi	r30, 0x7A	; 122
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	90 81       	ld	r25, Z
     23e:	98 7f       	andi	r25, 0xF8	; 248
     240:	90 83       	st	Z, r25
     242:	90 81       	ld	r25, Z
     244:	89 2b       	or	r24, r25
     246:	80 83       	st	Z, r24
     248:	08 95       	ret

0000024a <a2dSetReference>:
     24a:	ec e7       	ldi	r30, 0x7C	; 124
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	90 81       	ld	r25, Z
     250:	9c 7f       	andi	r25, 0xFC	; 252
     252:	90 83       	st	Z, r25
     254:	20 81       	ld	r18, Z
     256:	30 e4       	ldi	r19, 0x40	; 64
     258:	83 9f       	mul	r24, r19
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	82 2b       	or	r24, r18
     260:	80 83       	st	Z, r24
     262:	08 95       	ret

00000264 <a2dInit>:
     264:	cf 93       	push	r28
     266:	c6 2f       	mov	r28, r22
     268:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     26c:	ec e7       	ldi	r30, 0x7C	; 124
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	90 81       	ld	r25, Z
     272:	9f 7d       	andi	r25, 0xDF	; 223
     274:	90 83       	st	Z, r25
     276:	e0 df       	rcall	.-64     	; 0x238 <a2dSetPrescaler>
     278:	8c 2f       	mov	r24, r28
     27a:	e7 df       	rcall	.-50     	; 0x24a <a2dSetReference>
     27c:	d7 df       	rcall	.-82     	; 0x22c <a2dOn>
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <a2d_10bitCh>:
// starts conversion, waits until conversion is done, and returns result
// modded for mega1280 by Ant
unsigned short a2d_10bitCh(unsigned char ch)
{
	// set channel
	ADMUX &= ADC_MUX_MASK;	
     282:	ec e7       	ldi	r30, 0x7C	; 124
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	90 81       	ld	r25, Z
     288:	90 7e       	andi	r25, 0xE0	; 224
     28a:	90 83       	st	Z, r25
	
	if (ch > 7) 
     28c:	88 30       	cpi	r24, 0x08	; 8
     28e:	60 f0       	brcs	.+24     	; 0x2a8 <a2d_10bitCh+0x26>
	{
		ADCSRB |= 8;
     290:	eb e7       	ldi	r30, 0x7B	; 123
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	90 81       	ld	r25, Z
     296:	98 60       	ori	r25, 0x08	; 8
     298:	90 83       	st	Z, r25
		ADMUX |= (ch - 8);
     29a:	ec e7       	ldi	r30, 0x7C	; 124
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	90 81       	ld	r25, Z
     2a0:	88 50       	subi	r24, 0x08	; 8
     2a2:	89 2b       	or	r24, r25
     2a4:	80 83       	st	Z, r24
     2a6:	0a c0       	rjmp	.+20     	; 0x2bc <a2d_10bitCh+0x3a>
	}
	else
	{
		ADCSRB &= 247;
     2a8:	eb e7       	ldi	r30, 0x7B	; 123
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	90 81       	ld	r25, Z
     2ae:	97 7f       	andi	r25, 0xF7	; 247
     2b0:	90 83       	st	Z, r25
		ADMUX |= ch;
     2b2:	ec e7       	ldi	r30, 0x7C	; 124
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	90 81       	ld	r25, Z
     2b8:	89 2b       	or	r24, r25
     2ba:	80 83       	st	Z, r24
	}
	
	// ADMUX |= ch;	//comment out this line when using on 16ch parts

	// start conversion
	ADCSRA |= (1<<ADSC);
     2bc:	ea e7       	ldi	r30, 0x7A	; 122
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC)) {} // wait until conversion complete 
     2c6:	80 81       	ld	r24, Z
     2c8:	86 fd       	sbrc	r24, 6
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <a2d_10bitCh+0x44>

	return ADC;                // read ADC (full 10 bits);
     2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// return (8 << ADCH)|(ADCL); // read ADC (full 10 bits);
    // return ADCL;                // read ADC (first 8 bits)
}
     2d4:	08 95       	ret

000002d6 <CAN_send>:
        sendingID|                  // Sending ID, ( First 8 bits, define the device to send to)
        ((uint32_t)type<<18)|       // What sort of command to send
        ((uint32_t)address<<13)|    // Specific address
        status                      // SubID?
    );
}
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	c8 2f       	mov	r28, r24
     2f0:	d6 2f       	mov	r29, r22
     2f2:	6a 01       	movw	r12, r20
     2f4:	48 01       	movw	r8, r16
     2f6:	59 01       	movw	r10, r18
     2f8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <MCP2515_findFreeTxBuffer>
     2fc:	85 01       	movw	r16, r10
     2fe:	74 01       	movw	r14, r8
     300:	96 01       	movw	r18, r12
     302:	4d 2f       	mov	r20, r29
     304:	68 2f       	mov	r22, r24
     306:	8c 2f       	mov	r24, r28
     308:	0e 94 cc 0a 	call	0x1598	; 0x1598 <MCP2515_TX>
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	df 90       	pop	r13
     31a:	cf 90       	pop	r12
     31c:	bf 90       	pop	r11
     31e:	af 90       	pop	r10
     320:	9f 90       	pop	r9
     322:	8f 90       	pop	r8
     324:	08 95       	ret

00000326 <CAN_pull_packet>:

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
     326:	af 92       	push	r10
     328:	bf 92       	push	r11
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	c8 2f       	mov	r28, r24
     33a:	7b 01       	movw	r14, r22
     33c:	6a 01       	movw	r12, r20
     33e:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
     340:	0e 94 49 0b 	call	0x1692	; 0x1692 <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
     344:	82 95       	swap	r24
     346:	86 95       	lsr	r24
     348:	86 95       	lsr	r24
     34a:	83 70       	andi	r24, 0x03	; 3
     34c:	82 30       	cpi	r24, 0x02	; 2
     34e:	61 f0       	breq	.+24     	; 0x368 <CAN_pull_packet+0x42>
     350:	83 30       	cpi	r24, 0x03	; 3
     352:	91 f0       	breq	.+36     	; 0x378 <CAN_pull_packet+0x52>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	e9 f4       	brne	.+58     	; 0x392 <CAN_pull_packet+0x6c>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     358:	85 01       	movw	r16, r10
     35a:	96 01       	movw	r18, r12
     35c:	a7 01       	movw	r20, r14
     35e:	61 e6       	ldi	r22, 0x61	; 97
     360:	8c 2f       	mov	r24, r28
     362:	0e 94 20 0a 	call	0x1440	; 0x1440 <MCP2515_PullCanPacket>
			break;
     366:	15 c0       	rjmp	.+42     	; 0x392 <CAN_pull_packet+0x6c>
		case 2: // Message in RXB1=
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
     368:	85 01       	movw	r16, r10
     36a:	96 01       	movw	r18, r12
     36c:	a7 01       	movw	r20, r14
     36e:	61 e7       	ldi	r22, 0x71	; 113
     370:	8c 2f       	mov	r24, r28
     372:	0e 94 20 0a 	call	0x1440	; 0x1440 <MCP2515_PullCanPacket>
			break;
     376:	0d c0       	rjmp	.+26     	; 0x392 <CAN_pull_packet+0x6c>
		case 3: // Message in both buffers
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     378:	85 01       	movw	r16, r10
     37a:	96 01       	movw	r18, r12
     37c:	a7 01       	movw	r20, r14
     37e:	61 e6       	ldi	r22, 0x61	; 97
     380:	8c 2f       	mov	r24, r28
     382:	0e 94 20 0a 	call	0x1440	; 0x1440 <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
     386:	96 01       	movw	r18, r12
     388:	a7 01       	movw	r20, r14
     38a:	61 e7       	ldi	r22, 0x71	; 113
     38c:	8c 2f       	mov	r24, r28
     38e:	0e 94 20 0a 	call	0x1440	; 0x1440 <MCP2515_PullCanPacket>
			break;
		default:
			break;
	}
}
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	08 95       	ret

000003a6 <send_error_message>:
 * Returns: none
 * 
 * Formats a 50-character long log message, and sends it over UART.
 * */
void send_error_message(char start[], char message[], uint16_t part_number) 
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	18 2f       	mov	r17, r24
     3b0:	09 2f       	mov	r16, r25
	unsigned char *messageWithNumber;
	unsigned char *errorData;
	
	// Format error message with part number if given
	snprintf(messageWithNumber, MAX_ERROR_MESSAGE_LENGTH, message, part_number);
     3b2:	5f 93       	push	r21
     3b4:	4f 93       	push	r20
     3b6:	7f 93       	push	r23
     3b8:	6f 93       	push	r22
     3ba:	1f 92       	push	r1
     3bc:	88 e2       	ldi	r24, 0x28	; 40
     3be:	8f 93       	push	r24
     3c0:	d0 e0       	ldi	r29, 0x00	; 0
     3c2:	df 93       	push	r29
     3c4:	c0 e0       	ldi	r28, 0x00	; 0
     3c6:	cf 93       	push	r28
     3c8:	0e 94 92 0c 	call	0x1924	; 0x1924 <snprintf>

	// Create error data
	snprintf(errorData, MAX_ERROR_MESSAGE_LENGTH + 10, "%s %s", start, messageWithNumber);
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	8c e2       	ldi	r24, 0x2C	; 44
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	1f 92       	push	r1
     3de:	82 e3       	ldi	r24, 0x32	; 50
     3e0:	8f 93       	push	r24
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	0e 94 92 0c 	call	0x1924	; 0x1924 <snprintf>
	
	// Send error data over UART
	UART_sendPacket(errorData, MAX_ERROR_MESSAGE_LENGTH + 10);
     3ea:	62 e3       	ldi	r22, 0x32	; 50
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	8d 2f       	mov	r24, r29
     3f0:	9c 2f       	mov	r25, r28
     3f2:	41 d5       	rcall	.+2690   	; 0xe76 <UART_sendPacket>
}
     3f4:	8d b7       	in	r24, 0x3d	; 61
     3f6:	9e b7       	in	r25, 0x3e	; 62
     3f8:	42 96       	adiw	r24, 0x12	; 18
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	9e bf       	out	0x3e, r25	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	8d bf       	out	0x3d, r24	; 61
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	08 95       	ret

0000040e <throw_error_code_with_number>:
 * Generates an error message, and takes the necessary actions depending on the severity and error
 * 
 * */
void throw_error_code_with_number(uint16_t severity, uint16_t error_code, uint16_t part_number) 
{
	switch (error_code) {
     40e:	65 38       	cpi	r22, 0x85	; 133
     410:	71 05       	cpc	r23, r1
     412:	08 f0       	brcs	.+2      	; 0x416 <throw_error_code_with_number+0x8>
     414:	66 c2       	rjmp	.+1228   	; 0x8e2 <throw_error_code_with_number+0x4d4>
     416:	fb 01       	movw	r30, r22
     418:	ee 58       	subi	r30, 0x8E	; 142
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__tablejump2__>
		// 		break;
		//     }			
		// break;

        case ERROR_GENERAL:					
			switch (severity) {
     420:	82 30       	cpi	r24, 0x02	; 2
     422:	91 05       	cpc	r25, r1
     424:	61 f0       	breq	.+24     	; 0x43e <throw_error_code_with_number+0x30>
     426:	83 30       	cpi	r24, 0x03	; 3
     428:	91 05       	cpc	r25, r1
     42a:	79 f0       	breq	.+30     	; 0x44a <throw_error_code_with_number+0x3c>
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	09 f0       	breq	.+2      	; 0x432 <throw_error_code_with_number+0x24>
     430:	58 c2       	rjmp	.+1200   	; 0x8e2 <throw_error_code_with_number+0x4d4>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Error", part_number);
     432:	62 e3       	ldi	r22, 0x32	; 50
     434:	72 e0       	ldi	r23, 0x02	; 2
     436:	88 e3       	ldi	r24, 0x38	; 56
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	b5 cf       	rjmp	.-150    	; 0x3a6 <send_error_message>
				// Additional Info Handling
				break;
     43c:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Error!", part_number);
     43e:	6d e3       	ldi	r22, 0x3D	; 61
     440:	72 e0       	ldi	r23, 0x02	; 2
     442:	84 e4       	ldi	r24, 0x44	; 68
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	af cf       	rjmp	.-162    	; 0x3a6 <send_error_message>
				// Additional Warning Handling
				break;
     448:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "ERROR", part_number);
     44a:	6e e4       	ldi	r22, 0x4E	; 78
     44c:	72 e0       	ldi	r23, 0x02	; 2
     44e:	84 e5       	ldi	r24, 0x54	; 84
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	a9 cf       	rjmp	.-174    	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     454:	08 95       	ret

        // CANBUS based errors
        // --------------------------------------------------------------------

        case ERROR_CANBUS_1_NO_RESPONSE:					
			switch (severity) {
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	91 05       	cpc	r25, r1
     45a:	61 f0       	breq	.+24     	; 0x474 <throw_error_code_with_number+0x66>
     45c:	83 30       	cpi	r24, 0x03	; 3
     45e:	91 05       	cpc	r25, r1
     460:	79 f0       	breq	.+30     	; 0x480 <throw_error_code_with_number+0x72>
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	09 f0       	breq	.+2      	; 0x468 <throw_error_code_with_number+0x5a>
     466:	3d c2       	rjmp	.+1146   	; 0x8e2 <throw_error_code_with_number+0x4d4>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 No Response", part_number);
     468:	6e e5       	ldi	r22, 0x5E	; 94
     46a:	72 e0       	ldi	r23, 0x02	; 2
     46c:	88 e3       	ldi	r24, 0x38	; 56
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	9a cf       	rjmp	.-204    	; 0x3a6 <send_error_message>
				// Additional Info Handling
				break;
     472:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 No Response!", part_number);
     474:	63 e7       	ldi	r22, 0x73	; 115
     476:	72 e0       	ldi	r23, 0x02	; 2
     478:	84 e4       	ldi	r24, 0x44	; 68
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	94 cf       	rjmp	.-216    	; 0x3a6 <send_error_message>
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL NO RESPONSE", part_number);
     47e:	08 95       	ret
     480:	69 e8       	ldi	r22, 0x89	; 137
     482:	72 e0       	ldi	r23, 0x02	; 2
     484:	84 e5       	ldi	r24, 0x54	; 84
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	8e cf       	rjmp	.-228    	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     48a:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_1_RESPONSE_MALFORMED:					
			switch (severity) {
     48c:	82 30       	cpi	r24, 0x02	; 2
     48e:	91 05       	cpc	r25, r1
     490:	61 f0       	breq	.+24     	; 0x4aa <throw_error_code_with_number+0x9c>
     492:	83 30       	cpi	r24, 0x03	; 3
     494:	91 05       	cpc	r25, r1
     496:	79 f0       	breq	.+30     	; 0x4b6 <throw_error_code_with_number+0xa8>
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	09 f0       	breq	.+2      	; 0x49e <throw_error_code_with_number+0x90>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 Malformed Packet", part_number);
     49c:	22 c2       	rjmp	.+1092   	; 0x8e2 <throw_error_code_with_number+0x4d4>
     49e:	67 ea       	ldi	r22, 0xA7	; 167
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	88 e3       	ldi	r24, 0x38	; 56
     4a4:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     4a6:	7f cf       	rjmp	.-258    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 Malformed Packet!", part_number);
     4a8:	08 95       	ret
     4aa:	61 ec       	ldi	r22, 0xC1	; 193
     4ac:	72 e0       	ldi	r23, 0x02	; 2
     4ae:	84 e4       	ldi	r24, 0x44	; 68
     4b0:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4b2:	79 cf       	rjmp	.-270    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL MALFORMED PACKET", part_number);
     4b4:	08 95       	ret
     4b6:	6c ed       	ldi	r22, 0xDC	; 220
     4b8:	72 e0       	ldi	r23, 0x02	; 2
     4ba:	84 e5       	ldi	r24, 0x54	; 84
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	73 cf       	rjmp	.-282    	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     4c0:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_NO_RESPONSE:					
			switch (severity) {
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	91 05       	cpc	r25, r1
     4c6:	61 f0       	breq	.+24     	; 0x4e0 <throw_error_code_with_number+0xd2>
     4c8:	83 30       	cpi	r24, 0x03	; 3
     4ca:	91 05       	cpc	r25, r1
     4cc:	79 f0       	breq	.+30     	; 0x4ec <throw_error_code_with_number+0xde>
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <throw_error_code_with_number+0xc6>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 No Response", part_number);
     4d2:	07 c2       	rjmp	.+1038   	; 0x8e2 <throw_error_code_with_number+0x4d4>
     4d4:	6f ef       	ldi	r22, 0xFF	; 255
     4d6:	72 e0       	ldi	r23, 0x02	; 2
     4d8:	88 e3       	ldi	r24, 0x38	; 56
     4da:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     4dc:	64 cf       	rjmp	.-312    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 No Response!", part_number);
     4de:	08 95       	ret
     4e0:	64 e1       	ldi	r22, 0x14	; 20
     4e2:	73 e0       	ldi	r23, 0x03	; 3
     4e4:	84 e4       	ldi	r24, 0x44	; 68
     4e6:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4e8:	5e cf       	rjmp	.-324    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL NO RESPONSE", part_number);
     4ea:	08 95       	ret
     4ec:	6a e2       	ldi	r22, 0x2A	; 42
     4ee:	73 e0       	ldi	r23, 0x03	; 3
     4f0:	84 e5       	ldi	r24, 0x54	; 84
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	58 cf       	rjmp	.-336    	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     4f6:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_RESPONSE_MALFORMED:					
			switch (severity) {
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	91 05       	cpc	r25, r1
     4fc:	61 f0       	breq	.+24     	; 0x516 <throw_error_code_with_number+0x108>
     4fe:	83 30       	cpi	r24, 0x03	; 3
     500:	91 05       	cpc	r25, r1
     502:	79 f0       	breq	.+30     	; 0x522 <throw_error_code_with_number+0x114>
     504:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 Malformed Packet", part_number);
     506:	09 f0       	breq	.+2      	; 0x50a <throw_error_code_with_number+0xfc>
     508:	ec c1       	rjmp	.+984    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     50a:	68 e4       	ldi	r22, 0x48	; 72
     50c:	73 e0       	ldi	r23, 0x03	; 3
     50e:	88 e3       	ldi	r24, 0x38	; 56
				// Additional Info Handling
				break;
     510:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 Malformed Packet!", part_number);
     512:	49 cf       	rjmp	.-366    	; 0x3a6 <send_error_message>
     514:	08 95       	ret
     516:	62 e6       	ldi	r22, 0x62	; 98
     518:	73 e0       	ldi	r23, 0x03	; 3
     51a:	84 e4       	ldi	r24, 0x44	; 68
     51c:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     51e:	43 cf       	rjmp	.-378    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL MALFORMED PACKET", part_number);
     520:	08 95       	ret
     522:	6d e7       	ldi	r22, 0x7D	; 125
     524:	73 e0       	ldi	r23, 0x03	; 3
     526:	84 e5       	ldi	r24, 0x54	; 84
     528:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     52a:	3d cf       	rjmp	.-390    	; 0x3a6 <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_NO_RESPONSE:					
			switch (severity) {
     52c:	08 95       	ret
     52e:	82 30       	cpi	r24, 0x02	; 2
     530:	91 05       	cpc	r25, r1
     532:	61 f0       	breq	.+24     	; 0x54c <throw_error_code_with_number+0x13e>
     534:	83 30       	cpi	r24, 0x03	; 3
     536:	91 05       	cpc	r25, r1
     538:	79 f0       	breq	.+30     	; 0x558 <throw_error_code_with_number+0x14a>
     53a:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 No Response", part_number);
     53c:	09 f0       	breq	.+2      	; 0x540 <throw_error_code_with_number+0x132>
     53e:	d1 c1       	rjmp	.+930    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     540:	60 ea       	ldi	r22, 0xA0	; 160
     542:	73 e0       	ldi	r23, 0x03	; 3
     544:	88 e3       	ldi	r24, 0x38	; 56
				// Additional Info Handling
				break;
     546:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 No Response!", part_number);
     548:	2e cf       	rjmp	.-420    	; 0x3a6 <send_error_message>
     54a:	08 95       	ret
     54c:	65 eb       	ldi	r22, 0xB5	; 181
     54e:	73 e0       	ldi	r23, 0x03	; 3
     550:	84 e4       	ldi	r24, 0x44	; 68
     552:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     554:	28 cf       	rjmp	.-432    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL NO RESPONSE", part_number);
     556:	08 95       	ret
     558:	6b ec       	ldi	r22, 0xCB	; 203
     55a:	73 e0       	ldi	r23, 0x03	; 3
     55c:	84 e5       	ldi	r24, 0x54	; 84
     55e:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     560:	22 cf       	rjmp	.-444    	; 0x3a6 <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_RESPONSE_MALFORMED:					
			switch (severity) {
     562:	08 95       	ret
     564:	82 30       	cpi	r24, 0x02	; 2
     566:	91 05       	cpc	r25, r1
     568:	61 f0       	breq	.+24     	; 0x582 <throw_error_code_with_number+0x174>
     56a:	83 30       	cpi	r24, 0x03	; 3
     56c:	91 05       	cpc	r25, r1
     56e:	79 f0       	breq	.+30     	; 0x58e <throw_error_code_with_number+0x180>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 Malformed Packet", part_number);
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	09 f0       	breq	.+2      	; 0x576 <throw_error_code_with_number+0x168>
     574:	b6 c1       	rjmp	.+876    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     576:	69 ee       	ldi	r22, 0xE9	; 233
     578:	73 e0       	ldi	r23, 0x03	; 3
     57a:	88 e3       	ldi	r24, 0x38	; 56
				// Additional Info Handling
				break;
     57c:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 Malformed Packet!", part_number);
     57e:	13 cf       	rjmp	.-474    	; 0x3a6 <send_error_message>
     580:	08 95       	ret
     582:	63 e0       	ldi	r22, 0x03	; 3
     584:	74 e0       	ldi	r23, 0x04	; 4
     586:	84 e4       	ldi	r24, 0x44	; 68
     588:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL MALFORMED PACKET", part_number);
     58a:	0d cf       	rjmp	.-486    	; 0x3a6 <send_error_message>
     58c:	08 95       	ret
     58e:	6e e1       	ldi	r22, 0x1E	; 30
     590:	74 e0       	ldi	r23, 0x04	; 4
     592:	84 e5       	ldi	r24, 0x54	; 84
				// Additional Error Handling
				break;
     594:	92 e0       	ldi	r25, 0x02	; 2

        // Sensor based errors
        // --------------------------------------------------------------------

		case ERROR_GEARBOX_TEMPERATURE_LOW:					
			switch (severity) {
     596:	07 cf       	rjmp	.-498    	; 0x3a6 <send_error_message>
     598:	08 95       	ret
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	91 05       	cpc	r25, r1
     59e:	61 f0       	breq	.+24     	; 0x5b8 <throw_error_code_with_number+0x1aa>
     5a0:	83 30       	cpi	r24, 0x03	; 3
     5a2:	91 05       	cpc	r25, r1
     5a4:	79 f0       	breq	.+30     	; 0x5c4 <throw_error_code_with_number+0x1b6>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	09 f0       	breq	.+2      	; 0x5ac <throw_error_code_with_number+0x19e>
     5aa:	9b c1       	rjmp	.+822    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     5ac:	61 e4       	ldi	r22, 0x41	; 65
     5ae:	74 e0       	ldi	r23, 0x04	; 4
     5b0:	88 e3       	ldi	r24, 0x38	; 56
				// Additional Info Handling
				break;
     5b2:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally Low!", part_number);
     5b4:	f8 ce       	rjmp	.-528    	; 0x3a6 <send_error_message>
     5b6:	08 95       	ret
     5b8:	6f e5       	ldi	r22, 0x5F	; 95
     5ba:	74 e0       	ldi	r23, 0x04	; 4
     5bc:	84 e4       	ldi	r24, 0x44	; 68
				// Additional Warning Handling
				break;
     5be:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY LOW", part_number);
     5c0:	f2 ce       	rjmp	.-540    	; 0x3a6 <send_error_message>
     5c2:	08 95       	ret
     5c4:	66 e8       	ldi	r22, 0x86	; 134
     5c6:	74 e0       	ldi	r23, 0x04	; 4
     5c8:	84 e5       	ldi	r24, 0x54	; 84
				// Additional Error Handling
				break;
     5ca:	92 e0       	ldi	r25, 0x02	; 2
			}			
		break;

		case ERROR_GEARBOX_TEMPERATURE_HIGH:					
			switch (severity) {
     5cc:	ec ce       	rjmp	.-552    	; 0x3a6 <send_error_message>
     5ce:	08 95       	ret
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	91 05       	cpc	r25, r1
     5d4:	61 f0       	breq	.+24     	; 0x5ee <throw_error_code_with_number+0x1e0>
     5d6:	83 30       	cpi	r24, 0x03	; 3
     5d8:	91 05       	cpc	r25, r1
     5da:	79 f0       	breq	.+30     	; 0x5fa <throw_error_code_with_number+0x1ec>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	09 f0       	breq	.+2      	; 0x5e2 <throw_error_code_with_number+0x1d4>
     5e0:	80 c1       	rjmp	.+768    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     5e2:	61 e4       	ldi	r22, 0x41	; 65
     5e4:	74 e0       	ldi	r23, 0x04	; 4
     5e6:	88 e3       	ldi	r24, 0x38	; 56
				// Additional Info Handling
				break;
     5e8:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally High!", part_number);
     5ea:	dd ce       	rjmp	.-582    	; 0x3a6 <send_error_message>
     5ec:	08 95       	ret
     5ee:	6c ea       	ldi	r22, 0xAC	; 172
     5f0:	74 e0       	ldi	r23, 0x04	; 4
     5f2:	84 e4       	ldi	r24, 0x44	; 68
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY HIGH", part_number);
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	d7 ce       	rjmp	.-594    	; 0x3a6 <send_error_message>
     5f8:	08 95       	ret
     5fa:	64 ed       	ldi	r22, 0xD4	; 212
     5fc:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Error Handling
				break;
     5fe:	84 e5       	ldi	r24, 0x54	; 84
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_LOW:					
			switch (severity) {
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	d1 ce       	rjmp	.-606    	; 0x3a6 <send_error_message>
     604:	08 95       	ret
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	91 05       	cpc	r25, r1
     60a:	61 f0       	breq	.+24     	; 0x624 <throw_error_code_with_number+0x216>
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	91 05       	cpc	r25, r1
     610:	79 f0       	breq	.+30     	; 0x630 <throw_error_code_with_number+0x222>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	09 f0       	breq	.+2      	; 0x618 <throw_error_code_with_number+0x20a>
     616:	65 c1       	rjmp	.+714    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     618:	6b ef       	ldi	r22, 0xFB	; 251
     61a:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Info Handling
				break;
     61c:	88 e3       	ldi	r24, 0x38	; 56

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally Low!", part_number);
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	c2 ce       	rjmp	.-636    	; 0x3a6 <send_error_message>
     622:	08 95       	ret
     624:	6a e1       	ldi	r22, 0x1A	; 26
     626:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;
     628:	84 e4       	ldi	r24, 0x44	; 68

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY LOW", part_number);
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	bc ce       	rjmp	.-648    	; 0x3a6 <send_error_message>
     62e:	08 95       	ret
     630:	62 e4       	ldi	r22, 0x42	; 66
     632:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     634:	84 e5       	ldi	r24, 0x54	; 84
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_HIGH:					
			switch (severity) {
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	b6 ce       	rjmp	.-660    	; 0x3a6 <send_error_message>
     63a:	08 95       	ret
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	91 05       	cpc	r25, r1
     640:	61 f0       	breq	.+24     	; 0x65a <throw_error_code_with_number+0x24c>
     642:	83 30       	cpi	r24, 0x03	; 3
     644:	91 05       	cpc	r25, r1
     646:	79 f0       	breq	.+30     	; 0x666 <throw_error_code_with_number+0x258>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	09 f0       	breq	.+2      	; 0x64e <throw_error_code_with_number+0x240>
     64c:	4a c1       	rjmp	.+660    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     64e:	6b ef       	ldi	r22, 0xFB	; 251
     650:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Info Handling
				break;
     652:	88 e3       	ldi	r24, 0x38	; 56

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally High!", part_number);
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	a7 ce       	rjmp	.-690    	; 0x3a6 <send_error_message>
     658:	08 95       	ret
     65a:	69 e6       	ldi	r22, 0x69	; 105
     65c:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY HIGH", part_number);
     65e:	84 e4       	ldi	r24, 0x44	; 68
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	a1 ce       	rjmp	.-702    	; 0x3a6 <send_error_message>
     664:	08 95       	ret
     666:	62 e9       	ldi	r22, 0x92	; 146
     668:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     66a:	84 e5       	ldi	r24, 0x54	; 84
			}			
		break;

		case ERROR_BRAKES_PRESSURE_LOW:					
			switch (severity) {
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	9b ce       	rjmp	.-714    	; 0x3a6 <send_error_message>
     670:	08 95       	ret
     672:	82 30       	cpi	r24, 0x02	; 2
     674:	91 05       	cpc	r25, r1
     676:	61 f0       	breq	.+24     	; 0x690 <throw_error_code_with_number+0x282>
     678:	83 30       	cpi	r24, 0x03	; 3
     67a:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     67c:	79 f0       	breq	.+30     	; 0x69c <throw_error_code_with_number+0x28e>
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	09 f0       	breq	.+2      	; 0x684 <throw_error_code_with_number+0x276>
     682:	2f c1       	rjmp	.+606    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     684:	6a eb       	ldi	r22, 0xBA	; 186
				// Additional Info Handling
				break;
     686:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally Low!", part_number);
     688:	88 e3       	ldi	r24, 0x38	; 56
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	8c ce       	rjmp	.-744    	; 0x3a6 <send_error_message>
     68e:	08 95       	ret
     690:	64 ed       	ldi	r22, 0xD4	; 212
				// Additional Warning Handling
				break;
     692:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY LOW", part_number);
     694:	84 e4       	ldi	r24, 0x44	; 68
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	86 ce       	rjmp	.-756    	; 0x3a6 <send_error_message>
     69a:	08 95       	ret
     69c:	67 ef       	ldi	r22, 0xF7	; 247
     69e:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     6a0:	84 e5       	ldi	r24, 0x54	; 84
			}			
		break;

		case ERROR_BRAKES_PRESSURE_HIGH:					
			switch (severity) {
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	80 ce       	rjmp	.-768    	; 0x3a6 <send_error_message>
     6a6:	08 95       	ret
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	91 05       	cpc	r25, r1
     6ac:	61 f0       	breq	.+24     	; 0x6c6 <throw_error_code_with_number+0x2b8>
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6b2:	79 f0       	breq	.+30     	; 0x6d2 <throw_error_code_with_number+0x2c4>
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	09 f0       	breq	.+2      	; 0x6ba <throw_error_code_with_number+0x2ac>
     6b8:	14 c1       	rjmp	.+552    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     6ba:	6a eb       	ldi	r22, 0xBA	; 186
				// Additional Info Handling
				break;
     6bc:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     6be:	88 e3       	ldi	r24, 0x38	; 56
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	71 ce       	rjmp	.-798    	; 0x3a6 <send_error_message>
     6c4:	08 95       	ret
     6c6:	69 e1       	ldi	r22, 0x19	; 25
				// Additional Warning Handling
				break;
     6c8:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     6ca:	84 e4       	ldi	r24, 0x44	; 68
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	6b ce       	rjmp	.-810    	; 0x3a6 <send_error_message>
     6d0:	08 95       	ret
     6d2:	6d e3       	ldi	r22, 0x3D	; 61
     6d4:	76 e0       	ldi	r23, 0x06	; 6
				// Additional Error Handling
				break;
     6d6:	84 e5       	ldi	r24, 0x54	; 84
			}			
		break;

        case ERROR_BRAKES_PRESSURE:					
			switch (severity) {
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	65 ce       	rjmp	.-822    	; 0x3a6 <send_error_message>
     6dc:	08 95       	ret
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	91 05       	cpc	r25, r1
     6e2:	61 f0       	breq	.+24     	; 0x6fc <throw_error_code_with_number+0x2ee>
     6e4:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6e6:	91 05       	cpc	r25, r1
     6e8:	79 f0       	breq	.+30     	; 0x708 <throw_error_code_with_number+0x2fa>
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <throw_error_code_with_number+0x2e2>
     6ee:	f9 c0       	rjmp	.+498    	; 0x8e2 <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     6f0:	6a eb       	ldi	r22, 0xBA	; 186

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Warnning!", part_number);
     6f2:	75 e0       	ldi	r23, 0x05	; 5
     6f4:	88 e3       	ldi	r24, 0x38	; 56
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	56 ce       	rjmp	.-852    	; 0x3a6 <send_error_message>
     6fa:	08 95       	ret
     6fc:	60 e6       	ldi	r22, 0x60	; 96
				// Additional Warning Handling
				break;
     6fe:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICAL!", part_number);
     700:	84 e4       	ldi	r24, 0x44	; 68
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	50 ce       	rjmp	.-864    	; 0x3a6 <send_error_message>
     706:	08 95       	ret
     708:	6d e7       	ldi	r22, 0x7D	; 125
				// Additional Error Handling
				break;
     70a:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_LOW:					
			switch (severity) {
     70c:	84 e5       	ldi	r24, 0x54	; 84
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	4a ce       	rjmp	.-876    	; 0x3a6 <send_error_message>
     712:	08 95       	ret
     714:	82 30       	cpi	r24, 0x02	; 2
     716:	91 05       	cpc	r25, r1
     718:	61 f0       	breq	.+24     	; 0x732 <throw_error_code_with_number+0x324>
     71a:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     71c:	91 05       	cpc	r25, r1
     71e:	79 f0       	breq	.+30     	; 0x73e <throw_error_code_with_number+0x330>
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	09 f0       	breq	.+2      	; 0x726 <throw_error_code_with_number+0x318>
     724:	de c0       	rjmp	.+444    	; 0x8e2 <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     726:	6a e9       	ldi	r22, 0x9A	; 154

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Abnormally Low!", part_number);
     728:	76 e0       	ldi	r23, 0x06	; 6
     72a:	88 e3       	ldi	r24, 0x38	; 56
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	3b ce       	rjmp	.-906    	; 0x3a6 <send_error_message>
     730:	08 95       	ret
     732:	64 eb       	ldi	r22, 0xB4	; 180
				// Additional Warning Handling
				break;
     734:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICALLY LOW", part_number);
     736:	84 e4       	ldi	r24, 0x44	; 68
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	35 ce       	rjmp	.-918    	; 0x3a6 <send_error_message>
     73c:	08 95       	ret
     73e:	67 ed       	ldi	r22, 0xD7	; 215
				// Additional Error Handling
				break;
     740:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_HIGH:					
			switch (severity) {
     742:	84 e5       	ldi	r24, 0x54	; 84
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	2f ce       	rjmp	.-930    	; 0x3a6 <send_error_message>
     748:	08 95       	ret
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	91 05       	cpc	r25, r1
     74e:	61 f0       	breq	.+24     	; 0x768 <throw_error_code_with_number+0x35a>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     750:	83 30       	cpi	r24, 0x03	; 3
     752:	91 05       	cpc	r25, r1
     754:	79 f0       	breq	.+30     	; 0x774 <throw_error_code_with_number+0x366>
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	09 f0       	breq	.+2      	; 0x75c <throw_error_code_with_number+0x34e>
     75a:	c3 c0       	rjmp	.+390    	; 0x8e2 <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     75c:	6a eb       	ldi	r22, 0xBA	; 186

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     75e:	75 e0       	ldi	r23, 0x05	; 5
     760:	88 e3       	ldi	r24, 0x38	; 56
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	20 ce       	rjmp	.-960    	; 0x3a6 <send_error_message>
     766:	08 95       	ret
				// Additional Warning Handling
				break;
     768:	69 e1       	ldi	r22, 0x19	; 25

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     76a:	76 e0       	ldi	r23, 0x06	; 6
     76c:	84 e4       	ldi	r24, 0x44	; 68
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	1a ce       	rjmp	.-972    	; 0x3a6 <send_error_message>
     772:	08 95       	ret
				// Additional Error Handling
				break;
     774:	6d e3       	ldi	r22, 0x3D	; 61
			}			
		break;

        case ERROR_BRAKES_POSITION:					
			switch (severity) {
     776:	76 e0       	ldi	r23, 0x06	; 6
     778:	84 e5       	ldi	r24, 0x54	; 84
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	14 ce       	rjmp	.-984    	; 0x3a6 <send_error_message>
     77e:	08 95       	ret
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	91 05       	cpc	r25, r1
     784:	61 f0       	breq	.+24     	; 0x79e <throw_error_code_with_number+0x390>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     786:	83 30       	cpi	r24, 0x03	; 3
     788:	91 05       	cpc	r25, r1
     78a:	79 f0       	breq	.+30     	; 0x7aa <throw_error_code_with_number+0x39c>
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	09 f0       	breq	.+2      	; 0x792 <throw_error_code_with_number+0x384>
				// Additional Info Handling
				break;
     790:	a8 c0       	rjmp	.+336    	; 0x8e2 <throw_error_code_with_number+0x4d4>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Warning!", part_number);
     792:	6a e9       	ldi	r22, 0x9A	; 154
     794:	76 e0       	ldi	r23, 0x06	; 6
     796:	88 e3       	ldi	r24, 0x38	; 56
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	05 ce       	rjmp	.-1014   	; 0x3a6 <send_error_message>
     79c:	08 95       	ret
				// Additional Warning Handling
				break;
     79e:	69 ef       	ldi	r22, 0xF9	; 249

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICAL", part_number);
     7a0:	76 e0       	ldi	r23, 0x06	; 6
     7a2:	84 e4       	ldi	r24, 0x44	; 68
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	ff cd       	rjmp	.-1026   	; 0x3a6 <send_error_message>
     7a8:	08 95       	ret
				// Additional Error Handling
				break;
     7aa:	65 e1       	ldi	r22, 0x15	; 21
			}			
		break;

		case ERROR_STEERING_ANGLE_LEFT:					
			switch (severity) {
     7ac:	77 e0       	ldi	r23, 0x07	; 7
     7ae:	84 e5       	ldi	r24, 0x54	; 84
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	f9 cd       	rjmp	.-1038   	; 0x3a6 <send_error_message>
     7b4:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	91 05       	cpc	r25, r1
     7ba:	19 f0       	breq	.+6      	; 0x7c2 <throw_error_code_with_number+0x3b4>
     7bc:	03 97       	sbiw	r24, 0x03	; 3
     7be:	39 f0       	breq	.+14     	; 0x7ce <throw_error_code_with_number+0x3c0>
     7c0:	08 95       	ret
				// Additional Info Handling
				break;
     7c2:	61 e3       	ldi	r22, 0x31	; 49

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE LEFT PARAMETER", part_number);
     7c4:	77 e0       	ldi	r23, 0x07	; 7
     7c6:	88 e3       	ldi	r24, 0x38	; 56
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	ed cd       	rjmp	.-1062   	; 0x3a6 <send_error_message>
     7cc:	08 95       	ret
				break;
			}			
		break;

		case ERROR_STEERING_ANGLE_RIGHT:					
			switch (severity) {
     7ce:	67 e4       	ldi	r22, 0x47	; 71
     7d0:	77 e0       	ldi	r23, 0x07	; 7
     7d2:	84 e5       	ldi	r24, 0x54	; 84
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	e7 cd       	rjmp	.-1074   	; 0x3a6 <send_error_message>
     7d8:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	91 05       	cpc	r25, r1
     7de:	19 f0       	breq	.+6      	; 0x7e6 <throw_error_code_with_number+0x3d8>
     7e0:	03 97       	sbiw	r24, 0x03	; 3
     7e2:	39 f0       	breq	.+14     	; 0x7f2 <throw_error_code_with_number+0x3e4>
     7e4:	08 95       	ret
				// Additional Info Handling
				break;
     7e6:	61 e3       	ldi	r22, 0x31	; 49

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE RIGHT PARAMETER", part_number);
     7e8:	77 e0       	ldi	r23, 0x07	; 7
     7ea:	88 e3       	ldi	r24, 0x38	; 56
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	db cd       	rjmp	.-1098   	; 0x3a6 <send_error_message>
     7f0:	08 95       	ret
				// Additional Error Handling
				break;
     7f2:	6d e6       	ldi	r22, 0x6D	; 109
			}			
		break;

		case ERROR_THROTTLE_ERROR:					
			switch (severity) {
     7f4:	77 e0       	ldi	r23, 0x07	; 7
     7f6:	84 e5       	ldi	r24, 0x54	; 84
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	d5 cd       	rjmp	.-1110   	; 0x3a6 <send_error_message>
     7fc:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Throttle Function Normal", part_number);
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	91 05       	cpc	r25, r1
     802:	19 f0       	breq	.+6      	; 0x80a <throw_error_code_with_number+0x3fc>
     804:	03 97       	sbiw	r24, 0x03	; 3
     806:	39 f0       	breq	.+14     	; 0x816 <throw_error_code_with_number+0x408>
				// Additional Info Handling
				break;
     808:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "THROTTLE CRITICAL MALFUNCTION", part_number);
     80a:	64 e9       	ldi	r22, 0x94	; 148
     80c:	77 e0       	ldi	r23, 0x07	; 7
     80e:	88 e3       	ldi	r24, 0x38	; 56
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	c9 cd       	rjmp	.-1134   	; 0x3a6 <send_error_message>
     814:	08 95       	ret
				// Additional Error Handling
				break;
     816:	6d ea       	ldi	r22, 0xAD	; 173
			}			
		break;

		case ERROR_CAR_UPRIGHT_ERROR:					
			switch (severity) {
     818:	77 e0       	ldi	r23, 0x07	; 7
     81a:	84 e5       	ldi	r24, 0x54	; 84
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	c3 cd       	rjmp	.-1146   	; 0x3a6 <send_error_message>
     820:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Car is upright", part_number);
     822:	81 30       	cpi	r24, 0x01	; 1
     824:	91 05       	cpc	r25, r1
     826:	19 f0       	breq	.+6      	; 0x82e <throw_error_code_with_number+0x420>
     828:	03 97       	sbiw	r24, 0x03	; 3
     82a:	39 f0       	breq	.+14     	; 0x83a <throw_error_code_with_number+0x42c>
				// Additional Info Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CAR HAS OVERTURNED", part_number);
     82c:	08 95       	ret
     82e:	6b ec       	ldi	r22, 0xCB	; 203
     830:	77 e0       	ldi	r23, 0x07	; 7
     832:	88 e3       	ldi	r24, 0x38	; 56
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	b7 cd       	rjmp	.-1170   	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     838:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_CHARGE:					
			switch (severity) {
     83a:	6a ed       	ldi	r22, 0xDA	; 218
     83c:	77 e0       	ldi	r23, 0x07	; 7
     83e:	84 e5       	ldi	r24, 0x54	; 84
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	b1 cd       	rjmp	.-1182   	; 0x3a6 <send_error_message>
     844:	08 95       	ret
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Charge Normal", part_number);
     84a:	61 f0       	breq	.+24     	; 0x864 <throw_error_code_with_number+0x456>
     84c:	83 30       	cpi	r24, 0x03	; 3
     84e:	91 05       	cpc	r25, r1
     850:	79 f0       	breq	.+30     	; 0x870 <throw_error_code_with_number+0x462>
     852:	01 97       	sbiw	r24, 0x01	; 1
				// Additional Info Handling
				break;
     854:	09 f0       	breq	.+2      	; 0x858 <throw_error_code_with_number+0x44a>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Charge Low", part_number);
     856:	45 c0       	rjmp	.+138    	; 0x8e2 <throw_error_code_with_number+0x4d4>
     858:	6d ee       	ldi	r22, 0xED	; 237
     85a:	77 e0       	ldi	r23, 0x07	; 7
     85c:	88 e3       	ldi	r24, 0x38	; 56
     85e:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     860:	a2 cd       	rjmp	.-1212   	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d CHARGE CRITICAL", part_number);
     862:	08 95       	ret
     864:	66 e0       	ldi	r22, 0x06	; 6
     866:	78 e0       	ldi	r23, 0x08	; 8
     868:	84 e4       	ldi	r24, 0x44	; 68
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	9c cd       	rjmp	.-1224   	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     86e:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_LOW:					
			switch (severity) {
     870:	6c e1       	ldi	r22, 0x1C	; 28
     872:	78 e0       	ldi	r23, 0x08	; 8
     874:	84 e5       	ldi	r24, 0x54	; 84
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	96 cd       	rjmp	.-1236   	; 0x3a6 <send_error_message>
     87a:	08 95       	ret
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     880:	59 f0       	breq	.+22     	; 0x898 <throw_error_code_with_number+0x48a>
     882:	83 30       	cpi	r24, 0x03	; 3
     884:	91 05       	cpc	r25, r1
     886:	71 f0       	breq	.+28     	; 0x8a4 <throw_error_code_with_number+0x496>
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	59 f5       	brne	.+86     	; 0x8e2 <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     88c:	67 e3       	ldi	r22, 0x37	; 55

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally Low!", part_number);
     88e:	78 e0       	ldi	r23, 0x08	; 8
     890:	88 e3       	ldi	r24, 0x38	; 56
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	88 cd       	rjmp	.-1264   	; 0x3a6 <send_error_message>
     896:	08 95       	ret
     898:	65 e5       	ldi	r22, 0x55	; 85
				// Additional Warning Handling
				break;
     89a:	78 e0       	ldi	r23, 0x08	; 8

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY LOW", part_number);
     89c:	84 e4       	ldi	r24, 0x44	; 68
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	82 cd       	rjmp	.-1276   	; 0x3a6 <send_error_message>
     8a2:	08 95       	ret
     8a4:	6c e7       	ldi	r22, 0x7C	; 124
     8a6:	78 e0       	ldi	r23, 0x08	; 8
				// Additional Error Handling
				break;
     8a8:	84 e5       	ldi	r24, 0x54	; 84
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_HIGH:					
			switch (severity) {
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	7c cd       	rjmp	.-1288   	; 0x3a6 <send_error_message>
     8ae:	08 95       	ret
     8b0:	82 30       	cpi	r24, 0x02	; 2
     8b2:	91 05       	cpc	r25, r1
     8b4:	59 f0       	breq	.+22     	; 0x8cc <throw_error_code_with_number+0x4be>
     8b6:	83 30       	cpi	r24, 0x03	; 3
     8b8:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     8ba:	71 f0       	breq	.+28     	; 0x8d8 <throw_error_code_with_number+0x4ca>
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	89 f4       	brne	.+34     	; 0x8e2 <throw_error_code_with_number+0x4d4>
     8c0:	67 e3       	ldi	r22, 0x37	; 55
     8c2:	78 e0       	ldi	r23, 0x08	; 8
     8c4:	88 e3       	ldi	r24, 0x38	; 56
				// Additional Info Handling
				break;
     8c6:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally High!", part_number);
     8c8:	6e cd       	rjmp	.-1316   	; 0x3a6 <send_error_message>
     8ca:	08 95       	ret
     8cc:	62 ea       	ldi	r22, 0xA2	; 162
     8ce:	78 e0       	ldi	r23, 0x08	; 8
     8d0:	84 e4       	ldi	r24, 0x44	; 68
     8d2:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     8d4:	68 cd       	rjmp	.-1328   	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY HIGH", part_number);
     8d6:	08 95       	ret
     8d8:	6a ec       	ldi	r22, 0xCA	; 202
     8da:	78 e0       	ldi	r23, 0x08	; 8
     8dc:	84 e5       	ldi	r24, 0x54	; 84
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	62 cd       	rjmp	.-1340   	; 0x3a6 <send_error_message>
     8e2:	08 95       	ret

000008e4 <throw_error_code>:
 * Generates an error message, and takes the necessary actions depending on the severity and error.
 * Uses 0 as the part number
 **/
void throw_error_code(uint16_t severity, uint16_t error_code)
{	
	throw_error_code_with_number(severity, error_code, 0);
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	92 cd       	rjmp	.-1244   	; 0x40e <throw_error_code_with_number>
     8ea:	08 95       	ret

000008ec <external_interrupt_init>:
 * 
 */
void external_interrupt_init()
{
	//INT1 for CAN1, INT0 for CAN2, PCINT7 for CAN3
	EICRA |= (2<<ISC00)|(2<<ISC10);
     8ec:	e9 e6       	ldi	r30, 0x69	; 105
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	8a 60       	ori	r24, 0x0A	; 10
     8f4:	80 83       	st	Z, r24
	EIMSK  = (1<<INT0) | (1<<INT1);
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	8d bb       	out	0x1d, r24	; 29
	
	//Enable interrupts for PCINT7:0
	PCICR  = (1<<PCIE0)|(0<<PCIE1);
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	//CAN C interrupt
	PCMSK0 = (1<<PCINT7);
     900:	80 e8       	ldi	r24, 0x80	; 128
     902:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     906:	08 95       	ret

00000908 <io_init>:
 * 
 */
void io_init()
{
	//pins 8, 9 and 14 for MCP2515_STB high so the things respond (PE6, PE7, PH2)
	DDRE  = 0b11000010;		//PE0 = RS232 RX1; PE1 = RS232 TX1;  PE6 = STB_CAN1; PE7 = STB_CAN2;
     908:	82 ec       	ldi	r24, 0xC2	; 194
     90a:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000000;		
     90c:	1e b8       	out	0x0e, r1	; 14
	DDRH  = 0b00000111;		//PH0 = CS_CAN1; PH1 = CS_CAN2; PH2 = STB_CAN3
     90e:	87 e0       	ldi	r24, 0x07	; 7
     910:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	PORTH = 0b00000011;		//CS_CAN1 high; CS_CAN2 high;
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	//pins 12, 13, 19 for the CS for each MCP2515 PH0, PH1, PB0)

	//pin 21 for MOSI, pin 20  for SCK (PB2, PB1)
	DDRB  = 0b01100111;		//PB0 = CS_CAN3; PB1 = SCK; PB2 = MOSI; PB3 = MISO; PB5 = High drive A; PB6 = Low drive A; PB7 = CAN3_INT; 
     91a:	87 e6       	ldi	r24, 0x67	; 103
     91c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;		//set CS_CAN3 high;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	85 b9       	out	0x05, r24	; 5
	
	DDRL  = 0b00011000;		//PB3 = High drive B; PB4 = Low Drive B;
     922:	98 e1       	ldi	r25, 0x18	; 24
     924:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	PORTL = 0b00000000;
     928:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	
	DDRD  = 0b11001000;		//PD0 = CAN2_INT; PD1 = CAN1_INT; PD2 = RS232 RX2; PD3 = RS232 TX2; PD6 = CAN1_TXPIN; PD7 = CAN2_TXPIN;
     92c:	88 ec       	ldi	r24, 0xC8	; 200
     92e:	8a b9       	out	0x0a, r24	; 10
	DDRD  = 0b00000000;
     930:	1a b8       	out	0x0a, r1	; 10
	
	DDRC  = 0b00001000;		//PC3 = CAN3_TXPIN;
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
     936:	18 b8       	out	0x08, r1	; 8
	
	DDRJ  = 0b00000000;		//PORTJ is used for digital input;
     938:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	PORTJ |= 64;			//turn the pull-ups on for digital inputs
     93c:	e5 e0       	ldi	r30, 0x05	; 5
     93e:	f1 e0       	ldi	r31, 0x01	; 1
     940:	80 81       	ld	r24, Z
     942:	80 64       	ori	r24, 0x40	; 64
     944:	80 83       	st	Z, r24
	
	DDRA  = 0b00011000;		//PA3 = ENABLE_B; PA4 = ENABLE_A; PA1 = dig input; PA2 = dig input;
     946:	91 b9       	out	0x01, r25	; 1
	PORTA = 0b00010000;		
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	82 b9       	out	0x02, r24	; 2

	DDRK  = 0b00100000;		//PK5 = debugging LED;
     94c:	80 e2       	ldi	r24, 0x20	; 32
     94e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7e0107>
	// PORTK = 0b00100000;
	
	// Enable external interrupts in order for the CAN bus to communicate with us
	external_interrupt_init();
     952:	cc cf       	rjmp	.-104    	; 0x8ec <external_interrupt_init>
     954:	08 95       	ret

00000956 <firmware_init>:
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
void firmware_init()
{
	io_init();
     956:	d8 df       	rcall	.-80     	; 0x908 <io_init>
	SPI_init();
     958:	b3 d6       	rcall	.+3430   	; 0x16c0 <SPI_init>
     95a:	80 e0       	ldi	r24, 0x00	; 0
    // // uart_init(UART_BAUD_SELECT(19200, 16UL));
    uart_init(19200);
     95c:	9b e4       	ldi	r25, 0x4B	; 75
     95e:	70 d7       	rcall	.+3808   	; 0x1840 <uart_init>
     960:	61 e0       	ldi	r22, 0x01	; 1
    //uart1_init(19200);
	a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); // Turns ON ADC
     962:	86 e0       	ldi	r24, 0x06	; 6
     964:	7f dc       	rcall	.-1794   	; 0x264 <a2dInit>
     966:	81 e0       	ldi	r24, 0x01	; 1
	MCP2515_init(TRACTIVE_CAN);
     968:	47 d5       	rcall	.+2702   	; 0x13f8 <MCP2515_init>
     96a:	82 e0       	ldi	r24, 0x02	; 2
	MCP2515_init(POWER_CAN);
     96c:	45 d5       	rcall	.+2698   	; 0x13f8 <MCP2515_init>
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	43 d5       	rcall	.+2694   	; 0x13f8 <MCP2515_init>
	MCP2515_init(DATA_CAN);
     972:	e5 e0       	ldi	r30, 0x05	; 5
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	80 81       	ld	r24, Z

	// Enable the pullup on the input. This allows the pin to be active low
	PORTJ |= (1<<PINJ6);
     978:	80 64       	ori	r24, 0x40	; 64
     97a:	80 83       	st	Z, r24
     97c:	08 95       	ret

0000097e <timer_init>:
     97e:	84 b5       	in	r24, 0x24	; 36
     980:	82 60       	ori	r24, 0x02	; 2
     982:	84 bd       	out	0x24, r24	; 36
void timer_init()
{
    // http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf
    // Set up 1Khz timer
    TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
    TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
     984:	85 b5       	in	r24, 0x25	; 37
     986:	83 60       	ori	r24, 0x03	; 3
     988:	85 bd       	out	0x25, r24	; 37
    OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
     98a:	8a ef       	ldi	r24, 0xFA	; 250
     98c:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);                // Enable COMPA interupt
     98e:	ee e6       	ldi	r30, 0x6E	; 110
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	82 60       	ori	r24, 0x02	; 2
     996:	80 83       	st	Z, r24

    // Set up 50Hz comm timer
	TCCR1A = 0b00000000;			//
     998:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00001101;			// CTC mode & prescale clock by 1024
     99c:	8d e0       	ldi	r24, 0x0D	; 13
     99e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A =  15000;					// 312 gives 50Hz main comms speed
     9a2:	88 e9       	ldi	r24, 0x98	; 152
     9a4:	9a e3       	ldi	r25, 0x3A	; 58
     9a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     9aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 0b00000010;			// Turn on compare interrupt for OCR1A
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     9b4:	08 95       	ret

000009b6 <INPUT_scaleInput>:
 * @param min 
 * @return uint8_t 
 */
uint8_t INPUT_scaleInput(uint16_t * value, uint16_t max, uint16_t min) {
	// High or low size filtering
	if(*value > max) return 100;
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	68 17       	cp	r22, r24
     9be:	79 07       	cpc	r23, r25
     9c0:	d8 f0       	brcs	.+54     	; 0x9f8 <INPUT_scaleInput+0x42>
	if(*value < min) return 0;
     9c2:	84 17       	cp	r24, r20
     9c4:	95 07       	cpc	r25, r21
     9c6:	d0 f0       	brcs	.+52     	; 0x9fc <INPUT_scaleInput+0x46>
    uint8_t tmp = (((*value - (min - INPUT_ADC_THRESH)) * 100) / ((max + INPUT_ADC_THRESH) - (min - INPUT_ADC_THRESH)));
     9c8:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <INPUT_ADC_THRESH>
     9cc:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <INPUT_ADC_THRESH+0x1>
     9d0:	9f 01       	movw	r18, r30
     9d2:	24 1b       	sub	r18, r20
     9d4:	35 0b       	sbc	r19, r21
     9d6:	a9 01       	movw	r20, r18
     9d8:	9c 01       	movw	r18, r24
     9da:	24 0f       	add	r18, r20
     9dc:	35 1f       	adc	r19, r21
     9de:	a4 e6       	ldi	r26, 0x64	; 100
     9e0:	a2 9f       	mul	r26, r18
     9e2:	c0 01       	movw	r24, r0
     9e4:	a3 9f       	mul	r26, r19
     9e6:	90 0d       	add	r25, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	64 0f       	add	r22, r20
     9ec:	75 1f       	adc	r23, r21
     9ee:	6e 0f       	add	r22, r30
     9f0:	7f 1f       	adc	r23, r31
     9f2:	72 d7       	rcall	.+3812   	; 0x18d8 <__udivmodhi4>
    return tmp;
     9f4:	86 2f       	mov	r24, r22
     9f6:	08 95       	ret
 * @param min 
 * @return uint8_t 
 */
uint8_t INPUT_scaleInput(uint16_t * value, uint16_t max, uint16_t min) {
	// High or low size filtering
	if(*value > max) return 100;
     9f8:	84 e6       	ldi	r24, 0x64	; 100
     9fa:	08 95       	ret
	if(*value < min) return 0;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t tmp = (((*value - (min - INPUT_ADC_THRESH)) * 100) / ((max + INPUT_ADC_THRESH) - (min - INPUT_ADC_THRESH)));
    return tmp;
}
     9fe:	08 95       	ret

00000a00 <INPUT_read_accelPedal>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_accelPedal(uint16_t *throttle) {
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	ec 01       	movw	r28, r24
    static uint16_t primaryHistory[10];
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

    // Read the values of the two throttle sensors and verify if the received values are valid
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
     a0a:	00 91 58 09 	lds	r16, 0x0958	; 0x800958 <historyIndex.2086>
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	85 e0       	ldi	r24, 0x05	; 5
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	36 dc       	rcall	.-1940   	; 0x282 <a2d_10bitCh>
     a16:	00 0f       	add	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	f8 01       	movw	r30, r16
     a1c:	ec 5b       	subi	r30, 0xBC	; 188
     a1e:	f6 4f       	sbci	r31, 0xF6	; 246
     a20:	91 83       	std	Z+1, r25	; 0x01
     a22:	80 83       	st	Z, r24
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);
     a24:	10 91 58 09 	lds	r17, 0x0958	; 0x800958 <historyIndex.2086>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	81 0f       	add	r24, r17
     a2c:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <historyIndex.2086>
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	26 dc       	rcall	.-1972   	; 0x282 <a2d_10bitCh>
     a36:	e1 2f       	mov	r30, r17
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	e0 5d       	subi	r30, 0xD0	; 208
     a40:	f6 4f       	sbci	r31, 0xF6	; 246
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	80 83       	st	Z, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     a46:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <historyIndex.2086>
     a4a:	88 30       	cpi	r24, 0x08	; 8
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <INPUT_read_accelPedal+0x52>
     a4e:	10 92 58 09 	sts	0x0958, r1	; 0x800958 <historyIndex.2086>
     a52:	e4 e4       	ldi	r30, 0x44	; 68
     a54:	f9 e0       	ldi	r31, 0x09	; 9
     a56:	a0 e3       	ldi	r26, 0x30	; 48
     a58:	b9 e0       	ldi	r27, 0x09	; 9
     a5a:	64 e5       	ldi	r22, 0x54	; 84
     a5c:	79 e0       	ldi	r23, 0x09	; 9

    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }

    uint16_t primaryAverage = 0;
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
     a66:	41 91       	ld	r20, Z+
     a68:	51 91       	ld	r21, Z+
     a6a:	24 0f       	add	r18, r20
     a6c:	35 1f       	adc	r19, r21
        secondaryAverage += secondaryHistory[i];
     a6e:	4d 91       	ld	r20, X+
     a70:	5d 91       	ld	r21, X+
     a72:	84 0f       	add	r24, r20
     a74:	95 1f       	adc	r25, r21

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }

    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     a76:	e6 17       	cp	r30, r22
     a78:	f7 07       	cpc	r31, r23
     a7a:	a9 f7       	brne	.-22     	; 0xa66 <INPUT_read_accelPedal+0x66>
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
     a7c:	36 95       	lsr	r19
     a7e:	27 95       	ror	r18
     a80:	36 95       	lsr	r19
     a82:	27 95       	ror	r18
     a84:	36 95       	lsr	r19
     a86:	27 95       	ror	r18
    secondaryAverage /= ADC_SAMPLES;

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 
     a88:	39 83       	std	Y+1, r19	; 0x01
     a8a:	28 83       	st	Y, r18

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
     a8c:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <INPUT_ADC_ERROR>
     a90:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <INPUT_ADC_ERROR+0x1>
     a94:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <INPUT_PEDAL_THROTTLE_CH1_LOW>
     a98:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     a9c:	46 1b       	sub	r20, r22
     a9e:	57 0b       	sbc	r21, r23
     aa0:	24 17       	cp	r18, r20
     aa2:	35 07       	cpc	r19, r21
     aa4:	d0 f1       	brcs	.+116    	; 0xb1a <INPUT_read_accelPedal+0x11a>
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
    secondaryAverage /= ADC_SAMPLES;
     aa6:	96 95       	lsr	r25
     aa8:	87 95       	ror	r24
     aaa:	96 95       	lsr	r25
     aac:	87 95       	ror	r24
     aae:	96 95       	lsr	r25
     ab0:	87 95       	ror	r24

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
     ab2:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <INPUT_PEDAL_THROTTLE_CH2_LOW>
     ab6:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <INPUT_PEDAL_THROTTLE_CH2_LOW+0x1>
     aba:	46 1b       	sub	r20, r22
     abc:	57 0b       	sbc	r21, r23
     abe:	84 17       	cp	r24, r20
     ac0:	95 07       	cpc	r25, r21
     ac2:	68 f1       	brcs	.+90     	; 0xb1e <INPUT_read_accelPedal+0x11e>
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
     ac4:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     ac8:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     acc:	46 1b       	sub	r20, r22
     ace:	57 0b       	sbc	r21, r23
     ad0:	42 17       	cp	r20, r18
     ad2:	53 07       	cpc	r21, r19
     ad4:	30 f1       	brcs	.+76     	; 0xb22 <INPUT_read_accelPedal+0x122>
     ad6:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <INPUT_PEDAL_THROTTLE_CH2_HIGH>
     ada:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <INPUT_PEDAL_THROTTLE_CH2_HIGH+0x1>
     ade:	46 1b       	sub	r20, r22
     ae0:	57 0b       	sbc	r21, r23
     ae2:	48 17       	cp	r20, r24
     ae4:	59 07       	cpc	r21, r25
     ae6:	f8 f0       	brcs	.+62     	; 0xb26 <INPUT_read_accelPedal+0x126>
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
    secondaryAverage /= ADC_SAMPLES;

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values
     ae8:	28 1b       	sub	r18, r24
     aea:	39 0b       	sbc	r19, r25
     aec:	c9 01       	movw	r24, r18
     aee:	99 23       	and	r25, r25
     af0:	24 f4       	brge	.+8      	; 0xafa <INPUT_read_accelPedal+0xfa>
     af2:	88 27       	eor	r24, r24
     af4:	99 27       	eor	r25, r25
     af6:	82 1b       	sub	r24, r18
     af8:	93 0b       	sbc	r25, r19
	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
            secondaryAverage > INPUT_PEDAL_THROTTLE_CH2_HIGH - INPUT_ADC_ERROR ) { return 2; }
	// Verify if the difference between sensors is within acceptable values
	else if(delta < INPUT_PEDAL_DELTA_THRESH_L ||
     afa:	20 91 5c 09 	lds	r18, 0x095C	; 0x80095c <INPUT_PEDAL_DELTA_THRESH_L>
     afe:	30 91 5d 09 	lds	r19, 0x095D	; 0x80095d <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     b02:	82 17       	cp	r24, r18
     b04:	93 07       	cpc	r25, r19
     b06:	88 f0       	brcs	.+34     	; 0xb2a <INPUT_read_accelPedal+0x12a>
     b08:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     b0c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     b10:	28 17       	cp	r18, r24
     b12:	39 07       	cpc	r19, r25
     b14:	60 f0       	brcs	.+24     	; 0xb2e <INPUT_read_accelPedal+0x12e>
            delta > INPUT_PEDAL_DELTA_THRESH_H) { return 3; }
	return 0;
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0b c0       	rjmp	.+22     	; 0xb30 <INPUT_read_accelPedal+0x130>
    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	09 c0       	rjmp	.+18     	; 0xb30 <INPUT_read_accelPedal+0x130>
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	07 c0       	rjmp	.+14     	; 0xb30 <INPUT_read_accelPedal+0x130>
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
            secondaryAverage > INPUT_PEDAL_THROTTLE_CH2_HIGH - INPUT_ADC_ERROR ) { return 2; }
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <INPUT_read_accelPedal+0x130>
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <INPUT_read_accelPedal+0x130>
	// Verify if the difference between sensors is within acceptable values
	else if(delta < INPUT_PEDAL_DELTA_THRESH_L ||
            delta > INPUT_PEDAL_DELTA_THRESH_H) { return 3; }
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <INPUT_read_accelPedal+0x130>
     b2e:	83 e0       	ldi	r24, 0x03	; 3
	return 0;
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	08 95       	ret

00000b3a <INPUT_get_accelPedal>:
uint8_t INPUT_accelerationPedal = 0;
uint8_t INPUT_brakePedal = 0;
uint8_t INPUT_brakePressureFront = 0;
uint8_t INPUT_brakePressureBack = 0;

uint8_t INPUT_get_accelPedal(uint8_t *val) {
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	00 d0       	rcall	.+0      	; 0xb46 <INPUT_get_accelPedal+0xc>
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	7c 01       	movw	r14, r24
    // Get Value
    uint16_t rawValue = 0;
     b4c:	1a 82       	std	Y+2, r1	; 0x02
     b4e:	19 82       	std	Y+1, r1	; 0x01
    uint8_t state = INPUT_read_accelPedal(&rawValue);
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	55 df       	rcall	.-342    	; 0xa00 <INPUT_read_accelPedal>
     b56:	18 2f       	mov	r17, r24
    // Convert Value
    *val = INPUT_scaleInput(
     b58:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <INPUT_PEDAL_THROTTLE_CH1_LOW>
     b5c:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     b60:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     b64:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	24 df       	rcall	.-440    	; 0x9b6 <INPUT_scaleInput>
     b6e:	f7 01       	movw	r30, r14
     b70:	80 83       	st	Z, r24
        &rawValue,
        INPUT_PEDAL_THROTTLE_CH1_HIGH,
        INPUT_PEDAL_THROTTLE_CH1_LOW
    );
    // Error States
    switch (state) {
     b72:	12 30       	cpi	r17, 0x02	; 2
     b74:	51 f0       	breq	.+20     	; 0xb8a <INPUT_get_accelPedal+0x50>
     b76:	13 30       	cpi	r17, 0x03	; 3
     b78:	71 f0       	breq	.+28     	; 0xb96 <INPUT_get_accelPedal+0x5c>
     b7a:	11 30       	cpi	r17, 0x01	; 1
     b7c:	89 f4       	brne	.+34     	; 0xba0 <INPUT_get_accelPedal+0x66>
        case 1: // Inputs were too low
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b7e:	6e e0       	ldi	r22, 0x0E	; 14
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	ae de       	rcall	.-676    	; 0x8e4 <throw_error_code>
            break;
     b88:	0b c0       	rjmp	.+22     	; 0xba0 <INPUT_get_accelPedal+0x66>
        case 2: // Inputs were too high
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b8a:	6e e0       	ldi	r22, 0x0E	; 14
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a8 de       	rcall	.-688    	; 0x8e4 <throw_error_code>
            break;
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <INPUT_get_accelPedal+0x66>
        case 3: // Delta was found to be in failure
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b96:	6e e0       	ldi	r22, 0x0E	; 14
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a2 de       	rcall	.-700    	; 0x8e4 <throw_error_code>
        default:
            // Do nothing
            break;
    }
    return state; // Pass up state of read for process and logic use
}
     ba0:	81 2f       	mov	r24, r17
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	08 95       	ret

00000bb2 <INPUT_read_brakePedal>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_brakePedal(uint16_t * brake) {
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	ec 01       	movw	r28, r24
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

	//uint8_t returnState = 0;
    // Read the values of the two throttle sensors and verify if the received values are valid
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH1);
     bbc:	00 91 2f 09 	lds	r16, 0x092F	; 0x80092f <historyIndex.2101>
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	8a e0       	ldi	r24, 0x0A	; 10
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	5d db       	rcall	.-2374   	; 0x282 <a2d_10bitCh>
     bc8:	00 0f       	add	r16, r16
     bca:	11 1f       	adc	r17, r17
     bcc:	f8 01       	movw	r30, r16
     bce:	e5 5e       	subi	r30, 0xE5	; 229
     bd0:	f6 4f       	sbci	r31, 0xF6	; 246
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	80 83       	st	Z, r24
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH2);
     bd6:	10 91 2f 09 	lds	r17, 0x092F	; 0x80092f <historyIndex.2101>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	81 0f       	add	r24, r17
     bde:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <historyIndex.2101>
     be2:	88 e0       	ldi	r24, 0x08	; 8
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	4d db       	rcall	.-2406   	; 0x282 <a2d_10bitCh>
     be8:	e1 2f       	mov	r30, r17
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e9 5f       	subi	r30, 0xF9	; 249
     bf2:	f6 4f       	sbci	r31, 0xF6	; 246
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     bf8:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <historyIndex.2101>
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	10 f0       	brcs	.+4      	; 0xc04 <INPUT_read_brakePedal+0x52>
     c00:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <historyIndex.2101>
     c04:	eb e1       	ldi	r30, 0x1B	; 27
     c06:	f9 e0       	ldi	r31, 0x09	; 9
     c08:	a7 e0       	ldi	r26, 0x07	; 7
     c0a:	b9 e0       	ldi	r27, 0x09	; 9
     c0c:	6b e2       	ldi	r22, 0x2B	; 43
     c0e:	79 e0       	ldi	r23, 0x09	; 9
	
    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH1);
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH2);

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
	
    uint16_t primaryAverage = 0;
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
     c18:	41 91       	ld	r20, Z+
     c1a:	51 91       	ld	r21, Z+
     c1c:	24 0f       	add	r18, r20
     c1e:	35 1f       	adc	r19, r21
        secondaryAverage += secondaryHistory[i];
     c20:	4d 91       	ld	r20, X+
     c22:	5d 91       	ld	r21, X+
     c24:	84 0f       	add	r24, r20
     c26:	95 1f       	adc	r25, r21

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
	
    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     c28:	e6 17       	cp	r30, r22
     c2a:	f7 07       	cpc	r31, r23
     c2c:	a9 f7       	brne	.-22     	; 0xc18 <INPUT_read_brakePedal+0x66>
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
     c2e:	36 95       	lsr	r19
     c30:	27 95       	ror	r18
     c32:	36 95       	lsr	r19
     c34:	27 95       	ror	r18
     c36:	36 95       	lsr	r19
     c38:	27 95       	ror	r18
    secondaryAverage /= ADC_SAMPLES;
     c3a:	ac 01       	movw	r20, r24
     c3c:	56 95       	lsr	r21
     c3e:	47 95       	ror	r20
     c40:	56 95       	lsr	r21
     c42:	47 95       	ror	r20
     c44:	56 95       	lsr	r21
     c46:	47 95       	ror	r20

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values
     c48:	b9 01       	movw	r22, r18
     c4a:	64 1b       	sub	r22, r20
     c4c:	75 0b       	sbc	r23, r21
     c4e:	cb 01       	movw	r24, r22
     c50:	99 23       	and	r25, r25
     c52:	24 f4       	brge	.+8      	; 0xc5c <INPUT_read_brakePedal+0xaa>
     c54:	88 27       	eor	r24, r24
     c56:	99 27       	eor	r25, r25
     c58:	86 1b       	sub	r24, r22
     c5a:	97 0b       	sbc	r25, r23
     c5c:	fc 01       	movw	r30, r24

    *brake = primaryAverage; 
     c5e:	39 83       	std	Y+1, r19	; 0x01
     c60:	28 83       	st	Y, r18

	uint8_t returnState = 0;
	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
     c62:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <INPUT_ADC_ERROR>
     c66:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <INPUT_ADC_ERROR+0x1>
     c6a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <INPUT_PEDAL_BRAKE_CH1_LOW>
     c6e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     c72:	86 1b       	sub	r24, r22
     c74:	97 0b       	sbc	r25, r23
     c76:	28 17       	cp	r18, r24
     c78:	39 07       	cpc	r19, r25
     c7a:	58 f0       	brcs	.+22     	; 0xc92 <INPUT_read_brakePedal+0xe0>
	
	else if(primaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 2;
     c7c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <INPUT_PEDAL_BRAKE_CH1_HIGH>
     c80:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     c84:	86 0f       	add	r24, r22
     c86:	97 1f       	adc	r25, r23
     c88:	82 17       	cp	r24, r18
     c8a:	93 07       	cpc	r25, r19
     c8c:	20 f4       	brcc	.+8      	; 0xc96 <INPUT_read_brakePedal+0xe4>
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <INPUT_read_brakePedal+0xe6>
    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *brake = primaryAverage; 

	uint8_t returnState = 0;
	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <INPUT_read_brakePedal+0xe6>

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *brake = primaryAverage; 

	uint8_t returnState = 0;
     c96:	80 e0       	ldi	r24, 0x00	; 0
	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
	
	else if(primaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 2;
	
	if(secondaryAverage < (INPUT_PEDAL_BRAKE_CH2_LOW - INPUT_ADC_ERROR)) returnState |= 4;
     c98:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <INPUT_PEDAL_BRAKE_CH2_LOW>
     c9c:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <INPUT_PEDAL_BRAKE_CH2_LOW+0x1>
     ca0:	26 1b       	sub	r18, r22
     ca2:	37 0b       	sbc	r19, r23
     ca4:	42 17       	cp	r20, r18
     ca6:	53 07       	cpc	r21, r19
     ca8:	10 f4       	brcc	.+4      	; 0xcae <INPUT_read_brakePedal+0xfc>
     caa:	84 60       	ori	r24, 0x04	; 4
     cac:	0a c0       	rjmp	.+20     	; 0xcc2 <INPUT_read_brakePedal+0x110>
	
	else if(secondaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 8;
     cae:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <INPUT_PEDAL_BRAKE_CH1_HIGH>
     cb2:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     cb6:	62 0f       	add	r22, r18
     cb8:	73 1f       	adc	r23, r19
     cba:	64 17       	cp	r22, r20
     cbc:	75 07       	cpc	r23, r21
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <INPUT_read_brakePedal+0x110>
     cc0:	88 60       	ori	r24, 0x08	; 8

	// Verify if the difference between sensors is within acceptable values
	if(delta < INPUT_PEDAL_DELTA_THRESH_L || delta > INPUT_PEDAL_DELTA_THRESH_H) { returnState |= 16; }  
     cc2:	20 91 5c 09 	lds	r18, 0x095C	; 0x80095c <INPUT_PEDAL_DELTA_THRESH_L>
     cc6:	30 91 5d 09 	lds	r19, 0x095D	; 0x80095d <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     cca:	e2 17       	cp	r30, r18
     ccc:	f3 07       	cpc	r31, r19
     cce:	38 f0       	brcs	.+14     	; 0xcde <INPUT_read_brakePedal+0x12c>
     cd0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     cd4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     cd8:	2e 17       	cp	r18, r30
     cda:	3f 07       	cpc	r19, r31
     cdc:	08 f4       	brcc	.+2      	; 0xce0 <INPUT_read_brakePedal+0x12e>
     cde:	80 61       	ori	r24, 0x10	; 16
	//secondaryAverage > INPUT_PEDAL_BRAKE_CH2_HIGH - INPUT_ADC_ERROR ) { return 2; }
	//// Verify if the difference between sensors is within acceptable values
	//else if(delta < INPUT_PEDAL_DELTA_THRESH_L ||
	//delta > INPUT_PEDAL_DELTA_THRESH_H) { return 3; }
	//return 0;
}
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <INPUT_get_brakePedal>:
            break;
    }
    return state; // Pass up state of read for process and logic use
}

uint8_t INPUT_get_brakePedal(uint8_t *val) {
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <INPUT_get_brakePedal+0xc>
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	7c 01       	movw	r14, r24
    // Get Value
    uint16_t rawValue = 0;
     cfc:	1a 82       	std	Y+2, r1	; 0x02
     cfe:	19 82       	std	Y+1, r1	; 0x01
    uint8_t state = INPUT_read_brakePedal(&rawValue);
     d00:	ce 01       	movw	r24, r28
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	56 df       	rcall	.-340    	; 0xbb2 <INPUT_read_brakePedal>
     d06:	18 2f       	mov	r17, r24
    // Convert Value
    *val = INPUT_scaleInput(
     d08:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <INPUT_PEDAL_BRAKE_CH1_LOW>
     d0c:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     d10:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <INPUT_PEDAL_BRAKE_CH1_HIGH>
     d14:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	4c de       	rcall	.-872    	; 0x9b6 <INPUT_scaleInput>
     d1e:	f7 01       	movw	r30, r14
     d20:	80 83       	st	Z, r24
        &rawValue,
        INPUT_PEDAL_BRAKE_CH1_HIGH,
        INPUT_PEDAL_BRAKE_CH1_LOW
    );
    // Error States
    switch (state) {
     d22:	12 30       	cpi	r17, 0x02	; 2
     d24:	51 f0       	breq	.+20     	; 0xd3a <INPUT_get_brakePedal+0x50>
     d26:	13 30       	cpi	r17, 0x03	; 3
     d28:	71 f0       	breq	.+28     	; 0xd46 <INPUT_get_brakePedal+0x5c>
     d2a:	11 30       	cpi	r17, 0x01	; 1
     d2c:	89 f4       	brne	.+34     	; 0xd50 <INPUT_get_brakePedal+0x66>
        case 1: // Inputs were too low
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION_LOW);
     d2e:	69 e0       	ldi	r22, 0x09	; 9
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	d6 dd       	rcall	.-1108   	; 0x8e4 <throw_error_code>
            break;
     d38:	0b c0       	rjmp	.+22     	; 0xd50 <INPUT_get_brakePedal+0x66>
        case 2: // Inputs were too high
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION_HIGH);
     d3a:	6a e0       	ldi	r22, 0x0A	; 10
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	d0 dd       	rcall	.-1120   	; 0x8e4 <throw_error_code>
            break;
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <INPUT_get_brakePedal+0x66>
        case 3: // Delta was found to be in failure
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION);
     d46:	6b e0       	ldi	r22, 0x0B	; 11
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	ca dd       	rcall	.-1132   	; 0x8e4 <throw_error_code>
        default:
            // Do nothing
            break;
    }
    return state; // Pass up state of read for process and logic use
}
     d50:	81 2f       	mov	r24, r17
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	08 95       	ret

00000d62 <INPUT_read_steeringWheel>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_steeringWheel(uint16_t * steeringAngle) {
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
    static uint8_t historyIndex = 0;

	//uint8_t returnState = 0;
	
    // Read the values of the two throttle sensors and verify if the received values are valid
    history[historyIndex++] = a2d_10bitCh(INPUT_STEERING_ANGLE_CH);
     d6a:	10 91 06 09 	lds	r17, 0x0906	; 0x800906 <historyIndex.2116>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	81 0f       	add	r24, r17
     d72:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <historyIndex.2116>
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	83 da       	rcall	.-2810   	; 0x282 <a2d_10bitCh>
     d7c:	e1 2f       	mov	r30, r17
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	ee 50       	subi	r30, 0x0E	; 14
     d86:	f7 4f       	sbci	r31, 0xF7	; 247
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	80 83       	st	Z, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     d8c:	80 91 06 09 	lds	r24, 0x0906	; 0x800906 <historyIndex.2116>
     d90:	88 30       	cpi	r24, 0x08	; 8
     d92:	10 f0       	brcs	.+4      	; 0xd98 <INPUT_read_steeringWheel+0x36>
     d94:	10 92 06 09 	sts	0x0906, r1	; 0x800906 <historyIndex.2116>
     d98:	e2 ef       	ldi	r30, 0xF2	; 242
     d9a:	f8 e0       	ldi	r31, 0x08	; 8
     d9c:	42 e0       	ldi	r20, 0x02	; 2
     d9e:	59 e0       	ldi	r21, 0x09	; 9

    uint16_t average = 0;
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        average += history[i];
     da4:	21 91       	ld	r18, Z+
     da6:	31 91       	ld	r19, Z+
     da8:	82 0f       	add	r24, r18
     daa:	93 1f       	adc	r25, r19
    history[historyIndex++] = a2d_10bitCh(INPUT_STEERING_ANGLE_CH);

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }

    uint16_t average = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     dac:	e4 17       	cp	r30, r20
     dae:	f5 07       	cpc	r31, r21
     db0:	c9 f7       	brne	.-14     	; 0xda4 <INPUT_read_steeringWheel+0x42>
        average += history[i];
    }
    average /= ADC_SAMPLES;
     db2:	9c 01       	movw	r18, r24
     db4:	36 95       	lsr	r19
     db6:	27 95       	ror	r18
     db8:	36 95       	lsr	r19
     dba:	27 95       	ror	r18
     dbc:	36 95       	lsr	r19
     dbe:	27 95       	ror	r18
	*steeringAngle = average;
     dc0:	39 83       	std	Y+1, r19	; 0x01
     dc2:	28 83       	st	Y, r18
	
	if(average < (INPUT_STEERING_LEFT - INPUT_ADC_ERROR)) { errorState += 1; } // Check if the value we received is valid
     dc4:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <INPUT_ADC_ERROR>
     dc8:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <INPUT_ADC_ERROR+0x1>
 * }
 */
uint8_t INPUT_read_steeringWheel(uint16_t * steeringAngle) {

    //TODO: Fill buffers with int reads values
	uint8_t errorState = 0;
     dcc:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <INPUT_STEERING_LEFT>
     dd0:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <INPUT_STEERING_LEFT+0x1>
     dd4:	6e 1b       	sub	r22, r30
     dd6:	7f 0b       	sbc	r23, r31
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	26 17       	cp	r18, r22
     ddc:	37 07       	cpc	r19, r23
     dde:	08 f0       	brcs	.+2      	; 0xde2 <INPUT_read_steeringWheel+0x80>
     de0:	80 e0       	ldi	r24, 0x00	; 0
    }
    average /= ADC_SAMPLES;
	*steeringAngle = average;
	
	if(average < (INPUT_STEERING_LEFT - INPUT_ADC_ERROR)) { errorState += 1; } // Check if the value we received is valid
    if(average > (INPUT_STEERING_RIGHT + INPUT_ADC_ERROR)) { errorState += 2; } // Check if the value we received is valid
     de2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <INPUT_STEERING_RIGHT>
     de6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <INPUT_STEERING_RIGHT+0x1>
     dea:	4e 0f       	add	r20, r30
     dec:	5f 1f       	adc	r21, r31
     dee:	42 17       	cp	r20, r18
     df0:	53 07       	cpc	r21, r19
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <INPUT_read_steeringWheel+0x94>
     df4:	8e 5f       	subi	r24, 0xFE	; 254
	return errorState;
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	08 95       	ret

00000dfe <INPUT_get_steeringWheel>:
            break;
    }
    return state; // Pass up state of read for process and logic use
}

uint8_t INPUT_get_steeringWheel(uint8_t *val) {
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	00 d0       	rcall	.+0      	; 0xe0a <INPUT_get_steeringWheel+0xc>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	7c 01       	movw	r14, r24
	// Get Value
	uint16_t rawValue = 0;
     e10:	1a 82       	std	Y+2, r1	; 0x02
     e12:	19 82       	std	Y+1, r1	; 0x01
	uint8_t state = INPUT_read_steeringWheel(&rawValue);
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	a4 df       	rcall	.-184    	; 0xd62 <INPUT_read_steeringWheel>
     e1a:	18 2f       	mov	r17, r24
	// Convert Value
	*val = INPUT_scaleInput(
     e1c:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <INPUT_STEERING_LEFT>
     e20:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <INPUT_STEERING_LEFT+0x1>
     e24:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <INPUT_STEERING_RIGHT>
     e28:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <INPUT_STEERING_RIGHT+0x1>
     e2c:	ce 01       	movw	r24, r28
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	c2 dd       	rcall	.-1148   	; 0x9b6 <INPUT_scaleInput>
     e32:	f7 01       	movw	r30, r14
     e34:	80 83       	st	Z, r24
		&rawValue,
		INPUT_STEERING_RIGHT,
		INPUT_STEERING_LEFT
	);
	// Error States
	switch (state) {
     e36:	11 30       	cpi	r17, 0x01	; 1
     e38:	19 f0       	breq	.+6      	; 0xe40 <INPUT_get_steeringWheel+0x42>
     e3a:	12 30       	cpi	r17, 0x02	; 2
     e3c:	39 f0       	breq	.+14     	; 0xe4c <INPUT_get_steeringWheel+0x4e>
     e3e:	0b c0       	rjmp	.+22     	; 0xe56 <INPUT_get_steeringWheel+0x58>
		case 1: // Inputs were too low
		throw_error_code(ERROR_LEVEL_WARN, ERROR_STEERING_ANGLE_RIGHT);
     e40:	6d e0       	ldi	r22, 0x0D	; 13
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	4d dd       	rcall	.-1382   	; 0x8e4 <throw_error_code>
		break;
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <INPUT_get_steeringWheel+0x58>
		case 2: // Inputs were too high
		throw_error_code(ERROR_LEVEL_WARN, ERROR_STEERING_ANGLE_LEFT);
     e4c:	6c e0       	ldi	r22, 0x0C	; 12
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	47 dd       	rcall	.-1394   	; 0x8e4 <throw_error_code>
		default:
		// Do nothing
		break;
	}
	return state; // Pass up state of read for process and logic use
}
     e56:	81 2f       	mov	r24, r17
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	08 95       	ret

00000e68 <led_toggle>:
 * 
 * Reference: ATmega Datasheet Chapter 13 (I/O-Ports)
 **/
void led_toggle(void)
{
    PORTK ^= 0b00100000;
     e68:	e8 e0       	ldi	r30, 0x08	; 8
     e6a:	f1 e0       	ldi	r31, 0x01	; 1
     e6c:	90 81       	ld	r25, Z
     e6e:	80 e2       	ldi	r24, 0x20	; 32
     e70:	89 27       	eor	r24, r25
     e72:	80 83       	st	Z, r24
     e74:	08 95       	ret

00000e76 <UART_sendPacket>:
    testPacketArray[3] = INPUT_steeringAngle;       // Steering Angle - 1   -> RADIAN(x -> -0.99 < 0 < 0.99) * 100 + 100
           
    UART_sendPacket(testPacketArray, 4);
}

void UART_sendPacket(uint8_t outgoingString[], uint8_t length) {
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	8c 01       	movw	r16, r24
     e82:	f6 2e       	mov	r15, r22
    //uint8_t *ptr = outgoingString;
	
	//int testADC = a2d_10bitCh(5);
	//char  testString[5];
	//itoa(testADC, testString, 10);
	uart_putc('D');
     e84:	84 e4       	ldi	r24, 0x44	; 68
     e86:	f8 d4       	rcall	.+2544   	; 0x1878 <uart_putc>
	int i = 0;
    for(i = 0; i < length; i++) {
     e88:	ff 20       	and	r15, r15
     e8a:	41 f0       	breq	.+16     	; 0xe9c <UART_sendPacket+0x26>
     e8c:	e8 01       	movw	r28, r16
     e8e:	0f 0d       	add	r16, r15
     e90:	11 1d       	adc	r17, r1
        uart_putc(outgoingString[i]);
     e92:	89 91       	ld	r24, Y+
     e94:	f1 d4       	rcall	.+2530   	; 0x1878 <uart_putc>
	//int testADC = a2d_10bitCh(5);
	//char  testString[5];
	//itoa(testADC, testString, 10);
	uart_putc('D');
	int i = 0;
    for(i = 0; i < length; i++) {
     e96:	c0 17       	cp	r28, r16
     e98:	d1 07       	cpc	r29, r17
        uart_putc(outgoingString[i]);
    }
	uart_putc('\r');
     e9a:	d9 f7       	brne	.-10     	; 0xe92 <UART_sendPacket+0x1c>
     e9c:	8d e0       	ldi	r24, 0x0D	; 13
	uart_putc('\n');
     e9e:	ec d4       	rcall	.+2520   	; 0x1878 <uart_putc>
     ea0:	8a e0       	ldi	r24, 0x0A	; 10
     ea2:	ea d4       	rcall	.+2516   	; 0x1878 <uart_putc>
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	08 95       	ret

00000eb0 <main>:
volatile uint8_t ouft = 0;

int main(void) {    

    // Set Up
    firmware_init();
     eb0:	52 dd       	rcall	.-1372   	; 0x956 <firmware_init>
    timer_init();
     eb2:	65 dd       	rcall	.-1334   	; 0x97e <timer_init>
     eb4:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <shutdownState>

    // Grab the state of the shutdown circuity
    shutdownState = 0;
     eb8:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <isSirenOn>
	isSirenOn = 0;
     ebc:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ebe:	89 e6       	ldi	r24, 0x69	; 105
     ec0:	98 e1       	ldi	r25, 0x18	; 24
     ec2:	21 50       	subi	r18, 0x01	; 1
     ec4:	80 40       	sbci	r24, 0x00	; 0
     ec6:	90 40       	sbci	r25, 0x00	; 0
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <main+0x12>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <main+0x1c>
     ecc:	00 00       	nop
     ece:	78 94       	sei
	_delay_ms(500);
    // Enable Interupts
    sei();		
     ed0:	ff cf       	rjmp	.-2      	; 0xed0 <main+0x20>

00000ed2 <oneKHzTimer>:
     ed2:	0f 93       	push	r16

/**
 * @brief Core system's timer, 1ms, core of the pseudo RTOS system
 */
void oneKHzTimer(void)
{
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	1f 92       	push	r1
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	static uint8_t InputSteeringCount = 7;					// Number of iterations for the steering angle heartbeat trigger	
	
    // Check the ignition button state
    // 1s debounce, IE hold for 50ms and if held, change state
    // ------------------------------------------------------------------------
	if(!(PINJ & (1<<PJ6))) // Checking Pin J6 (69)
     ee0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7e0103>
     ee4:	86 fd       	sbrc	r24, 6
     ee6:	22 c0       	rjmp	.+68     	; 0xf2c <oneKHzTimer+0x5a>
    {
        ignitionState = 1; // Tracks that the ignition button is on
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <ignitionState>
        if(ignitionStateDebounceCount++ > 2000) // If 1s has been counted
     eee:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <ignitionStateDebounceCount>
     ef2:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <ignitionStateDebounceCount+0x1>
     ef6:	9c 01       	movw	r18, r24
     ef8:	2f 5f       	subi	r18, 0xFF	; 255
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	30 93 76 09 	sts	0x0976, r19	; 0x800976 <ignitionStateDebounceCount+0x1>
     f00:	20 93 75 09 	sts	0x0975, r18	; 0x800975 <ignitionStateDebounceCount>
     f04:	81 3d       	cpi	r24, 0xD1	; 209
     f06:	97 40       	sbci	r25, 0x07	; 7
     f08:	c8 f0       	brcs	.+50     	; 0xf3c <oneKHzTimer+0x6a>
		{
            //If this is the first time though from a previous press
            if(ignitionStateLock == 0) {
     f0a:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <ignitionStateLock>
     f0e:	81 11       	cpse	r24, r1
     f10:	15 c0       	rjmp	.+42     	; 0xf3c <oneKHzTimer+0x6a>
                ignitionStateLock = 1;		// Disabled first run though after press
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <ignitionStateLock>
                isArmedState ^= 1;
     f18:	90 91 72 09 	lds	r25, 0x0972	; 0x800972 <isArmedState>
     f1c:	89 27       	eor	r24, r25
     f1e:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <isArmedState>
				// If the armed state has just been turned on, activate the siren
				if(isArmedState == 1) {
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	59 f4       	brne	.+22     	; 0xf3c <oneKHzTimer+0x6a>
					//led_toggle();
					isSirenOn = 1;
     f26:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <isSirenOn>
     f2a:	0c c0       	rjmp	.+24     	; 0xf44 <oneKHzTimer+0x72>
            }
			
        }
    }
    else {
        ignitionState = 0; // Tracks that the ignition button is off
     f2c:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <ignitionState>
        ignitionStateLock = 0; // Re-enables the first run though after the timer has been reached
     f30:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <ignitionStateLock>
        ignitionStateDebounceCount = 0; // Resets the counter for time the button is pressed
     f34:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <ignitionStateDebounceCount+0x1>
     f38:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <ignitionStateDebounceCount>
    }
	
	// Additionally, see if the siren needs to sound that the HV is on
	if(isSirenOn == 1) { // Checks to see if the siren should be active
     f3c:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <isSirenOn>
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	a1 f4       	brne	.+40     	; 0xf6c <oneKHzTimer+0x9a>
		if(sirenOnCount++ > sirenOnDuration) { // Counts up time, and if over allowance
     f44:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sirenOnCount>
     f48:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <sirenOnCount+0x1>
     f4c:	9c 01       	movw	r18, r24
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	30 93 70 09 	sts	0x0970, r19	; 0x800970 <sirenOnCount+0x1>
     f56:	20 93 6f 09 	sts	0x096F, r18	; 0x80096f <sirenOnCount>
     f5a:	81 3d       	cpi	r24, 0xD1	; 209
     f5c:	97 40       	sbci	r25, 0x07	; 7
     f5e:	30 f0       	brcs	.+12     	; 0xf6c <oneKHzTimer+0x9a>
			isSirenOn = 0; // Turn of siren
     f60:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <isSirenOn>
			sirenOnCount = 0;
     f64:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sirenOnCount+0x1>
     f68:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sirenOnCount>
	
     //Send CAN heartbeats -> Inverters: 100Hz, Data: 100Hz, Power: 20Hz
     //100Hz = 1 / 100 = 0.01s = 10ms, 20Hz = 1 / 20 = 0.05s = 50ms
     //------------------------------------------------------------------------
    
	 if(CANheartbeatCountInverters >= CAN_HEARTBEAT_TIME_INVERTERS)
     f6c:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <CANheartbeatCountInverters.2502>
     f70:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <CANheartbeatCountInverters.2502+0x1>
     f74:	0a 97       	sbiw	r24, 0x0a	; 10
     f76:	78 f0       	brcs	.+30     	; 0xf96 <oneKHzTimer+0xc4>
	 {
		 // Reset inverter heartbeat counter
		 CANheartbeatCountInverters = 0;
     f78:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <CANheartbeatCountInverters.2502+0x1>
     f7c:	10 92 5e 09 	sts	0x095E, r1	; 0x80095e <CANheartbeatCountInverters.2502>
		 // To wait for Inv message
		 RecievedMsgInv = 0;
     f80:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <RecievedMsgInv>
		 // Send inverter system heartbeat 0b0100100000000000000000000011110
		 CAN_send(TRACTIVE_CAN, 8, inverterArray, 0x4666666);
     f84:	06 e6       	ldi	r16, 0x66	; 102
     f86:	16 e6       	ldi	r17, 0x66	; 102
     f88:	26 e6       	ldi	r18, 0x66	; 102
     f8a:	34 e0       	ldi	r19, 0x04	; 4
     f8c:	45 e6       	ldi	r20, 0x65	; 101
     f8e:	59 e0       	ldi	r21, 0x09	; 9
     f90:	68 e0       	ldi	r22, 0x08	; 8
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	a0 d9       	rcall	.-3264   	; 0x2d6 <CAN_send>
	 }else if(CANheartbeatCountInverters > CAN_HEARTBEAT_TIME_INVERTERS * 2){
		// Inverter dead, shutdown
	 }
	 
	 if(CANheartbeatCountWheel > CAN_HEARTBEAT_TIME_WHEEL)
     f96:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <CANheartbeatCountWheel.2503>
     f9a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <CANheartbeatCountWheel.2503+0x1>
     f9e:	c3 97       	sbiw	r24, 0x33	; 51
     fa0:	68 f0       	brcs	.+26     	; 0xfbc <oneKHzTimer+0xea>
	 {
		 // Reset data heartbeat counter
		 //led_toggle();
		 CANheartbeatCountWheel = 0;
     fa2:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <CANheartbeatCountWheel.2503+0x1>
     fa6:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <CANheartbeatCountWheel.2503>
		 // Send data system heartbeat
		 CAN_send(DATA_CAN, 8, WheelArray, HEARTBEAT_WHEEL_ID | 1);
     faa:	01 e0       	ldi	r16, 0x01	; 1
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	20 e4       	ldi	r18, 0x40	; 64
     fb0:	38 e0       	ldi	r19, 0x08	; 8
     fb2:	43 e2       	ldi	r20, 0x23	; 35
     fb4:	52 e0       	ldi	r21, 0x02	; 2
     fb6:	68 e0       	ldi	r22, 0x08	; 8
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	8d d9       	rcall	.-3302   	; 0x2d6 <CAN_send>
	 }
	 
	 if(CANheartbeatCountPDM > CAN_HEARTBEAT_TIME_PDM)
     fbc:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CANheartbeatCountPDM.2504>
     fc0:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CANheartbeatCountPDM.2504+0x1>
     fc4:	c3 97       	sbiw	r24, 0x33	; 51
     fc6:	68 f0       	brcs	.+26     	; 0xfe2 <oneKHzTimer+0x110>
	 {
		 // Reset power heartbeat counter
		 CANheartbeatCountPDM = 0;
     fc8:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <CANheartbeatCountPDM.2504+0x1>
     fcc:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <CANheartbeatCountPDM.2504>
		 // Send power system heartbeat (5 bytes in PDM array)
		 CAN_send(POWER_CAN, 5, PDMarray, HEARTBEAT_PDM_ID | 1);
     fd0:	01 e0       	ldi	r16, 0x01	; 1
     fd2:	10 e0       	ldi	r17, 0x00	; 0
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	39 e0       	ldi	r19, 0x09	; 9
     fd8:	40 e6       	ldi	r20, 0x60	; 96
     fda:	59 e0       	ldi	r21, 0x09	; 9
     fdc:	65 e0       	ldi	r22, 0x05	; 5
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	7a d9       	rcall	.-3340   	; 0x2d6 <CAN_send>
	 }
	 
	 if(CANheartbeatCountShutdown > CAN_HEARTBEAT_TIME_SHUTDOWN)
     fe2:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CANheartbeatCountShutdown.2505>
     fe6:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <CANheartbeatCountShutdown.2505+0x1>
     fea:	85 36       	cpi	r24, 0x65	; 101
     fec:	91 05       	cpc	r25, r1
     fee:	68 f0       	brcs	.+26     	; 0x100a <oneKHzTimer+0x138>
	 {
		 // Reset power heartbeat counter
		 CANheartbeatCountShutdown = 0;
     ff0:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <CANheartbeatCountShutdown.2505+0x1>
     ff4:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <CANheartbeatCountShutdown.2505>
		 // Send shutdown heartbeat (dont care what for now) (5 bytes in PDM array)
		 CAN_send(POWER_CAN, 5, PDMarray, HEARTBEAT_SHUTDOWN_ID | 1);
     ff8:	01 e0       	ldi	r16, 0x01	; 1
     ffa:	10 e0       	ldi	r17, 0x00	; 0
     ffc:	20 e8       	ldi	r18, 0x80	; 128
     ffe:	38 e0       	ldi	r19, 0x08	; 8
    1000:	40 e6       	ldi	r20, 0x60	; 96
    1002:	59 e0       	ldi	r21, 0x09	; 9
    1004:	65 e0       	ldi	r22, 0x05	; 5
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	66 d9       	rcall	.-3380   	; 0x2d6 <CAN_send>
		 //// Send shutdown heartbeat (dont care what for now)
		 ////CAN_send(POWER_CAN, 8, PDMarray, HEARTBEAT_AMU_ID | 1);
	 //}
	 
	 // the adding commented to test a counting system in the inverters if statement
	 CANheartbeatCountInverters++;
    100a:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <CANheartbeatCountInverters.2502>
    100e:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <CANheartbeatCountInverters.2502+0x1>
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <CANheartbeatCountInverters.2502+0x1>
    1018:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <CANheartbeatCountInverters.2502>
	 CANheartbeatCountWheel++;
    101c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <CANheartbeatCountWheel.2503>
    1020:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <CANheartbeatCountWheel.2503+0x1>
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <CANheartbeatCountWheel.2503+0x1>
    102a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <CANheartbeatCountWheel.2503>
	 CANheartbeatCountPDM++;
    102e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <CANheartbeatCountPDM.2504>
    1032:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <CANheartbeatCountPDM.2504+0x1>
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <CANheartbeatCountPDM.2504+0x1>
    103c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <CANheartbeatCountPDM.2504>
	 CANheartbeatCountShutdown++;
    1040:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CANheartbeatCountShutdown.2505>
    1044:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <CANheartbeatCountShutdown.2505+0x1>
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <CANheartbeatCountShutdown.2505+0x1>
    104e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <CANheartbeatCountShutdown.2505>

	// Gather all input pedals
	//------------------------------------------------------------------------
	
    uint8_t tmpInputVal;
    if(InputPedalThrottleCount > INPUT_TIME_PEDAL_THROTTLE)
    1052:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <InputPedalThrottleCount.2506>
    1056:	8b 30       	cpi	r24, 0x0B	; 11
    {
		//INPUT_accelerationPedal = (uint8_t)(a2d_10bitCh(5)); // Raw ADC sample
        if(INPUT_get_accelPedal(&tmpInputVal) == 0) {
    1058:	50 f0       	brcs	.+20     	; 0x106e <oneKHzTimer+0x19c>
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	6d dd       	rcall	.-1318   	; 0xb3a <INPUT_get_accelPedal>
    1060:	81 11       	cpse	r24, r1
    1062:	03 c0       	rjmp	.+6      	; 0x106a <oneKHzTimer+0x198>
             INPUT_accelerationPedal = tmpInputVal;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <INPUT_accelerationPedal>
        }
        InputPedalThrottleCount = 0;
    106a:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <InputPedalThrottleCount.2506>
    }
    if(InputPedalBrakeCount > INPUT_TIME_PEDAL_BRAKE)
    106e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <InputPedalBrakeCount.2507>
    1072:	8b 30       	cpi	r24, 0x0B	; 11
    {
        //INPUT_brakePedal = (uint8_t)(a2d_10bitCh(8)); // Raw ADC sample
        if(INPUT_get_brakePedal(&tmpInputVal) == 0) {
    1074:	50 f0       	brcs	.+20     	; 0x108a <oneKHzTimer+0x1b8>
    1076:	ce 01       	movw	r24, r28
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	37 de       	rcall	.-914    	; 0xcea <INPUT_get_brakePedal>
    107c:	81 11       	cpse	r24, r1
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <oneKHzTimer+0x1b4>
             INPUT_brakePedal = tmpInputVal;
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <INPUT_brakePedal>
		}
        InputPedalBrakeCount = 0;
    1086:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <InputPedalBrakeCount.2507>
    }
	if(InputSteeringCount > INPUT_TIME_STEERING)
    108a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <InputSteeringCount.2508>
    108e:	8b 30       	cpi	r24, 0x0B	; 11
	{
		//INPUT_steeringAngle = (uint16_t)(a2d_8bitCh(4)); // Raw ADC sample
		if(INPUT_get_steeringWheel(&tmpInputVal) == 0) {
    1090:	50 f0       	brcs	.+20     	; 0x10a6 <oneKHzTimer+0x1d4>
    1092:	ce 01       	movw	r24, r28
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	b3 de       	rcall	.-666    	; 0xdfe <INPUT_get_steeringWheel>
    1098:	81 11       	cpse	r24, r1
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <oneKHzTimer+0x1d0>
			INPUT_steeringAngle = tmpInputVal;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <INPUT_steeringAngle>
		}
		InputSteeringCount = 0;
    10a2:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <InputSteeringCount.2508>
	//}
	//if(INPUT_get_brakePressureFront(&tmpInputVal) == 0) {
	//    INPUT_brakePressureFront = tmpInputVal;
	//}
	
    InputPedalThrottleCount++;
    10a6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <InputPedalThrottleCount.2506>
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <InputPedalThrottleCount.2506>
    InputPedalBrakeCount++;
    10b0:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <InputPedalBrakeCount.2507>
    10b4:	8f 5f       	subi	r24, 0xFF	; 255
    10b6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <InputPedalBrakeCount.2507>
	InputSteeringCount++;
    10ba:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <InputSteeringCount.2508>
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <InputSteeringCount.2508>
	
	// Brake light code
	if(INPUT_brakePedal > INPUT_PEDAL_BRAKE_LIGHT_ON) {
    10c4:	20 91 59 09 	lds	r18, 0x0959	; 0x800959 <INPUT_brakePedal>
    10c8:	42 2f       	mov	r20, r18
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <INPUT_PEDAL_BRAKE_LIGHT_ON>
    10d0:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <INPUT_PEDAL_BRAKE_LIGHT_ON+0x1>
    10d4:	84 17       	cp	r24, r20
    10d6:	95 07       	cpc	r25, r21
    10d8:	20 f4       	brcc	.+8      	; 0x10e2 <oneKHzTimer+0x210>
		isBrakeLightOn = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <isBrakeLightOn>
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <oneKHzTimer+0x214>
	} else {
		isBrakeLightOn = 0;
    10e2:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <isBrakeLightOn>
	}
    
	
	inverterArray[0] = INPUT_accelerationPedal;
    10e6:	60 91 5a 09 	lds	r22, 0x095A	; 0x80095a <INPUT_accelerationPedal>
    10ea:	e5 e6       	ldi	r30, 0x65	; 101
    10ec:	f9 e0       	ldi	r31, 0x09	; 9
    10ee:	60 83       	st	Z, r22
	inverterArray[1] = INPUT_brakePedal;
    10f0:	21 83       	std	Z+1, r18	; 0x01
	inverterArray[2] = INPUT_steeringAngle;
    10f2:	50 91 5b 09 	lds	r21, 0x095B	; 0x80095b <INPUT_steeringAngle>
    10f6:	52 83       	std	Z+2, r21	; 0x02
	inverterArray[3] = isArmedState;
    10f8:	40 91 72 09 	lds	r20, 0x0972	; 0x800972 <isArmedState>
    10fc:	43 83       	std	Z+3, r20	; 0x03
	inverterArray[4] = sirenOnCount;
    10fe:	30 91 6f 09 	lds	r19, 0x096F	; 0x80096f <sirenOnCount>
    1102:	34 83       	std	Z+4, r19	; 0x04
	inverterArray[5] = isSirenOn;
    1104:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <isSirenOn>
    1108:	85 83       	std	Z+5, r24	; 0x05
	inverterArray[6] = isBrakeLightOn;
    110a:	90 91 6e 09 	lds	r25, 0x096E	; 0x80096e <isBrakeLightOn>
    110e:	96 83       	std	Z+6, r25	; 0x06
	
	WheelArray[0] = INPUT_accelerationPedal;
    1110:	e3 e2       	ldi	r30, 0x23	; 35
    1112:	f2 e0       	ldi	r31, 0x02	; 2
    1114:	60 83       	st	Z, r22
    WheelArray[1] = INPUT_brakePedal;
    1116:	21 83       	std	Z+1, r18	; 0x01
	WheelArray[2] = INPUT_steeringAngle;
    1118:	52 83       	std	Z+2, r21	; 0x02
	WheelArray[3] = isArmedState;
    111a:	43 83       	std	Z+3, r20	; 0x03
	WheelArray[4] = sirenOnCount;
    111c:	34 83       	std	Z+4, r19	; 0x04
	WheelArray[5] = isSirenOn;
    111e:	85 83       	std	Z+5, r24	; 0x05
	WheelArray[6] = isBrakeLightOn;
    1120:	96 83       	std	Z+6, r25	; 0x06

	// Fill PDM Array
	PDMarray[0] = 0b11001111 | isSirenOn << 5 | isBrakeLightOn << 4;
    1122:	e0 e6       	ldi	r30, 0x60	; 96
    1124:	f9 e0       	ldi	r31, 0x09	; 9
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	84 9f       	mul	r24, r20
    112a:	90 01       	movw	r18, r0
    112c:	11 24       	eor	r1, r1
    112e:	40 e1       	ldi	r20, 0x10	; 16
    1130:	94 9f       	mul	r25, r20
    1132:	c0 01       	movw	r24, r0
    1134:	11 24       	eor	r1, r1
    1136:	82 2b       	or	r24, r18
    1138:	8f 6c       	ori	r24, 0xCF	; 207
    113a:	80 83       	st	Z, r24
	PDMarray[1] = 100;
    113c:	84 e6       	ldi	r24, 0x64	; 100
    113e:	81 83       	std	Z+1, r24	; 0x01
	PDMarray[2] = 100;
    1140:	82 83       	std	Z+2, r24	; 0x02
	PDMarray[3] = 100;
    1142:	83 83       	std	Z+3, r24	; 0x03
	PDMarray[4] = 100;
    1144:	84 83       	std	Z+4, r24	; 0x04
	
}
    1146:	0f 90       	pop	r0
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <__vector_21>:

/**
 * @brief Called whenever the 1Khz timer triggers
 */
ISR(TIMER0_COMPA_vect)
{
    1152:	1f 92       	push	r1
    1154:	0f 92       	push	r0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	0f 92       	push	r0
    115a:	11 24       	eor	r1, r1
    115c:	0b b6       	in	r0, 0x3b	; 59
    115e:	0f 92       	push	r0
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31
    oneKHzTimer();
    1178:	ac de       	rcall	.-680    	; 0xed2 <oneKHzTimer>
	//uart_puts("HelloWorld!");
	//char msg[12];
	//sprintf(msg, "r: %d", out);
	//uart_puts(msg);
}
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0b be       	out	0x3b, r0	; 59
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1

}
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <__vector_2>:

/**
 * @brief Called whenever CANBUS 1 interupt is triggered
 *        * When ever there is data waiting in CAN 1
 */
ISR(INT1_vect) {
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	0f 92       	push	r0
    11bc:	11 24       	eor	r1, r1
    11be:	0b b6       	in	r0, 0x3b	; 59
    11c0:	0f 92       	push	r0
    11c2:	2f 93       	push	r18
    11c4:	3f 93       	push	r19
    11c6:	4f 93       	push	r20
    11c8:	5f 93       	push	r21
    11ca:	6f 93       	push	r22
    11cc:	7f 93       	push	r23
    11ce:	8f 93       	push	r24
    11d0:	9f 93       	push	r25
    11d2:	af 93       	push	r26
    11d4:	bf 93       	push	r27
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	2d 97       	sbiw	r28, 0x0d	; 13
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	cd bf       	out	0x3d, r28	; 61
	// Details about the message we're attempting to pull from the CAN bus
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	//led_toggle();
	RecievedMsgInv = 1;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <RecievedMsgInv>
	// Get the data from the CAN bus and process it
	CAN_pull_packet(TRACTIVE_CAN, &numBytes, data, &ID);
    11ee:	9e 01       	movw	r18, r28
    11f0:	27 5f       	subi	r18, 0xF7	; 247
    11f2:	3f 4f       	sbci	r19, 0xFF	; 255
    11f4:	ae 01       	movw	r20, r28
    11f6:	4f 5f       	subi	r20, 0xFF	; 255
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	be 01       	movw	r22, r28
    11fc:	63 5f       	subi	r22, 0xF3	; 243
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	92 d8       	rcall	.-3804   	; 0x326 <CAN_pull_packet>
	
	//sprintf(out, "%x,%x,%x,%x,%x,%x,%x,%x", data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
	//uart1_puts(out);
	//uart_puts(out);
	//uart1_puts(data);
}
    1202:	2d 96       	adiw	r28, 0x0d	; 13
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	ff 91       	pop	r31
    1214:	ef 91       	pop	r30
    1216:	bf 91       	pop	r27
    1218:	af 91       	pop	r26
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	7f 91       	pop	r23
    1220:	6f 91       	pop	r22
    1222:	5f 91       	pop	r21
    1224:	4f 91       	pop	r20
    1226:	3f 91       	pop	r19
    1228:	2f 91       	pop	r18
    122a:	0f 90       	pop	r0
    122c:	0b be       	out	0x3b, r0	; 59
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	0f 90       	pop	r0
    1234:	1f 90       	pop	r1
    1236:	18 95       	reti

00001238 <__vector_1>:

/**
 * @brief Called whenever CANBUS 2 interupt is triggered
 *        * When ever there is data waiting in CAN 2
 */
ISR(INT0_vect)	{
    1238:	1f 92       	push	r1
    123a:	0f 92       	push	r0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	0f 92       	push	r0
    1240:	11 24       	eor	r1, r1
    1242:	0b b6       	in	r0, 0x3b	; 59
    1244:	0f 92       	push	r0
    1246:	2f 93       	push	r18
    1248:	3f 93       	push	r19
    124a:	4f 93       	push	r20
    124c:	5f 93       	push	r21
    124e:	6f 93       	push	r22
    1250:	7f 93       	push	r23
    1252:	8f 93       	push	r24
    1254:	9f 93       	push	r25
    1256:	af 93       	push	r26
    1258:	bf 93       	push	r27
    125a:	ef 93       	push	r30
    125c:	ff 93       	push	r31
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	2d 97       	sbiw	r28, 0x0d	; 13
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	//led_toggle();
	// Get the data from the CAN bus and process it
	CAN_pull_packet(POWER_CAN, &numBytes, data, &ID);
    126c:	9e 01       	movw	r18, r28
    126e:	27 5f       	subi	r18, 0xF7	; 247
    1270:	3f 4f       	sbci	r19, 0xFF	; 255
    1272:	ae 01       	movw	r20, r28
    1274:	4f 5f       	subi	r20, 0xFF	; 255
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	be 01       	movw	r22, r28
    127a:	63 5f       	subi	r22, 0xF3	; 243
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	52 d8       	rcall	.-3932   	; 0x326 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
		
}
    1282:	2d 96       	adiw	r28, 0x0d	; 13
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	ff 91       	pop	r31
    1294:	ef 91       	pop	r30
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	0f 90       	pop	r0
    12ac:	0b be       	out	0x3b, r0	; 59
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <__vector_9>:

/**
 * @brief Called whenever CANBUS 3 interupt is triggered
 *        * When ever there is data waiting in CAN 3
 */
ISR(PCINT0_vect) {
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	0b b6       	in	r0, 0x3b	; 59
    12c4:	0f 92       	push	r0
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	6f 93       	push	r22
    12d0:	7f 93       	push	r23
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    12da:	ef 93       	push	r30
    12dc:	ff 93       	push	r31
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	2d 97       	sbiw	r28, 0x0d	; 13
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	cd bf       	out	0x3d, r28	; 61
	// Details about the message we're attempting to pull from the CAN bus
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	led_toggle();
    12ec:	bd dd       	rcall	.-1158   	; 0xe68 <led_toggle>
	// Get the data from the CAN bus and process it
	CAN_pull_packet(DATA_CAN, &numBytes, data, &ID);
    12ee:	9e 01       	movw	r18, r28
    12f0:	27 5f       	subi	r18, 0xF7	; 247
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	ae 01       	movw	r20, r28
    12f6:	4f 5f       	subi	r20, 0xFF	; 255
    12f8:	5f 4f       	sbci	r21, 0xFF	; 255
    12fa:	be 01       	movw	r22, r28
    12fc:	63 5f       	subi	r22, 0xF3	; 243
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	84 e0       	ldi	r24, 0x04	; 4
    1302:	11 d8       	rcall	.-4062   	; 0x326 <CAN_pull_packet>
    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);

	

    1304:	2d 96       	adiw	r28, 0x0d	; 13
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0b be       	out	0x3b, r0	; 59
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <MCP2515_CS_low>:
			MCP2515_reg_write(CANbus, MCP2515_RXM1EID0, IDmsk & 0xFF );
			if(IDmsk) MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
			else MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
	}	
	return 1;
}
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	51 f0       	breq	.+20     	; 0x1352 <MCP2515_CS_low+0x18>
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	71 f0       	breq	.+28     	; 0x135e <MCP2515_CS_low+0x24>
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	69 f4       	brne	.+26     	; 0x1360 <MCP2515_CS_low+0x26>
    1346:	e2 e0       	ldi	r30, 0x02	; 2
    1348:	f1 e0       	ldi	r31, 0x01	; 1
    134a:	80 81       	ld	r24, Z
    134c:	8e 7f       	andi	r24, 0xFE	; 254
    134e:	80 83       	st	Z, r24
    1350:	08 95       	ret
    1352:	e2 e0       	ldi	r30, 0x02	; 2
    1354:	f1 e0       	ldi	r31, 0x01	; 1
    1356:	80 81       	ld	r24, Z
    1358:	8d 7f       	andi	r24, 0xFD	; 253
    135a:	80 83       	st	Z, r24
    135c:	08 95       	ret
    135e:	28 98       	cbi	0x05, 0	; 5
    1360:	08 95       	ret

00001362 <MCP2515_CS_high>:
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	51 f0       	breq	.+20     	; 0x137a <MCP2515_CS_high+0x18>
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	71 f0       	breq	.+28     	; 0x1386 <MCP2515_CS_high+0x24>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	69 f4       	brne	.+26     	; 0x1388 <MCP2515_CS_high+0x26>
    136e:	e2 e0       	ldi	r30, 0x02	; 2
    1370:	f1 e0       	ldi	r31, 0x01	; 1
    1372:	80 81       	ld	r24, Z
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	80 83       	st	Z, r24
    1378:	08 95       	ret
    137a:	e2 e0       	ldi	r30, 0x02	; 2
    137c:	f1 e0       	ldi	r31, 0x01	; 1
    137e:	80 81       	ld	r24, Z
    1380:	82 60       	ori	r24, 0x02	; 2
    1382:	80 83       	st	Z, r24
    1384:	08 95       	ret
    1386:	28 9a       	sbi	0x05, 0	; 5
    1388:	08 95       	ret

0000138a <MCP2515_reg_write>:
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	c8 2f       	mov	r28, r24
    1392:	16 2f       	mov	r17, r22
    1394:	d4 2f       	mov	r29, r20
    1396:	d1 df       	rcall	.-94     	; 0x133a <MCP2515_CS_low>
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	8c d1       	rcall	.+792    	; 0x16b4 <SPI_send_byte>
    139c:	81 2f       	mov	r24, r17
    139e:	8a d1       	rcall	.+788    	; 0x16b4 <SPI_send_byte>
    13a0:	8d 2f       	mov	r24, r29
    13a2:	88 d1       	rcall	.+784    	; 0x16b4 <SPI_send_byte>
    13a4:	8c 2f       	mov	r24, r28
    13a6:	dd df       	rcall	.-70     	; 0x1362 <MCP2515_CS_high>
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	08 95       	ret

000013b0 <MCP2515_instruction>:
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	c8 2f       	mov	r28, r24
    13b6:	d6 2f       	mov	r29, r22
    13b8:	c0 df       	rcall	.-128    	; 0x133a <MCP2515_CS_low>
    13ba:	8d 2f       	mov	r24, r29
    13bc:	7b d1       	rcall	.+758    	; 0x16b4 <SPI_send_byte>
    13be:	8c 2f       	mov	r24, r28
    13c0:	d0 df       	rcall	.-96     	; 0x1362 <MCP2515_CS_high>
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <MCP2515_bit_modify>:
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	c8 2f       	mov	r28, r24
    13d2:	06 2f       	mov	r16, r22
    13d4:	d4 2f       	mov	r29, r20
    13d6:	12 2f       	mov	r17, r18
    13d8:	b0 df       	rcall	.-160    	; 0x133a <MCP2515_CS_low>
    13da:	85 e0       	ldi	r24, 0x05	; 5
    13dc:	6b d1       	rcall	.+726    	; 0x16b4 <SPI_send_byte>
    13de:	80 2f       	mov	r24, r16
    13e0:	69 d1       	rcall	.+722    	; 0x16b4 <SPI_send_byte>
    13e2:	81 2f       	mov	r24, r17
    13e4:	67 d1       	rcall	.+718    	; 0x16b4 <SPI_send_byte>
    13e6:	8d 2f       	mov	r24, r29
    13e8:	65 d1       	rcall	.+714    	; 0x16b4 <SPI_send_byte>
    13ea:	8c 2f       	mov	r24, r28
    13ec:	ba df       	rcall	.-140    	; 0x1362 <MCP2515_CS_high>
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	08 95       	ret

000013f8 <MCP2515_init>:
    13f8:	cf 93       	push	r28
    13fa:	c8 2f       	mov	r28, r24
    13fc:	60 ec       	ldi	r22, 0xC0	; 192
    13fe:	d8 df       	rcall	.-80     	; 0x13b0 <MCP2515_instruction>
    1400:	20 ee       	ldi	r18, 0xE0	; 224
    1402:	40 e8       	ldi	r20, 0x80	; 128
    1404:	6f e0       	ldi	r22, 0x0F	; 15
    1406:	8c 2f       	mov	r24, r28
    1408:	df df       	rcall	.-66     	; 0x13c8 <MCP2515_bit_modify>
    140a:	44 e0       	ldi	r20, 0x04	; 4
    140c:	6a e2       	ldi	r22, 0x2A	; 42
    140e:	8c 2f       	mov	r24, r28
    1410:	bc df       	rcall	.-136    	; 0x138a <MCP2515_reg_write>
    1412:	4a ec       	ldi	r20, 0xCA	; 202
    1414:	69 e2       	ldi	r22, 0x29	; 41
    1416:	8c 2f       	mov	r24, r28
    1418:	b8 df       	rcall	.-144    	; 0x138a <MCP2515_reg_write>
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	68 e2       	ldi	r22, 0x28	; 40
    141e:	8c 2f       	mov	r24, r28
    1420:	b4 df       	rcall	.-152    	; 0x138a <MCP2515_reg_write>
    1422:	43 e0       	ldi	r20, 0x03	; 3
    1424:	6b e2       	ldi	r22, 0x2B	; 43
    1426:	8c 2f       	mov	r24, r28
    1428:	b0 df       	rcall	.-160    	; 0x138a <MCP2515_reg_write>
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	6d e0       	ldi	r22, 0x0D	; 13
    142e:	8c 2f       	mov	r24, r28
    1430:	ac df       	rcall	.-168    	; 0x138a <MCP2515_reg_write>
    1432:	28 ee       	ldi	r18, 0xE8	; 232
    1434:	48 e0       	ldi	r20, 0x08	; 8
    1436:	6f e0       	ldi	r22, 0x0F	; 15
    1438:	8c 2f       	mov	r24, r28
    143a:	c6 df       	rcall	.-116    	; 0x13c8 <MCP2515_bit_modify>
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <MCP2515_PullCanPacket>:
    1440:	7f 92       	push	r7
    1442:	8f 92       	push	r8
    1444:	9f 92       	push	r9
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	2d 97       	sbiw	r28, 0x0d	; 13
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	78 2e       	mov	r7, r24
    146c:	4a 01       	movw	r8, r20
    146e:	59 01       	movw	r10, r18
    1470:	61 37       	cpi	r22, 0x71	; 113
    1472:	28 f4       	brcc	.+10     	; 0x147e <MCP2515_PullCanPacket+0x3e>
    1474:	0f 2e       	mov	r0, r31
    1476:	f0 e9       	ldi	r31, 0x90	; 144
    1478:	ff 2e       	mov	r15, r31
    147a:	f0 2d       	mov	r31, r0
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <MCP2515_PullCanPacket+0x46>
    147e:	0f 2e       	mov	r0, r31
    1480:	f4 e9       	ldi	r31, 0x94	; 148
    1482:	ff 2e       	mov	r15, r31
    1484:	f0 2d       	mov	r31, r0
    1486:	87 2d       	mov	r24, r7
    1488:	58 df       	rcall	.-336    	; 0x133a <MCP2515_CS_low>
    148a:	8f 2d       	mov	r24, r15
    148c:	13 d1       	rcall	.+550    	; 0x16b4 <SPI_send_byte>
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	7c 01       	movw	r14, r24
    1494:	6e 01       	movw	r12, r28
    1496:	9e e0       	ldi	r25, 0x0E	; 14
    1498:	c9 0e       	add	r12, r25
    149a:	d1 1c       	adc	r13, r1
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0a d1       	rcall	.+532    	; 0x16b4 <SPI_send_byte>
    14a0:	f7 01       	movw	r30, r14
    14a2:	81 93       	st	Z+, r24
    14a4:	7f 01       	movw	r14, r30
    14a6:	ec 15       	cp	r30, r12
    14a8:	fd 05       	cpc	r31, r13
    14aa:	c1 f7       	brne	.-16     	; 0x149c <MCP2515_PullCanPacket+0x5c>
    14ac:	2a 81       	ldd	r18, Y+2	; 0x02
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a0 e0       	ldi	r26, 0x00	; 0
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	07 2e       	mov	r0, r23
    14b8:	75 e1       	ldi	r23, 0x15	; 21
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	aa 1f       	adc	r26, r26
    14c0:	bb 1f       	adc	r27, r27
    14c2:	7a 95       	dec	r23
    14c4:	d1 f7       	brne	.-12     	; 0x14ba <MCP2515_PullCanPacket+0x7a>
    14c6:	70 2d       	mov	r23, r0
    14c8:	3b 81       	ldd	r19, Y+3	; 0x03
    14ca:	93 2b       	or	r25, r19
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	83 2b       	or	r24, r19
    14d0:	42 2f       	mov	r20, r18
    14d2:	40 7e       	andi	r20, 0xE0	; 224
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	03 2e       	mov	r0, r19
    14dc:	3d e0       	ldi	r19, 0x0D	; 13
    14de:	44 0f       	add	r20, r20
    14e0:	55 1f       	adc	r21, r21
    14e2:	66 1f       	adc	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	3a 95       	dec	r19
    14e8:	d1 f7       	brne	.-12     	; 0x14de <MCP2515_PullCanPacket+0x9e>
    14ea:	30 2d       	mov	r19, r0
    14ec:	84 2b       	or	r24, r20
    14ee:	95 2b       	or	r25, r21
    14f0:	a6 2b       	or	r26, r22
    14f2:	b7 2b       	or	r27, r23
    14f4:	23 70       	andi	r18, 0x03	; 3
    14f6:	a2 2b       	or	r26, r18
    14f8:	f8 01       	movw	r30, r16
    14fa:	80 83       	st	Z, r24
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	a2 83       	std	Z+2, r26	; 0x02
    1500:	b3 83       	std	Z+3, r27	; 0x03
    1502:	4d 81       	ldd	r20, Y+5	; 0x05
    1504:	4f 70       	andi	r20, 0x0F	; 15
    1506:	f4 01       	movw	r30, r8
    1508:	40 83       	st	Z, r20
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	be 01       	movw	r22, r28
    150e:	6a 5f       	subi	r22, 0xFA	; 250
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	c5 01       	movw	r24, r10
    1514:	fe d1       	rcall	.+1020   	; 0x1912 <memcpy>
    1516:	87 2d       	mov	r24, r7
    1518:	24 df       	rcall	.-440    	; 0x1362 <MCP2515_CS_high>
    151a:	2d 96       	adiw	r28, 0x0d	; 13
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	df 90       	pop	r13
    1534:	cf 90       	pop	r12
    1536:	bf 90       	pop	r11
    1538:	af 90       	pop	r10
    153a:	9f 90       	pop	r9
    153c:	8f 90       	pop	r8
    153e:	7f 90       	pop	r7
    1540:	08 95       	ret

00001542 <MCP2515_reg_read>:
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	c8 2f       	mov	r28, r24
    1548:	d6 2f       	mov	r29, r22
    154a:	f7 de       	rcall	.-530    	; 0x133a <MCP2515_CS_low>
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	b2 d0       	rcall	.+356    	; 0x16b4 <SPI_send_byte>
    1550:	8d 2f       	mov	r24, r29
    1552:	b0 d0       	rcall	.+352    	; 0x16b4 <SPI_send_byte>
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	ae d0       	rcall	.+348    	; 0x16b4 <SPI_send_byte>
    1558:	d8 2f       	mov	r29, r24
    155a:	8c 2f       	mov	r24, r28
    155c:	02 df       	rcall	.-508    	; 0x1362 <MCP2515_CS_high>
    155e:	8d 2f       	mov	r24, r29
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret

00001566 <MCP2515_findFreeTxBuffer>:
    1566:	cf 93       	push	r28
    1568:	c8 2f       	mov	r28, r24
    156a:	60 e3       	ldi	r22, 0x30	; 48
    156c:	ea df       	rcall	.-44     	; 0x1542 <MCP2515_reg_read>
    156e:	83 ff       	sbrs	r24, 3
    1570:	0c c0       	rjmp	.+24     	; 0x158a <MCP2515_findFreeTxBuffer+0x24>
    1572:	60 e4       	ldi	r22, 0x40	; 64
    1574:	8c 2f       	mov	r24, r28
    1576:	e5 df       	rcall	.-54     	; 0x1542 <MCP2515_reg_read>
    1578:	83 ff       	sbrs	r24, 3
    157a:	09 c0       	rjmp	.+18     	; 0x158e <MCP2515_findFreeTxBuffer+0x28>
    157c:	60 e5       	ldi	r22, 0x50	; 80
    157e:	8c 2f       	mov	r24, r28
    1580:	e0 df       	rcall	.-64     	; 0x1542 <MCP2515_reg_read>
    1582:	83 ff       	sbrs	r24, 3
    1584:	06 c0       	rjmp	.+12     	; 0x1592 <MCP2515_findFreeTxBuffer+0x2c>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	05 c0       	rjmp	.+10     	; 0x1594 <MCP2515_findFreeTxBuffer+0x2e>
    158a:	80 e3       	ldi	r24, 0x30	; 48
    158c:	03 c0       	rjmp	.+6      	; 0x1594 <MCP2515_findFreeTxBuffer+0x2e>
    158e:	80 e4       	ldi	r24, 0x40	; 64
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <MCP2515_findFreeTxBuffer+0x2e>
    1592:	80 e5       	ldi	r24, 0x50	; 80
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <MCP2515_TX>:

void MCP2515_TX(uint8_t CANbus, int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID)
{
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
	if(mob == 0)return;						//no free mob or invalid mob
    15ae:	66 23       	and	r22, r22
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <MCP2515_TX+0x1c>
    15b2:	63 c0       	rjmp	.+198    	; 0x167a <MCP2515_TX+0xe2>
    15b4:	47 01       	movw	r8, r14
    15b6:	58 01       	movw	r10, r16
    15b8:	c3 2f       	mov	r28, r19
    15ba:	e2 2e       	mov	r14, r18
    15bc:	d4 2e       	mov	r13, r20
    15be:	f6 2e       	mov	r15, r22
    15c0:	d8 2f       	mov	r29, r24
	MCP2515_reg_write(CANbus, mob, 0x03);			//we shall set this to the highest priority so that it sends it immediately.
    15c2:	43 e0       	ldi	r20, 0x03	; 3
    15c4:	e2 de       	rcall	.-572    	; 0x138a <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+1, (ID>>21) & 0xFF);	//shift the ID data to fill the respective MCP registers
    15c6:	b5 01       	movw	r22, r10
    15c8:	a4 01       	movw	r20, r8
    15ca:	03 2e       	mov	r0, r19
    15cc:	35 e1       	ldi	r19, 0x15	; 21
    15ce:	76 95       	lsr	r23
    15d0:	67 95       	ror	r22
    15d2:	57 95       	ror	r21
    15d4:	47 95       	ror	r20
    15d6:	3a 95       	dec	r19
    15d8:	d1 f7       	brne	.-12     	; 0x15ce <MCP2515_TX+0x36>
    15da:	30 2d       	mov	r19, r0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	8f 0d       	add	r24, r15
    15e0:	68 2f       	mov	r22, r24
    15e2:	8d 2f       	mov	r24, r29
    15e4:	d2 de       	rcall	.-604    	; 0x138a <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+2, (((ID>>13) & 224)| ((ID>>16) & 3) | ((1<<3) & 0xFF)));	//set the EXIDE bit, which makes it extended (CAN 2.0B)
    15e6:	b5 01       	movw	r22, r10
    15e8:	a4 01       	movw	r20, r8
    15ea:	03 2e       	mov	r0, r19
    15ec:	3d e0       	ldi	r19, 0x0D	; 13
    15ee:	76 95       	lsr	r23
    15f0:	67 95       	ror	r22
    15f2:	57 95       	ror	r21
    15f4:	47 95       	ror	r20
    15f6:	3a 95       	dec	r19
    15f8:	d1 f7       	brne	.-12     	; 0x15ee <MCP2515_TX+0x56>
    15fa:	30 2d       	mov	r19, r0
    15fc:	40 7e       	andi	r20, 0xE0	; 224
    15fe:	8a 2d       	mov	r24, r10
    1600:	83 70       	andi	r24, 0x03	; 3
    1602:	48 2b       	or	r20, r24
    1604:	48 60       	ori	r20, 0x08	; 8
    1606:	62 e0       	ldi	r22, 0x02	; 2
    1608:	6f 0d       	add	r22, r15
    160a:	8d 2f       	mov	r24, r29
    160c:	be de       	rcall	.-644    	; 0x138a <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+3, (ID>>8) & 0xFF );
    160e:	77 27       	eor	r23, r23
    1610:	6b 2d       	mov	r22, r11
    1612:	5a 2d       	mov	r21, r10
    1614:	49 2d       	mov	r20, r9
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	8f 0d       	add	r24, r15
    161a:	68 2f       	mov	r22, r24
    161c:	8d 2f       	mov	r24, r29
    161e:	b5 de       	rcall	.-662    	; 0x138a <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+4, ID & 0xFF );
    1620:	64 e0       	ldi	r22, 0x04	; 4
    1622:	6f 0d       	add	r22, r15
    1624:	48 2d       	mov	r20, r8
    1626:	8d 2f       	mov	r24, r29
    1628:	b0 de       	rcall	.-672    	; 0x138a <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+5, numBytes);		//set how many bytes we wish to send
    162a:	65 e0       	ldi	r22, 0x05	; 5
    162c:	6f 0d       	add	r22, r15
    162e:	4d 2d       	mov	r20, r13
    1630:	8d 2f       	mov	r24, r29
    1632:	ab de       	rcall	.-682    	; 0x138a <MCP2515_reg_write>
    1634:	dd 20       	and	r13, r13
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);

	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    1636:	89 f0       	breq	.+34     	; 0x165a <MCP2515_TX+0xc2>
    1638:	0e 2d       	mov	r16, r14
    163a:	1c 2f       	mov	r17, r28
    163c:	c6 e0       	ldi	r28, 0x06	; 6
    163e:	cf 0d       	add	r28, r15
    1640:	46 e0       	ldi	r20, 0x06	; 6
    1642:	4d 0d       	add	r20, r13
    1644:	e4 2e       	mov	r14, r20
    1646:	ef 0c       	add	r14, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
    1648:	f8 01       	movw	r30, r16
    164a:	41 91       	ld	r20, Z+
    164c:	8f 01       	movw	r16, r30
    164e:	6c 2f       	mov	r22, r28
    1650:	8d 2f       	mov	r24, r29
    1652:	9b de       	rcall	.-714    	; 0x138a <MCP2515_reg_write>
    1654:	cf 5f       	subi	r28, 0xFF	; 255
    1656:	ce 11       	cpse	r28, r14
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);

	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    1658:	f7 cf       	rjmp	.-18     	; 0x1648 <MCP2515_TX+0xb0>
    165a:	8f 2d       	mov	r24, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
	}
	MCP2515_instruction(CANbus, 128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
    165c:	85 95       	asr	r24
    165e:	85 95       	asr	r24
    1660:	85 95       	asr	r24
    1662:	85 95       	asr	r24
    1664:	83 50       	subi	r24, 0x03	; 3
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <MCP2515_TX+0xd8>
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <MCP2515_TX+0xd4>
    1674:	60 68       	ori	r22, 0x80	; 128
    1676:	8d 2f       	mov	r24, r29
    1678:	9b de       	rcall	.-714    	; 0x13b0 <MCP2515_instruction>
    167a:	df 91       	pop	r29
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	9f 90       	pop	r9
    168e:	8f 90       	pop	r8
    1690:	08 95       	ret

00001692 <MCP2515_check_receive_status>:
    1692:	cf 93       	push	r28


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
    1694:	df 93       	push	r29
    1696:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
    1698:	50 de       	rcall	.-864    	; 0x133a <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
    169a:	80 eb       	ldi	r24, 0xB0	; 176
    169c:	0b d0       	rcall	.+22     	; 0x16b4 <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	09 d0       	rcall	.+18     	; 0x16b4 <SPI_send_byte>
    16a2:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	06 d0       	rcall	.+12     	; 0x16b4 <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
    16a8:	8c 2f       	mov	r24, r28
    16aa:	5b de       	rcall	.-842    	; 0x1362 <MCP2515_CS_high>
    16ac:	8d 2f       	mov	r24, r29
	return status;
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    16b4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    16b6:	0d b4       	in	r0, 0x2d	; 45
    16b8:	07 fe       	sbrs	r0, 7
    16ba:	fd cf       	rjmp	.-6      	; 0x16b6 <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    16bc:	8e b5       	in	r24, 0x2e	; 46
}
    16be:	08 95       	ret

000016c0 <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
    16c0:	81 e5       	ldi	r24, 0x51	; 81
    16c2:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
    16c8:	1e bc       	out	0x2e, r1	; 46
    16ca:	08 95       	ret

000016cc <__vector_25>:
    /* get data from receive buffer */
    data1 = UART1_RxBuf[tmptail1];
    
    return (UART1_LastRxError << 8) + data1;

}/* uart1_getc */
    16cc:	1f 92       	push	r1
    16ce:	0f 92       	push	r0
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	0f 92       	push	r0
    16d4:	11 24       	eor	r1, r1
    16d6:	0b b6       	in	r0, 0x3b	; 59
    16d8:	0f 92       	push	r0
    16da:	2f 93       	push	r18
    16dc:	8f 93       	push	r24
    16de:	9f 93       	push	r25
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
    16e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    16e8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    16ec:	88 71       	andi	r24, 0x18	; 24
    16ee:	e0 91 be 09 	lds	r30, 0x09BE	; 0x8009be <UART_RxHead>
    16f2:	ef 5f       	subi	r30, 0xFF	; 255
    16f4:	ef 71       	andi	r30, 0x1F	; 31
    16f6:	90 91 bd 09 	lds	r25, 0x09BD	; 0x8009bd <UART_RxTail>
    16fa:	e9 17       	cp	r30, r25
    16fc:	39 f0       	breq	.+14     	; 0x170c <__vector_25+0x40>
    16fe:	e0 93 be 09 	sts	0x09BE, r30	; 0x8009be <UART_RxHead>
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	ef 53       	subi	r30, 0x3F	; 63
    1706:	f6 4f       	sbci	r31, 0xF6	; 246
    1708:	20 83       	st	Z, r18
    170a:	01 c0       	rjmp	.+2      	; 0x170e <__vector_25+0x42>
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	80 93 bc 09 	sts	0x09BC, r24	; 0x8009bc <UART_LastRxError>
    1712:	ff 91       	pop	r31
    1714:	ef 91       	pop	r30
    1716:	9f 91       	pop	r25
    1718:	8f 91       	pop	r24
    171a:	2f 91       	pop	r18
    171c:	0f 90       	pop	r0
    171e:	0b be       	out	0x3b, r0	; 59
    1720:	0f 90       	pop	r0
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	0f 90       	pop	r0
    1726:	1f 90       	pop	r1
    1728:	18 95       	reti

0000172a <__vector_36>:
    172a:	1f 92       	push	r1
    172c:	0f 92       	push	r0
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	0f 92       	push	r0
    1732:	11 24       	eor	r1, r1
    1734:	0b b6       	in	r0, 0x3b	; 59
    1736:	0f 92       	push	r0
    1738:	2f 93       	push	r18
    173a:	8f 93       	push	r24
    173c:	9f 93       	push	r25
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
    1742:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1746:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    174a:	88 71       	andi	r24, 0x18	; 24
    174c:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <UART1_RxHead>
    1750:	ef 5f       	subi	r30, 0xFF	; 255
    1752:	ef 71       	andi	r30, 0x1F	; 31
    1754:	90 91 78 09 	lds	r25, 0x0978	; 0x800978 <UART1_RxTail>
    1758:	e9 17       	cp	r30, r25
    175a:	39 f0       	breq	.+14     	; 0x176a <__vector_36+0x40>
    175c:	e0 93 79 09 	sts	0x0979, r30	; 0x800979 <UART1_RxHead>
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	e4 58       	subi	r30, 0x84	; 132
    1764:	f6 4f       	sbci	r31, 0xF6	; 246
    1766:	20 83       	st	Z, r18
    1768:	01 c0       	rjmp	.+2      	; 0x176c <__vector_36+0x42>
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <UART1_LastRxError>
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	2f 91       	pop	r18
    177a:	0f 90       	pop	r0
    177c:	0b be       	out	0x3b, r0	; 59
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <__vector_26>:
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	0b b6       	in	r0, 0x3b	; 59
    1794:	0f 92       	push	r0
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <UART_TxHead>
    17a2:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <UART_TxTail>
    17a6:	98 17       	cp	r25, r24
    17a8:	69 f0       	breq	.+26     	; 0x17c4 <__vector_26+0x3c>
    17aa:	e0 91 bf 09 	lds	r30, 0x09BF	; 0x8009bf <UART_TxTail>
    17ae:	ef 5f       	subi	r30, 0xFF	; 255
    17b0:	ef 71       	andi	r30, 0x1F	; 31
    17b2:	e0 93 bf 09 	sts	0x09BF, r30	; 0x8009bf <UART_TxTail>
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	ef 51       	subi	r30, 0x1F	; 31
    17ba:	f6 4f       	sbci	r31, 0xF6	; 246
    17bc:	80 81       	ld	r24, Z
    17be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <__vector_26+0x46>
    17c4:	e1 ec       	ldi	r30, 0xC1	; 193
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8f 7d       	andi	r24, 0xDF	; 223
    17cc:	80 83       	st	Z, r24
    17ce:	ff 91       	pop	r31
    17d0:	ef 91       	pop	r30
    17d2:	9f 91       	pop	r25
    17d4:	8f 91       	pop	r24
    17d6:	0f 90       	pop	r0
    17d8:	0b be       	out	0x3b, r0	; 59
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	0f 90       	pop	r0
    17e0:	1f 90       	pop	r1
    17e2:	18 95       	reti

000017e4 <__vector_37>:
    17e4:	1f 92       	push	r1
    17e6:	0f 92       	push	r0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	0b b6       	in	r0, 0x3b	; 59
    17f0:	0f 92       	push	r0
    17f2:	8f 93       	push	r24
    17f4:	9f 93       	push	r25
    17f6:	ef 93       	push	r30
    17f8:	ff 93       	push	r31
    17fa:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <UART1_TxHead>
    17fe:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <UART1_TxTail>
    1802:	98 17       	cp	r25, r24
    1804:	69 f0       	breq	.+26     	; 0x1820 <__vector_37+0x3c>
    1806:	e0 91 7a 09 	lds	r30, 0x097A	; 0x80097a <UART1_TxTail>
    180a:	ef 5f       	subi	r30, 0xFF	; 255
    180c:	ef 71       	andi	r30, 0x1F	; 31
    180e:	e0 93 7a 09 	sts	0x097A, r30	; 0x80097a <UART1_TxTail>
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	e4 56       	subi	r30, 0x64	; 100
    1816:	f6 4f       	sbci	r31, 0xF6	; 246
    1818:	80 81       	ld	r24, Z
    181a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    181e:	05 c0       	rjmp	.+10     	; 0x182a <__vector_37+0x46>
    1820:	e9 ec       	ldi	r30, 0xC9	; 201
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8f 7d       	andi	r24, 0xDF	; 223
    1828:	80 83       	st	Z, r24
    182a:	ff 91       	pop	r31
    182c:	ef 91       	pop	r30
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	0f 90       	pop	r0
    1834:	0b be       	out	0x3b, r0	; 59
    1836:	0f 90       	pop	r0
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	0f 90       	pop	r0
    183c:	1f 90       	pop	r1
    183e:	18 95       	reti

00001840 <uart_init>:
    1840:	10 92 c0 09 	sts	0x09C0, r1	; 0x8009c0 <UART_TxHead>
    1844:	10 92 bf 09 	sts	0x09BF, r1	; 0x8009bf <UART_TxTail>
    1848:	10 92 be 09 	sts	0x09BE, r1	; 0x8009be <UART_RxHead>
    184c:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <UART_RxTail>
    1850:	e1 e6       	ldi	r30, 0x61	; 97
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 e8       	ldi	r24, 0x80	; 128
    1856:	80 83       	st	Z, r24
    1858:	10 82       	st	Z, r1
    185a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    185e:	87 e6       	ldi	r24, 0x67	; 103
    1860:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    186a:	88 e1       	ldi	r24, 0x18	; 24
    186c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1870:	86 e0       	ldi	r24, 0x06	; 6
    1872:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1876:	08 95       	ret

00001878 <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{	
	unsigned char tmphead;
	
	if (portKey == 0)
    1878:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <portKey>
    187c:	91 11       	cpse	r25, r1
    187e:	15 c0       	rjmp	.+42     	; 0x18aa <uart_putc+0x32>
	{
		tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1880:	20 91 c0 09 	lds	r18, 0x09C0	; 0x8009c0 <UART_TxHead>
    1884:	2f 5f       	subi	r18, 0xFF	; 255
    1886:	2f 71       	andi	r18, 0x1F	; 31
    
		while ( tmphead == UART_TxTail ){
    1888:	90 91 bf 09 	lds	r25, 0x09BF	; 0x8009bf <UART_TxTail>
    188c:	29 17       	cp	r18, r25
    188e:	e1 f3       	breq	.-8      	; 0x1888 <uart_putc+0x10>
			;// wait for free space in buffer 
		}
		
		UART_TxBuf[tmphead] = data;
    1890:	e2 2f       	mov	r30, r18
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	ef 51       	subi	r30, 0x1F	; 31
    1896:	f6 4f       	sbci	r31, 0xF6	; 246
    1898:	80 83       	st	Z, r24
		UART_TxHead = tmphead;
    189a:	20 93 c0 09 	sts	0x09C0, r18	; 0x8009c0 <UART_TxHead>

		// enable UDRE interrupt 
		UART0_CONTROL |= (1 << UART0_UDRIE);
    189e:	e1 ec       	ldi	r30, 0xC1	; 193
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 62       	ori	r24, 0x20	; 32
    18a6:	80 83       	st	Z, r24
    18a8:	08 95       	ret
		
	}
	
	else if (portKey == 1)
    18aa:	91 30       	cpi	r25, 0x01	; 1
    18ac:	a1 f4       	brne	.+40     	; 0x18d6 <uart_putc+0x5e>
	{
		tmphead  = (UART1_TxHead + 1) & UART1_TX_BUFFER_MASK;
    18ae:	20 91 7b 09 	lds	r18, 0x097B	; 0x80097b <UART1_TxHead>
    18b2:	2f 5f       	subi	r18, 0xFF	; 255
    18b4:	2f 71       	andi	r18, 0x1F	; 31
    
		while ( tmphead == UART1_TxTail ){
    18b6:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <UART1_TxTail>
    18ba:	29 17       	cp	r18, r25
    18bc:	e1 f3       	breq	.-8      	; 0x18b6 <uart_putc+0x3e>
			;// wait for free space in buffer 		
		}
		//PORTH &= 251;
    
		UART1_TxBuf[tmphead] = data;
    18be:	e2 2f       	mov	r30, r18
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	e4 56       	subi	r30, 0x64	; 100
    18c4:	f6 4f       	sbci	r31, 0xF6	; 246
    18c6:	80 83       	st	Z, r24
		UART1_TxHead = tmphead;
    18c8:	20 93 7b 09 	sts	0x097B, r18	; 0x80097b <UART1_TxHead>

		// enable UDRE interrupt 
		UART1_CONTROL |= (1 << UART1_UDRIE);	
    18cc:	e9 ec       	ldi	r30, 0xC9	; 201
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 62       	ori	r24, 0x20	; 32
    18d4:	80 83       	st	Z, r24
    18d6:	08 95       	ret

000018d8 <__udivmodhi4>:
    18d8:	aa 1b       	sub	r26, r26
    18da:	bb 1b       	sub	r27, r27
    18dc:	51 e1       	ldi	r21, 0x11	; 17
    18de:	07 c0       	rjmp	.+14     	; 0x18ee <__udivmodhi4_ep>

000018e0 <__udivmodhi4_loop>:
    18e0:	aa 1f       	adc	r26, r26
    18e2:	bb 1f       	adc	r27, r27
    18e4:	a6 17       	cp	r26, r22
    18e6:	b7 07       	cpc	r27, r23
    18e8:	10 f0       	brcs	.+4      	; 0x18ee <__udivmodhi4_ep>
    18ea:	a6 1b       	sub	r26, r22
    18ec:	b7 0b       	sbc	r27, r23

000018ee <__udivmodhi4_ep>:
    18ee:	88 1f       	adc	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	5a 95       	dec	r21
    18f4:	a9 f7       	brne	.-22     	; 0x18e0 <__udivmodhi4_loop>
    18f6:	80 95       	com	r24
    18f8:	90 95       	com	r25
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	08 95       	ret

00001900 <__tablejump2__>:
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	00 24       	eor	r0, r0
    1906:	00 1c       	adc	r0, r0
    1908:	0b be       	out	0x3b, r0	; 59
    190a:	07 90       	elpm	r0, Z+
    190c:	f6 91       	elpm	r31, Z
    190e:	e0 2d       	mov	r30, r0
    1910:	09 94       	ijmp

00001912 <memcpy>:
    1912:	fb 01       	movw	r30, r22
    1914:	dc 01       	movw	r26, r24
    1916:	02 c0       	rjmp	.+4      	; 0x191c <memcpy+0xa>
    1918:	01 90       	ld	r0, Z+
    191a:	0d 92       	st	X+, r0
    191c:	41 50       	subi	r20, 0x01	; 1
    191e:	50 40       	sbci	r21, 0x00	; 0
    1920:	d8 f7       	brcc	.-10     	; 0x1918 <memcpy+0x6>
    1922:	08 95       	ret

00001924 <snprintf>:
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	2e 97       	sbiw	r28, 0x0e	; 14
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	0d 89       	ldd	r16, Y+21	; 0x15
    193e:	1e 89       	ldd	r17, Y+22	; 0x16
    1940:	8f 89       	ldd	r24, Y+23	; 0x17
    1942:	98 8d       	ldd	r25, Y+24	; 0x18
    1944:	26 e0       	ldi	r18, 0x06	; 6
    1946:	2c 83       	std	Y+4, r18	; 0x04
    1948:	1a 83       	std	Y+2, r17	; 0x02
    194a:	09 83       	std	Y+1, r16	; 0x01
    194c:	97 ff       	sbrs	r25, 7
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <snprintf+0x30>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e8       	ldi	r25, 0x80	; 128
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
    195a:	ae 01       	movw	r20, r28
    195c:	45 5e       	subi	r20, 0xE5	; 229
    195e:	5f 4f       	sbci	r21, 0xFF	; 255
    1960:	69 8d       	ldd	r22, Y+25	; 0x19
    1962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1964:	ce 01       	movw	r24, r28
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	19 d0       	rcall	.+50     	; 0x199c <vfprintf>
    196a:	4d 81       	ldd	r20, Y+5	; 0x05
    196c:	5e 81       	ldd	r21, Y+6	; 0x06
    196e:	57 fd       	sbrc	r21, 7
    1970:	0a c0       	rjmp	.+20     	; 0x1986 <snprintf+0x62>
    1972:	2f 81       	ldd	r18, Y+7	; 0x07
    1974:	38 85       	ldd	r19, Y+8	; 0x08
    1976:	42 17       	cp	r20, r18
    1978:	53 07       	cpc	r21, r19
    197a:	0c f4       	brge	.+2      	; 0x197e <snprintf+0x5a>
    197c:	9a 01       	movw	r18, r20
    197e:	f8 01       	movw	r30, r16
    1980:	e2 0f       	add	r30, r18
    1982:	f3 1f       	adc	r31, r19
    1984:	10 82       	st	Z, r1
    1986:	2e 96       	adiw	r28, 0x0e	; 14
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	08 95       	ret

0000199c <vfprintf>:
    199c:	2f 92       	push	r2
    199e:	3f 92       	push	r3
    19a0:	4f 92       	push	r4
    19a2:	5f 92       	push	r5
    19a4:	6f 92       	push	r6
    19a6:	7f 92       	push	r7
    19a8:	8f 92       	push	r8
    19aa:	9f 92       	push	r9
    19ac:	af 92       	push	r10
    19ae:	bf 92       	push	r11
    19b0:	cf 92       	push	r12
    19b2:	df 92       	push	r13
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	2b 97       	sbiw	r28, 0x0b	; 11
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	6c 01       	movw	r12, r24
    19d2:	7b 01       	movw	r14, r22
    19d4:	8a 01       	movw	r16, r20
    19d6:	fc 01       	movw	r30, r24
    19d8:	17 82       	std	Z+7, r1	; 0x07
    19da:	16 82       	std	Z+6, r1	; 0x06
    19dc:	83 81       	ldd	r24, Z+3	; 0x03
    19de:	81 ff       	sbrs	r24, 1
    19e0:	bf c1       	rjmp	.+894    	; 0x1d60 <vfprintf+0x3c4>
    19e2:	ce 01       	movw	r24, r28
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	3c 01       	movw	r6, r24
    19e8:	f6 01       	movw	r30, r12
    19ea:	93 81       	ldd	r25, Z+3	; 0x03
    19ec:	f7 01       	movw	r30, r14
    19ee:	93 fd       	sbrc	r25, 3
    19f0:	85 91       	lpm	r24, Z+
    19f2:	93 ff       	sbrs	r25, 3
    19f4:	81 91       	ld	r24, Z+
    19f6:	7f 01       	movw	r14, r30
    19f8:	88 23       	and	r24, r24
    19fa:	09 f4       	brne	.+2      	; 0x19fe <vfprintf+0x62>
    19fc:	ad c1       	rjmp	.+858    	; 0x1d58 <vfprintf+0x3bc>
    19fe:	85 32       	cpi	r24, 0x25	; 37
    1a00:	39 f4       	brne	.+14     	; 0x1a10 <vfprintf+0x74>
    1a02:	93 fd       	sbrc	r25, 3
    1a04:	85 91       	lpm	r24, Z+
    1a06:	93 ff       	sbrs	r25, 3
    1a08:	81 91       	ld	r24, Z+
    1a0a:	7f 01       	movw	r14, r30
    1a0c:	85 32       	cpi	r24, 0x25	; 37
    1a0e:	21 f4       	brne	.+8      	; 0x1a18 <vfprintf+0x7c>
    1a10:	b6 01       	movw	r22, r12
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	d6 d1       	rcall	.+940    	; 0x1dc2 <fputc>
    1a16:	e8 cf       	rjmp	.-48     	; 0x19e8 <vfprintf+0x4c>
    1a18:	91 2c       	mov	r9, r1
    1a1a:	21 2c       	mov	r2, r1
    1a1c:	31 2c       	mov	r3, r1
    1a1e:	ff e1       	ldi	r31, 0x1F	; 31
    1a20:	f3 15       	cp	r31, r3
    1a22:	d8 f0       	brcs	.+54     	; 0x1a5a <vfprintf+0xbe>
    1a24:	8b 32       	cpi	r24, 0x2B	; 43
    1a26:	79 f0       	breq	.+30     	; 0x1a46 <vfprintf+0xaa>
    1a28:	38 f4       	brcc	.+14     	; 0x1a38 <vfprintf+0x9c>
    1a2a:	80 32       	cpi	r24, 0x20	; 32
    1a2c:	79 f0       	breq	.+30     	; 0x1a4c <vfprintf+0xb0>
    1a2e:	83 32       	cpi	r24, 0x23	; 35
    1a30:	a1 f4       	brne	.+40     	; 0x1a5a <vfprintf+0xbe>
    1a32:	23 2d       	mov	r18, r3
    1a34:	20 61       	ori	r18, 0x10	; 16
    1a36:	1d c0       	rjmp	.+58     	; 0x1a72 <vfprintf+0xd6>
    1a38:	8d 32       	cpi	r24, 0x2D	; 45
    1a3a:	61 f0       	breq	.+24     	; 0x1a54 <vfprintf+0xb8>
    1a3c:	80 33       	cpi	r24, 0x30	; 48
    1a3e:	69 f4       	brne	.+26     	; 0x1a5a <vfprintf+0xbe>
    1a40:	23 2d       	mov	r18, r3
    1a42:	21 60       	ori	r18, 0x01	; 1
    1a44:	16 c0       	rjmp	.+44     	; 0x1a72 <vfprintf+0xd6>
    1a46:	83 2d       	mov	r24, r3
    1a48:	82 60       	ori	r24, 0x02	; 2
    1a4a:	38 2e       	mov	r3, r24
    1a4c:	e3 2d       	mov	r30, r3
    1a4e:	e4 60       	ori	r30, 0x04	; 4
    1a50:	3e 2e       	mov	r3, r30
    1a52:	2a c0       	rjmp	.+84     	; 0x1aa8 <vfprintf+0x10c>
    1a54:	f3 2d       	mov	r31, r3
    1a56:	f8 60       	ori	r31, 0x08	; 8
    1a58:	1d c0       	rjmp	.+58     	; 0x1a94 <vfprintf+0xf8>
    1a5a:	37 fc       	sbrc	r3, 7
    1a5c:	2d c0       	rjmp	.+90     	; 0x1ab8 <vfprintf+0x11c>
    1a5e:	20 ed       	ldi	r18, 0xD0	; 208
    1a60:	28 0f       	add	r18, r24
    1a62:	2a 30       	cpi	r18, 0x0A	; 10
    1a64:	40 f0       	brcs	.+16     	; 0x1a76 <vfprintf+0xda>
    1a66:	8e 32       	cpi	r24, 0x2E	; 46
    1a68:	b9 f4       	brne	.+46     	; 0x1a98 <vfprintf+0xfc>
    1a6a:	36 fc       	sbrc	r3, 6
    1a6c:	75 c1       	rjmp	.+746    	; 0x1d58 <vfprintf+0x3bc>
    1a6e:	23 2d       	mov	r18, r3
    1a70:	20 64       	ori	r18, 0x40	; 64
    1a72:	32 2e       	mov	r3, r18
    1a74:	19 c0       	rjmp	.+50     	; 0x1aa8 <vfprintf+0x10c>
    1a76:	36 fe       	sbrs	r3, 6
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <vfprintf+0xea>
    1a7a:	8a e0       	ldi	r24, 0x0A	; 10
    1a7c:	98 9e       	mul	r9, r24
    1a7e:	20 0d       	add	r18, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	92 2e       	mov	r9, r18
    1a84:	11 c0       	rjmp	.+34     	; 0x1aa8 <vfprintf+0x10c>
    1a86:	ea e0       	ldi	r30, 0x0A	; 10
    1a88:	2e 9e       	mul	r2, r30
    1a8a:	20 0d       	add	r18, r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	22 2e       	mov	r2, r18
    1a90:	f3 2d       	mov	r31, r3
    1a92:	f0 62       	ori	r31, 0x20	; 32
    1a94:	3f 2e       	mov	r3, r31
    1a96:	08 c0       	rjmp	.+16     	; 0x1aa8 <vfprintf+0x10c>
    1a98:	8c 36       	cpi	r24, 0x6C	; 108
    1a9a:	21 f4       	brne	.+8      	; 0x1aa4 <vfprintf+0x108>
    1a9c:	83 2d       	mov	r24, r3
    1a9e:	80 68       	ori	r24, 0x80	; 128
    1aa0:	38 2e       	mov	r3, r24
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <vfprintf+0x10c>
    1aa4:	88 36       	cpi	r24, 0x68	; 104
    1aa6:	41 f4       	brne	.+16     	; 0x1ab8 <vfprintf+0x11c>
    1aa8:	f7 01       	movw	r30, r14
    1aaa:	93 fd       	sbrc	r25, 3
    1aac:	85 91       	lpm	r24, Z+
    1aae:	93 ff       	sbrs	r25, 3
    1ab0:	81 91       	ld	r24, Z+
    1ab2:	7f 01       	movw	r14, r30
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	b3 cf       	rjmp	.-154    	; 0x1a1e <vfprintf+0x82>
    1ab8:	98 2f       	mov	r25, r24
    1aba:	9f 7d       	andi	r25, 0xDF	; 223
    1abc:	95 54       	subi	r25, 0x45	; 69
    1abe:	93 30       	cpi	r25, 0x03	; 3
    1ac0:	28 f4       	brcc	.+10     	; 0x1acc <vfprintf+0x130>
    1ac2:	0c 5f       	subi	r16, 0xFC	; 252
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	9f e3       	ldi	r25, 0x3F	; 63
    1ac8:	99 83       	std	Y+1, r25	; 0x01
    1aca:	0d c0       	rjmp	.+26     	; 0x1ae6 <vfprintf+0x14a>
    1acc:	83 36       	cpi	r24, 0x63	; 99
    1ace:	31 f0       	breq	.+12     	; 0x1adc <vfprintf+0x140>
    1ad0:	83 37       	cpi	r24, 0x73	; 115
    1ad2:	71 f0       	breq	.+28     	; 0x1af0 <vfprintf+0x154>
    1ad4:	83 35       	cpi	r24, 0x53	; 83
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <vfprintf+0x13e>
    1ad8:	55 c0       	rjmp	.+170    	; 0x1b84 <vfprintf+0x1e8>
    1ada:	20 c0       	rjmp	.+64     	; 0x1b1c <vfprintf+0x180>
    1adc:	f8 01       	movw	r30, r16
    1ade:	80 81       	ld	r24, Z
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	0e 5f       	subi	r16, 0xFE	; 254
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	88 24       	eor	r8, r8
    1ae8:	83 94       	inc	r8
    1aea:	91 2c       	mov	r9, r1
    1aec:	53 01       	movw	r10, r6
    1aee:	12 c0       	rjmp	.+36     	; 0x1b14 <vfprintf+0x178>
    1af0:	28 01       	movw	r4, r16
    1af2:	f2 e0       	ldi	r31, 0x02	; 2
    1af4:	4f 0e       	add	r4, r31
    1af6:	51 1c       	adc	r5, r1
    1af8:	f8 01       	movw	r30, r16
    1afa:	a0 80       	ld	r10, Z
    1afc:	b1 80       	ldd	r11, Z+1	; 0x01
    1afe:	36 fe       	sbrs	r3, 6
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <vfprintf+0x16c>
    1b02:	69 2d       	mov	r22, r9
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <vfprintf+0x170>
    1b08:	6f ef       	ldi	r22, 0xFF	; 255
    1b0a:	7f ef       	ldi	r23, 0xFF	; 255
    1b0c:	c5 01       	movw	r24, r10
    1b0e:	4e d1       	rcall	.+668    	; 0x1dac <strnlen>
    1b10:	4c 01       	movw	r8, r24
    1b12:	82 01       	movw	r16, r4
    1b14:	f3 2d       	mov	r31, r3
    1b16:	ff 77       	andi	r31, 0x7F	; 127
    1b18:	3f 2e       	mov	r3, r31
    1b1a:	15 c0       	rjmp	.+42     	; 0x1b46 <vfprintf+0x1aa>
    1b1c:	28 01       	movw	r4, r16
    1b1e:	22 e0       	ldi	r18, 0x02	; 2
    1b20:	42 0e       	add	r4, r18
    1b22:	51 1c       	adc	r5, r1
    1b24:	f8 01       	movw	r30, r16
    1b26:	a0 80       	ld	r10, Z
    1b28:	b1 80       	ldd	r11, Z+1	; 0x01
    1b2a:	36 fe       	sbrs	r3, 6
    1b2c:	03 c0       	rjmp	.+6      	; 0x1b34 <vfprintf+0x198>
    1b2e:	69 2d       	mov	r22, r9
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <vfprintf+0x19c>
    1b34:	6f ef       	ldi	r22, 0xFF	; 255
    1b36:	7f ef       	ldi	r23, 0xFF	; 255
    1b38:	c5 01       	movw	r24, r10
    1b3a:	2d d1       	rcall	.+602    	; 0x1d96 <strnlen_P>
    1b3c:	4c 01       	movw	r8, r24
    1b3e:	f3 2d       	mov	r31, r3
    1b40:	f0 68       	ori	r31, 0x80	; 128
    1b42:	3f 2e       	mov	r3, r31
    1b44:	82 01       	movw	r16, r4
    1b46:	33 fc       	sbrc	r3, 3
    1b48:	19 c0       	rjmp	.+50     	; 0x1b7c <vfprintf+0x1e0>
    1b4a:	82 2d       	mov	r24, r2
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	88 16       	cp	r8, r24
    1b50:	99 06       	cpc	r9, r25
    1b52:	a0 f4       	brcc	.+40     	; 0x1b7c <vfprintf+0x1e0>
    1b54:	b6 01       	movw	r22, r12
    1b56:	80 e2       	ldi	r24, 0x20	; 32
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	33 d1       	rcall	.+614    	; 0x1dc2 <fputc>
    1b5c:	2a 94       	dec	r2
    1b5e:	f5 cf       	rjmp	.-22     	; 0x1b4a <vfprintf+0x1ae>
    1b60:	f5 01       	movw	r30, r10
    1b62:	37 fc       	sbrc	r3, 7
    1b64:	85 91       	lpm	r24, Z+
    1b66:	37 fe       	sbrs	r3, 7
    1b68:	81 91       	ld	r24, Z+
    1b6a:	5f 01       	movw	r10, r30
    1b6c:	b6 01       	movw	r22, r12
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	28 d1       	rcall	.+592    	; 0x1dc2 <fputc>
    1b72:	21 10       	cpse	r2, r1
    1b74:	2a 94       	dec	r2
    1b76:	21 e0       	ldi	r18, 0x01	; 1
    1b78:	82 1a       	sub	r8, r18
    1b7a:	91 08       	sbc	r9, r1
    1b7c:	81 14       	cp	r8, r1
    1b7e:	91 04       	cpc	r9, r1
    1b80:	79 f7       	brne	.-34     	; 0x1b60 <vfprintf+0x1c4>
    1b82:	e1 c0       	rjmp	.+450    	; 0x1d46 <vfprintf+0x3aa>
    1b84:	84 36       	cpi	r24, 0x64	; 100
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <vfprintf+0x1f0>
    1b88:	89 36       	cpi	r24, 0x69	; 105
    1b8a:	39 f5       	brne	.+78     	; 0x1bda <vfprintf+0x23e>
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	37 fe       	sbrs	r3, 7
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <vfprintf+0x204>
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	0c 5f       	subi	r16, 0xFC	; 252
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	08 c0       	rjmp	.+16     	; 0x1bb0 <vfprintf+0x214>
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	07 2e       	mov	r0, r23
    1ba6:	00 0c       	add	r0, r0
    1ba8:	88 0b       	sbc	r24, r24
    1baa:	99 0b       	sbc	r25, r25
    1bac:	0e 5f       	subi	r16, 0xFE	; 254
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	f3 2d       	mov	r31, r3
    1bb2:	ff 76       	andi	r31, 0x6F	; 111
    1bb4:	3f 2e       	mov	r3, r31
    1bb6:	97 ff       	sbrs	r25, 7
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <vfprintf+0x230>
    1bba:	90 95       	com	r25
    1bbc:	80 95       	com	r24
    1bbe:	70 95       	com	r23
    1bc0:	61 95       	neg	r22
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	f0 68       	ori	r31, 0x80	; 128
    1bca:	3f 2e       	mov	r3, r31
    1bcc:	2a e0       	ldi	r18, 0x0A	; 10
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	a3 01       	movw	r20, r6
    1bd2:	33 d1       	rcall	.+614    	; 0x1e3a <__ultoa_invert>
    1bd4:	88 2e       	mov	r8, r24
    1bd6:	86 18       	sub	r8, r6
    1bd8:	44 c0       	rjmp	.+136    	; 0x1c62 <vfprintf+0x2c6>
    1bda:	85 37       	cpi	r24, 0x75	; 117
    1bdc:	31 f4       	brne	.+12     	; 0x1bea <vfprintf+0x24e>
    1bde:	23 2d       	mov	r18, r3
    1be0:	2f 7e       	andi	r18, 0xEF	; 239
    1be2:	b2 2e       	mov	r11, r18
    1be4:	2a e0       	ldi	r18, 0x0A	; 10
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	25 c0       	rjmp	.+74     	; 0x1c34 <vfprintf+0x298>
    1bea:	93 2d       	mov	r25, r3
    1bec:	99 7f       	andi	r25, 0xF9	; 249
    1bee:	b9 2e       	mov	r11, r25
    1bf0:	8f 36       	cpi	r24, 0x6F	; 111
    1bf2:	c1 f0       	breq	.+48     	; 0x1c24 <vfprintf+0x288>
    1bf4:	18 f4       	brcc	.+6      	; 0x1bfc <vfprintf+0x260>
    1bf6:	88 35       	cpi	r24, 0x58	; 88
    1bf8:	79 f0       	breq	.+30     	; 0x1c18 <vfprintf+0x27c>
    1bfa:	ae c0       	rjmp	.+348    	; 0x1d58 <vfprintf+0x3bc>
    1bfc:	80 37       	cpi	r24, 0x70	; 112
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <vfprintf+0x26a>
    1c00:	88 37       	cpi	r24, 0x78	; 120
    1c02:	21 f0       	breq	.+8      	; 0x1c0c <vfprintf+0x270>
    1c04:	a9 c0       	rjmp	.+338    	; 0x1d58 <vfprintf+0x3bc>
    1c06:	e9 2f       	mov	r30, r25
    1c08:	e0 61       	ori	r30, 0x10	; 16
    1c0a:	be 2e       	mov	r11, r30
    1c0c:	b4 fe       	sbrs	r11, 4
    1c0e:	0d c0       	rjmp	.+26     	; 0x1c2a <vfprintf+0x28e>
    1c10:	fb 2d       	mov	r31, r11
    1c12:	f4 60       	ori	r31, 0x04	; 4
    1c14:	bf 2e       	mov	r11, r31
    1c16:	09 c0       	rjmp	.+18     	; 0x1c2a <vfprintf+0x28e>
    1c18:	34 fe       	sbrs	r3, 4
    1c1a:	0a c0       	rjmp	.+20     	; 0x1c30 <vfprintf+0x294>
    1c1c:	29 2f       	mov	r18, r25
    1c1e:	26 60       	ori	r18, 0x06	; 6
    1c20:	b2 2e       	mov	r11, r18
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <vfprintf+0x294>
    1c24:	28 e0       	ldi	r18, 0x08	; 8
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <vfprintf+0x298>
    1c2a:	20 e1       	ldi	r18, 0x10	; 16
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <vfprintf+0x298>
    1c30:	20 e1       	ldi	r18, 0x10	; 16
    1c32:	32 e0       	ldi	r19, 0x02	; 2
    1c34:	f8 01       	movw	r30, r16
    1c36:	b7 fe       	sbrs	r11, 7
    1c38:	07 c0       	rjmp	.+14     	; 0x1c48 <vfprintf+0x2ac>
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	0c 5f       	subi	r16, 0xFC	; 252
    1c44:	1f 4f       	sbci	r17, 0xFF	; 255
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <vfprintf+0x2b8>
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 5f       	subi	r16, 0xFE	; 254
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	a3 01       	movw	r20, r6
    1c56:	f1 d0       	rcall	.+482    	; 0x1e3a <__ultoa_invert>
    1c58:	88 2e       	mov	r8, r24
    1c5a:	86 18       	sub	r8, r6
    1c5c:	fb 2d       	mov	r31, r11
    1c5e:	ff 77       	andi	r31, 0x7F	; 127
    1c60:	3f 2e       	mov	r3, r31
    1c62:	36 fe       	sbrs	r3, 6
    1c64:	0d c0       	rjmp	.+26     	; 0x1c80 <vfprintf+0x2e4>
    1c66:	23 2d       	mov	r18, r3
    1c68:	2e 7f       	andi	r18, 0xFE	; 254
    1c6a:	a2 2e       	mov	r10, r18
    1c6c:	89 14       	cp	r8, r9
    1c6e:	58 f4       	brcc	.+22     	; 0x1c86 <vfprintf+0x2ea>
    1c70:	34 fe       	sbrs	r3, 4
    1c72:	0b c0       	rjmp	.+22     	; 0x1c8a <vfprintf+0x2ee>
    1c74:	32 fc       	sbrc	r3, 2
    1c76:	09 c0       	rjmp	.+18     	; 0x1c8a <vfprintf+0x2ee>
    1c78:	83 2d       	mov	r24, r3
    1c7a:	8e 7e       	andi	r24, 0xEE	; 238
    1c7c:	a8 2e       	mov	r10, r24
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <vfprintf+0x2ee>
    1c80:	b8 2c       	mov	r11, r8
    1c82:	a3 2c       	mov	r10, r3
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <vfprintf+0x2f0>
    1c86:	b8 2c       	mov	r11, r8
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <vfprintf+0x2f0>
    1c8a:	b9 2c       	mov	r11, r9
    1c8c:	a4 fe       	sbrs	r10, 4
    1c8e:	0f c0       	rjmp	.+30     	; 0x1cae <vfprintf+0x312>
    1c90:	fe 01       	movw	r30, r28
    1c92:	e8 0d       	add	r30, r8
    1c94:	f1 1d       	adc	r31, r1
    1c96:	80 81       	ld	r24, Z
    1c98:	80 33       	cpi	r24, 0x30	; 48
    1c9a:	21 f4       	brne	.+8      	; 0x1ca4 <vfprintf+0x308>
    1c9c:	9a 2d       	mov	r25, r10
    1c9e:	99 7e       	andi	r25, 0xE9	; 233
    1ca0:	a9 2e       	mov	r10, r25
    1ca2:	09 c0       	rjmp	.+18     	; 0x1cb6 <vfprintf+0x31a>
    1ca4:	a2 fe       	sbrs	r10, 2
    1ca6:	06 c0       	rjmp	.+12     	; 0x1cb4 <vfprintf+0x318>
    1ca8:	b3 94       	inc	r11
    1caa:	b3 94       	inc	r11
    1cac:	04 c0       	rjmp	.+8      	; 0x1cb6 <vfprintf+0x31a>
    1cae:	8a 2d       	mov	r24, r10
    1cb0:	86 78       	andi	r24, 0x86	; 134
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <vfprintf+0x31a>
    1cb4:	b3 94       	inc	r11
    1cb6:	a3 fc       	sbrc	r10, 3
    1cb8:	10 c0       	rjmp	.+32     	; 0x1cda <vfprintf+0x33e>
    1cba:	a0 fe       	sbrs	r10, 0
    1cbc:	06 c0       	rjmp	.+12     	; 0x1cca <vfprintf+0x32e>
    1cbe:	b2 14       	cp	r11, r2
    1cc0:	80 f4       	brcc	.+32     	; 0x1ce2 <vfprintf+0x346>
    1cc2:	28 0c       	add	r2, r8
    1cc4:	92 2c       	mov	r9, r2
    1cc6:	9b 18       	sub	r9, r11
    1cc8:	0d c0       	rjmp	.+26     	; 0x1ce4 <vfprintf+0x348>
    1cca:	b2 14       	cp	r11, r2
    1ccc:	58 f4       	brcc	.+22     	; 0x1ce4 <vfprintf+0x348>
    1cce:	b6 01       	movw	r22, r12
    1cd0:	80 e2       	ldi	r24, 0x20	; 32
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	76 d0       	rcall	.+236    	; 0x1dc2 <fputc>
    1cd6:	b3 94       	inc	r11
    1cd8:	f8 cf       	rjmp	.-16     	; 0x1cca <vfprintf+0x32e>
    1cda:	b2 14       	cp	r11, r2
    1cdc:	18 f4       	brcc	.+6      	; 0x1ce4 <vfprintf+0x348>
    1cde:	2b 18       	sub	r2, r11
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <vfprintf+0x34a>
    1ce2:	98 2c       	mov	r9, r8
    1ce4:	21 2c       	mov	r2, r1
    1ce6:	a4 fe       	sbrs	r10, 4
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <vfprintf+0x36c>
    1cea:	b6 01       	movw	r22, r12
    1cec:	80 e3       	ldi	r24, 0x30	; 48
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	68 d0       	rcall	.+208    	; 0x1dc2 <fputc>
    1cf2:	a2 fe       	sbrs	r10, 2
    1cf4:	16 c0       	rjmp	.+44     	; 0x1d22 <vfprintf+0x386>
    1cf6:	a1 fc       	sbrc	r10, 1
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <vfprintf+0x364>
    1cfa:	88 e7       	ldi	r24, 0x78	; 120
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <vfprintf+0x368>
    1d00:	88 e5       	ldi	r24, 0x58	; 88
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	b6 01       	movw	r22, r12
    1d06:	0c c0       	rjmp	.+24     	; 0x1d20 <vfprintf+0x384>
    1d08:	8a 2d       	mov	r24, r10
    1d0a:	86 78       	andi	r24, 0x86	; 134
    1d0c:	51 f0       	breq	.+20     	; 0x1d22 <vfprintf+0x386>
    1d0e:	a1 fe       	sbrs	r10, 1
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <vfprintf+0x37a>
    1d12:	8b e2       	ldi	r24, 0x2B	; 43
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <vfprintf+0x37c>
    1d16:	80 e2       	ldi	r24, 0x20	; 32
    1d18:	a7 fc       	sbrc	r10, 7
    1d1a:	8d e2       	ldi	r24, 0x2D	; 45
    1d1c:	b6 01       	movw	r22, r12
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	50 d0       	rcall	.+160    	; 0x1dc2 <fputc>
    1d22:	89 14       	cp	r8, r9
    1d24:	30 f4       	brcc	.+12     	; 0x1d32 <vfprintf+0x396>
    1d26:	b6 01       	movw	r22, r12
    1d28:	80 e3       	ldi	r24, 0x30	; 48
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	4a d0       	rcall	.+148    	; 0x1dc2 <fputc>
    1d2e:	9a 94       	dec	r9
    1d30:	f8 cf       	rjmp	.-16     	; 0x1d22 <vfprintf+0x386>
    1d32:	8a 94       	dec	r8
    1d34:	f3 01       	movw	r30, r6
    1d36:	e8 0d       	add	r30, r8
    1d38:	f1 1d       	adc	r31, r1
    1d3a:	80 81       	ld	r24, Z
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	40 d0       	rcall	.+128    	; 0x1dc2 <fputc>
    1d42:	81 10       	cpse	r8, r1
    1d44:	f6 cf       	rjmp	.-20     	; 0x1d32 <vfprintf+0x396>
    1d46:	22 20       	and	r2, r2
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <vfprintf+0x3b0>
    1d4a:	4e ce       	rjmp	.-868    	; 0x19e8 <vfprintf+0x4c>
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	80 e2       	ldi	r24, 0x20	; 32
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	37 d0       	rcall	.+110    	; 0x1dc2 <fputc>
    1d54:	2a 94       	dec	r2
    1d56:	f7 cf       	rjmp	.-18     	; 0x1d46 <vfprintf+0x3aa>
    1d58:	f6 01       	movw	r30, r12
    1d5a:	86 81       	ldd	r24, Z+6	; 0x06
    1d5c:	97 81       	ldd	r25, Z+7	; 0x07
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <vfprintf+0x3c8>
    1d60:	8f ef       	ldi	r24, 0xFF	; 255
    1d62:	9f ef       	ldi	r25, 0xFF	; 255
    1d64:	2b 96       	adiw	r28, 0x0b	; 11
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ff 90       	pop	r15
    1d7a:	ef 90       	pop	r14
    1d7c:	df 90       	pop	r13
    1d7e:	cf 90       	pop	r12
    1d80:	bf 90       	pop	r11
    1d82:	af 90       	pop	r10
    1d84:	9f 90       	pop	r9
    1d86:	8f 90       	pop	r8
    1d88:	7f 90       	pop	r7
    1d8a:	6f 90       	pop	r6
    1d8c:	5f 90       	pop	r5
    1d8e:	4f 90       	pop	r4
    1d90:	3f 90       	pop	r3
    1d92:	2f 90       	pop	r2
    1d94:	08 95       	ret

00001d96 <strnlen_P>:
    1d96:	fc 01       	movw	r30, r24
    1d98:	05 90       	lpm	r0, Z+
    1d9a:	61 50       	subi	r22, 0x01	; 1
    1d9c:	70 40       	sbci	r23, 0x00	; 0
    1d9e:	01 10       	cpse	r0, r1
    1da0:	d8 f7       	brcc	.-10     	; 0x1d98 <strnlen_P+0x2>
    1da2:	80 95       	com	r24
    1da4:	90 95       	com	r25
    1da6:	8e 0f       	add	r24, r30
    1da8:	9f 1f       	adc	r25, r31
    1daa:	08 95       	ret

00001dac <strnlen>:
    1dac:	fc 01       	movw	r30, r24
    1dae:	61 50       	subi	r22, 0x01	; 1
    1db0:	70 40       	sbci	r23, 0x00	; 0
    1db2:	01 90       	ld	r0, Z+
    1db4:	01 10       	cpse	r0, r1
    1db6:	d8 f7       	brcc	.-10     	; 0x1dae <strnlen+0x2>
    1db8:	80 95       	com	r24
    1dba:	90 95       	com	r25
    1dbc:	8e 0f       	add	r24, r30
    1dbe:	9f 1f       	adc	r25, r31
    1dc0:	08 95       	ret

00001dc2 <fputc>:
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	fb 01       	movw	r30, r22
    1dcc:	23 81       	ldd	r18, Z+3	; 0x03
    1dce:	21 fd       	sbrc	r18, 1
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <fputc+0x16>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	2c c0       	rjmp	.+88     	; 0x1e30 <fputc+0x6e>
    1dd8:	22 ff       	sbrs	r18, 2
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <fputc+0x46>
    1ddc:	46 81       	ldd	r20, Z+6	; 0x06
    1dde:	57 81       	ldd	r21, Z+7	; 0x07
    1de0:	24 81       	ldd	r18, Z+4	; 0x04
    1de2:	35 81       	ldd	r19, Z+5	; 0x05
    1de4:	42 17       	cp	r20, r18
    1de6:	53 07       	cpc	r21, r19
    1de8:	44 f4       	brge	.+16     	; 0x1dfa <fputc+0x38>
    1dea:	a0 81       	ld	r26, Z
    1dec:	b1 81       	ldd	r27, Z+1	; 0x01
    1dee:	9d 01       	movw	r18, r26
    1df0:	2f 5f       	subi	r18, 0xFF	; 255
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	31 83       	std	Z+1, r19	; 0x01
    1df6:	20 83       	st	Z, r18
    1df8:	8c 93       	st	X, r24
    1dfa:	26 81       	ldd	r18, Z+6	; 0x06
    1dfc:	37 81       	ldd	r19, Z+7	; 0x07
    1dfe:	2f 5f       	subi	r18, 0xFF	; 255
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	37 83       	std	Z+7, r19	; 0x07
    1e04:	26 83       	std	Z+6, r18	; 0x06
    1e06:	14 c0       	rjmp	.+40     	; 0x1e30 <fputc+0x6e>
    1e08:	8b 01       	movw	r16, r22
    1e0a:	ec 01       	movw	r28, r24
    1e0c:	fb 01       	movw	r30, r22
    1e0e:	00 84       	ldd	r0, Z+8	; 0x08
    1e10:	f1 85       	ldd	r31, Z+9	; 0x09
    1e12:	e0 2d       	mov	r30, r0
    1e14:	09 95       	icall
    1e16:	89 2b       	or	r24, r25
    1e18:	e1 f6       	brne	.-72     	; 0x1dd2 <fputc+0x10>
    1e1a:	d8 01       	movw	r26, r16
    1e1c:	16 96       	adiw	r26, 0x06	; 6
    1e1e:	8d 91       	ld	r24, X+
    1e20:	9c 91       	ld	r25, X
    1e22:	17 97       	sbiw	r26, 0x07	; 7
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	17 96       	adiw	r26, 0x07	; 7
    1e28:	9c 93       	st	X, r25
    1e2a:	8e 93       	st	-X, r24
    1e2c:	16 97       	sbiw	r26, 0x06	; 6
    1e2e:	ce 01       	movw	r24, r28
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <__ultoa_invert>:
    1e3a:	fa 01       	movw	r30, r20
    1e3c:	aa 27       	eor	r26, r26
    1e3e:	28 30       	cpi	r18, 0x08	; 8
    1e40:	51 f1       	breq	.+84     	; 0x1e96 <__ultoa_invert+0x5c>
    1e42:	20 31       	cpi	r18, 0x10	; 16
    1e44:	81 f1       	breq	.+96     	; 0x1ea6 <__ultoa_invert+0x6c>
    1e46:	e8 94       	clt
    1e48:	6f 93       	push	r22
    1e4a:	6e 7f       	andi	r22, 0xFE	; 254
    1e4c:	6e 5f       	subi	r22, 0xFE	; 254
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	8f 4f       	sbci	r24, 0xFF	; 255
    1e52:	9f 4f       	sbci	r25, 0xFF	; 255
    1e54:	af 4f       	sbci	r26, 0xFF	; 255
    1e56:	b1 e0       	ldi	r27, 0x01	; 1
    1e58:	3e d0       	rcall	.+124    	; 0x1ed6 <__ultoa_invert+0x9c>
    1e5a:	b4 e0       	ldi	r27, 0x04	; 4
    1e5c:	3c d0       	rcall	.+120    	; 0x1ed6 <__ultoa_invert+0x9c>
    1e5e:	67 0f       	add	r22, r23
    1e60:	78 1f       	adc	r23, r24
    1e62:	89 1f       	adc	r24, r25
    1e64:	9a 1f       	adc	r25, r26
    1e66:	a1 1d       	adc	r26, r1
    1e68:	68 0f       	add	r22, r24
    1e6a:	79 1f       	adc	r23, r25
    1e6c:	8a 1f       	adc	r24, r26
    1e6e:	91 1d       	adc	r25, r1
    1e70:	a1 1d       	adc	r26, r1
    1e72:	6a 0f       	add	r22, r26
    1e74:	71 1d       	adc	r23, r1
    1e76:	81 1d       	adc	r24, r1
    1e78:	91 1d       	adc	r25, r1
    1e7a:	a1 1d       	adc	r26, r1
    1e7c:	20 d0       	rcall	.+64     	; 0x1ebe <__ultoa_invert+0x84>
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <__ultoa_invert+0x48>
    1e80:	68 94       	set
    1e82:	3f 91       	pop	r19
    1e84:	2a e0       	ldi	r18, 0x0A	; 10
    1e86:	26 9f       	mul	r18, r22
    1e88:	11 24       	eor	r1, r1
    1e8a:	30 19       	sub	r19, r0
    1e8c:	30 5d       	subi	r19, 0xD0	; 208
    1e8e:	31 93       	st	Z+, r19
    1e90:	de f6       	brtc	.-74     	; 0x1e48 <__ultoa_invert+0xe>
    1e92:	cf 01       	movw	r24, r30
    1e94:	08 95       	ret
    1e96:	46 2f       	mov	r20, r22
    1e98:	47 70       	andi	r20, 0x07	; 7
    1e9a:	40 5d       	subi	r20, 0xD0	; 208
    1e9c:	41 93       	st	Z+, r20
    1e9e:	b3 e0       	ldi	r27, 0x03	; 3
    1ea0:	0f d0       	rcall	.+30     	; 0x1ec0 <__ultoa_invert+0x86>
    1ea2:	c9 f7       	brne	.-14     	; 0x1e96 <__ultoa_invert+0x5c>
    1ea4:	f6 cf       	rjmp	.-20     	; 0x1e92 <__ultoa_invert+0x58>
    1ea6:	46 2f       	mov	r20, r22
    1ea8:	4f 70       	andi	r20, 0x0F	; 15
    1eaa:	40 5d       	subi	r20, 0xD0	; 208
    1eac:	4a 33       	cpi	r20, 0x3A	; 58
    1eae:	18 f0       	brcs	.+6      	; 0x1eb6 <__ultoa_invert+0x7c>
    1eb0:	49 5d       	subi	r20, 0xD9	; 217
    1eb2:	31 fd       	sbrc	r19, 1
    1eb4:	40 52       	subi	r20, 0x20	; 32
    1eb6:	41 93       	st	Z+, r20
    1eb8:	02 d0       	rcall	.+4      	; 0x1ebe <__ultoa_invert+0x84>
    1eba:	a9 f7       	brne	.-22     	; 0x1ea6 <__ultoa_invert+0x6c>
    1ebc:	ea cf       	rjmp	.-44     	; 0x1e92 <__ultoa_invert+0x58>
    1ebe:	b4 e0       	ldi	r27, 0x04	; 4
    1ec0:	a6 95       	lsr	r26
    1ec2:	97 95       	ror	r25
    1ec4:	87 95       	ror	r24
    1ec6:	77 95       	ror	r23
    1ec8:	67 95       	ror	r22
    1eca:	ba 95       	dec	r27
    1ecc:	c9 f7       	brne	.-14     	; 0x1ec0 <__ultoa_invert+0x86>
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	61 05       	cpc	r22, r1
    1ed2:	71 05       	cpc	r23, r1
    1ed4:	08 95       	ret
    1ed6:	9b 01       	movw	r18, r22
    1ed8:	ac 01       	movw	r20, r24
    1eda:	0a 2e       	mov	r0, r26
    1edc:	06 94       	lsr	r0
    1ede:	57 95       	ror	r21
    1ee0:	47 95       	ror	r20
    1ee2:	37 95       	ror	r19
    1ee4:	27 95       	ror	r18
    1ee6:	ba 95       	dec	r27
    1ee8:	c9 f7       	brne	.-14     	; 0x1edc <__ultoa_invert+0xa2>
    1eea:	62 0f       	add	r22, r18
    1eec:	73 1f       	adc	r23, r19
    1eee:	84 1f       	adc	r24, r20
    1ef0:	95 1f       	adc	r25, r21
    1ef2:	a0 1d       	adc	r26, r0
    1ef4:	08 95       	ret

00001ef6 <_exit>:
    1ef6:	f8 94       	cli

00001ef8 <__stop_program>:
    1ef8:	ff cf       	rjmp	.-2      	; 0x1ef8 <__stop_program>
