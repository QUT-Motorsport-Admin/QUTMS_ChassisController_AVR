
cc_merge2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000712  00800200  00001f44  00001fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018f  00800912  00800912  000026ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c13  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018bf  00000000  00000000  00007763  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000227e  00000000  00000000  00009022  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  0000b2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001298  00000000  00000000  0000be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000046bd  00000000  00000000  0000d118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  000117d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c0       	rjmp	.+492    	; 0x1ee <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_1>
       8:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_2>
       c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
      12:	00 00       	nop
      14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
      16:	00 00       	nop
      18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__vector_9>
      28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
      36:	00 00       	nop
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_17>
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_21>
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_25>
      68:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_26>
      6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
      6e:	00 00       	nop
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__vector_36>
      94:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__vector_37>
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
      be:	00 00       	nop
      c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a8 c0       	rjmp	.+336    	; 0x22a <__bad_interrupt>
      da:	00 00       	nop
      dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
      de:	00 00       	nop
      e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	16 02       	muls	r17, r22
      e6:	77 04       	cpc	r7, r7
      e8:	d3 02       	muls	r29, r19
      ea:	ee 02       	muls	r30, r30
      ec:	09 03       	fmul	r16, r17
      ee:	24 03       	mulsu	r18, r20
      f0:	3f 03       	fmul	r19, r23
      f2:	5a 03       	fmul	r21, r18
      f4:	75 03       	mulsu	r23, r21
      f6:	90 03       	fmuls	r17, r16
      f8:	ab 03       	fmulsu	r18, r19
      fa:	c6 03       	fmuls	r20, r22
      fc:	e1 03       	fmuls	r22, r17
      fe:	f3 03       	fmuls	r23, r19
     100:	05 04       	cpc	r0, r5
     102:	17 04       	cpc	r1, r7
     104:	29 04       	cpc	r2, r9
     106:	44 04       	cpc	r4, r4
     108:	5e 04       	cpc	r5, r14
     10a:	77 04       	cpc	r7, r7
     10c:	77 04       	cpc	r7, r7
     10e:	77 04       	cpc	r7, r7
     110:	77 04       	cpc	r7, r7
     112:	77 04       	cpc	r7, r7
     114:	77 04       	cpc	r7, r7
     116:	77 04       	cpc	r7, r7
     118:	77 04       	cpc	r7, r7
     11a:	77 04       	cpc	r7, r7
     11c:	77 04       	cpc	r7, r7
     11e:	77 04       	cpc	r7, r7
     120:	77 04       	cpc	r7, r7
     122:	77 04       	cpc	r7, r7
     124:	77 04       	cpc	r7, r7
     126:	77 04       	cpc	r7, r7
     128:	77 04       	cpc	r7, r7
     12a:	77 04       	cpc	r7, r7
     12c:	77 04       	cpc	r7, r7
     12e:	77 04       	cpc	r7, r7
     130:	77 04       	cpc	r7, r7
     132:	77 04       	cpc	r7, r7
     134:	77 04       	cpc	r7, r7
     136:	77 04       	cpc	r7, r7
     138:	77 04       	cpc	r7, r7
     13a:	77 04       	cpc	r7, r7
     13c:	77 04       	cpc	r7, r7
     13e:	77 04       	cpc	r7, r7
     140:	77 04       	cpc	r7, r7
     142:	77 04       	cpc	r7, r7
     144:	77 04       	cpc	r7, r7
     146:	77 04       	cpc	r7, r7
     148:	77 04       	cpc	r7, r7
     14a:	77 04       	cpc	r7, r7
     14c:	77 04       	cpc	r7, r7
     14e:	77 04       	cpc	r7, r7
     150:	77 04       	cpc	r7, r7
     152:	77 04       	cpc	r7, r7
     154:	77 04       	cpc	r7, r7
     156:	77 04       	cpc	r7, r7
     158:	77 04       	cpc	r7, r7
     15a:	77 04       	cpc	r7, r7
     15c:	77 04       	cpc	r7, r7
     15e:	77 04       	cpc	r7, r7
     160:	77 04       	cpc	r7, r7
     162:	77 04       	cpc	r7, r7
     164:	77 04       	cpc	r7, r7
     166:	77 04       	cpc	r7, r7
     168:	77 04       	cpc	r7, r7
     16a:	77 04       	cpc	r7, r7
     16c:	77 04       	cpc	r7, r7
     16e:	77 04       	cpc	r7, r7
     170:	77 04       	cpc	r7, r7
     172:	77 04       	cpc	r7, r7
     174:	77 04       	cpc	r7, r7
     176:	77 04       	cpc	r7, r7
     178:	77 04       	cpc	r7, r7
     17a:	77 04       	cpc	r7, r7
     17c:	77 04       	cpc	r7, r7
     17e:	77 04       	cpc	r7, r7
     180:	77 04       	cpc	r7, r7
     182:	77 04       	cpc	r7, r7
     184:	77 04       	cpc	r7, r7
     186:	77 04       	cpc	r7, r7
     188:	77 04       	cpc	r7, r7
     18a:	77 04       	cpc	r7, r7
     18c:	77 04       	cpc	r7, r7
     18e:	77 04       	cpc	r7, r7
     190:	77 04       	cpc	r7, r7
     192:	77 04       	cpc	r7, r7
     194:	77 04       	cpc	r7, r7
     196:	77 04       	cpc	r7, r7
     198:	77 04       	cpc	r7, r7
     19a:	77 04       	cpc	r7, r7
     19c:	77 04       	cpc	r7, r7
     19e:	77 04       	cpc	r7, r7
     1a0:	77 04       	cpc	r7, r7
     1a2:	77 04       	cpc	r7, r7
     1a4:	77 04       	cpc	r7, r7
     1a6:	77 04       	cpc	r7, r7
     1a8:	77 04       	cpc	r7, r7
     1aa:	77 04       	cpc	r7, r7
     1ac:	77 04       	cpc	r7, r7
     1ae:	77 04       	cpc	r7, r7
     1b0:	77 04       	cpc	r7, r7
     1b2:	77 04       	cpc	r7, r7
     1b4:	77 04       	cpc	r7, r7
     1b6:	77 04       	cpc	r7, r7
     1b8:	77 04       	cpc	r7, r7
     1ba:	77 04       	cpc	r7, r7
     1bc:	77 04       	cpc	r7, r7
     1be:	77 04       	cpc	r7, r7
     1c0:	77 04       	cpc	r7, r7
     1c2:	31 02       	muls	r19, r17
     1c4:	4c 02       	muls	r20, r28
     1c6:	77 04       	cpc	r7, r7
     1c8:	77 04       	cpc	r7, r7
     1ca:	77 04       	cpc	r7, r7
     1cc:	77 04       	cpc	r7, r7
     1ce:	77 04       	cpc	r7, r7
     1d0:	77 04       	cpc	r7, r7
     1d2:	77 04       	cpc	r7, r7
     1d4:	77 04       	cpc	r7, r7
     1d6:	67 02       	muls	r22, r23
     1d8:	82 02       	muls	r24, r18
     1da:	77 04       	cpc	r7, r7
     1dc:	77 04       	cpc	r7, r7
     1de:	77 04       	cpc	r7, r7
     1e0:	77 04       	cpc	r7, r7
     1e2:	77 04       	cpc	r7, r7
     1e4:	77 04       	cpc	r7, r7
     1e6:	77 04       	cpc	r7, r7
     1e8:	77 04       	cpc	r7, r7
     1ea:	9d 02       	muls	r25, r29
     1ec:	b8 02       	muls	r27, r24

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d1 e2       	ldi	r29, 0x21	; 33
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	19 e0       	ldi	r17, 0x09	; 9
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b2 e0       	ldi	r27, 0x02	; 2
     200:	e4 e4       	ldi	r30, 0x44	; 68
     202:	ff e1       	ldi	r31, 0x1F	; 31
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a2 31       	cpi	r26, 0x12	; 18
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	2a e0       	ldi	r18, 0x0A	; 10
     216:	a2 e1       	ldi	r26, 0x12	; 18
     218:	b9 e0       	ldi	r27, 0x09	; 9
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a1 3a       	cpi	r26, 0xA1	; 161
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	1e d6       	rcall	.+3132   	; 0xe62 <main>
     226:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <a2dOn>:
// starts conversion, waits until conversion is done, and returns result
unsigned char a2d_8bit()
{
	// do 10-bit conversion and return highest 8 bits
	return a2d_10bit()>>2;			// return ADC MSB byte
}
     22c:	ea e7       	ldi	r30, 0x7A	; 122
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	80 68       	ori	r24, 0x80	; 128
     234:	80 83       	st	Z, r24
     236:	08 95       	ret

00000238 <a2dSetPrescaler>:
     238:	ea e7       	ldi	r30, 0x7A	; 122
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	90 81       	ld	r25, Z
     23e:	98 7f       	andi	r25, 0xF8	; 248
     240:	90 83       	st	Z, r25
     242:	90 81       	ld	r25, Z
     244:	89 2b       	or	r24, r25
     246:	80 83       	st	Z, r24
     248:	08 95       	ret

0000024a <a2dSetReference>:
     24a:	ec e7       	ldi	r30, 0x7C	; 124
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	90 81       	ld	r25, Z
     250:	9c 7f       	andi	r25, 0xFC	; 252
     252:	90 83       	st	Z, r25
     254:	20 81       	ld	r18, Z
     256:	30 e4       	ldi	r19, 0x40	; 64
     258:	83 9f       	mul	r24, r19
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	82 2b       	or	r24, r18
     260:	80 83       	st	Z, r24
     262:	08 95       	ret

00000264 <a2dInit>:
     264:	cf 93       	push	r28
     266:	c6 2f       	mov	r28, r22
     268:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     26c:	ec e7       	ldi	r30, 0x7C	; 124
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	90 81       	ld	r25, Z
     272:	9f 7d       	andi	r25, 0xDF	; 223
     274:	90 83       	st	Z, r25
     276:	e0 df       	rcall	.-64     	; 0x238 <a2dSetPrescaler>
     278:	8c 2f       	mov	r24, r28
     27a:	e7 df       	rcall	.-50     	; 0x24a <a2dSetReference>
     27c:	d7 df       	rcall	.-82     	; 0x22c <a2dOn>
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <a2d_10bitCh>:
// starts conversion, waits until conversion is done, and returns result
// modded for mega1280 by Ant
unsigned short a2d_10bitCh(unsigned char ch)
{
	// set channel
	ADMUX &= ADC_MUX_MASK;	
     282:	ec e7       	ldi	r30, 0x7C	; 124
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	90 81       	ld	r25, Z
     288:	90 7e       	andi	r25, 0xE0	; 224
     28a:	90 83       	st	Z, r25
	
	if (ch > 7) 
     28c:	88 30       	cpi	r24, 0x08	; 8
     28e:	60 f0       	brcs	.+24     	; 0x2a8 <a2d_10bitCh+0x26>
	{
		ADCSRB |= 8;
     290:	eb e7       	ldi	r30, 0x7B	; 123
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	90 81       	ld	r25, Z
     296:	98 60       	ori	r25, 0x08	; 8
     298:	90 83       	st	Z, r25
		ADMUX |= (ch - 8);
     29a:	ec e7       	ldi	r30, 0x7C	; 124
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	90 81       	ld	r25, Z
     2a0:	88 50       	subi	r24, 0x08	; 8
     2a2:	89 2b       	or	r24, r25
     2a4:	80 83       	st	Z, r24
     2a6:	0a c0       	rjmp	.+20     	; 0x2bc <a2d_10bitCh+0x3a>
	}
	else
	{
		ADCSRB &= 247;
     2a8:	eb e7       	ldi	r30, 0x7B	; 123
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	90 81       	ld	r25, Z
     2ae:	97 7f       	andi	r25, 0xF7	; 247
     2b0:	90 83       	st	Z, r25
		ADMUX |= ch;
     2b2:	ec e7       	ldi	r30, 0x7C	; 124
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	90 81       	ld	r25, Z
     2b8:	89 2b       	or	r24, r25
     2ba:	80 83       	st	Z, r24
	}
	
	// ADMUX |= ch;	//comment out this line when using on 16ch parts

	// start conversion
	ADCSRA |= (1<<ADSC);
     2bc:	ea e7       	ldi	r30, 0x7A	; 122
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC)) {} // wait until conversion complete 
     2c6:	80 81       	ld	r24, Z
     2c8:	86 fd       	sbrc	r24, 6
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <a2d_10bitCh+0x44>

	return ADC;                // read ADC (full 10 bits);
     2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// return (8 << ADCH)|(ADCL); // read ADC (full 10 bits);
    // return ADCL;                // read ADC (first 8 bits)
}
     2d4:	08 95       	ret

000002d6 <a2d_8bitCh>:
// Perform a 8-bit conversion on given channel
// starts conversion, waits until conversion is done, and returns result
unsigned char a2d_8bitCh(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2d_10bitCh(ch)>>2;			// return ADC MSB byte
     2d6:	d5 df       	rcall	.-86     	; 0x282 <a2d_10bitCh>
     2d8:	96 95       	lsr	r25
     2da:	87 95       	ror	r24
     2dc:	96 95       	lsr	r25
     2de:	87 95       	ror	r24
}
     2e0:	08 95       	ret

000002e2 <CAN_send>:
        sendingID|                  // Sending ID, ( First 8 bits, define the device to send to)
        ((uint32_t)type<<18)|       // What sort of command to send
        ((uint32_t)address<<13)|    // Specific address
        status                      // SubID?
    );
}
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	c8 2f       	mov	r28, r24
     2fc:	d6 2f       	mov	r29, r22
     2fe:	6a 01       	movw	r12, r20
     300:	48 01       	movw	r8, r16
     302:	59 01       	movw	r10, r18
     304:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <MCP2515_findFreeTxBuffer>
     308:	85 01       	movw	r16, r10
     30a:	74 01       	movw	r14, r8
     30c:	96 01       	movw	r18, r12
     30e:	4d 2f       	mov	r20, r29
     310:	68 2f       	mov	r22, r24
     312:	8c 2f       	mov	r24, r28
     314:	0e 94 97 0a 	call	0x152e	; 0x152e <MCP2515_TX>
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	bf 90       	pop	r11
     32a:	af 90       	pop	r10
     32c:	9f 90       	pop	r9
     32e:	8f 90       	pop	r8
     330:	08 95       	ret

00000332 <CAN_pull_packet>:

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
     332:	af 92       	push	r10
     334:	bf 92       	push	r11
     336:	cf 92       	push	r12
     338:	df 92       	push	r13
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	c8 2f       	mov	r28, r24
     346:	7b 01       	movw	r14, r22
     348:	6a 01       	movw	r12, r20
     34a:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
     34c:	0e 94 14 0b 	call	0x1628	; 0x1628 <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
     350:	82 95       	swap	r24
     352:	86 95       	lsr	r24
     354:	86 95       	lsr	r24
     356:	83 70       	andi	r24, 0x03	; 3
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	61 f0       	breq	.+24     	; 0x374 <CAN_pull_packet+0x42>
     35c:	83 30       	cpi	r24, 0x03	; 3
     35e:	91 f0       	breq	.+36     	; 0x384 <CAN_pull_packet+0x52>
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	e9 f4       	brne	.+58     	; 0x39e <CAN_pull_packet+0x6c>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     364:	85 01       	movw	r16, r10
     366:	96 01       	movw	r18, r12
     368:	a7 01       	movw	r20, r14
     36a:	61 e6       	ldi	r22, 0x61	; 97
     36c:	8c 2f       	mov	r24, r28
     36e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MCP2515_PullCanPacket>
			break;
     372:	15 c0       	rjmp	.+42     	; 0x39e <CAN_pull_packet+0x6c>
		case 2: // Message in RXB1=
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
     374:	85 01       	movw	r16, r10
     376:	96 01       	movw	r18, r12
     378:	a7 01       	movw	r20, r14
     37a:	61 e7       	ldi	r22, 0x71	; 113
     37c:	8c 2f       	mov	r24, r28
     37e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MCP2515_PullCanPacket>
			break;
     382:	0d c0       	rjmp	.+26     	; 0x39e <CAN_pull_packet+0x6c>
		case 3: // Message in both buffers
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     384:	85 01       	movw	r16, r10
     386:	96 01       	movw	r18, r12
     388:	a7 01       	movw	r20, r14
     38a:	61 e6       	ldi	r22, 0x61	; 97
     38c:	8c 2f       	mov	r24, r28
     38e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
     392:	96 01       	movw	r18, r12
     394:	a7 01       	movw	r20, r14
     396:	61 e7       	ldi	r22, 0x71	; 113
     398:	8c 2f       	mov	r24, r28
     39a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MCP2515_PullCanPacket>
			break;
		default:
			break;
	}
}
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	cf 90       	pop	r12
     3ac:	bf 90       	pop	r11
     3ae:	af 90       	pop	r10
     3b0:	08 95       	ret

000003b2 <send_error_message>:
 * Returns: none
 * 
 * Formats a 50-character long log message, and sends it over UART.
 * */
void send_error_message(char start[], char message[], uint16_t part_number) 
{
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	18 2f       	mov	r17, r24
     3bc:	09 2f       	mov	r16, r25
	unsigned char *messageWithNumber;
	unsigned char *errorData;
	
	// Format error message with part number if given
	snprintf(messageWithNumber, MAX_ERROR_MESSAGE_LENGTH, message, part_number);
     3be:	5f 93       	push	r21
     3c0:	4f 93       	push	r20
     3c2:	7f 93       	push	r23
     3c4:	6f 93       	push	r22
     3c6:	1f 92       	push	r1
     3c8:	88 e2       	ldi	r24, 0x28	; 40
     3ca:	8f 93       	push	r24
     3cc:	d0 e0       	ldi	r29, 0x00	; 0
     3ce:	df 93       	push	r29
     3d0:	c0 e0       	ldi	r28, 0x00	; 0
     3d2:	cf 93       	push	r28
     3d4:	0e 94 89 0c 	call	0x1912	; 0x1912 <snprintf>

	// Create error data
	snprintf(errorData, MAX_ERROR_MESSAGE_LENGTH + 10, "%s %s", start, messageWithNumber);
     3d8:	df 93       	push	r29
     3da:	cf 93       	push	r28
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	87 e2       	ldi	r24, 0x27	; 39
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	9f 93       	push	r25
     3e6:	8f 93       	push	r24
     3e8:	1f 92       	push	r1
     3ea:	82 e3       	ldi	r24, 0x32	; 50
     3ec:	8f 93       	push	r24
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	0e 94 89 0c 	call	0x1912	; 0x1912 <snprintf>
	
	// Send error data over UART
	UART_sendPacket(errorData, MAX_ERROR_MESSAGE_LENGTH + 10);
     3f6:	62 e3       	ldi	r22, 0x32	; 50
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	8d 2f       	mov	r24, r29
     3fc:	9c 2f       	mov	r25, r28
     3fe:	b5 d4       	rcall	.+2410   	; 0xd6a <UART_sendPacket>
}
     400:	8d b7       	in	r24, 0x3d	; 61
     402:	9e b7       	in	r25, 0x3e	; 62
     404:	42 96       	adiw	r24, 0x12	; 18
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	9e bf       	out	0x3e, r25	; 62
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	8d bf       	out	0x3d, r24	; 61
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	08 95       	ret

0000041a <throw_error_code_with_number>:
 * Generates an error message, and takes the necessary actions depending on the severity and error
 * 
 * */
void throw_error_code_with_number(uint16_t severity, uint16_t error_code, uint16_t part_number) 
{
	switch (error_code) {
     41a:	65 38       	cpi	r22, 0x85	; 133
     41c:	71 05       	cpc	r23, r1
     41e:	08 f0       	brcs	.+2      	; 0x422 <throw_error_code_with_number+0x8>
     420:	66 c2       	rjmp	.+1228   	; 0x8ee <throw_error_code_with_number+0x4d4>
     422:	fb 01       	movw	r30, r22
     424:	ee 58       	subi	r30, 0x8E	; 142
     426:	ff 4f       	sbci	r31, 0xFF	; 255
     428:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__tablejump2__>
		// 		break;
		//     }			
		// break;

        case ERROR_GENERAL:					
			switch (severity) {
     42c:	82 30       	cpi	r24, 0x02	; 2
     42e:	91 05       	cpc	r25, r1
     430:	61 f0       	breq	.+24     	; 0x44a <throw_error_code_with_number+0x30>
     432:	83 30       	cpi	r24, 0x03	; 3
     434:	91 05       	cpc	r25, r1
     436:	79 f0       	breq	.+30     	; 0x456 <throw_error_code_with_number+0x3c>
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	09 f0       	breq	.+2      	; 0x43e <throw_error_code_with_number+0x24>
     43c:	58 c2       	rjmp	.+1200   	; 0x8ee <throw_error_code_with_number+0x4d4>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Error", part_number);
     43e:	6d e2       	ldi	r22, 0x2D	; 45
     440:	72 e0       	ldi	r23, 0x02	; 2
     442:	83 e3       	ldi	r24, 0x33	; 51
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	b5 cf       	rjmp	.-150    	; 0x3b2 <send_error_message>
				// Additional Info Handling
				break;
     448:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Error!", part_number);
     44a:	68 e3       	ldi	r22, 0x38	; 56
     44c:	72 e0       	ldi	r23, 0x02	; 2
     44e:	8f e3       	ldi	r24, 0x3F	; 63
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	af cf       	rjmp	.-162    	; 0x3b2 <send_error_message>
				// Additional Warning Handling
				break;
     454:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "ERROR", part_number);
     456:	69 e4       	ldi	r22, 0x49	; 73
     458:	72 e0       	ldi	r23, 0x02	; 2
     45a:	8f e4       	ldi	r24, 0x4F	; 79
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	a9 cf       	rjmp	.-174    	; 0x3b2 <send_error_message>
				// Additional Error Handling
				break;
     460:	08 95       	ret

        // CANBUS based errors
        // --------------------------------------------------------------------

        case ERROR_CANBUS_1_NO_RESPONSE:					
			switch (severity) {
     462:	82 30       	cpi	r24, 0x02	; 2
     464:	91 05       	cpc	r25, r1
     466:	61 f0       	breq	.+24     	; 0x480 <throw_error_code_with_number+0x66>
     468:	83 30       	cpi	r24, 0x03	; 3
     46a:	91 05       	cpc	r25, r1
     46c:	79 f0       	breq	.+30     	; 0x48c <throw_error_code_with_number+0x72>
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	09 f0       	breq	.+2      	; 0x474 <throw_error_code_with_number+0x5a>
     472:	3d c2       	rjmp	.+1146   	; 0x8ee <throw_error_code_with_number+0x4d4>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 No Response", part_number);
     474:	69 e5       	ldi	r22, 0x59	; 89
     476:	72 e0       	ldi	r23, 0x02	; 2
     478:	83 e3       	ldi	r24, 0x33	; 51
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	9a cf       	rjmp	.-204    	; 0x3b2 <send_error_message>
				// Additional Info Handling
				break;
     47e:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 No Response!", part_number);
     480:	6e e6       	ldi	r22, 0x6E	; 110
     482:	72 e0       	ldi	r23, 0x02	; 2
     484:	8f e3       	ldi	r24, 0x3F	; 63
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	94 cf       	rjmp	.-216    	; 0x3b2 <send_error_message>
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL NO RESPONSE", part_number);
     48a:	08 95       	ret
     48c:	64 e8       	ldi	r22, 0x84	; 132
     48e:	72 e0       	ldi	r23, 0x02	; 2
     490:	8f e4       	ldi	r24, 0x4F	; 79
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	8e cf       	rjmp	.-228    	; 0x3b2 <send_error_message>
				// Additional Error Handling
				break;
     496:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_1_RESPONSE_MALFORMED:					
			switch (severity) {
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	91 05       	cpc	r25, r1
     49c:	61 f0       	breq	.+24     	; 0x4b6 <throw_error_code_with_number+0x9c>
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	91 05       	cpc	r25, r1
     4a2:	79 f0       	breq	.+30     	; 0x4c2 <throw_error_code_with_number+0xa8>
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	09 f0       	breq	.+2      	; 0x4aa <throw_error_code_with_number+0x90>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 Malformed Packet", part_number);
     4a8:	22 c2       	rjmp	.+1092   	; 0x8ee <throw_error_code_with_number+0x4d4>
     4aa:	62 ea       	ldi	r22, 0xA2	; 162
     4ac:	72 e0       	ldi	r23, 0x02	; 2
     4ae:	83 e3       	ldi	r24, 0x33	; 51
     4b0:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     4b2:	7f cf       	rjmp	.-258    	; 0x3b2 <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 Malformed Packet!", part_number);
     4b4:	08 95       	ret
     4b6:	6c eb       	ldi	r22, 0xBC	; 188
     4b8:	72 e0       	ldi	r23, 0x02	; 2
     4ba:	8f e3       	ldi	r24, 0x3F	; 63
     4bc:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4be:	79 cf       	rjmp	.-270    	; 0x3b2 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL MALFORMED PACKET", part_number);
     4c0:	08 95       	ret
     4c2:	67 ed       	ldi	r22, 0xD7	; 215
     4c4:	72 e0       	ldi	r23, 0x02	; 2
     4c6:	8f e4       	ldi	r24, 0x4F	; 79
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	73 cf       	rjmp	.-282    	; 0x3b2 <send_error_message>
				// Additional Error Handling
				break;
     4cc:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_NO_RESPONSE:					
			switch (severity) {
     4ce:	82 30       	cpi	r24, 0x02	; 2
     4d0:	91 05       	cpc	r25, r1
     4d2:	61 f0       	breq	.+24     	; 0x4ec <throw_error_code_with_number+0xd2>
     4d4:	83 30       	cpi	r24, 0x03	; 3
     4d6:	91 05       	cpc	r25, r1
     4d8:	79 f0       	breq	.+30     	; 0x4f8 <throw_error_code_with_number+0xde>
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	09 f0       	breq	.+2      	; 0x4e0 <throw_error_code_with_number+0xc6>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 No Response", part_number);
     4de:	07 c2       	rjmp	.+1038   	; 0x8ee <throw_error_code_with_number+0x4d4>
     4e0:	6a ef       	ldi	r22, 0xFA	; 250
     4e2:	72 e0       	ldi	r23, 0x02	; 2
     4e4:	83 e3       	ldi	r24, 0x33	; 51
     4e6:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     4e8:	64 cf       	rjmp	.-312    	; 0x3b2 <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 No Response!", part_number);
     4ea:	08 95       	ret
     4ec:	6f e0       	ldi	r22, 0x0F	; 15
     4ee:	73 e0       	ldi	r23, 0x03	; 3
     4f0:	8f e3       	ldi	r24, 0x3F	; 63
     4f2:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4f4:	5e cf       	rjmp	.-324    	; 0x3b2 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL NO RESPONSE", part_number);
     4f6:	08 95       	ret
     4f8:	65 e2       	ldi	r22, 0x25	; 37
     4fa:	73 e0       	ldi	r23, 0x03	; 3
     4fc:	8f e4       	ldi	r24, 0x4F	; 79
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	58 cf       	rjmp	.-336    	; 0x3b2 <send_error_message>
				// Additional Error Handling
				break;
     502:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_RESPONSE_MALFORMED:					
			switch (severity) {
     504:	82 30       	cpi	r24, 0x02	; 2
     506:	91 05       	cpc	r25, r1
     508:	61 f0       	breq	.+24     	; 0x522 <throw_error_code_with_number+0x108>
     50a:	83 30       	cpi	r24, 0x03	; 3
     50c:	91 05       	cpc	r25, r1
     50e:	79 f0       	breq	.+30     	; 0x52e <throw_error_code_with_number+0x114>
     510:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 Malformed Packet", part_number);
     512:	09 f0       	breq	.+2      	; 0x516 <throw_error_code_with_number+0xfc>
     514:	ec c1       	rjmp	.+984    	; 0x8ee <throw_error_code_with_number+0x4d4>
     516:	63 e4       	ldi	r22, 0x43	; 67
     518:	73 e0       	ldi	r23, 0x03	; 3
     51a:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     51c:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 Malformed Packet!", part_number);
     51e:	49 cf       	rjmp	.-366    	; 0x3b2 <send_error_message>
     520:	08 95       	ret
     522:	6d e5       	ldi	r22, 0x5D	; 93
     524:	73 e0       	ldi	r23, 0x03	; 3
     526:	8f e3       	ldi	r24, 0x3F	; 63
     528:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     52a:	43 cf       	rjmp	.-378    	; 0x3b2 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL MALFORMED PACKET", part_number);
     52c:	08 95       	ret
     52e:	68 e7       	ldi	r22, 0x78	; 120
     530:	73 e0       	ldi	r23, 0x03	; 3
     532:	8f e4       	ldi	r24, 0x4F	; 79
     534:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     536:	3d cf       	rjmp	.-390    	; 0x3b2 <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_NO_RESPONSE:					
			switch (severity) {
     538:	08 95       	ret
     53a:	82 30       	cpi	r24, 0x02	; 2
     53c:	91 05       	cpc	r25, r1
     53e:	61 f0       	breq	.+24     	; 0x558 <throw_error_code_with_number+0x13e>
     540:	83 30       	cpi	r24, 0x03	; 3
     542:	91 05       	cpc	r25, r1
     544:	79 f0       	breq	.+30     	; 0x564 <throw_error_code_with_number+0x14a>
     546:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 No Response", part_number);
     548:	09 f0       	breq	.+2      	; 0x54c <throw_error_code_with_number+0x132>
     54a:	d1 c1       	rjmp	.+930    	; 0x8ee <throw_error_code_with_number+0x4d4>
     54c:	6b e9       	ldi	r22, 0x9B	; 155
     54e:	73 e0       	ldi	r23, 0x03	; 3
     550:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     552:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 No Response!", part_number);
     554:	2e cf       	rjmp	.-420    	; 0x3b2 <send_error_message>
     556:	08 95       	ret
     558:	60 eb       	ldi	r22, 0xB0	; 176
     55a:	73 e0       	ldi	r23, 0x03	; 3
     55c:	8f e3       	ldi	r24, 0x3F	; 63
     55e:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     560:	28 cf       	rjmp	.-432    	; 0x3b2 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL NO RESPONSE", part_number);
     562:	08 95       	ret
     564:	66 ec       	ldi	r22, 0xC6	; 198
     566:	73 e0       	ldi	r23, 0x03	; 3
     568:	8f e4       	ldi	r24, 0x4F	; 79
     56a:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     56c:	22 cf       	rjmp	.-444    	; 0x3b2 <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_RESPONSE_MALFORMED:					
			switch (severity) {
     56e:	08 95       	ret
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	91 05       	cpc	r25, r1
     574:	61 f0       	breq	.+24     	; 0x58e <throw_error_code_with_number+0x174>
     576:	83 30       	cpi	r24, 0x03	; 3
     578:	91 05       	cpc	r25, r1
     57a:	79 f0       	breq	.+30     	; 0x59a <throw_error_code_with_number+0x180>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 Malformed Packet", part_number);
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	09 f0       	breq	.+2      	; 0x582 <throw_error_code_with_number+0x168>
     580:	b6 c1       	rjmp	.+876    	; 0x8ee <throw_error_code_with_number+0x4d4>
     582:	64 ee       	ldi	r22, 0xE4	; 228
     584:	73 e0       	ldi	r23, 0x03	; 3
     586:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     588:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 Malformed Packet!", part_number);
     58a:	13 cf       	rjmp	.-474    	; 0x3b2 <send_error_message>
     58c:	08 95       	ret
     58e:	6e ef       	ldi	r22, 0xFE	; 254
     590:	73 e0       	ldi	r23, 0x03	; 3
     592:	8f e3       	ldi	r24, 0x3F	; 63
     594:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL MALFORMED PACKET", part_number);
     596:	0d cf       	rjmp	.-486    	; 0x3b2 <send_error_message>
     598:	08 95       	ret
     59a:	69 e1       	ldi	r22, 0x19	; 25
     59c:	74 e0       	ldi	r23, 0x04	; 4
     59e:	8f e4       	ldi	r24, 0x4F	; 79
				// Additional Error Handling
				break;
     5a0:	92 e0       	ldi	r25, 0x02	; 2

        // Sensor based errors
        // --------------------------------------------------------------------

		case ERROR_GEARBOX_TEMPERATURE_LOW:					
			switch (severity) {
     5a2:	07 cf       	rjmp	.-498    	; 0x3b2 <send_error_message>
     5a4:	08 95       	ret
     5a6:	82 30       	cpi	r24, 0x02	; 2
     5a8:	91 05       	cpc	r25, r1
     5aa:	61 f0       	breq	.+24     	; 0x5c4 <throw_error_code_with_number+0x1aa>
     5ac:	83 30       	cpi	r24, 0x03	; 3
     5ae:	91 05       	cpc	r25, r1
     5b0:	79 f0       	breq	.+30     	; 0x5d0 <throw_error_code_with_number+0x1b6>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <throw_error_code_with_number+0x19e>
     5b6:	9b c1       	rjmp	.+822    	; 0x8ee <throw_error_code_with_number+0x4d4>
     5b8:	6c e3       	ldi	r22, 0x3C	; 60
     5ba:	74 e0       	ldi	r23, 0x04	; 4
     5bc:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     5be:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally Low!", part_number);
     5c0:	f8 ce       	rjmp	.-528    	; 0x3b2 <send_error_message>
     5c2:	08 95       	ret
     5c4:	6a e5       	ldi	r22, 0x5A	; 90
     5c6:	74 e0       	ldi	r23, 0x04	; 4
     5c8:	8f e3       	ldi	r24, 0x3F	; 63
				// Additional Warning Handling
				break;
     5ca:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY LOW", part_number);
     5cc:	f2 ce       	rjmp	.-540    	; 0x3b2 <send_error_message>
     5ce:	08 95       	ret
     5d0:	61 e8       	ldi	r22, 0x81	; 129
     5d2:	74 e0       	ldi	r23, 0x04	; 4
     5d4:	8f e4       	ldi	r24, 0x4F	; 79
				// Additional Error Handling
				break;
     5d6:	92 e0       	ldi	r25, 0x02	; 2
			}			
		break;

		case ERROR_GEARBOX_TEMPERATURE_HIGH:					
			switch (severity) {
     5d8:	ec ce       	rjmp	.-552    	; 0x3b2 <send_error_message>
     5da:	08 95       	ret
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	91 05       	cpc	r25, r1
     5e0:	61 f0       	breq	.+24     	; 0x5fa <throw_error_code_with_number+0x1e0>
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	91 05       	cpc	r25, r1
     5e6:	79 f0       	breq	.+30     	; 0x606 <throw_error_code_with_number+0x1ec>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	09 f0       	breq	.+2      	; 0x5ee <throw_error_code_with_number+0x1d4>
     5ec:	80 c1       	rjmp	.+768    	; 0x8ee <throw_error_code_with_number+0x4d4>
     5ee:	6c e3       	ldi	r22, 0x3C	; 60
     5f0:	74 e0       	ldi	r23, 0x04	; 4
     5f2:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     5f4:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally High!", part_number);
     5f6:	dd ce       	rjmp	.-582    	; 0x3b2 <send_error_message>
     5f8:	08 95       	ret
     5fa:	67 ea       	ldi	r22, 0xA7	; 167
     5fc:	74 e0       	ldi	r23, 0x04	; 4
     5fe:	8f e3       	ldi	r24, 0x3F	; 63
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY HIGH", part_number);
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	d7 ce       	rjmp	.-594    	; 0x3b2 <send_error_message>
     604:	08 95       	ret
     606:	6f ec       	ldi	r22, 0xCF	; 207
     608:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Error Handling
				break;
     60a:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_LOW:					
			switch (severity) {
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	d1 ce       	rjmp	.-606    	; 0x3b2 <send_error_message>
     610:	08 95       	ret
     612:	82 30       	cpi	r24, 0x02	; 2
     614:	91 05       	cpc	r25, r1
     616:	61 f0       	breq	.+24     	; 0x630 <throw_error_code_with_number+0x216>
     618:	83 30       	cpi	r24, 0x03	; 3
     61a:	91 05       	cpc	r25, r1
     61c:	79 f0       	breq	.+30     	; 0x63c <throw_error_code_with_number+0x222>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	09 f0       	breq	.+2      	; 0x624 <throw_error_code_with_number+0x20a>
     622:	65 c1       	rjmp	.+714    	; 0x8ee <throw_error_code_with_number+0x4d4>
     624:	66 ef       	ldi	r22, 0xF6	; 246
     626:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Info Handling
				break;
     628:	83 e3       	ldi	r24, 0x33	; 51

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally Low!", part_number);
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	c2 ce       	rjmp	.-636    	; 0x3b2 <send_error_message>
     62e:	08 95       	ret
     630:	65 e1       	ldi	r22, 0x15	; 21
     632:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;
     634:	8f e3       	ldi	r24, 0x3F	; 63

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY LOW", part_number);
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	bc ce       	rjmp	.-648    	; 0x3b2 <send_error_message>
     63a:	08 95       	ret
     63c:	6d e3       	ldi	r22, 0x3D	; 61
     63e:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     640:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_HIGH:					
			switch (severity) {
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	b6 ce       	rjmp	.-660    	; 0x3b2 <send_error_message>
     646:	08 95       	ret
     648:	82 30       	cpi	r24, 0x02	; 2
     64a:	91 05       	cpc	r25, r1
     64c:	61 f0       	breq	.+24     	; 0x666 <throw_error_code_with_number+0x24c>
     64e:	83 30       	cpi	r24, 0x03	; 3
     650:	91 05       	cpc	r25, r1
     652:	79 f0       	breq	.+30     	; 0x672 <throw_error_code_with_number+0x258>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	09 f0       	breq	.+2      	; 0x65a <throw_error_code_with_number+0x240>
     658:	4a c1       	rjmp	.+660    	; 0x8ee <throw_error_code_with_number+0x4d4>
     65a:	66 ef       	ldi	r22, 0xF6	; 246
     65c:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Info Handling
				break;
     65e:	83 e3       	ldi	r24, 0x33	; 51

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally High!", part_number);
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	a7 ce       	rjmp	.-690    	; 0x3b2 <send_error_message>
     664:	08 95       	ret
     666:	64 e6       	ldi	r22, 0x64	; 100
     668:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY HIGH", part_number);
     66a:	8f e3       	ldi	r24, 0x3F	; 63
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	a1 ce       	rjmp	.-702    	; 0x3b2 <send_error_message>
     670:	08 95       	ret
     672:	6d e8       	ldi	r22, 0x8D	; 141
     674:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     676:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_BRAKES_PRESSURE_LOW:					
			switch (severity) {
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	9b ce       	rjmp	.-714    	; 0x3b2 <send_error_message>
     67c:	08 95       	ret
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	91 05       	cpc	r25, r1
     682:	61 f0       	breq	.+24     	; 0x69c <throw_error_code_with_number+0x282>
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     688:	79 f0       	breq	.+30     	; 0x6a8 <throw_error_code_with_number+0x28e>
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	09 f0       	breq	.+2      	; 0x690 <throw_error_code_with_number+0x276>
     68e:	2f c1       	rjmp	.+606    	; 0x8ee <throw_error_code_with_number+0x4d4>
     690:	65 eb       	ldi	r22, 0xB5	; 181
				// Additional Info Handling
				break;
     692:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally Low!", part_number);
     694:	83 e3       	ldi	r24, 0x33	; 51
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	8c ce       	rjmp	.-744    	; 0x3b2 <send_error_message>
     69a:	08 95       	ret
     69c:	6f ec       	ldi	r22, 0xCF	; 207
				// Additional Warning Handling
				break;
     69e:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY LOW", part_number);
     6a0:	8f e3       	ldi	r24, 0x3F	; 63
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	86 ce       	rjmp	.-756    	; 0x3b2 <send_error_message>
     6a6:	08 95       	ret
     6a8:	62 ef       	ldi	r22, 0xF2	; 242
     6aa:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     6ac:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_BRAKES_PRESSURE_HIGH:					
			switch (severity) {
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	80 ce       	rjmp	.-768    	; 0x3b2 <send_error_message>
     6b2:	08 95       	ret
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	91 05       	cpc	r25, r1
     6b8:	61 f0       	breq	.+24     	; 0x6d2 <throw_error_code_with_number+0x2b8>
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6be:	79 f0       	breq	.+30     	; 0x6de <throw_error_code_with_number+0x2c4>
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <throw_error_code_with_number+0x2ac>
     6c4:	14 c1       	rjmp	.+552    	; 0x8ee <throw_error_code_with_number+0x4d4>
     6c6:	65 eb       	ldi	r22, 0xB5	; 181
				// Additional Info Handling
				break;
     6c8:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     6ca:	83 e3       	ldi	r24, 0x33	; 51
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	71 ce       	rjmp	.-798    	; 0x3b2 <send_error_message>
     6d0:	08 95       	ret
     6d2:	64 e1       	ldi	r22, 0x14	; 20
				// Additional Warning Handling
				break;
     6d4:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     6d6:	8f e3       	ldi	r24, 0x3F	; 63
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	6b ce       	rjmp	.-810    	; 0x3b2 <send_error_message>
     6dc:	08 95       	ret
     6de:	68 e3       	ldi	r22, 0x38	; 56
     6e0:	76 e0       	ldi	r23, 0x06	; 6
				// Additional Error Handling
				break;
     6e2:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

        case ERROR_BRAKES_PRESSURE:					
			switch (severity) {
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	65 ce       	rjmp	.-822    	; 0x3b2 <send_error_message>
     6e8:	08 95       	ret
     6ea:	82 30       	cpi	r24, 0x02	; 2
     6ec:	91 05       	cpc	r25, r1
     6ee:	61 f0       	breq	.+24     	; 0x708 <throw_error_code_with_number+0x2ee>
     6f0:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6f2:	91 05       	cpc	r25, r1
     6f4:	79 f0       	breq	.+30     	; 0x714 <throw_error_code_with_number+0x2fa>
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	09 f0       	breq	.+2      	; 0x6fc <throw_error_code_with_number+0x2e2>
     6fa:	f9 c0       	rjmp	.+498    	; 0x8ee <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     6fc:	65 eb       	ldi	r22, 0xB5	; 181

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Warnning!", part_number);
     6fe:	75 e0       	ldi	r23, 0x05	; 5
     700:	83 e3       	ldi	r24, 0x33	; 51
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	56 ce       	rjmp	.-852    	; 0x3b2 <send_error_message>
     706:	08 95       	ret
     708:	6b e5       	ldi	r22, 0x5B	; 91
				// Additional Warning Handling
				break;
     70a:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICAL!", part_number);
     70c:	8f e3       	ldi	r24, 0x3F	; 63
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	50 ce       	rjmp	.-864    	; 0x3b2 <send_error_message>
     712:	08 95       	ret
     714:	68 e7       	ldi	r22, 0x78	; 120
				// Additional Error Handling
				break;
     716:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_LOW:					
			switch (severity) {
     718:	8f e4       	ldi	r24, 0x4F	; 79
     71a:	92 e0       	ldi	r25, 0x02	; 2
     71c:	4a ce       	rjmp	.-876    	; 0x3b2 <send_error_message>
     71e:	08 95       	ret
     720:	82 30       	cpi	r24, 0x02	; 2
     722:	91 05       	cpc	r25, r1
     724:	61 f0       	breq	.+24     	; 0x73e <throw_error_code_with_number+0x324>
     726:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     728:	91 05       	cpc	r25, r1
     72a:	79 f0       	breq	.+30     	; 0x74a <throw_error_code_with_number+0x330>
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	09 f0       	breq	.+2      	; 0x732 <throw_error_code_with_number+0x318>
     730:	de c0       	rjmp	.+444    	; 0x8ee <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     732:	65 e9       	ldi	r22, 0x95	; 149

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Abnormally Low!", part_number);
     734:	76 e0       	ldi	r23, 0x06	; 6
     736:	83 e3       	ldi	r24, 0x33	; 51
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	3b ce       	rjmp	.-906    	; 0x3b2 <send_error_message>
     73c:	08 95       	ret
     73e:	6f ea       	ldi	r22, 0xAF	; 175
				// Additional Warning Handling
				break;
     740:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICALLY LOW", part_number);
     742:	8f e3       	ldi	r24, 0x3F	; 63
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	35 ce       	rjmp	.-918    	; 0x3b2 <send_error_message>
     748:	08 95       	ret
     74a:	62 ed       	ldi	r22, 0xD2	; 210
				// Additional Error Handling
				break;
     74c:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_HIGH:					
			switch (severity) {
     74e:	8f e4       	ldi	r24, 0x4F	; 79
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	2f ce       	rjmp	.-930    	; 0x3b2 <send_error_message>
     754:	08 95       	ret
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	91 05       	cpc	r25, r1
     75a:	61 f0       	breq	.+24     	; 0x774 <throw_error_code_with_number+0x35a>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     75c:	83 30       	cpi	r24, 0x03	; 3
     75e:	91 05       	cpc	r25, r1
     760:	79 f0       	breq	.+30     	; 0x780 <throw_error_code_with_number+0x366>
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	09 f0       	breq	.+2      	; 0x768 <throw_error_code_with_number+0x34e>
     766:	c3 c0       	rjmp	.+390    	; 0x8ee <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     768:	65 eb       	ldi	r22, 0xB5	; 181

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     76a:	75 e0       	ldi	r23, 0x05	; 5
     76c:	83 e3       	ldi	r24, 0x33	; 51
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	20 ce       	rjmp	.-960    	; 0x3b2 <send_error_message>
     772:	08 95       	ret
				// Additional Warning Handling
				break;
     774:	64 e1       	ldi	r22, 0x14	; 20

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     776:	76 e0       	ldi	r23, 0x06	; 6
     778:	8f e3       	ldi	r24, 0x3F	; 63
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	1a ce       	rjmp	.-972    	; 0x3b2 <send_error_message>
     77e:	08 95       	ret
				// Additional Error Handling
				break;
     780:	68 e3       	ldi	r22, 0x38	; 56
			}			
		break;

        case ERROR_BRAKES_POSITION:					
			switch (severity) {
     782:	76 e0       	ldi	r23, 0x06	; 6
     784:	8f e4       	ldi	r24, 0x4F	; 79
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	14 ce       	rjmp	.-984    	; 0x3b2 <send_error_message>
     78a:	08 95       	ret
     78c:	82 30       	cpi	r24, 0x02	; 2
     78e:	91 05       	cpc	r25, r1
     790:	61 f0       	breq	.+24     	; 0x7aa <throw_error_code_with_number+0x390>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     792:	83 30       	cpi	r24, 0x03	; 3
     794:	91 05       	cpc	r25, r1
     796:	79 f0       	breq	.+30     	; 0x7b6 <throw_error_code_with_number+0x39c>
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	09 f0       	breq	.+2      	; 0x79e <throw_error_code_with_number+0x384>
				// Additional Info Handling
				break;
     79c:	a8 c0       	rjmp	.+336    	; 0x8ee <throw_error_code_with_number+0x4d4>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Warning!", part_number);
     79e:	65 e9       	ldi	r22, 0x95	; 149
     7a0:	76 e0       	ldi	r23, 0x06	; 6
     7a2:	83 e3       	ldi	r24, 0x33	; 51
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	05 ce       	rjmp	.-1014   	; 0x3b2 <send_error_message>
     7a8:	08 95       	ret
				// Additional Warning Handling
				break;
     7aa:	64 ef       	ldi	r22, 0xF4	; 244

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICAL", part_number);
     7ac:	76 e0       	ldi	r23, 0x06	; 6
     7ae:	8f e3       	ldi	r24, 0x3F	; 63
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	ff cd       	rjmp	.-1026   	; 0x3b2 <send_error_message>
     7b4:	08 95       	ret
				// Additional Error Handling
				break;
     7b6:	60 e1       	ldi	r22, 0x10	; 16
			}			
		break;

		case ERROR_STEERING_ANGLE_LEFT:					
			switch (severity) {
     7b8:	77 e0       	ldi	r23, 0x07	; 7
     7ba:	8f e4       	ldi	r24, 0x4F	; 79
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	f9 cd       	rjmp	.-1038   	; 0x3b2 <send_error_message>
     7c0:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	19 f0       	breq	.+6      	; 0x7ce <throw_error_code_with_number+0x3b4>
     7c8:	03 97       	sbiw	r24, 0x03	; 3
     7ca:	39 f0       	breq	.+14     	; 0x7da <throw_error_code_with_number+0x3c0>
     7cc:	08 95       	ret
				// Additional Info Handling
				break;
     7ce:	6c e2       	ldi	r22, 0x2C	; 44

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE LEFT PARAMETER", part_number);
     7d0:	77 e0       	ldi	r23, 0x07	; 7
     7d2:	83 e3       	ldi	r24, 0x33	; 51
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	ed cd       	rjmp	.-1062   	; 0x3b2 <send_error_message>
     7d8:	08 95       	ret
				break;
			}			
		break;

		case ERROR_STEERING_ANGLE_RIGHT:					
			switch (severity) {
     7da:	62 e4       	ldi	r22, 0x42	; 66
     7dc:	77 e0       	ldi	r23, 0x07	; 7
     7de:	8f e4       	ldi	r24, 0x4F	; 79
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	e7 cd       	rjmp	.-1074   	; 0x3b2 <send_error_message>
     7e4:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	91 05       	cpc	r25, r1
     7ea:	19 f0       	breq	.+6      	; 0x7f2 <throw_error_code_with_number+0x3d8>
     7ec:	03 97       	sbiw	r24, 0x03	; 3
     7ee:	39 f0       	breq	.+14     	; 0x7fe <throw_error_code_with_number+0x3e4>
     7f0:	08 95       	ret
				// Additional Info Handling
				break;
     7f2:	6c e2       	ldi	r22, 0x2C	; 44

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE RIGHT PARAMETER", part_number);
     7f4:	77 e0       	ldi	r23, 0x07	; 7
     7f6:	83 e3       	ldi	r24, 0x33	; 51
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	db cd       	rjmp	.-1098   	; 0x3b2 <send_error_message>
     7fc:	08 95       	ret
				// Additional Error Handling
				break;
     7fe:	68 e6       	ldi	r22, 0x68	; 104
			}			
		break;

		case ERROR_THROTTLE_ERROR:					
			switch (severity) {
     800:	77 e0       	ldi	r23, 0x07	; 7
     802:	8f e4       	ldi	r24, 0x4F	; 79
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	d5 cd       	rjmp	.-1110   	; 0x3b2 <send_error_message>
     808:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Throttle Function Normal", part_number);
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	91 05       	cpc	r25, r1
     80e:	19 f0       	breq	.+6      	; 0x816 <throw_error_code_with_number+0x3fc>
     810:	03 97       	sbiw	r24, 0x03	; 3
     812:	39 f0       	breq	.+14     	; 0x822 <throw_error_code_with_number+0x408>
				// Additional Info Handling
				break;
     814:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "THROTTLE CRITICAL MALFUNCTION", part_number);
     816:	6f e8       	ldi	r22, 0x8F	; 143
     818:	77 e0       	ldi	r23, 0x07	; 7
     81a:	83 e3       	ldi	r24, 0x33	; 51
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	c9 cd       	rjmp	.-1134   	; 0x3b2 <send_error_message>
     820:	08 95       	ret
				// Additional Error Handling
				break;
     822:	68 ea       	ldi	r22, 0xA8	; 168
			}			
		break;

		case ERROR_CAR_UPRIGHT_ERROR:					
			switch (severity) {
     824:	77 e0       	ldi	r23, 0x07	; 7
     826:	8f e4       	ldi	r24, 0x4F	; 79
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	c3 cd       	rjmp	.-1146   	; 0x3b2 <send_error_message>
     82c:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Car is upright", part_number);
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	91 05       	cpc	r25, r1
     832:	19 f0       	breq	.+6      	; 0x83a <throw_error_code_with_number+0x420>
     834:	03 97       	sbiw	r24, 0x03	; 3
     836:	39 f0       	breq	.+14     	; 0x846 <throw_error_code_with_number+0x42c>
				// Additional Info Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CAR HAS OVERTURNED", part_number);
     838:	08 95       	ret
     83a:	66 ec       	ldi	r22, 0xC6	; 198
     83c:	77 e0       	ldi	r23, 0x07	; 7
     83e:	83 e3       	ldi	r24, 0x33	; 51
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	b7 cd       	rjmp	.-1170   	; 0x3b2 <send_error_message>
				// Additional Error Handling
				break;
     844:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_CHARGE:					
			switch (severity) {
     846:	65 ed       	ldi	r22, 0xD5	; 213
     848:	77 e0       	ldi	r23, 0x07	; 7
     84a:	8f e4       	ldi	r24, 0x4F	; 79
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	b1 cd       	rjmp	.-1182   	; 0x3b2 <send_error_message>
     850:	08 95       	ret
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Charge Normal", part_number);
     856:	61 f0       	breq	.+24     	; 0x870 <throw_error_code_with_number+0x456>
     858:	83 30       	cpi	r24, 0x03	; 3
     85a:	91 05       	cpc	r25, r1
     85c:	79 f0       	breq	.+30     	; 0x87c <throw_error_code_with_number+0x462>
     85e:	01 97       	sbiw	r24, 0x01	; 1
				// Additional Info Handling
				break;
     860:	09 f0       	breq	.+2      	; 0x864 <throw_error_code_with_number+0x44a>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Charge Low", part_number);
     862:	45 c0       	rjmp	.+138    	; 0x8ee <throw_error_code_with_number+0x4d4>
     864:	68 ee       	ldi	r22, 0xE8	; 232
     866:	77 e0       	ldi	r23, 0x07	; 7
     868:	83 e3       	ldi	r24, 0x33	; 51
     86a:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     86c:	a2 cd       	rjmp	.-1212   	; 0x3b2 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d CHARGE CRITICAL", part_number);
     86e:	08 95       	ret
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	78 e0       	ldi	r23, 0x08	; 8
     874:	8f e3       	ldi	r24, 0x3F	; 63
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	9c cd       	rjmp	.-1224   	; 0x3b2 <send_error_message>
				// Additional Error Handling
				break;
     87a:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_LOW:					
			switch (severity) {
     87c:	67 e1       	ldi	r22, 0x17	; 23
     87e:	78 e0       	ldi	r23, 0x08	; 8
     880:	8f e4       	ldi	r24, 0x4F	; 79
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	96 cd       	rjmp	.-1236   	; 0x3b2 <send_error_message>
     886:	08 95       	ret
     888:	82 30       	cpi	r24, 0x02	; 2
     88a:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     88c:	59 f0       	breq	.+22     	; 0x8a4 <throw_error_code_with_number+0x48a>
     88e:	83 30       	cpi	r24, 0x03	; 3
     890:	91 05       	cpc	r25, r1
     892:	71 f0       	breq	.+28     	; 0x8b0 <throw_error_code_with_number+0x496>
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	59 f5       	brne	.+86     	; 0x8ee <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     898:	62 e3       	ldi	r22, 0x32	; 50

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally Low!", part_number);
     89a:	78 e0       	ldi	r23, 0x08	; 8
     89c:	83 e3       	ldi	r24, 0x33	; 51
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	88 cd       	rjmp	.-1264   	; 0x3b2 <send_error_message>
     8a2:	08 95       	ret
     8a4:	60 e5       	ldi	r22, 0x50	; 80
				// Additional Warning Handling
				break;
     8a6:	78 e0       	ldi	r23, 0x08	; 8

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY LOW", part_number);
     8a8:	8f e3       	ldi	r24, 0x3F	; 63
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	82 cd       	rjmp	.-1276   	; 0x3b2 <send_error_message>
     8ae:	08 95       	ret
     8b0:	67 e7       	ldi	r22, 0x77	; 119
     8b2:	78 e0       	ldi	r23, 0x08	; 8
				// Additional Error Handling
				break;
     8b4:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_HIGH:					
			switch (severity) {
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	7c cd       	rjmp	.-1288   	; 0x3b2 <send_error_message>
     8ba:	08 95       	ret
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	91 05       	cpc	r25, r1
     8c0:	59 f0       	breq	.+22     	; 0x8d8 <throw_error_code_with_number+0x4be>
     8c2:	83 30       	cpi	r24, 0x03	; 3
     8c4:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     8c6:	71 f0       	breq	.+28     	; 0x8e4 <throw_error_code_with_number+0x4ca>
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	89 f4       	brne	.+34     	; 0x8ee <throw_error_code_with_number+0x4d4>
     8cc:	62 e3       	ldi	r22, 0x32	; 50
     8ce:	78 e0       	ldi	r23, 0x08	; 8
     8d0:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     8d2:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally High!", part_number);
     8d4:	6e cd       	rjmp	.-1316   	; 0x3b2 <send_error_message>
     8d6:	08 95       	ret
     8d8:	6d e9       	ldi	r22, 0x9D	; 157
     8da:	78 e0       	ldi	r23, 0x08	; 8
     8dc:	8f e3       	ldi	r24, 0x3F	; 63
     8de:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     8e0:	68 cd       	rjmp	.-1328   	; 0x3b2 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY HIGH", part_number);
     8e2:	08 95       	ret
     8e4:	65 ec       	ldi	r22, 0xC5	; 197
     8e6:	78 e0       	ldi	r23, 0x08	; 8
     8e8:	8f e4       	ldi	r24, 0x4F	; 79
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	62 cd       	rjmp	.-1340   	; 0x3b2 <send_error_message>
     8ee:	08 95       	ret

000008f0 <throw_error_code>:
 * Generates an error message, and takes the necessary actions depending on the severity and error.
 * Uses 0 as the part number
 **/
void throw_error_code(uint16_t severity, uint16_t error_code)
{	
	throw_error_code_with_number(severity, error_code, 0);
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	92 cd       	rjmp	.-1244   	; 0x41a <throw_error_code_with_number>
     8f6:	08 95       	ret

000008f8 <external_interrupt_init>:
 * 
 */
void external_interrupt_init()
{
	//INT1 for CAN1, INT0 for CAN2, PCINT7 for CAN3
	EICRA |= (2<<ISC00)|(2<<ISC10);
     8f8:	e9 e6       	ldi	r30, 0x69	; 105
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	8a 60       	ori	r24, 0x0A	; 10
     900:	80 83       	st	Z, r24
	EIMSK  = (1<<INT0) | (1<<INT1);
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	8d bb       	out	0x1d, r24	; 29
	//Enable interrupts for PCINT7:0
	PCICR  = (1<<PCIE0)|(0<<PCIE1);
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	//CAN C interrupt
	PCMSK0 = (1<<PCINT7);
     90c:	80 e8       	ldi	r24, 0x80	; 128
     90e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     912:	08 95       	ret

00000914 <io_init>:
 * 
 */
void io_init()
{
	//pins 8, 9 and 14 for MCP2515_STB high so the things respond (PE6, PE7, PH2)
	DDRE  = 0b11000010;		//PE0 = RS232 RX1; PE1 = RS232 TX1;  PE6 = STB_CAN1; PE7 = STB_CAN2;
     914:	82 ec       	ldi	r24, 0xC2	; 194
     916:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000000;		
     918:	1e b8       	out	0x0e, r1	; 14
	DDRH  = 0b00000111;		//PH0 = CS_CAN1; PH1 = CS_CAN2; PH2 = STB_CAN3
     91a:	87 e0       	ldi	r24, 0x07	; 7
     91c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	PORTH = 0b00000011;		//CS_CAN1 high; CS_CAN2 high;
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	//pins 12, 13, 19 for the CS for each MCP2515 PH0, PH1, PB0)

	//pin 21 for MOSI, pin 20  for SCK (PB2, PB1)
	DDRB  = 0b01100111;		//PB0 = CS_CAN3; PB1 = SCK; PB2 = MOSI; PB3 = MISO; PB5 = High drive A; PB6 = Low drive A; PB7 = CAN3_INT; 
     926:	87 e6       	ldi	r24, 0x67	; 103
     928:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;		//set CS_CAN3 high;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	85 b9       	out	0x05, r24	; 5
	
	DDRL  = 0b00011000;		//PB3 = High drive B; PB4 = Low Drive B;
     92e:	98 e1       	ldi	r25, 0x18	; 24
     930:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	PORTL = 0b00000000;
     934:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	
	DDRD  = 0b11001000;		//PD0 = CAN2_INT; PD1 = CAN1_INT; PD2 = RS232 RX2; PD3 = RS232 TX2; PD6 = CAN1_TXPIN; PD7 = CAN2_TXPIN;
     938:	88 ec       	ldi	r24, 0xC8	; 200
     93a:	8a b9       	out	0x0a, r24	; 10
	DDRD  = 0b00000000;
     93c:	1a b8       	out	0x0a, r1	; 10
	
	DDRC  = 0b00001000;		//PC3 = CAN3_TXPIN;
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
     942:	18 b8       	out	0x08, r1	; 8
	
	DDRJ  = 0b00000000;		//PORTJ is used for digital input;
     944:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	PORTJ |= 64;			//turn the pull-ups on for digital inputs
     948:	e5 e0       	ldi	r30, 0x05	; 5
     94a:	f1 e0       	ldi	r31, 0x01	; 1
     94c:	80 81       	ld	r24, Z
     94e:	80 64       	ori	r24, 0x40	; 64
     950:	80 83       	st	Z, r24
	
	DDRA  = 0b00011000;		//PA3 = ENABLE_B; PA4 = ENABLE_A; PA1 = dig input; PA2 = dig input;
     952:	91 b9       	out	0x01, r25	; 1
	PORTA = 0b00010000;		
     954:	80 e1       	ldi	r24, 0x10	; 16
     956:	82 b9       	out	0x02, r24	; 2

	DDRK  = 0b00100000;		//PK5 = debugging LED;
     958:	80 e2       	ldi	r24, 0x20	; 32
     95a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7e0107>
	// PORTK = 0b00100000;
	
	// Enable external interrupts in order for the CAN bus to communicate with us
	external_interrupt_init();
     95e:	cc cf       	rjmp	.-104    	; 0x8f8 <external_interrupt_init>
     960:	08 95       	ret

00000962 <firmware_init>:
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
void firmware_init()
{
	io_init();
     962:	d8 df       	rcall	.-80     	; 0x914 <io_init>
	SPI_init();
     964:	78 d6       	rcall	.+3312   	; 0x1656 <SPI_init>
     966:	80 e0       	ldi	r24, 0x00	; 0
    // // uart_init(UART_BAUD_SELECT(19200, 16UL));
    uart_init(19200);
     968:	9b e4       	ldi	r25, 0x4B	; 75
     96a:	35 d7       	rcall	.+3690   	; 0x17d6 <uart_init>
     96c:	61 e0       	ldi	r22, 0x01	; 1
    //uart1_init(19200);
	a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); // Turns ON ADC
     96e:	86 e0       	ldi	r24, 0x06	; 6
     970:	79 dc       	rcall	.-1806   	; 0x264 <a2dInit>
     972:	81 e0       	ldi	r24, 0x01	; 1
	MCP2515_init(TRACTIVE_CAN);
     974:	0c d5       	rcall	.+2584   	; 0x138e <MCP2515_init>
     976:	82 e0       	ldi	r24, 0x02	; 2
	MCP2515_init(POWER_CAN);
     978:	0a d5       	rcall	.+2580   	; 0x138e <MCP2515_init>
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	08 d5       	rcall	.+2576   	; 0x138e <MCP2515_init>
	MCP2515_init(DATA_CAN);
     97e:	e5 e0       	ldi	r30, 0x05	; 5
     980:	f1 e0       	ldi	r31, 0x01	; 1
     982:	80 81       	ld	r24, Z

	// Enable the pullup on the input. This allows the pin to be active low
	PORTJ |= (1<<PINJ6);
     984:	80 64       	ori	r24, 0x40	; 64
     986:	80 83       	st	Z, r24
     988:	08 95       	ret

0000098a <timer_init>:
     98a:	84 b5       	in	r24, 0x24	; 36
     98c:	82 60       	ori	r24, 0x02	; 2
     98e:	84 bd       	out	0x24, r24	; 36
void timer_init()
{
    // http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf
    // Set up 1Khz timer
    TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
    TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
     990:	85 b5       	in	r24, 0x25	; 37
     992:	83 60       	ori	r24, 0x03	; 3
     994:	85 bd       	out	0x25, r24	; 37
    OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
     996:	8a ef       	ldi	r24, 0xFA	; 250
     998:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);                // Enable COMPA interupt
     99a:	ee e6       	ldi	r30, 0x6E	; 110
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	82 60       	ori	r24, 0x02	; 2
     9a2:	80 83       	st	Z, r24

    // Set up 50Hz comm timer
	TCCR1A = 0b00000000;			//
     9a4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00001101;			// CTC mode & prescale clock by 1024
     9a8:	8d e0       	ldi	r24, 0x0D	; 13
     9aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A =  15000;					// 312 gives 50Hz main comms speed
     9ae:	88 e9       	ldi	r24, 0x98	; 152
     9b0:	9a e3       	ldi	r25, 0x3A	; 58
     9b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     9b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 0b00000010;			// Turn on compare interrupt for OCR1A
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     9c0:	08 95       	ret

000009c2 <INPUT_scaleInput>:
 * @param max 
 * @param min 
 * @return uint8_t 
 */
uint8_t INPUT_scaleInput(uint16_t * value, uint16_t max, uint16_t min) {
    uint8_t tmp = (((*value - (min - INPUT_ADC_THRESH)) * 100) / ((max + INPUT_ADC_THRESH) - (min - INPUT_ADC_THRESH)));
     9c2:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <INPUT_ADC_THRESH>
     9c6:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <INPUT_ADC_THRESH+0x1>
     9ca:	9f 01       	movw	r18, r30
     9cc:	24 1b       	sub	r18, r20
     9ce:	35 0b       	sbc	r19, r21
    return tmp > 100 ? 100 : tmp < 0 ? 0 : tmp;
     9d0:	dc 01       	movw	r26, r24
     9d2:	4d 91       	ld	r20, X+
     9d4:	5c 91       	ld	r21, X
     9d6:	42 0f       	add	r20, r18
     9d8:	53 1f       	adc	r21, r19
     9da:	a4 e6       	ldi	r26, 0x64	; 100
     9dc:	a4 9f       	mul	r26, r20
     9de:	c0 01       	movw	r24, r0
     9e0:	a5 9f       	mul	r26, r21
     9e2:	90 0d       	add	r25, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	6e 0f       	add	r22, r30
     9e8:	7f 1f       	adc	r23, r31
     9ea:	62 0f       	add	r22, r18
     9ec:	73 1f       	adc	r23, r19
     9ee:	6b d7       	rcall	.+3798   	; 0x18c6 <__udivmodhi4>
     9f0:	86 2f       	mov	r24, r22
     9f2:	65 36       	cpi	r22, 0x65	; 101
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <INPUT_scaleInput+0x36>
     9f6:	84 e6       	ldi	r24, 0x64	; 100
}
     9f8:	08 95       	ret

000009fa <INPUT_read_accelPedal>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_accelPedal(uint16_t *throttle) {
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24
    static uint16_t primaryHistory[10];
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

    // Read the values of the two throttle sensors and verify if the received values are valid
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
     a04:	00 91 63 09 	lds	r16, 0x0963	; 0x800963 <historyIndex.2085>
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	85 e0       	ldi	r24, 0x05	; 5
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	39 dc       	rcall	.-1934   	; 0x282 <a2d_10bitCh>
     a10:	00 0f       	add	r16, r16
     a12:	11 1f       	adc	r17, r17
     a14:	f8 01       	movw	r30, r16
     a16:	e1 5b       	subi	r30, 0xB1	; 177
     a18:	f6 4f       	sbci	r31, 0xF6	; 246
     a1a:	91 83       	std	Z+1, r25	; 0x01
     a1c:	80 83       	st	Z, r24
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);
     a1e:	10 91 63 09 	lds	r17, 0x0963	; 0x800963 <historyIndex.2085>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	81 0f       	add	r24, r17
     a26:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <historyIndex.2085>
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	29 dc       	rcall	.-1966   	; 0x282 <a2d_10bitCh>
     a30:	e1 2f       	mov	r30, r17
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	e5 5c       	subi	r30, 0xC5	; 197
     a3a:	f6 4f       	sbci	r31, 0xF6	; 246
     a3c:	91 83       	std	Z+1, r25	; 0x01
     a3e:	80 83       	st	Z, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     a40:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <historyIndex.2085>
     a44:	88 30       	cpi	r24, 0x08	; 8
     a46:	10 f0       	brcs	.+4      	; 0xa4c <INPUT_read_accelPedal+0x52>
     a48:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <historyIndex.2085>
     a4c:	ef e4       	ldi	r30, 0x4F	; 79
     a4e:	f9 e0       	ldi	r31, 0x09	; 9
     a50:	ab e3       	ldi	r26, 0x3B	; 59
     a52:	b9 e0       	ldi	r27, 0x09	; 9
     a54:	6f e5       	ldi	r22, 0x5F	; 95
     a56:	79 e0       	ldi	r23, 0x09	; 9

    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }

    uint16_t primaryAverage = 0;
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
     a60:	41 91       	ld	r20, Z+
     a62:	51 91       	ld	r21, Z+
     a64:	24 0f       	add	r18, r20
     a66:	35 1f       	adc	r19, r21
        secondaryAverage += secondaryHistory[i];
     a68:	4d 91       	ld	r20, X+
     a6a:	5d 91       	ld	r21, X+
     a6c:	84 0f       	add	r24, r20
     a6e:	95 1f       	adc	r25, r21

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }

    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     a70:	e6 17       	cp	r30, r22
     a72:	f7 07       	cpc	r31, r23
     a74:	a9 f7       	brne	.-22     	; 0xa60 <INPUT_read_accelPedal+0x66>
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
     a76:	36 95       	lsr	r19
     a78:	27 95       	ror	r18
     a7a:	36 95       	lsr	r19
     a7c:	27 95       	ror	r18
     a7e:	36 95       	lsr	r19
     a80:	27 95       	ror	r18
    secondaryAverage /= ADC_SAMPLES;

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 
     a82:	39 83       	std	Y+1, r19	; 0x01
     a84:	28 83       	st	Y, r18

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
     a86:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <INPUT_ADC_ERROR>
     a8a:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <INPUT_ADC_ERROR+0x1>
     a8e:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <INPUT_PEDAL_THROTTLE_CH1_LOW>
     a92:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     a96:	46 1b       	sub	r20, r22
     a98:	57 0b       	sbc	r21, r23
     a9a:	24 17       	cp	r18, r20
     a9c:	35 07       	cpc	r19, r21
     a9e:	d0 f1       	brcs	.+116    	; 0xb14 <INPUT_read_accelPedal+0x11a>
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
    secondaryAverage /= ADC_SAMPLES;
     aa0:	96 95       	lsr	r25
     aa2:	87 95       	ror	r24
     aa4:	96 95       	lsr	r25
     aa6:	87 95       	ror	r24
     aa8:	96 95       	lsr	r25
     aaa:	87 95       	ror	r24

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
     aac:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <INPUT_PEDAL_THROTTLE_CH2_LOW>
     ab0:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <INPUT_PEDAL_THROTTLE_CH2_LOW+0x1>
     ab4:	46 1b       	sub	r20, r22
     ab6:	57 0b       	sbc	r21, r23
     ab8:	84 17       	cp	r24, r20
     aba:	95 07       	cpc	r25, r21
     abc:	68 f1       	brcs	.+90     	; 0xb18 <INPUT_read_accelPedal+0x11e>
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
     abe:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     ac2:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     ac6:	46 1b       	sub	r20, r22
     ac8:	57 0b       	sbc	r21, r23
     aca:	42 17       	cp	r20, r18
     acc:	53 07       	cpc	r21, r19
     ace:	30 f1       	brcs	.+76     	; 0xb1c <INPUT_read_accelPedal+0x122>
     ad0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <INPUT_PEDAL_THROTTLE_CH2_HIGH>
     ad4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <INPUT_PEDAL_THROTTLE_CH2_HIGH+0x1>
     ad8:	46 1b       	sub	r20, r22
     ada:	57 0b       	sbc	r21, r23
     adc:	48 17       	cp	r20, r24
     ade:	59 07       	cpc	r21, r25
     ae0:	f8 f0       	brcs	.+62     	; 0xb20 <INPUT_read_accelPedal+0x126>
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
    secondaryAverage /= ADC_SAMPLES;

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values
     ae2:	28 1b       	sub	r18, r24
     ae4:	39 0b       	sbc	r19, r25
     ae6:	c9 01       	movw	r24, r18
     ae8:	99 23       	and	r25, r25
     aea:	24 f4       	brge	.+8      	; 0xaf4 <INPUT_read_accelPedal+0xfa>
     aec:	88 27       	eor	r24, r24
     aee:	99 27       	eor	r25, r25
     af0:	82 1b       	sub	r24, r18
     af2:	93 0b       	sbc	r25, r19
	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
            secondaryAverage > INPUT_PEDAL_THROTTLE_CH2_HIGH - INPUT_ADC_ERROR ) { return 2; }
	// Verify if the difference between sensors is within acceptable values
	else if(delta < INPUT_PEDAL_DELTA_THRESH_L ||
     af4:	20 91 67 09 	lds	r18, 0x0967	; 0x800967 <INPUT_PEDAL_DELTA_THRESH_L>
     af8:	30 91 68 09 	lds	r19, 0x0968	; 0x800968 <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     afc:	82 17       	cp	r24, r18
     afe:	93 07       	cpc	r25, r19
     b00:	88 f0       	brcs	.+34     	; 0xb24 <INPUT_read_accelPedal+0x12a>
     b02:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     b06:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     b0a:	28 17       	cp	r18, r24
     b0c:	39 07       	cpc	r19, r25
     b0e:	60 f0       	brcs	.+24     	; 0xb28 <INPUT_read_accelPedal+0x12e>
            delta > INPUT_PEDAL_DELTA_THRESH_H) { return 3; }
	return 0;
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0b c0       	rjmp	.+22     	; 0xb2a <INPUT_read_accelPedal+0x130>
    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	09 c0       	rjmp	.+18     	; 0xb2a <INPUT_read_accelPedal+0x130>
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	07 c0       	rjmp	.+14     	; 0xb2a <INPUT_read_accelPedal+0x130>
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
            secondaryAverage > INPUT_PEDAL_THROTTLE_CH2_HIGH - INPUT_ADC_ERROR ) { return 2; }
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <INPUT_read_accelPedal+0x130>
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <INPUT_read_accelPedal+0x130>
	// Verify if the difference between sensors is within acceptable values
	else if(delta < INPUT_PEDAL_DELTA_THRESH_L ||
            delta > INPUT_PEDAL_DELTA_THRESH_H) { return 3; }
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <INPUT_read_accelPedal+0x130>
     b28:	83 e0       	ldi	r24, 0x03	; 3
	return 0;
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	08 95       	ret

00000b34 <INPUT_get_accelPedal>:
uint8_t INPUT_accelerationPedal = 0;
uint8_t INPUT_brakePedal = 0;
uint8_t INPUT_brakePressureFront = 0;
uint8_t INPUT_brakePressureBack = 0;

uint8_t INPUT_get_accelPedal(uint8_t *val) {
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <INPUT_get_accelPedal+0xc>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	7c 01       	movw	r14, r24
    // Get Value
    uint16_t rawValue = 0;
     b46:	1a 82       	std	Y+2, r1	; 0x02
     b48:	19 82       	std	Y+1, r1	; 0x01
    uint8_t state = INPUT_read_accelPedal(&rawValue);
     b4a:	ce 01       	movw	r24, r28
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	55 df       	rcall	.-342    	; 0x9fa <INPUT_read_accelPedal>
     b50:	18 2f       	mov	r17, r24
    // Convert Value
    *val = INPUT_scaleInput(
     b52:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <INPUT_PEDAL_THROTTLE_CH1_LOW>
     b56:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     b5a:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     b5e:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     b62:	ce 01       	movw	r24, r28
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	2d df       	rcall	.-422    	; 0x9c2 <INPUT_scaleInput>
     b68:	f7 01       	movw	r30, r14
     b6a:	80 83       	st	Z, r24
        &rawValue,
        INPUT_PEDAL_THROTTLE_CH1_HIGH,
        INPUT_PEDAL_THROTTLE_CH1_LOW
    );
    // Error States
    switch (state) {
     b6c:	12 30       	cpi	r17, 0x02	; 2
     b6e:	51 f0       	breq	.+20     	; 0xb84 <INPUT_get_accelPedal+0x50>
     b70:	13 30       	cpi	r17, 0x03	; 3
     b72:	71 f0       	breq	.+28     	; 0xb90 <INPUT_get_accelPedal+0x5c>
     b74:	11 30       	cpi	r17, 0x01	; 1
     b76:	89 f4       	brne	.+34     	; 0xb9a <INPUT_get_accelPedal+0x66>
        case 1: // Inputs were too low
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b78:	6e e0       	ldi	r22, 0x0E	; 14
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	b7 de       	rcall	.-658    	; 0x8f0 <throw_error_code>
            break;
     b82:	0b c0       	rjmp	.+22     	; 0xb9a <INPUT_get_accelPedal+0x66>
        case 2: // Inputs were too high
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b84:	6e e0       	ldi	r22, 0x0E	; 14
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	b1 de       	rcall	.-670    	; 0x8f0 <throw_error_code>
            break;
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <INPUT_get_accelPedal+0x66>
        case 3: // Delta was found to be in failure
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b90:	6e e0       	ldi	r22, 0x0E	; 14
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	ab de       	rcall	.-682    	; 0x8f0 <throw_error_code>
        default:
            // Do nothing
            break;
    }
    return state; // Pass up state of read for process and logic use
}
     b9a:	81 2f       	mov	r24, r17
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	08 95       	ret

00000bac <INPUT_read_brakePedal>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_brakePedal(uint16_t * brake) {
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

	uint8_t returnState = 0;
    // Read the values of the two throttle sensors and verify if the received values are valid
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH1);
     bb6:	00 91 3a 09 	lds	r16, 0x093A	; 0x80093a <historyIndex.2100>
     bba:	10 e0       	ldi	r17, 0x00	; 0
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	60 db       	rcall	.-2368   	; 0x282 <a2d_10bitCh>
     bc2:	00 0f       	add	r16, r16
     bc4:	11 1f       	adc	r17, r17
     bc6:	f8 01       	movw	r30, r16
     bc8:	ea 5d       	subi	r30, 0xDA	; 218
     bca:	f6 4f       	sbci	r31, 0xF6	; 246
     bcc:	91 83       	std	Z+1, r25	; 0x01
     bce:	80 83       	st	Z, r24
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH2);
     bd0:	10 91 3a 09 	lds	r17, 0x093A	; 0x80093a <historyIndex.2100>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	81 0f       	add	r24, r17
     bd8:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <historyIndex.2100>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	50 db       	rcall	.-2400   	; 0x282 <a2d_10bitCh>
     be2:	e1 2f       	mov	r30, r17
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	ee 5e       	subi	r30, 0xEE	; 238
     bec:	f6 4f       	sbci	r31, 0xF6	; 246
     bee:	91 83       	std	Z+1, r25	; 0x01
     bf0:	80 83       	st	Z, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     bf2:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <historyIndex.2100>
     bf6:	88 30       	cpi	r24, 0x08	; 8
     bf8:	10 f0       	brcs	.+4      	; 0xbfe <INPUT_read_brakePedal+0x52>
     bfa:	10 92 3a 09 	sts	0x093A, r1	; 0x80093a <historyIndex.2100>
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f9 e0       	ldi	r31, 0x09	; 9
     c02:	a2 e1       	ldi	r26, 0x12	; 18
     c04:	b9 e0       	ldi	r27, 0x09	; 9
     c06:	66 e3       	ldi	r22, 0x36	; 54
     c08:	79 e0       	ldi	r23, 0x09	; 9
	
	
	
    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
	
	
	
    uint16_t primaryAverage = 0;
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
     c12:	41 91       	ld	r20, Z+
     c14:	51 91       	ld	r21, Z+
     c16:	24 0f       	add	r18, r20
     c18:	35 1f       	adc	r19, r21
        secondaryAverage += secondaryHistory[i];
     c1a:	4d 91       	ld	r20, X+
     c1c:	5d 91       	ld	r21, X+
     c1e:	84 0f       	add	r24, r20
     c20:	95 1f       	adc	r25, r21
	
	
	
    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     c22:	e6 17       	cp	r30, r22
     c24:	f7 07       	cpc	r31, r23
     c26:	a9 f7       	brne	.-22     	; 0xc12 <INPUT_read_brakePedal+0x66>
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
     c28:	36 95       	lsr	r19
     c2a:	27 95       	ror	r18
     c2c:	36 95       	lsr	r19
     c2e:	27 95       	ror	r18
     c30:	36 95       	lsr	r19
     c32:	27 95       	ror	r18
    secondaryAverage /= ADC_SAMPLES;
     c34:	ac 01       	movw	r20, r24
     c36:	56 95       	lsr	r21
     c38:	47 95       	ror	r20
     c3a:	56 95       	lsr	r21
     c3c:	47 95       	ror	r20
     c3e:	56 95       	lsr	r21
     c40:	47 95       	ror	r20

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values
     c42:	b9 01       	movw	r22, r18
     c44:	64 1b       	sub	r22, r20
     c46:	75 0b       	sbc	r23, r21
     c48:	cb 01       	movw	r24, r22
     c4a:	99 23       	and	r25, r25
     c4c:	24 f4       	brge	.+8      	; 0xc56 <INPUT_read_brakePedal+0xaa>
     c4e:	88 27       	eor	r24, r24
     c50:	99 27       	eor	r25, r25
     c52:	86 1b       	sub	r24, r22
     c54:	97 0b       	sbc	r25, r23
     c56:	fc 01       	movw	r30, r24

    *brake = primaryAverage; 
     c58:	39 83       	std	Y+1, r19	; 0x01
     c5a:	28 83       	st	Y, r18


	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
     c5c:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <INPUT_ADC_ERROR>
     c60:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <INPUT_ADC_ERROR+0x1>
     c64:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <INPUT_PEDAL_BRAKE_CH1_LOW>
     c68:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     c6c:	86 1b       	sub	r24, r22
     c6e:	97 0b       	sbc	r25, r23
     c70:	28 17       	cp	r18, r24
     c72:	39 07       	cpc	r19, r25
     c74:	58 f0       	brcs	.+22     	; 0xc8c <INPUT_read_brakePedal+0xe0>
	
	else if(primaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 2;
     c76:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <INPUT_PEDAL_BRAKE_CH1_HIGH>
     c7a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     c7e:	86 0f       	add	r24, r22
     c80:	97 1f       	adc	r25, r23
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	20 f4       	brcc	.+8      	; 0xc90 <INPUT_read_brakePedal+0xe4>
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <INPUT_read_brakePedal+0xe6>
    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *brake = primaryAverage; 


	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <INPUT_read_brakePedal+0xe6>
    //TODO: Fill buffers with int reads values
    static uint16_t primaryHistory[10];
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

	uint8_t returnState = 0;
     c90:	80 e0       	ldi	r24, 0x00	; 0

	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
	
	else if(primaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 2;
	
	if(secondaryAverage < (INPUT_PEDAL_BRAKE_CH2_LOW - INPUT_ADC_ERROR)) returnState |= 4;
     c92:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <INPUT_PEDAL_BRAKE_CH2_LOW>
     c96:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <INPUT_PEDAL_BRAKE_CH2_LOW+0x1>
     c9a:	26 1b       	sub	r18, r22
     c9c:	37 0b       	sbc	r19, r23
     c9e:	42 17       	cp	r20, r18
     ca0:	53 07       	cpc	r21, r19
     ca2:	10 f4       	brcc	.+4      	; 0xca8 <INPUT_read_brakePedal+0xfc>
     ca4:	84 60       	ori	r24, 0x04	; 4
     ca6:	0a c0       	rjmp	.+20     	; 0xcbc <INPUT_read_brakePedal+0x110>
	
	else if(secondaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 8;
     ca8:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <INPUT_PEDAL_BRAKE_CH1_HIGH>
     cac:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     cb0:	62 0f       	add	r22, r18
     cb2:	73 1f       	adc	r23, r19
     cb4:	64 17       	cp	r22, r20
     cb6:	75 07       	cpc	r23, r21
     cb8:	08 f4       	brcc	.+2      	; 0xcbc <INPUT_read_brakePedal+0x110>
     cba:	88 60       	ori	r24, 0x08	; 8

	// Verify if the difference between sensors is within acceptable values
	if(delta < INPUT_PEDAL_DELTA_THRESH_L || delta > INPUT_PEDAL_DELTA_THRESH_H) { returnState |= 16; }  
     cbc:	20 91 67 09 	lds	r18, 0x0967	; 0x800967 <INPUT_PEDAL_DELTA_THRESH_L>
     cc0:	30 91 68 09 	lds	r19, 0x0968	; 0x800968 <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     cc4:	e2 17       	cp	r30, r18
     cc6:	f3 07       	cpc	r31, r19
     cc8:	38 f0       	brcs	.+14     	; 0xcd8 <INPUT_read_brakePedal+0x12c>
     cca:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     cce:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     cd2:	2e 17       	cp	r18, r30
     cd4:	3f 07       	cpc	r19, r31
     cd6:	08 f4       	brcc	.+2      	; 0xcda <INPUT_read_brakePedal+0x12e>
     cd8:	80 61       	ori	r24, 0x10	; 16
		
	return returnState;
}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <INPUT_get_brakePedal>:
            break;
    }
    return state; // Pass up state of read for process and logic use
}

uint8_t INPUT_get_brakePedal(uint8_t *val) {
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <INPUT_get_brakePedal+0xc>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	7c 01       	movw	r14, r24
    // Get Value
    uint16_t rawValue = 0;
     cf6:	1a 82       	std	Y+2, r1	; 0x02
     cf8:	19 82       	std	Y+1, r1	; 0x01
    uint8_t state = INPUT_read_brakePedal(&rawValue);
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	56 df       	rcall	.-340    	; 0xbac <INPUT_read_brakePedal>
     d00:	18 2f       	mov	r17, r24
    // Convert Value
    *val = INPUT_scaleInput(
     d02:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <INPUT_PEDAL_BRAKE_CH1_LOW>
     d06:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     d0a:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <INPUT_PEDAL_BRAKE_CH1_HIGH>
     d0e:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     d12:	ce 01       	movw	r24, r28
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	55 de       	rcall	.-854    	; 0x9c2 <INPUT_scaleInput>
     d18:	f7 01       	movw	r30, r14
     d1a:	80 83       	st	Z, r24
        &rawValue,
        INPUT_PEDAL_BRAKE_CH1_HIGH,
        INPUT_PEDAL_BRAKE_CH1_LOW
    );
    // Error States
    switch (state) {
     d1c:	12 30       	cpi	r17, 0x02	; 2
     d1e:	51 f0       	breq	.+20     	; 0xd34 <INPUT_get_brakePedal+0x50>
     d20:	13 30       	cpi	r17, 0x03	; 3
     d22:	71 f0       	breq	.+28     	; 0xd40 <INPUT_get_brakePedal+0x5c>
     d24:	11 30       	cpi	r17, 0x01	; 1
     d26:	89 f4       	brne	.+34     	; 0xd4a <INPUT_get_brakePedal+0x66>
        case 1: // Inputs were too low
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION_LOW);
     d28:	69 e0       	ldi	r22, 0x09	; 9
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	df dd       	rcall	.-1090   	; 0x8f0 <throw_error_code>
            break;
     d32:	0b c0       	rjmp	.+22     	; 0xd4a <INPUT_get_brakePedal+0x66>
        case 2: // Inputs were too high
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION_HIGH);
     d34:	6a e0       	ldi	r22, 0x0A	; 10
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	d9 dd       	rcall	.-1102   	; 0x8f0 <throw_error_code>
            break;
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <INPUT_get_brakePedal+0x66>
        case 3: // Delta was found to be in failure
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION);
     d40:	6b e0       	ldi	r22, 0x0B	; 11
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	d3 dd       	rcall	.-1114   	; 0x8f0 <throw_error_code>
        default:
            // Do nothing
            break;
    }
    return state; // Pass up state of read for process and logic use
}
     d4a:	81 2f       	mov	r24, r17
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	08 95       	ret

00000d5c <led_toggle>:
 * 
 * Reference: ATmega Datasheet Chapter 13 (I/O-Ports)
 **/
void led_toggle(void)
{
    PORTK ^= 0b00100000;
     d5c:	e8 e0       	ldi	r30, 0x08	; 8
     d5e:	f1 e0       	ldi	r31, 0x01	; 1
     d60:	90 81       	ld	r25, Z
     d62:	80 e2       	ldi	r24, 0x20	; 32
     d64:	89 27       	eor	r24, r25
     d66:	80 83       	st	Z, r24
     d68:	08 95       	ret

00000d6a <UART_sendPacket>:
    testPacketArray[3] = INPUT_steeringAngle;       // Steering Angle - 1   -> RADIAN(x -> -0.99 < 0 < 0.99) * 100 + 100
           
    UART_sendPacket(testPacketArray, 4);
}

void UART_sendPacket(uint8_t outgoingString[], uint8_t length) {
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	8c 01       	movw	r16, r24
     d76:	f6 2e       	mov	r15, r22
    //uint8_t *ptr = outgoingString;
	
	//int testADC = a2d_10bitCh(5);
	//char  testString[5];
	//itoa(testADC, testString, 10);
	uart_putc('D');
     d78:	84 e4       	ldi	r24, 0x44	; 68
     d7a:	49 d5       	rcall	.+2706   	; 0x180e <uart_putc>
	int i = 0;
    for(i = 0; i < length; i++) {
     d7c:	ff 20       	and	r15, r15
     d7e:	41 f0       	breq	.+16     	; 0xd90 <UART_sendPacket+0x26>
     d80:	e8 01       	movw	r28, r16
     d82:	0f 0d       	add	r16, r15
     d84:	11 1d       	adc	r17, r1
        uart_putc(outgoingString[i]);
     d86:	89 91       	ld	r24, Y+
     d88:	42 d5       	rcall	.+2692   	; 0x180e <uart_putc>
	//int testADC = a2d_10bitCh(5);
	//char  testString[5];
	//itoa(testADC, testString, 10);
	uart_putc('D');
	int i = 0;
    for(i = 0; i < length; i++) {
     d8a:	c0 17       	cp	r28, r16
     d8c:	d1 07       	cpc	r29, r17
        uart_putc(outgoingString[i]);
    }
	uart_putc('\r');
     d8e:	d9 f7       	brne	.-10     	; 0xd86 <UART_sendPacket+0x1c>
     d90:	8d e0       	ldi	r24, 0x0D	; 13
	uart_putc('\n');
     d92:	3d d5       	rcall	.+2682   	; 0x180e <uart_putc>
     d94:	8a e0       	ldi	r24, 0x0A	; 10
     d96:	3b d5       	rcall	.+2678   	; 0x180e <uart_putc>
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	08 95       	ret

00000da4 <UART_formTestPacket>:
// 	}
	
// 	for (int i = 0; i < 32; i++) uart1_putc(outgoingString[i]);
// }

void UART_formTestPacket(void) {
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	00 d0       	rcall	.+0      	; 0xdaa <UART_formTestPacket+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <UART_formTestPacket+0x8>
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t fakeThrottle = 0;
	
	if(fakeThrottle++ > 100)fakeThrottle = 0;
     db0:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <fakeThrottle.2439>
     db4:	85 36       	cpi	r24, 0x65	; 101
     db6:	20 f4       	brcc	.+8      	; 0xdc0 <UART_formTestPacket+0x1c>
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <fakeThrottle.2439>
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <UART_formTestPacket+0x20>
     dc0:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <fakeThrottle.2439>
    uint8_t testPacketArray[4];
    testPacketArray[0] = (ignitionState) | (armedState << 1) | (shutdownState << 2); // Button states - 1
     dc4:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <armedState>
     dc8:	98 2f       	mov	r25, r24
     dca:	99 0f       	add	r25, r25
     dcc:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <shutdownState>
     dd0:	88 0f       	add	r24, r24
     dd2:	88 0f       	add	r24, r24
     dd4:	89 2b       	or	r24, r25
     dd6:	90 91 12 0a 	lds	r25, 0x0A12	; 0x800a12 <ignitionState>
     dda:	89 2b       	or	r24, r25
     ddc:	89 83       	std	Y+1, r24	; 0x01
    testPacketArray[1] = INPUT_accelerationPedal;   // Throttle Pedal Percentage - 1
     dde:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <INPUT_accelerationPedal>
     de2:	8a 83       	std	Y+2, r24	; 0x02
    testPacketArray[2] = INPUT_brakePedal;          // Brake Pedal Percentage - 1
     de4:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <INPUT_brakePedal>
     de8:	8b 83       	std	Y+3, r24	; 0x03
    testPacketArray[3] = INPUT_steeringAngle;       // Steering Angle - 1   -> RADIAN(x -> -0.99 < 0 < 0.99) * 100 + 100
     dea:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <INPUT_steeringAngle>
     dee:	8c 83       	std	Y+4, r24	; 0x04
           
    UART_sendPacket(testPacketArray, 4);
     df0:	64 e0       	ldi	r22, 0x04	; 4
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	b9 df       	rcall	.-142    	; 0xd6a <UART_sendPacket>
}
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <uart_parse_input>:
 * Returns: none
 * 
 * 
 **/
void uart_parse_input(unsigned char* s)
{
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	ec 01       	movw	r28, r24
 * 
 * 
 **/
void uart_parse_poke(unsigned char* s)
{
	PDMarray[0] = s[0];
     e0c:	88 81       	ld	r24, Y
     e0e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <PDMarray>
 **/
void uart_parse_input(unsigned char* s)
{
	uart_parse_poke(s);
	//uart1_putc('D');				// reply with the header byte (preserved - 33 bytes should follow)
	UART_formTestPacket();
     e12:	c8 df       	rcall	.-112    	; 0xda4 <UART_formTestPacket>

	s[0] = '\0';					// clear the header byte
     e14:	18 82       	st	Y, r1
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <uart_process_byte>:
	
	static unsigned char count = 0;
	static unsigned char incomingString[48];							//made bigger to accommodate PT packets
	static unsigned char stringActive = 0;
	
	if(data == 'D')
     e1c:	84 34       	cpi	r24, 0x44	; 68
     e1e:	21 f4       	brne	.+8      	; 0xe28 <uart_process_byte+0xc>
	{
		stringActive = 1;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 9b 09 	sts	0x099B, r24	; 0x80099b <stringActive.2429>
     e26:	0d c0       	rjmp	.+26     	; 0xe42 <uart_process_byte+0x26>
	}
	
	else if(stringActive == 1)
     e28:	90 91 9b 09 	lds	r25, 0x099B	; 0x80099b <stringActive.2429>
     e2c:	91 30       	cpi	r25, 0x01	; 1
     e2e:	49 f4       	brne	.+18     	; 0xe42 <uart_process_byte+0x26>
	{
		incomingString[count++] = data;
     e30:	e0 91 9a 09 	lds	r30, 0x099A	; 0x80099a <count.2427>
     e34:	9e 0f       	add	r25, r30
     e36:	90 93 9a 09 	sts	0x099A, r25	; 0x80099a <count.2427>
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	e6 59       	subi	r30, 0x96	; 150
     e3e:	f6 4f       	sbci	r31, 0xF6	; 246
     e40:	80 83       	st	Z, r24
	}
	
	if(count > 8)
     e42:	e0 91 9a 09 	lds	r30, 0x099A	; 0x80099a <count.2427>
     e46:	e9 30       	cpi	r30, 0x09	; 9
     e48:	58 f0       	brcs	.+22     	; 0xe60 <uart_process_byte+0x44>
	{
		incomingString[count - 1] = '\0';
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	e7 59       	subi	r30, 0x97	; 151
     e4e:	f6 4f       	sbci	r31, 0xF6	; 246
     e50:	10 82       	st	Z, r1
		count = 0;
     e52:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <count.2427>
		stringActive = 0;
     e56:	10 92 9b 09 	sts	0x099B, r1	; 0x80099b <stringActive.2429>
		uart_parse_input(incomingString);
     e5a:	8a e6       	ldi	r24, 0x6A	; 106
     e5c:	99 e0       	ldi	r25, 0x09	; 9
     e5e:	d3 cf       	rjmp	.-90     	; 0xe06 <uart_parse_input>
     e60:	08 95       	ret

00000e62 <main>:
uint8_t WheelArray[8] = {0,0,10,10,0,0,40,200};

int main(void) {    

    // Set Up
    firmware_init();
     e62:	7f dd       	rcall	.-1282   	; 0x962 <firmware_init>
    timer_init();
     e64:	92 dd       	rcall	.-1244   	; 0x98a <timer_init>
     e66:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <shutdownState>

    // Grab the state of the shutdown circuity
    shutdownState = 0;
     e6a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e6c:	89 e6       	ldi	r24, 0x69	; 105
     e6e:	98 e1       	ldi	r25, 0x18	; 24
     e70:	21 50       	subi	r18, 0x01	; 1
     e72:	80 40       	sbci	r24, 0x00	; 0
     e74:	90 40       	sbci	r25, 0x00	; 0
     e76:	e1 f7       	brne	.-8      	; 0xe70 <main+0xe>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <main+0x18>
     e7a:	00 00       	nop
	_delay_ms(500);
    // Enable Interupts
    sei();					
     e7c:	78 94       	sei
    // Main Poll
    // ------------------------------------------------------------------------
    while(1) {
		
		if(isCharAvailable() == 1)uart_process_byte(receiveChar());
     e7e:	1a d5       	rcall	.+2612   	; 0x18b4 <isCharAvailable>
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	11 f4       	brne	.+4      	; 0xe88 <main+0x26>
     e84:	1d d5       	rcall	.+2618   	; 0x18c0 <receiveChar>
     e86:	ca df       	rcall	.-108    	; 0xe1c <uart_process_byte>
		uart1_puts("Hello World!\n");
     e88:	8c ee       	ldi	r24, 0xEC	; 236
     e8a:	98 e0       	ldi	r25, 0x08	; 8
     e8c:	05 d5       	rcall	.+2570   	; 0x1898 <uart1_puts>
     e8e:	f7 cf       	rjmp	.-18     	; 0xe7e <main+0x1c>

00000e90 <oneKHzTimer>:
	}
     e90:	0f 93       	push	r16

/**
 * @brief Core system's timer, 1ms, core of the pseudo RTOS system
 */
void oneKHzTimer(void)
{
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	1f 92       	push	r1
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
    // static uint8_t InputTempCount = 5;					// Number of iterations for the temp heartbeat trigger

    // static uint8_t CANInputSendTime = 0;					// Number of iterations for the input send trigger

	// flash the LED to show the system is running
	if(test_counter++ > 100)
     e9e:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <test_counter.2494>
     ea2:	90 91 9f 09 	lds	r25, 0x099F	; 0x80099f <test_counter.2494+0x1>
     ea6:	85 36       	cpi	r24, 0x65	; 101
     ea8:	91 05       	cpc	r25, r1
     eaa:	34 f4       	brge	.+12     	; 0xeb8 <oneKHzTimer+0x28>
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	90 93 9f 09 	sts	0x099F, r25	; 0x80099f <test_counter.2494+0x1>
     eb2:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <test_counter.2494>
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <oneKHzTimer+0x30>
	{
		//PORTK ^= 32;
		test_counter = 0;
     eb8:	10 92 9f 09 	sts	0x099F, r1	; 0x80099f <test_counter.2494+0x1>
     ebc:	10 92 9e 09 	sts	0x099E, r1	; 0x80099e <test_counter.2494>
	
	
    // Check the ignition button state
    // 1s debounce, IE hold for 50ms and if held, change state
    // ------------------------------------------------------------------------
	if(!(PINJ & (1<<PJ6))) // Checking Pin J6 (69)
     ec0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7e0103>
     ec4:	86 fd       	sbrc	r24, 6
     ec6:	1e c0       	rjmp	.+60     	; 0xf04 <oneKHzTimer+0x74>
    {
        ignitionState = 1; // Tracks that the ignition button is on
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 12 0a 	sts	0x0A12, r24	; 0x800a12 <ignitionState>
        if(ignitionStateDebounceCount++ > 2000) // If 1s has been counted
     ece:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <ignitionStateDebounceCount>
     ed2:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <ignitionStateDebounceCount+0x1>
     ed6:	9c 01       	movw	r18, r24
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	30 93 15 0a 	sts	0x0A15, r19	; 0x800a15 <ignitionStateDebounceCount+0x1>
     ee0:	20 93 14 0a 	sts	0x0A14, r18	; 0x800a14 <ignitionStateDebounceCount>
     ee4:	81 3d       	cpi	r24, 0xD1	; 209
     ee6:	97 40       	sbci	r25, 0x07	; 7
     ee8:	a8 f0       	brcs	.+42     	; 0xf14 <oneKHzTimer+0x84>
		{
            //If this is the first time though from a previous press
            if(ignitionStateLock == 0) {
     eea:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <ignitionStateLock>
     eee:	81 11       	cpse	r24, r1
     ef0:	11 c0       	rjmp	.+34     	; 0xf14 <oneKHzTimer+0x84>
                ignitionStateLock = 1;		// Disabled first run though after press
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 13 0a 	sts	0x0A13, r24	; 0x800a13 <ignitionStateLock>
                armedState ^= 1;
     ef8:	90 91 11 0a 	lds	r25, 0x0A11	; 0x800a11 <armedState>
     efc:	89 27       	eor	r24, r25
     efe:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <armedState>
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <oneKHzTimer+0x84>
            }
        }
    }
    else {
        ignitionState = 0; // Tracks that the ignition button is off
     f04:	10 92 12 0a 	sts	0x0A12, r1	; 0x800a12 <ignitionState>
        ignitionStateLock = 0; // Re-enables the first run though after the timer has been reached
     f08:	10 92 13 0a 	sts	0x0A13, r1	; 0x800a13 <ignitionStateLock>
        ignitionStateDebounceCount = 0; // Resets the counter for time the button is pressed
     f0c:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <ignitionStateDebounceCount+0x1>
     f10:	10 92 14 0a 	sts	0x0A14, r1	; 0x800a14 <ignitionStateDebounceCount>
     //Send CAN heartbeats -> Inverters: 100Hz, Data: 100Hz, Power: 20Hz
     //100Hz = 1 / 100 = 0.01s = 10ms, 20Hz = 1 / 20 = 0.05s = 50ms
     //------------------------------------------------------------------------
    
	
	 inverterArray[0] = INPUT_accelerationPedal;
     f14:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <INPUT_accelerationPedal>
     f18:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <inverterArray>
	 if(CANheartbeatCountInverters >= CAN_HEARTBEAT_TIME_INVERTERS)
     f1c:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <CANheartbeatCountInverters.2495>
     f20:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <CANheartbeatCountInverters.2495+0x1>
     f24:	0a 97       	sbiw	r24, 0x0a	; 10
     f26:	68 f0       	brcs	.+26     	; 0xf42 <oneKHzTimer+0xb2>
	 {
		 // Reset inverter heartbeat counter
		 CANheartbeatCountInverters = 0;
     f28:	10 92 9d 09 	sts	0x099D, r1	; 0x80099d <CANheartbeatCountInverters.2495+0x1>
     f2c:	10 92 9c 09 	sts	0x099C, r1	; 0x80099c <CANheartbeatCountInverters.2495>
		 // Send inverter system heartbeat
		 CAN_send(TRACTIVE_CAN, 8, inverterArray, 0b0100100000000000000000000011110);
     f30:	0e e1       	ldi	r16, 0x1E	; 30
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	34 e2       	ldi	r19, 0x24	; 36
     f38:	48 ea       	ldi	r20, 0xA8	; 168
     f3a:	59 e0       	ldi	r21, 0x09	; 9
     f3c:	68 e0       	ldi	r22, 0x08	; 8
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	d0 d9       	rcall	.-3168   	; 0x2e2 <CAN_send>
	 }
	 
	 if(CANheartbeatCountWheel > CAN_HEARTBEAT_TIME_WHEEL)
     f42:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CANheartbeatCountWheel.2496>
     f46:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <CANheartbeatCountWheel.2496+0x1>
     f4a:	c3 97       	sbiw	r24, 0x33	; 51
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <oneKHzTimer+0xc6>
	 {
		 // Reset data heartbeat counter
		 CANheartbeatCountWheel = 0;
     f4e:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <CANheartbeatCountWheel.2496+0x1>
     f52:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <CANheartbeatCountWheel.2496>
		 // Send data system heartbeat
		 //CAN_send(DATA_CAN, 8, WheelArray, HEARTBEAT_WHEEL_ID | 1);
		 
	 }
	 
	 if(CANheartbeatCountPDM > CAN_HEARTBEAT_TIME_PDM)
     f56:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <CANheartbeatCountPDM.2497>
     f5a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <CANheartbeatCountPDM.2497+0x1>
     f5e:	c3 97       	sbiw	r24, 0x33	; 51
     f60:	e0 f0       	brcs	.+56     	; 0xf9a <oneKHzTimer+0x10a>
	 {
		 // Reset power heartbeat counter
		 CANheartbeatCountPDM = 0;
     f62:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <CANheartbeatCountPDM.2497+0x1>
     f66:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <CANheartbeatCountPDM.2497>
		 // Send power system heartbeat
		 if(armedState == 1)PDMarray[0] |= 192;
     f6a:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <armedState>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	31 f4       	brne	.+12     	; 0xf7e <oneKHzTimer+0xee>
     f72:	e0 ea       	ldi	r30, 0xA0	; 160
     f74:	f9 e0       	ldi	r31, 0x09	; 9
     f76:	80 81       	ld	r24, Z
     f78:	80 6c       	ori	r24, 0xC0	; 192
     f7a:	80 83       	st	Z, r24
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <oneKHzTimer+0xf8>
		 else PDMarray[0] &= ~192;
     f7e:	e0 ea       	ldi	r30, 0xA0	; 160
     f80:	f9 e0       	ldi	r31, 0x09	; 9
     f82:	80 81       	ld	r24, Z
     f84:	8f 73       	andi	r24, 0x3F	; 63
     f86:	80 83       	st	Z, r24
		 CAN_send(POWER_CAN, 8, PDMarray, HEARTBEAT_PDM_ID | 1);
     f88:	01 e0       	ldi	r16, 0x01	; 1
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	39 e0       	ldi	r19, 0x09	; 9
     f90:	40 ea       	ldi	r20, 0xA0	; 160
     f92:	59 e0       	ldi	r21, 0x09	; 9
     f94:	68 e0       	ldi	r22, 0x08	; 8
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	a4 d9       	rcall	.-3256   	; 0x2e2 <CAN_send>
	 }
	 
	 if(CANheartbeatCountShutdown > CAN_HEARTBEAT_TIME_SHUTDOWN)
     f9a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <CANheartbeatCountShutdown.2498>
     f9e:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <CANheartbeatCountShutdown.2498+0x1>
     fa2:	85 36       	cpi	r24, 0x65	; 101
     fa4:	91 05       	cpc	r25, r1
     fa6:	20 f0       	brcs	.+8      	; 0xfb0 <oneKHzTimer+0x120>
	 {
		 // Reset power heartbeat counter
		 CANheartbeatCountShutdown = 0;
     fa8:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <CANheartbeatCountShutdown.2498+0x1>
     fac:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <CANheartbeatCountShutdown.2498>
		 // Send shutdown heartbeat (dont care what for now)
		 //CAN_send(POWER_CAN, 8, PDMarray, HEARTBEAT_SHUTDOWN_ID | 1);
	 }
	 
	 if(CANheartbeatCountAMU > CAN_HEARTBEAT_TIME_AMU)
     fb0:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <CANheartbeatCountAMU.2499>
     fb4:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <CANheartbeatCountAMU.2499+0x1>
     fb8:	c3 97       	sbiw	r24, 0x33	; 51
     fba:	20 f0       	brcs	.+8      	; 0xfc4 <oneKHzTimer+0x134>
	 {
		 // Reset power heartbeat counter
		 CANheartbeatCountAMU = 0;
     fbc:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <CANheartbeatCountAMU.2499+0x1>
     fc0:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <CANheartbeatCountAMU.2499>
		 // Send shutdown heartbeat (dont care what for now)
		 //CAN_send(POWER_CAN, 8, PDMarray, HEARTBEAT_AMU_ID | 1);
	 }
	 
	 CANheartbeatCountInverters++;
     fc4:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <CANheartbeatCountInverters.2495>
     fc8:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <CANheartbeatCountInverters.2495+0x1>
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	90 93 9d 09 	sts	0x099D, r25	; 0x80099d <CANheartbeatCountInverters.2495+0x1>
     fd2:	80 93 9c 09 	sts	0x099C, r24	; 0x80099c <CANheartbeatCountInverters.2495>
	 CANheartbeatCountWheel++;
     fd6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CANheartbeatCountWheel.2496>
     fda:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <CANheartbeatCountWheel.2496+0x1>
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <CANheartbeatCountWheel.2496+0x1>
     fe4:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <CANheartbeatCountWheel.2496>
	 CANheartbeatCountPDM++;
     fe8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <CANheartbeatCountPDM.2497>
     fec:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <CANheartbeatCountPDM.2497+0x1>
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <CANheartbeatCountPDM.2497+0x1>
     ff6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <CANheartbeatCountPDM.2497>
	 CANheartbeatCountShutdown++;
     ffa:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <CANheartbeatCountShutdown.2498>
     ffe:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <CANheartbeatCountShutdown.2498+0x1>
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <CANheartbeatCountShutdown.2498+0x1>
    1008:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <CANheartbeatCountShutdown.2498>
	 CANheartbeatCountAMU++;
    100c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <CANheartbeatCountAMU.2499>
    1010:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <CANheartbeatCountAMU.2499+0x1>
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <CANheartbeatCountAMU.2499+0x1>
    101a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <CANheartbeatCountAMU.2499>
    // CanHeartbeatErrorPower++;


    // Send CAN input
    uint8_t tmpInputVal;
    if(InputPedalThrottleCount > INPUT_TIME_PEDAL_THROTTLE)
    101e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <InputPedalThrottleCount.2500>
    1022:	8b 30       	cpi	r24, 0x0B	; 11
    1024:	50 f0       	brcs	.+20     	; 0x103a <oneKHzTimer+0x1aa>
    {
		//INPUT_accelerationPedal = a2d_10bitCh(5);

        if(INPUT_get_accelPedal(&tmpInputVal) == 0) {
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	84 dd       	rcall	.-1272   	; 0xb34 <INPUT_get_accelPedal>
    102c:	81 11       	cpse	r24, r1
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <oneKHzTimer+0x1a6>
             INPUT_accelerationPedal = tmpInputVal;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <INPUT_accelerationPedal>
        }
        InputPedalThrottleCount = 0;
    1036:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <InputPedalThrottleCount.2500>
    }

    if(InputPedalBrakeCount > INPUT_TIME_PEDAL_BRAKE)
    103a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <InputPedalBrakeCount.2501>
    103e:	8b 30       	cpi	r24, 0x0B	; 11
    {
        //INPUT_brakePedal = (uint8_t)(a2d_10bitCh(8)/4);
        if(INPUT_get_brakePedal(&tmpInputVal) == 0) {
    1040:	50 f0       	brcs	.+20     	; 0x1056 <oneKHzTimer+0x1c6>
    1042:	ce 01       	movw	r24, r28
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	4e de       	rcall	.-868    	; 0xce4 <INPUT_get_brakePedal>
    1048:	81 11       	cpse	r24, r1
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <oneKHzTimer+0x1c2>
             INPUT_brakePedal = tmpInputVal;
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <INPUT_brakePedal>
		}
		
        InputPedalBrakeCount = 0;
    1052:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <InputPedalBrakeCount.2501>
    }
	
	if(InputSteeringCount > INPUT_TIME_STEERING)
    1056:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <InputSteeringCount.2502>
    105a:	8b 30       	cpi	r24, 0x0B	; 11
	{
		INPUT_steeringAngle = (uint8_t)(a2d_8bitCh(INPUT_STEERING_ANGLE_CH));
    105c:	30 f0       	brcs	.+12     	; 0x106a <oneKHzTimer+0x1da>
    105e:	84 e0       	ldi	r24, 0x04	; 4
    1060:	3a d9       	rcall	.-3468   	; 0x2d6 <a2d_8bitCh>
    1062:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <INPUT_steeringAngle>
		//if(INPUT_get_steeringWheel(&tmpInputVal) == 0) {
			//INPUT_steeringAngle = tmpInputVal;
		//}
		
		InputSteeringCount = 0;
    1066:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <InputSteeringCount.2502>
	}
	
    InputPedalThrottleCount++;
    106a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <InputPedalThrottleCount.2500>
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <InputPedalThrottleCount.2500>
    InputPedalBrakeCount++;
    1074:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <InputPedalBrakeCount.2501>
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <InputPedalBrakeCount.2501>
	InputSteeringCount++;
    107e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <InputSteeringCount.2502>
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <InputSteeringCount.2502>
    
	
	inverterArray[0] = INPUT_accelerationPedal;
    1088:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <INPUT_accelerationPedal>
    108c:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <inverterArray>
	WheelArray[1] = INPUT_accelerationPedal;
    1090:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <WheelArray+0x1>
    // }
    // if(INPUT_get_brakePressureFront(&tmpInputVal) == 0) {
    //     INPUT_brakePressureFront = tmpInputVal;
    // }
	
}
    1094:	0f 90       	pop	r0
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <__vector_21>:

/**
 * @brief Called whenever the 1Khz timer triggers
 */
ISR(TIMER0_COMPA_vect)
{
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	0b b6       	in	r0, 0x3b	; 59
    10ac:	0f 92       	push	r0
    10ae:	2f 93       	push	r18
    10b0:	3f 93       	push	r19
    10b2:	4f 93       	push	r20
    10b4:	5f 93       	push	r21
    10b6:	6f 93       	push	r22
    10b8:	7f 93       	push	r23
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	af 93       	push	r26
    10c0:	bf 93       	push	r27
    10c2:	ef 93       	push	r30
    10c4:	ff 93       	push	r31
    oneKHzTimer();	
    10c6:	e4 de       	rcall	.-568    	; 0xe90 <oneKHzTimer>
}
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0b be       	out	0x3b, r0	; 59
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1

}
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <__vector_2>:

/**
 * @brief Called whenever CANBUS 1 interupt is triggered
 *        * When ever there is data waiting in CAN 1
 */
ISR(INT1_vect) {
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	0b b6       	in	r0, 0x3b	; 59
    110e:	0f 92       	push	r0
    1110:	2f 93       	push	r18
    1112:	3f 93       	push	r19
    1114:	4f 93       	push	r20
    1116:	5f 93       	push	r21
    1118:	6f 93       	push	r22
    111a:	7f 93       	push	r23
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	2d 97       	sbiw	r28, 0x0d	; 13
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	cd bf       	out	0x3d, r28	; 61
	// Details about the message we're attempting to pull from the CAN bus
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	led_toggle();
    1136:	12 de       	rcall	.-988    	; 0xd5c <led_toggle>
	// Get the data from the CAN bus and process it
	CAN_pull_packet(TRACTIVE_CAN, &numBytes, data, &ID);
    1138:	9e 01       	movw	r18, r28
    113a:	27 5f       	subi	r18, 0xF7	; 247
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	ae 01       	movw	r20, r28
    1140:	4f 5f       	subi	r20, 0xFF	; 255
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	be 01       	movw	r22, r28
    1146:	63 5f       	subi	r22, 0xF3	; 243
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	f2 d8       	rcall	.-3612   	; 0x332 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_RESPONSE_MALFORMED);
	
	
	sprintf(out, "%x,%x,%x,%x,%x,%x,%x,%x", data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
    114e:	88 85       	ldd	r24, Y+8	; 0x08
    1150:	1f 92       	push	r1
    1152:	8f 93       	push	r24
    1154:	8f 81       	ldd	r24, Y+7	; 0x07
    1156:	1f 92       	push	r1
    1158:	8f 93       	push	r24
    115a:	8e 81       	ldd	r24, Y+6	; 0x06
    115c:	1f 92       	push	r1
    115e:	8f 93       	push	r24
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	1f 92       	push	r1
    1164:	8f 93       	push	r24
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	1f 92       	push	r1
    116a:	8f 93       	push	r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	1f 92       	push	r1
    1170:	8f 93       	push	r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	1f 92       	push	r1
    1176:	8f 93       	push	r24
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	1f 92       	push	r1
    117c:	8f 93       	push	r24
    117e:	8a ef       	ldi	r24, 0xFA	; 250
    1180:	98 e0       	ldi	r25, 0x08	; 8
    1182:	9f 93       	push	r25
    1184:	8f 93       	push	r24
    1186:	80 eb       	ldi	r24, 0xB0	; 176
    1188:	99 e0       	ldi	r25, 0x09	; 9
    118a:	9f 93       	push	r25
    118c:	8f 93       	push	r24
    118e:	fd d3       	rcall	.+2042   	; 0x198a <sprintf>
	//uart1_puts(out);
	//uart_puts(out);
	//uart1_puts(data);
}
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	2d 96       	adiw	r28, 0x0d	; 13
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0b be       	out	0x3b, r0	; 59
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <__vector_1>:

/**
 * @brief Called whenever CANBUS 2 interupt is triggered
 *        * When ever there is data waiting in CAN 2
 */
ISR(INT0_vect)	{
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	0b b6       	in	r0, 0x3b	; 59
    11dc:	0f 92       	push	r0
    11de:	2f 93       	push	r18
    11e0:	3f 93       	push	r19
    11e2:	4f 93       	push	r20
    11e4:	5f 93       	push	r21
    11e6:	6f 93       	push	r22
    11e8:	7f 93       	push	r23
    11ea:	8f 93       	push	r24
    11ec:	9f 93       	push	r25
    11ee:	af 93       	push	r26
    11f0:	bf 93       	push	r27
    11f2:	ef 93       	push	r30
    11f4:	ff 93       	push	r31
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	2d 97       	sbiw	r28, 0x0d	; 13
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	//led_toggle();
	// Get the data from the CAN bus and process it
	CAN_pull_packet(POWER_CAN, &numBytes, data, &ID);
    1204:	9e 01       	movw	r18, r28
    1206:	27 5f       	subi	r18, 0xF7	; 247
    1208:	3f 4f       	sbci	r19, 0xFF	; 255
    120a:	ae 01       	movw	r20, r28
    120c:	4f 5f       	subi	r20, 0xFF	; 255
    120e:	5f 4f       	sbci	r21, 0xFF	; 255
    1210:	be 01       	movw	r22, r28
    1212:	63 5f       	subi	r22, 0xF3	; 243
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	8c d8       	rcall	.-3816   	; 0x332 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
		
}
    121a:	2d 96       	adiw	r28, 0x0d	; 13
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	ff 91       	pop	r31
    122c:	ef 91       	pop	r30
    122e:	bf 91       	pop	r27
    1230:	af 91       	pop	r26
    1232:	9f 91       	pop	r25
    1234:	8f 91       	pop	r24
    1236:	7f 91       	pop	r23
    1238:	6f 91       	pop	r22
    123a:	5f 91       	pop	r21
    123c:	4f 91       	pop	r20
    123e:	3f 91       	pop	r19
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0b be       	out	0x3b, r0	; 59
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	0f 90       	pop	r0
    124c:	1f 90       	pop	r1
    124e:	18 95       	reti

00001250 <__vector_9>:

/**
 * @brief Called whenever CANBUS 3 interupt is triggered
 *        * When ever there is data waiting in CAN 3
 */
ISR(PCINT0_vect) {
    1250:	1f 92       	push	r1
    1252:	0f 92       	push	r0
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	0f 92       	push	r0
    1258:	11 24       	eor	r1, r1
    125a:	0b b6       	in	r0, 0x3b	; 59
    125c:	0f 92       	push	r0
    125e:	2f 93       	push	r18
    1260:	3f 93       	push	r19
    1262:	4f 93       	push	r20
    1264:	5f 93       	push	r21
    1266:	6f 93       	push	r22
    1268:	7f 93       	push	r23
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	af 93       	push	r26
    1270:	bf 93       	push	r27
    1272:	ef 93       	push	r30
    1274:	ff 93       	push	r31
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	2d 97       	sbiw	r28, 0x0d	; 13
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(DATA_CAN, &numBytes, data, &ID);
    1284:	9e 01       	movw	r18, r28
    1286:	27 5f       	subi	r18, 0xF7	; 247
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	ae 01       	movw	r20, r28
    128c:	4f 5f       	subi	r20, 0xFF	; 255
    128e:	5f 4f       	sbci	r21, 0xFF	; 255
    1290:	be 01       	movw	r22, r28
    1292:	63 5f       	subi	r22, 0xF3	; 243
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	4c d8       	rcall	.-3944   	; 0x332 <CAN_pull_packet>
    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);

	

    129a:	2d 96       	adiw	r28, 0x0d	; 13
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0b be       	out	0x3b, r0	; 59
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <MCP2515_CS_low>:
			MCP2515_reg_write(CANbus, MCP2515_RXM1EID0, IDmsk & 0xFF );
			if(IDmsk) MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
			else MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
	}	
	return 1;
}
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	51 f0       	breq	.+20     	; 0x12e8 <MCP2515_CS_low+0x18>
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	71 f0       	breq	.+28     	; 0x12f4 <MCP2515_CS_low+0x24>
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	69 f4       	brne	.+26     	; 0x12f6 <MCP2515_CS_low+0x26>
    12dc:	e2 e0       	ldi	r30, 0x02	; 2
    12de:	f1 e0       	ldi	r31, 0x01	; 1
    12e0:	80 81       	ld	r24, Z
    12e2:	8e 7f       	andi	r24, 0xFE	; 254
    12e4:	80 83       	st	Z, r24
    12e6:	08 95       	ret
    12e8:	e2 e0       	ldi	r30, 0x02	; 2
    12ea:	f1 e0       	ldi	r31, 0x01	; 1
    12ec:	80 81       	ld	r24, Z
    12ee:	8d 7f       	andi	r24, 0xFD	; 253
    12f0:	80 83       	st	Z, r24
    12f2:	08 95       	ret
    12f4:	28 98       	cbi	0x05, 0	; 5
    12f6:	08 95       	ret

000012f8 <MCP2515_CS_high>:
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	51 f0       	breq	.+20     	; 0x1310 <MCP2515_CS_high+0x18>
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	71 f0       	breq	.+28     	; 0x131c <MCP2515_CS_high+0x24>
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	69 f4       	brne	.+26     	; 0x131e <MCP2515_CS_high+0x26>
    1304:	e2 e0       	ldi	r30, 0x02	; 2
    1306:	f1 e0       	ldi	r31, 0x01	; 1
    1308:	80 81       	ld	r24, Z
    130a:	81 60       	ori	r24, 0x01	; 1
    130c:	80 83       	st	Z, r24
    130e:	08 95       	ret
    1310:	e2 e0       	ldi	r30, 0x02	; 2
    1312:	f1 e0       	ldi	r31, 0x01	; 1
    1314:	80 81       	ld	r24, Z
    1316:	82 60       	ori	r24, 0x02	; 2
    1318:	80 83       	st	Z, r24
    131a:	08 95       	ret
    131c:	28 9a       	sbi	0x05, 0	; 5
    131e:	08 95       	ret

00001320 <MCP2515_reg_write>:
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	c8 2f       	mov	r28, r24
    1328:	16 2f       	mov	r17, r22
    132a:	d4 2f       	mov	r29, r20
    132c:	d1 df       	rcall	.-94     	; 0x12d0 <MCP2515_CS_low>
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	8c d1       	rcall	.+792    	; 0x164a <SPI_send_byte>
    1332:	81 2f       	mov	r24, r17
    1334:	8a d1       	rcall	.+788    	; 0x164a <SPI_send_byte>
    1336:	8d 2f       	mov	r24, r29
    1338:	88 d1       	rcall	.+784    	; 0x164a <SPI_send_byte>
    133a:	8c 2f       	mov	r24, r28
    133c:	dd df       	rcall	.-70     	; 0x12f8 <MCP2515_CS_high>
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	08 95       	ret

00001346 <MCP2515_instruction>:
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	c8 2f       	mov	r28, r24
    134c:	d6 2f       	mov	r29, r22
    134e:	c0 df       	rcall	.-128    	; 0x12d0 <MCP2515_CS_low>
    1350:	8d 2f       	mov	r24, r29
    1352:	7b d1       	rcall	.+758    	; 0x164a <SPI_send_byte>
    1354:	8c 2f       	mov	r24, r28
    1356:	d0 df       	rcall	.-96     	; 0x12f8 <MCP2515_CS_high>
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <MCP2515_bit_modify>:
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	c8 2f       	mov	r28, r24
    1368:	06 2f       	mov	r16, r22
    136a:	d4 2f       	mov	r29, r20
    136c:	12 2f       	mov	r17, r18
    136e:	b0 df       	rcall	.-160    	; 0x12d0 <MCP2515_CS_low>
    1370:	85 e0       	ldi	r24, 0x05	; 5
    1372:	6b d1       	rcall	.+726    	; 0x164a <SPI_send_byte>
    1374:	80 2f       	mov	r24, r16
    1376:	69 d1       	rcall	.+722    	; 0x164a <SPI_send_byte>
    1378:	81 2f       	mov	r24, r17
    137a:	67 d1       	rcall	.+718    	; 0x164a <SPI_send_byte>
    137c:	8d 2f       	mov	r24, r29
    137e:	65 d1       	rcall	.+714    	; 0x164a <SPI_send_byte>
    1380:	8c 2f       	mov	r24, r28
    1382:	ba df       	rcall	.-140    	; 0x12f8 <MCP2515_CS_high>
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <MCP2515_init>:
    138e:	cf 93       	push	r28
    1390:	c8 2f       	mov	r28, r24
    1392:	60 ec       	ldi	r22, 0xC0	; 192
    1394:	d8 df       	rcall	.-80     	; 0x1346 <MCP2515_instruction>
    1396:	20 ee       	ldi	r18, 0xE0	; 224
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	6f e0       	ldi	r22, 0x0F	; 15
    139c:	8c 2f       	mov	r24, r28
    139e:	df df       	rcall	.-66     	; 0x135e <MCP2515_bit_modify>
    13a0:	44 e0       	ldi	r20, 0x04	; 4
    13a2:	6a e2       	ldi	r22, 0x2A	; 42
    13a4:	8c 2f       	mov	r24, r28
    13a6:	bc df       	rcall	.-136    	; 0x1320 <MCP2515_reg_write>
    13a8:	4a ec       	ldi	r20, 0xCA	; 202
    13aa:	69 e2       	ldi	r22, 0x29	; 41
    13ac:	8c 2f       	mov	r24, r28
    13ae:	b8 df       	rcall	.-144    	; 0x1320 <MCP2515_reg_write>
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	68 e2       	ldi	r22, 0x28	; 40
    13b4:	8c 2f       	mov	r24, r28
    13b6:	b4 df       	rcall	.-152    	; 0x1320 <MCP2515_reg_write>
    13b8:	43 e0       	ldi	r20, 0x03	; 3
    13ba:	6b e2       	ldi	r22, 0x2B	; 43
    13bc:	8c 2f       	mov	r24, r28
    13be:	b0 df       	rcall	.-160    	; 0x1320 <MCP2515_reg_write>
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	6d e0       	ldi	r22, 0x0D	; 13
    13c4:	8c 2f       	mov	r24, r28
    13c6:	ac df       	rcall	.-168    	; 0x1320 <MCP2515_reg_write>
    13c8:	28 ee       	ldi	r18, 0xE8	; 232
    13ca:	48 e0       	ldi	r20, 0x08	; 8
    13cc:	6f e0       	ldi	r22, 0x0F	; 15
    13ce:	8c 2f       	mov	r24, r28
    13d0:	c6 df       	rcall	.-116    	; 0x135e <MCP2515_bit_modify>
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <MCP2515_PullCanPacket>:
    13d6:	7f 92       	push	r7
    13d8:	8f 92       	push	r8
    13da:	9f 92       	push	r9
    13dc:	af 92       	push	r10
    13de:	bf 92       	push	r11
    13e0:	cf 92       	push	r12
    13e2:	df 92       	push	r13
    13e4:	ef 92       	push	r14
    13e6:	ff 92       	push	r15
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	2d 97       	sbiw	r28, 0x0d	; 13
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	78 2e       	mov	r7, r24
    1402:	4a 01       	movw	r8, r20
    1404:	59 01       	movw	r10, r18
    1406:	61 37       	cpi	r22, 0x71	; 113
    1408:	28 f4       	brcc	.+10     	; 0x1414 <MCP2515_PullCanPacket+0x3e>
    140a:	0f 2e       	mov	r0, r31
    140c:	f0 e9       	ldi	r31, 0x90	; 144
    140e:	ff 2e       	mov	r15, r31
    1410:	f0 2d       	mov	r31, r0
    1412:	04 c0       	rjmp	.+8      	; 0x141c <MCP2515_PullCanPacket+0x46>
    1414:	0f 2e       	mov	r0, r31
    1416:	f4 e9       	ldi	r31, 0x94	; 148
    1418:	ff 2e       	mov	r15, r31
    141a:	f0 2d       	mov	r31, r0
    141c:	87 2d       	mov	r24, r7
    141e:	58 df       	rcall	.-336    	; 0x12d0 <MCP2515_CS_low>
    1420:	8f 2d       	mov	r24, r15
    1422:	13 d1       	rcall	.+550    	; 0x164a <SPI_send_byte>
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	7c 01       	movw	r14, r24
    142a:	6e 01       	movw	r12, r28
    142c:	9e e0       	ldi	r25, 0x0E	; 14
    142e:	c9 0e       	add	r12, r25
    1430:	d1 1c       	adc	r13, r1
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0a d1       	rcall	.+532    	; 0x164a <SPI_send_byte>
    1436:	f7 01       	movw	r30, r14
    1438:	81 93       	st	Z+, r24
    143a:	7f 01       	movw	r14, r30
    143c:	ec 15       	cp	r30, r12
    143e:	fd 05       	cpc	r31, r13
    1440:	c1 f7       	brne	.-16     	; 0x1432 <MCP2515_PullCanPacket+0x5c>
    1442:	2a 81       	ldd	r18, Y+2	; 0x02
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a0 e0       	ldi	r26, 0x00	; 0
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	07 2e       	mov	r0, r23
    144e:	75 e1       	ldi	r23, 0x15	; 21
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	aa 1f       	adc	r26, r26
    1456:	bb 1f       	adc	r27, r27
    1458:	7a 95       	dec	r23
    145a:	d1 f7       	brne	.-12     	; 0x1450 <MCP2515_PullCanPacket+0x7a>
    145c:	70 2d       	mov	r23, r0
    145e:	3b 81       	ldd	r19, Y+3	; 0x03
    1460:	93 2b       	or	r25, r19
    1462:	3c 81       	ldd	r19, Y+4	; 0x04
    1464:	83 2b       	or	r24, r19
    1466:	42 2f       	mov	r20, r18
    1468:	40 7e       	andi	r20, 0xE0	; 224
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	03 2e       	mov	r0, r19
    1472:	3d e0       	ldi	r19, 0x0D	; 13
    1474:	44 0f       	add	r20, r20
    1476:	55 1f       	adc	r21, r21
    1478:	66 1f       	adc	r22, r22
    147a:	77 1f       	adc	r23, r23
    147c:	3a 95       	dec	r19
    147e:	d1 f7       	brne	.-12     	; 0x1474 <MCP2515_PullCanPacket+0x9e>
    1480:	30 2d       	mov	r19, r0
    1482:	84 2b       	or	r24, r20
    1484:	95 2b       	or	r25, r21
    1486:	a6 2b       	or	r26, r22
    1488:	b7 2b       	or	r27, r23
    148a:	23 70       	andi	r18, 0x03	; 3
    148c:	a2 2b       	or	r26, r18
    148e:	f8 01       	movw	r30, r16
    1490:	80 83       	st	Z, r24
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	a2 83       	std	Z+2, r26	; 0x02
    1496:	b3 83       	std	Z+3, r27	; 0x03
    1498:	4d 85       	ldd	r20, Y+13	; 0x0d
    149a:	4f 70       	andi	r20, 0x0F	; 15
    149c:	f4 01       	movw	r30, r8
    149e:	40 83       	st	Z, r20
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	be 01       	movw	r22, r28
    14a4:	6b 5f       	subi	r22, 0xFB	; 251
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	c5 01       	movw	r24, r10
    14aa:	2a d2       	rcall	.+1108   	; 0x1900 <memcpy>
    14ac:	87 2d       	mov	r24, r7
    14ae:	24 df       	rcall	.-440    	; 0x12f8 <MCP2515_CS_high>
    14b0:	2d 96       	adiw	r28, 0x0d	; 13
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	7f 90       	pop	r7
    14d6:	08 95       	ret

000014d8 <MCP2515_reg_read>:
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	c8 2f       	mov	r28, r24
    14de:	d6 2f       	mov	r29, r22
    14e0:	f7 de       	rcall	.-530    	; 0x12d0 <MCP2515_CS_low>
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	b2 d0       	rcall	.+356    	; 0x164a <SPI_send_byte>
    14e6:	8d 2f       	mov	r24, r29
    14e8:	b0 d0       	rcall	.+352    	; 0x164a <SPI_send_byte>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	ae d0       	rcall	.+348    	; 0x164a <SPI_send_byte>
    14ee:	d8 2f       	mov	r29, r24
    14f0:	8c 2f       	mov	r24, r28
    14f2:	02 df       	rcall	.-508    	; 0x12f8 <MCP2515_CS_high>
    14f4:	8d 2f       	mov	r24, r29
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <MCP2515_findFreeTxBuffer>:
    14fc:	cf 93       	push	r28
    14fe:	c8 2f       	mov	r28, r24
    1500:	60 e3       	ldi	r22, 0x30	; 48
    1502:	ea df       	rcall	.-44     	; 0x14d8 <MCP2515_reg_read>
    1504:	83 ff       	sbrs	r24, 3
    1506:	0c c0       	rjmp	.+24     	; 0x1520 <MCP2515_findFreeTxBuffer+0x24>
    1508:	60 e4       	ldi	r22, 0x40	; 64
    150a:	8c 2f       	mov	r24, r28
    150c:	e5 df       	rcall	.-54     	; 0x14d8 <MCP2515_reg_read>
    150e:	83 ff       	sbrs	r24, 3
    1510:	09 c0       	rjmp	.+18     	; 0x1524 <MCP2515_findFreeTxBuffer+0x28>
    1512:	60 e5       	ldi	r22, 0x50	; 80
    1514:	8c 2f       	mov	r24, r28
    1516:	e0 df       	rcall	.-64     	; 0x14d8 <MCP2515_reg_read>
    1518:	83 ff       	sbrs	r24, 3
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <MCP2515_findFreeTxBuffer+0x2c>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	05 c0       	rjmp	.+10     	; 0x152a <MCP2515_findFreeTxBuffer+0x2e>
    1520:	80 e3       	ldi	r24, 0x30	; 48
    1522:	03 c0       	rjmp	.+6      	; 0x152a <MCP2515_findFreeTxBuffer+0x2e>
    1524:	80 e4       	ldi	r24, 0x40	; 64
    1526:	01 c0       	rjmp	.+2      	; 0x152a <MCP2515_findFreeTxBuffer+0x2e>
    1528:	80 e5       	ldi	r24, 0x50	; 80
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <MCP2515_TX>:

void MCP2515_TX(uint8_t CANbus, int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID)
{
    152e:	8f 92       	push	r8
    1530:	9f 92       	push	r9
    1532:	af 92       	push	r10
    1534:	bf 92       	push	r11
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
	if(mob == 0)return;						//no free mob or invalid mob
    1544:	66 23       	and	r22, r22
    1546:	09 f4       	brne	.+2      	; 0x154a <MCP2515_TX+0x1c>
    1548:	63 c0       	rjmp	.+198    	; 0x1610 <MCP2515_TX+0xe2>
    154a:	47 01       	movw	r8, r14
    154c:	58 01       	movw	r10, r16
    154e:	c3 2f       	mov	r28, r19
    1550:	e2 2e       	mov	r14, r18
    1552:	d4 2e       	mov	r13, r20
    1554:	f6 2e       	mov	r15, r22
    1556:	d8 2f       	mov	r29, r24
	MCP2515_reg_write(CANbus, mob, 0x03);			//we shall set this to the highest priority so that it sends it immediately.
    1558:	43 e0       	ldi	r20, 0x03	; 3
    155a:	e2 de       	rcall	.-572    	; 0x1320 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+1, (ID>>21) & 0xFF);	//shift the ID data to fill the respective MCP registers
    155c:	b5 01       	movw	r22, r10
    155e:	a4 01       	movw	r20, r8
    1560:	03 2e       	mov	r0, r19
    1562:	35 e1       	ldi	r19, 0x15	; 21
    1564:	76 95       	lsr	r23
    1566:	67 95       	ror	r22
    1568:	57 95       	ror	r21
    156a:	47 95       	ror	r20
    156c:	3a 95       	dec	r19
    156e:	d1 f7       	brne	.-12     	; 0x1564 <MCP2515_TX+0x36>
    1570:	30 2d       	mov	r19, r0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	8f 0d       	add	r24, r15
    1576:	68 2f       	mov	r22, r24
    1578:	8d 2f       	mov	r24, r29
    157a:	d2 de       	rcall	.-604    	; 0x1320 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+2, (((ID>>13) & 224)| ((ID>>16) & 3) | ((1<<3) & 0xFF)));	//set the EXIDE bit, which makes it extended (CAN 2.0B)
    157c:	b5 01       	movw	r22, r10
    157e:	a4 01       	movw	r20, r8
    1580:	03 2e       	mov	r0, r19
    1582:	3d e0       	ldi	r19, 0x0D	; 13
    1584:	76 95       	lsr	r23
    1586:	67 95       	ror	r22
    1588:	57 95       	ror	r21
    158a:	47 95       	ror	r20
    158c:	3a 95       	dec	r19
    158e:	d1 f7       	brne	.-12     	; 0x1584 <MCP2515_TX+0x56>
    1590:	30 2d       	mov	r19, r0
    1592:	40 7e       	andi	r20, 0xE0	; 224
    1594:	8a 2d       	mov	r24, r10
    1596:	83 70       	andi	r24, 0x03	; 3
    1598:	48 2b       	or	r20, r24
    159a:	48 60       	ori	r20, 0x08	; 8
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	6f 0d       	add	r22, r15
    15a0:	8d 2f       	mov	r24, r29
    15a2:	be de       	rcall	.-644    	; 0x1320 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+3, (ID>>8) & 0xFF );
    15a4:	77 27       	eor	r23, r23
    15a6:	6b 2d       	mov	r22, r11
    15a8:	5a 2d       	mov	r21, r10
    15aa:	49 2d       	mov	r20, r9
    15ac:	83 e0       	ldi	r24, 0x03	; 3
    15ae:	8f 0d       	add	r24, r15
    15b0:	68 2f       	mov	r22, r24
    15b2:	8d 2f       	mov	r24, r29
    15b4:	b5 de       	rcall	.-662    	; 0x1320 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+4, ID & 0xFF );
    15b6:	64 e0       	ldi	r22, 0x04	; 4
    15b8:	6f 0d       	add	r22, r15
    15ba:	48 2d       	mov	r20, r8
    15bc:	8d 2f       	mov	r24, r29
    15be:	b0 de       	rcall	.-672    	; 0x1320 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+5, numBytes);		//set how many bytes we wish to send
    15c0:	65 e0       	ldi	r22, 0x05	; 5
    15c2:	6f 0d       	add	r22, r15
    15c4:	4d 2d       	mov	r20, r13
    15c6:	8d 2f       	mov	r24, r29
    15c8:	ab de       	rcall	.-682    	; 0x1320 <MCP2515_reg_write>
    15ca:	dd 20       	and	r13, r13
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);

	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    15cc:	89 f0       	breq	.+34     	; 0x15f0 <MCP2515_TX+0xc2>
    15ce:	0e 2d       	mov	r16, r14
    15d0:	1c 2f       	mov	r17, r28
    15d2:	c6 e0       	ldi	r28, 0x06	; 6
    15d4:	cf 0d       	add	r28, r15
    15d6:	46 e0       	ldi	r20, 0x06	; 6
    15d8:	4d 0d       	add	r20, r13
    15da:	e4 2e       	mov	r14, r20
    15dc:	ef 0c       	add	r14, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
    15de:	f8 01       	movw	r30, r16
    15e0:	41 91       	ld	r20, Z+
    15e2:	8f 01       	movw	r16, r30
    15e4:	6c 2f       	mov	r22, r28
    15e6:	8d 2f       	mov	r24, r29
    15e8:	9b de       	rcall	.-714    	; 0x1320 <MCP2515_reg_write>
    15ea:	cf 5f       	subi	r28, 0xFF	; 255
    15ec:	ce 11       	cpse	r28, r14
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);

	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    15ee:	f7 cf       	rjmp	.-18     	; 0x15de <MCP2515_TX+0xb0>
    15f0:	8f 2d       	mov	r24, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
	}
	MCP2515_instruction(CANbus, 128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
    15f2:	85 95       	asr	r24
    15f4:	85 95       	asr	r24
    15f6:	85 95       	asr	r24
    15f8:	85 95       	asr	r24
    15fa:	83 50       	subi	r24, 0x03	; 3
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <MCP2515_TX+0xd8>
    1602:	66 0f       	add	r22, r22
    1604:	77 1f       	adc	r23, r23
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <MCP2515_TX+0xd4>
    160a:	60 68       	ori	r22, 0x80	; 128
    160c:	8d 2f       	mov	r24, r29
    160e:	9b de       	rcall	.-714    	; 0x1346 <MCP2515_instruction>
    1610:	df 91       	pop	r29
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	df 90       	pop	r13
    161e:	bf 90       	pop	r11
    1620:	af 90       	pop	r10
    1622:	9f 90       	pop	r9
    1624:	8f 90       	pop	r8
    1626:	08 95       	ret

00001628 <MCP2515_check_receive_status>:
    1628:	cf 93       	push	r28


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
    162a:	df 93       	push	r29
    162c:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
    162e:	50 de       	rcall	.-864    	; 0x12d0 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
    1630:	80 eb       	ldi	r24, 0xB0	; 176
    1632:	0b d0       	rcall	.+22     	; 0x164a <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	09 d0       	rcall	.+18     	; 0x164a <SPI_send_byte>
    1638:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	06 d0       	rcall	.+12     	; 0x164a <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
    163e:	8c 2f       	mov	r24, r28
    1640:	5b de       	rcall	.-842    	; 0x12f8 <MCP2515_CS_high>
    1642:	8d 2f       	mov	r24, r29
	return status;
}
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    164a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    164c:	0d b4       	in	r0, 0x2d	; 45
    164e:	07 fe       	sbrs	r0, 7
    1650:	fd cf       	rjmp	.-6      	; 0x164c <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    1652:	8e b5       	in	r24, 0x2e	; 46
}
    1654:	08 95       	ret

00001656 <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
    1656:	81 e5       	ldi	r24, 0x51	; 81
    1658:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
    165e:	1e bc       	out	0x2e, r1	; 46
    1660:	08 95       	ret

00001662 <__vector_25>:
{	
	// Does the RX0 bit of the USART Status and Control Register
	// indicate a char has been received?
	if ( (UCSR1A & (0x80)) ) return 1;
	else return 0;
}
    1662:	1f 92       	push	r1
    1664:	0f 92       	push	r0
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	0f 92       	push	r0
    166a:	11 24       	eor	r1, r1
    166c:	0b b6       	in	r0, 0x3b	; 59
    166e:	0f 92       	push	r0
    1670:	2f 93       	push	r18
    1672:	8f 93       	push	r24
    1674:	9f 93       	push	r25
    1676:	ef 93       	push	r30
    1678:	ff 93       	push	r31
    167a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    167e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1682:	88 71       	andi	r24, 0x18	; 24
    1684:	e0 91 5d 0a 	lds	r30, 0x0A5D	; 0x800a5d <UART_RxHead>
    1688:	ef 5f       	subi	r30, 0xFF	; 255
    168a:	ef 71       	andi	r30, 0x1F	; 31
    168c:	90 91 5c 0a 	lds	r25, 0x0A5C	; 0x800a5c <UART_RxTail>
    1690:	e9 17       	cp	r30, r25
    1692:	39 f0       	breq	.+14     	; 0x16a2 <__vector_25+0x40>
    1694:	e0 93 5d 0a 	sts	0x0A5D, r30	; 0x800a5d <UART_RxHead>
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	e0 5a       	subi	r30, 0xA0	; 160
    169c:	f5 4f       	sbci	r31, 0xF5	; 245
    169e:	20 83       	st	Z, r18
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <__vector_25+0x42>
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	80 93 5b 0a 	sts	0x0A5B, r24	; 0x800a5b <UART_LastRxError>
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	2f 91       	pop	r18
    16b2:	0f 90       	pop	r0
    16b4:	0b be       	out	0x3b, r0	; 59
    16b6:	0f 90       	pop	r0
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	0f 90       	pop	r0
    16bc:	1f 90       	pop	r1
    16be:	18 95       	reti

000016c0 <__vector_36>:
    16c0:	1f 92       	push	r1
    16c2:	0f 92       	push	r0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	0b b6       	in	r0, 0x3b	; 59
    16cc:	0f 92       	push	r0
    16ce:	2f 93       	push	r18
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
    16d8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    16dc:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    16e0:	88 71       	andi	r24, 0x18	; 24
    16e2:	e0 91 18 0a 	lds	r30, 0x0A18	; 0x800a18 <UART1_RxHead>
    16e6:	ef 5f       	subi	r30, 0xFF	; 255
    16e8:	ef 71       	andi	r30, 0x1F	; 31
    16ea:	90 91 17 0a 	lds	r25, 0x0A17	; 0x800a17 <UART1_RxTail>
    16ee:	e9 17       	cp	r30, r25
    16f0:	39 f0       	breq	.+14     	; 0x1700 <__vector_36+0x40>
    16f2:	e0 93 18 0a 	sts	0x0A18, r30	; 0x800a18 <UART1_RxHead>
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	e5 5e       	subi	r30, 0xE5	; 229
    16fa:	f5 4f       	sbci	r31, 0xF5	; 245
    16fc:	20 83       	st	Z, r18
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <__vector_36+0x42>
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	80 93 16 0a 	sts	0x0A16, r24	; 0x800a16 <UART1_LastRxError>
    1706:	ff 91       	pop	r31
    1708:	ef 91       	pop	r30
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	2f 91       	pop	r18
    1710:	0f 90       	pop	r0
    1712:	0b be       	out	0x3b, r0	; 59
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <__vector_26>:
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	0b b6       	in	r0, 0x3b	; 59
    172a:	0f 92       	push	r0
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	90 91 5f 0a 	lds	r25, 0x0A5F	; 0x800a5f <UART_TxHead>
    1738:	80 91 5e 0a 	lds	r24, 0x0A5E	; 0x800a5e <UART_TxTail>
    173c:	98 17       	cp	r25, r24
    173e:	69 f0       	breq	.+26     	; 0x175a <__vector_26+0x3c>
    1740:	e0 91 5e 0a 	lds	r30, 0x0A5E	; 0x800a5e <UART_TxTail>
    1744:	ef 5f       	subi	r30, 0xFF	; 255
    1746:	ef 71       	andi	r30, 0x1F	; 31
    1748:	e0 93 5e 0a 	sts	0x0A5E, r30	; 0x800a5e <UART_TxTail>
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	e0 58       	subi	r30, 0x80	; 128
    1750:	f5 4f       	sbci	r31, 0xF5	; 245
    1752:	80 81       	ld	r24, Z
    1754:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <__vector_26+0x46>
    175a:	e1 ec       	ldi	r30, 0xC1	; 193
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8f 7d       	andi	r24, 0xDF	; 223
    1762:	80 83       	st	Z, r24
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	0f 90       	pop	r0
    176e:	0b be       	out	0x3b, r0	; 59
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	0f 90       	pop	r0
    1776:	1f 90       	pop	r1
    1778:	18 95       	reti

0000177a <__vector_37>:
    177a:	1f 92       	push	r1
    177c:	0f 92       	push	r0
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	0f 92       	push	r0
    1782:	11 24       	eor	r1, r1
    1784:	0b b6       	in	r0, 0x3b	; 59
    1786:	0f 92       	push	r0
    1788:	8f 93       	push	r24
    178a:	9f 93       	push	r25
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	90 91 1a 0a 	lds	r25, 0x0A1A	; 0x800a1a <UART1_TxHead>
    1794:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <UART1_TxTail>
    1798:	98 17       	cp	r25, r24
    179a:	69 f0       	breq	.+26     	; 0x17b6 <__vector_37+0x3c>
    179c:	e0 91 19 0a 	lds	r30, 0x0A19	; 0x800a19 <UART1_TxTail>
    17a0:	ef 5f       	subi	r30, 0xFF	; 255
    17a2:	ef 71       	andi	r30, 0x1F	; 31
    17a4:	e0 93 19 0a 	sts	0x0A19, r30	; 0x800a19 <UART1_TxTail>
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	e5 5c       	subi	r30, 0xC5	; 197
    17ac:	f5 4f       	sbci	r31, 0xF5	; 245
    17ae:	80 81       	ld	r24, Z
    17b0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <__vector_37+0x46>
    17b6:	e9 ec       	ldi	r30, 0xC9	; 201
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	8f 7d       	andi	r24, 0xDF	; 223
    17be:	80 83       	st	Z, r24
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	0f 90       	pop	r0
    17ca:	0b be       	out	0x3b, r0	; 59
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <uart_init>:
    17d6:	10 92 5f 0a 	sts	0x0A5F, r1	; 0x800a5f <UART_TxHead>
    17da:	10 92 5e 0a 	sts	0x0A5E, r1	; 0x800a5e <UART_TxTail>
    17de:	10 92 5d 0a 	sts	0x0A5D, r1	; 0x800a5d <UART_RxHead>
    17e2:	10 92 5c 0a 	sts	0x0A5C, r1	; 0x800a5c <UART_RxTail>
    17e6:	e1 e6       	ldi	r30, 0x61	; 97
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 e8       	ldi	r24, 0x80	; 128
    17ec:	80 83       	st	Z, r24
    17ee:	10 82       	st	Z, r1
    17f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    17f4:	87 e6       	ldi	r24, 0x67	; 103
    17f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1800:	88 e1       	ldi	r24, 0x18	; 24
    1802:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1806:	86 e0       	ldi	r24, 0x06	; 6
    1808:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    180c:	08 95       	ret

0000180e <uart_putc>:
    180e:	90 91 a0 0a 	lds	r25, 0x0AA0	; 0x800aa0 <portKey>
    1812:	91 11       	cpse	r25, r1
    1814:	15 c0       	rjmp	.+42     	; 0x1840 <uart_putc+0x32>
    1816:	20 91 5f 0a 	lds	r18, 0x0A5F	; 0x800a5f <UART_TxHead>
    181a:	2f 5f       	subi	r18, 0xFF	; 255
    181c:	2f 71       	andi	r18, 0x1F	; 31
    181e:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <UART_TxTail>
    1822:	29 17       	cp	r18, r25
    1824:	e1 f3       	breq	.-8      	; 0x181e <uart_putc+0x10>
    1826:	e2 2f       	mov	r30, r18
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	e0 58       	subi	r30, 0x80	; 128
    182c:	f5 4f       	sbci	r31, 0xF5	; 245
    182e:	80 83       	st	Z, r24
    1830:	20 93 5f 0a 	sts	0x0A5F, r18	; 0x800a5f <UART_TxHead>
    1834:	e1 ec       	ldi	r30, 0xC1	; 193
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	80 62       	ori	r24, 0x20	; 32
    183c:	80 83       	st	Z, r24
    183e:	08 95       	ret
    1840:	91 30       	cpi	r25, 0x01	; 1
    1842:	a1 f4       	brne	.+40     	; 0x186c <uart_putc+0x5e>
    1844:	20 91 1a 0a 	lds	r18, 0x0A1A	; 0x800a1a <UART1_TxHead>
    1848:	2f 5f       	subi	r18, 0xFF	; 255
    184a:	2f 71       	andi	r18, 0x1F	; 31
    184c:	90 91 19 0a 	lds	r25, 0x0A19	; 0x800a19 <UART1_TxTail>
    1850:	29 17       	cp	r18, r25
    1852:	e1 f3       	breq	.-8      	; 0x184c <uart_putc+0x3e>
    1854:	e2 2f       	mov	r30, r18
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	e5 5c       	subi	r30, 0xC5	; 197
    185a:	f5 4f       	sbci	r31, 0xF5	; 245
    185c:	80 83       	st	Z, r24
    185e:	20 93 1a 0a 	sts	0x0A1A, r18	; 0x800a1a <UART1_TxHead>
    1862:	e9 ec       	ldi	r30, 0xC9	; 201
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	80 62       	ori	r24, 0x20	; 32
    186a:	80 83       	st	Z, r24
    186c:	08 95       	ret

0000186e <uart1_putc>:
    186e:	20 91 1a 0a 	lds	r18, 0x0A1A	; 0x800a1a <UART1_TxHead>
    1872:	2f 5f       	subi	r18, 0xFF	; 255
    1874:	2f 71       	andi	r18, 0x1F	; 31
    1876:	90 91 19 0a 	lds	r25, 0x0A19	; 0x800a19 <UART1_TxTail>
    187a:	29 17       	cp	r18, r25
    187c:	e1 f3       	breq	.-8      	; 0x1876 <uart1_putc+0x8>
    187e:	e2 2f       	mov	r30, r18
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	e5 5c       	subi	r30, 0xC5	; 197
    1884:	f5 4f       	sbci	r31, 0xF5	; 245
    1886:	80 83       	st	Z, r24
    1888:	20 93 1a 0a 	sts	0x0A1A, r18	; 0x800a1a <UART1_TxHead>
    188c:	e9 ec       	ldi	r30, 0xC9	; 201
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	80 62       	ori	r24, 0x20	; 32
    1894:	80 83       	st	Z, r24
    1896:	08 95       	ret

00001898 <uart1_puts>:
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	ec 01       	movw	r28, r24
    189e:	88 81       	ld	r24, Y
    18a0:	88 23       	and	r24, r24
    18a2:	29 f0       	breq	.+10     	; 0x18ae <uart1_puts+0x16>
    18a4:	21 96       	adiw	r28, 0x01	; 1
    18a6:	e3 df       	rcall	.-58     	; 0x186e <uart1_putc>
    18a8:	89 91       	ld	r24, Y+
    18aa:	81 11       	cpse	r24, r1
    18ac:	fc cf       	rjmp	.-8      	; 0x18a6 <uart1_puts+0xe>
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <isCharAvailable>:
    18b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    18b8:	88 1f       	adc	r24, r24
    18ba:	88 27       	eor	r24, r24
    18bc:	88 1f       	adc	r24, r24
    18be:	08 95       	ret

000018c0 <receiveChar>:

char receiveChar()
{
	// Return the char in the UDR0 register
	return UDR0;
    18c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
    18c4:	08 95       	ret

000018c6 <__udivmodhi4>:
    18c6:	aa 1b       	sub	r26, r26
    18c8:	bb 1b       	sub	r27, r27
    18ca:	51 e1       	ldi	r21, 0x11	; 17
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <__udivmodhi4_ep>

000018ce <__udivmodhi4_loop>:
    18ce:	aa 1f       	adc	r26, r26
    18d0:	bb 1f       	adc	r27, r27
    18d2:	a6 17       	cp	r26, r22
    18d4:	b7 07       	cpc	r27, r23
    18d6:	10 f0       	brcs	.+4      	; 0x18dc <__udivmodhi4_ep>
    18d8:	a6 1b       	sub	r26, r22
    18da:	b7 0b       	sbc	r27, r23

000018dc <__udivmodhi4_ep>:
    18dc:	88 1f       	adc	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	5a 95       	dec	r21
    18e2:	a9 f7       	brne	.-22     	; 0x18ce <__udivmodhi4_loop>
    18e4:	80 95       	com	r24
    18e6:	90 95       	com	r25
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	08 95       	ret

000018ee <__tablejump2__>:
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	00 24       	eor	r0, r0
    18f4:	00 1c       	adc	r0, r0
    18f6:	0b be       	out	0x3b, r0	; 59
    18f8:	07 90       	elpm	r0, Z+
    18fa:	f6 91       	elpm	r31, Z
    18fc:	e0 2d       	mov	r30, r0
    18fe:	09 94       	ijmp

00001900 <memcpy>:
    1900:	fb 01       	movw	r30, r22
    1902:	dc 01       	movw	r26, r24
    1904:	02 c0       	rjmp	.+4      	; 0x190a <memcpy+0xa>
    1906:	01 90       	ld	r0, Z+
    1908:	0d 92       	st	X+, r0
    190a:	41 50       	subi	r20, 0x01	; 1
    190c:	50 40       	sbci	r21, 0x00	; 0
    190e:	d8 f7       	brcc	.-10     	; 0x1906 <memcpy+0x6>
    1910:	08 95       	ret

00001912 <snprintf>:
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	2e 97       	sbiw	r28, 0x0e	; 14
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	0d 89       	ldd	r16, Y+21	; 0x15
    192c:	1e 89       	ldd	r17, Y+22	; 0x16
    192e:	8f 89       	ldd	r24, Y+23	; 0x17
    1930:	98 8d       	ldd	r25, Y+24	; 0x18
    1932:	26 e0       	ldi	r18, 0x06	; 6
    1934:	2c 83       	std	Y+4, r18	; 0x04
    1936:	1a 83       	std	Y+2, r17	; 0x02
    1938:	09 83       	std	Y+1, r16	; 0x01
    193a:	97 ff       	sbrs	r25, 7
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <snprintf+0x30>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e8       	ldi	r25, 0x80	; 128
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	ae 01       	movw	r20, r28
    194a:	45 5e       	subi	r20, 0xE5	; 229
    194c:	5f 4f       	sbci	r21, 0xFF	; 255
    194e:	69 8d       	ldd	r22, Y+25	; 0x19
    1950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	47 d0       	rcall	.+142    	; 0x19e6 <vfprintf>
    1958:	4d 81       	ldd	r20, Y+5	; 0x05
    195a:	5e 81       	ldd	r21, Y+6	; 0x06
    195c:	57 fd       	sbrc	r21, 7
    195e:	0a c0       	rjmp	.+20     	; 0x1974 <snprintf+0x62>
    1960:	2f 81       	ldd	r18, Y+7	; 0x07
    1962:	38 85       	ldd	r19, Y+8	; 0x08
    1964:	42 17       	cp	r20, r18
    1966:	53 07       	cpc	r21, r19
    1968:	0c f4       	brge	.+2      	; 0x196c <snprintf+0x5a>
    196a:	9a 01       	movw	r18, r20
    196c:	f8 01       	movw	r30, r16
    196e:	e2 0f       	add	r30, r18
    1970:	f3 1f       	adc	r31, r19
    1972:	10 82       	st	Z, r1
    1974:	2e 96       	adiw	r28, 0x0e	; 14
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	08 95       	ret

0000198a <sprintf>:
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	2e 97       	sbiw	r28, 0x0e	; 14
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	0d 89       	ldd	r16, Y+21	; 0x15
    19a4:	1e 89       	ldd	r17, Y+22	; 0x16
    19a6:	86 e0       	ldi	r24, 0x06	; 6
    19a8:	8c 83       	std	Y+4, r24	; 0x04
    19aa:	1a 83       	std	Y+2, r17	; 0x02
    19ac:	09 83       	std	Y+1, r16	; 0x01
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	9f e7       	ldi	r25, 0x7F	; 127
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	ae 01       	movw	r20, r28
    19b8:	47 5e       	subi	r20, 0xE7	; 231
    19ba:	5f 4f       	sbci	r21, 0xFF	; 255
    19bc:	6f 89       	ldd	r22, Y+23	; 0x17
    19be:	78 8d       	ldd	r23, Y+24	; 0x18
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	10 d0       	rcall	.+32     	; 0x19e6 <vfprintf>
    19c6:	ef 81       	ldd	r30, Y+7	; 0x07
    19c8:	f8 85       	ldd	r31, Y+8	; 0x08
    19ca:	e0 0f       	add	r30, r16
    19cc:	f1 1f       	adc	r31, r17
    19ce:	10 82       	st	Z, r1
    19d0:	2e 96       	adiw	r28, 0x0e	; 14
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	08 95       	ret

000019e6 <vfprintf>:
    19e6:	2f 92       	push	r2
    19e8:	3f 92       	push	r3
    19ea:	4f 92       	push	r4
    19ec:	5f 92       	push	r5
    19ee:	6f 92       	push	r6
    19f0:	7f 92       	push	r7
    19f2:	8f 92       	push	r8
    19f4:	9f 92       	push	r9
    19f6:	af 92       	push	r10
    19f8:	bf 92       	push	r11
    19fa:	cf 92       	push	r12
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	6c 01       	movw	r12, r24
    1a1c:	7b 01       	movw	r14, r22
    1a1e:	8a 01       	movw	r16, r20
    1a20:	fc 01       	movw	r30, r24
    1a22:	17 82       	std	Z+7, r1	; 0x07
    1a24:	16 82       	std	Z+6, r1	; 0x06
    1a26:	83 81       	ldd	r24, Z+3	; 0x03
    1a28:	81 ff       	sbrs	r24, 1
    1a2a:	bf c1       	rjmp	.+894    	; 0x1daa <vfprintf+0x3c4>
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	3c 01       	movw	r6, r24
    1a32:	f6 01       	movw	r30, r12
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	f7 01       	movw	r30, r14
    1a38:	93 fd       	sbrc	r25, 3
    1a3a:	85 91       	lpm	r24, Z+
    1a3c:	93 ff       	sbrs	r25, 3
    1a3e:	81 91       	ld	r24, Z+
    1a40:	7f 01       	movw	r14, r30
    1a42:	88 23       	and	r24, r24
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <vfprintf+0x62>
    1a46:	ad c1       	rjmp	.+858    	; 0x1da2 <vfprintf+0x3bc>
    1a48:	85 32       	cpi	r24, 0x25	; 37
    1a4a:	39 f4       	brne	.+14     	; 0x1a5a <vfprintf+0x74>
    1a4c:	93 fd       	sbrc	r25, 3
    1a4e:	85 91       	lpm	r24, Z+
    1a50:	93 ff       	sbrs	r25, 3
    1a52:	81 91       	ld	r24, Z+
    1a54:	7f 01       	movw	r14, r30
    1a56:	85 32       	cpi	r24, 0x25	; 37
    1a58:	21 f4       	brne	.+8      	; 0x1a62 <vfprintf+0x7c>
    1a5a:	b6 01       	movw	r22, r12
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	d6 d1       	rcall	.+940    	; 0x1e0c <fputc>
    1a60:	e8 cf       	rjmp	.-48     	; 0x1a32 <vfprintf+0x4c>
    1a62:	91 2c       	mov	r9, r1
    1a64:	21 2c       	mov	r2, r1
    1a66:	31 2c       	mov	r3, r1
    1a68:	ff e1       	ldi	r31, 0x1F	; 31
    1a6a:	f3 15       	cp	r31, r3
    1a6c:	d8 f0       	brcs	.+54     	; 0x1aa4 <vfprintf+0xbe>
    1a6e:	8b 32       	cpi	r24, 0x2B	; 43
    1a70:	79 f0       	breq	.+30     	; 0x1a90 <vfprintf+0xaa>
    1a72:	38 f4       	brcc	.+14     	; 0x1a82 <vfprintf+0x9c>
    1a74:	80 32       	cpi	r24, 0x20	; 32
    1a76:	79 f0       	breq	.+30     	; 0x1a96 <vfprintf+0xb0>
    1a78:	83 32       	cpi	r24, 0x23	; 35
    1a7a:	a1 f4       	brne	.+40     	; 0x1aa4 <vfprintf+0xbe>
    1a7c:	23 2d       	mov	r18, r3
    1a7e:	20 61       	ori	r18, 0x10	; 16
    1a80:	1d c0       	rjmp	.+58     	; 0x1abc <vfprintf+0xd6>
    1a82:	8d 32       	cpi	r24, 0x2D	; 45
    1a84:	61 f0       	breq	.+24     	; 0x1a9e <vfprintf+0xb8>
    1a86:	80 33       	cpi	r24, 0x30	; 48
    1a88:	69 f4       	brne	.+26     	; 0x1aa4 <vfprintf+0xbe>
    1a8a:	23 2d       	mov	r18, r3
    1a8c:	21 60       	ori	r18, 0x01	; 1
    1a8e:	16 c0       	rjmp	.+44     	; 0x1abc <vfprintf+0xd6>
    1a90:	83 2d       	mov	r24, r3
    1a92:	82 60       	ori	r24, 0x02	; 2
    1a94:	38 2e       	mov	r3, r24
    1a96:	e3 2d       	mov	r30, r3
    1a98:	e4 60       	ori	r30, 0x04	; 4
    1a9a:	3e 2e       	mov	r3, r30
    1a9c:	2a c0       	rjmp	.+84     	; 0x1af2 <vfprintf+0x10c>
    1a9e:	f3 2d       	mov	r31, r3
    1aa0:	f8 60       	ori	r31, 0x08	; 8
    1aa2:	1d c0       	rjmp	.+58     	; 0x1ade <vfprintf+0xf8>
    1aa4:	37 fc       	sbrc	r3, 7
    1aa6:	2d c0       	rjmp	.+90     	; 0x1b02 <vfprintf+0x11c>
    1aa8:	20 ed       	ldi	r18, 0xD0	; 208
    1aaa:	28 0f       	add	r18, r24
    1aac:	2a 30       	cpi	r18, 0x0A	; 10
    1aae:	40 f0       	brcs	.+16     	; 0x1ac0 <vfprintf+0xda>
    1ab0:	8e 32       	cpi	r24, 0x2E	; 46
    1ab2:	b9 f4       	brne	.+46     	; 0x1ae2 <vfprintf+0xfc>
    1ab4:	36 fc       	sbrc	r3, 6
    1ab6:	75 c1       	rjmp	.+746    	; 0x1da2 <vfprintf+0x3bc>
    1ab8:	23 2d       	mov	r18, r3
    1aba:	20 64       	ori	r18, 0x40	; 64
    1abc:	32 2e       	mov	r3, r18
    1abe:	19 c0       	rjmp	.+50     	; 0x1af2 <vfprintf+0x10c>
    1ac0:	36 fe       	sbrs	r3, 6
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <vfprintf+0xea>
    1ac4:	8a e0       	ldi	r24, 0x0A	; 10
    1ac6:	98 9e       	mul	r9, r24
    1ac8:	20 0d       	add	r18, r0
    1aca:	11 24       	eor	r1, r1
    1acc:	92 2e       	mov	r9, r18
    1ace:	11 c0       	rjmp	.+34     	; 0x1af2 <vfprintf+0x10c>
    1ad0:	ea e0       	ldi	r30, 0x0A	; 10
    1ad2:	2e 9e       	mul	r2, r30
    1ad4:	20 0d       	add	r18, r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	22 2e       	mov	r2, r18
    1ada:	f3 2d       	mov	r31, r3
    1adc:	f0 62       	ori	r31, 0x20	; 32
    1ade:	3f 2e       	mov	r3, r31
    1ae0:	08 c0       	rjmp	.+16     	; 0x1af2 <vfprintf+0x10c>
    1ae2:	8c 36       	cpi	r24, 0x6C	; 108
    1ae4:	21 f4       	brne	.+8      	; 0x1aee <vfprintf+0x108>
    1ae6:	83 2d       	mov	r24, r3
    1ae8:	80 68       	ori	r24, 0x80	; 128
    1aea:	38 2e       	mov	r3, r24
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <vfprintf+0x10c>
    1aee:	88 36       	cpi	r24, 0x68	; 104
    1af0:	41 f4       	brne	.+16     	; 0x1b02 <vfprintf+0x11c>
    1af2:	f7 01       	movw	r30, r14
    1af4:	93 fd       	sbrc	r25, 3
    1af6:	85 91       	lpm	r24, Z+
    1af8:	93 ff       	sbrs	r25, 3
    1afa:	81 91       	ld	r24, Z+
    1afc:	7f 01       	movw	r14, r30
    1afe:	81 11       	cpse	r24, r1
    1b00:	b3 cf       	rjmp	.-154    	; 0x1a68 <vfprintf+0x82>
    1b02:	98 2f       	mov	r25, r24
    1b04:	9f 7d       	andi	r25, 0xDF	; 223
    1b06:	95 54       	subi	r25, 0x45	; 69
    1b08:	93 30       	cpi	r25, 0x03	; 3
    1b0a:	28 f4       	brcc	.+10     	; 0x1b16 <vfprintf+0x130>
    1b0c:	0c 5f       	subi	r16, 0xFC	; 252
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	9f e3       	ldi	r25, 0x3F	; 63
    1b12:	99 83       	std	Y+1, r25	; 0x01
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <vfprintf+0x14a>
    1b16:	83 36       	cpi	r24, 0x63	; 99
    1b18:	31 f0       	breq	.+12     	; 0x1b26 <vfprintf+0x140>
    1b1a:	83 37       	cpi	r24, 0x73	; 115
    1b1c:	71 f0       	breq	.+28     	; 0x1b3a <vfprintf+0x154>
    1b1e:	83 35       	cpi	r24, 0x53	; 83
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <vfprintf+0x13e>
    1b22:	55 c0       	rjmp	.+170    	; 0x1bce <vfprintf+0x1e8>
    1b24:	20 c0       	rjmp	.+64     	; 0x1b66 <vfprintf+0x180>
    1b26:	f8 01       	movw	r30, r16
    1b28:	80 81       	ld	r24, Z
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	0e 5f       	subi	r16, 0xFE	; 254
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	88 24       	eor	r8, r8
    1b32:	83 94       	inc	r8
    1b34:	91 2c       	mov	r9, r1
    1b36:	53 01       	movw	r10, r6
    1b38:	12 c0       	rjmp	.+36     	; 0x1b5e <vfprintf+0x178>
    1b3a:	28 01       	movw	r4, r16
    1b3c:	f2 e0       	ldi	r31, 0x02	; 2
    1b3e:	4f 0e       	add	r4, r31
    1b40:	51 1c       	adc	r5, r1
    1b42:	f8 01       	movw	r30, r16
    1b44:	a0 80       	ld	r10, Z
    1b46:	b1 80       	ldd	r11, Z+1	; 0x01
    1b48:	36 fe       	sbrs	r3, 6
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <vfprintf+0x16c>
    1b4c:	69 2d       	mov	r22, r9
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <vfprintf+0x170>
    1b52:	6f ef       	ldi	r22, 0xFF	; 255
    1b54:	7f ef       	ldi	r23, 0xFF	; 255
    1b56:	c5 01       	movw	r24, r10
    1b58:	4e d1       	rcall	.+668    	; 0x1df6 <strnlen>
    1b5a:	4c 01       	movw	r8, r24
    1b5c:	82 01       	movw	r16, r4
    1b5e:	f3 2d       	mov	r31, r3
    1b60:	ff 77       	andi	r31, 0x7F	; 127
    1b62:	3f 2e       	mov	r3, r31
    1b64:	15 c0       	rjmp	.+42     	; 0x1b90 <vfprintf+0x1aa>
    1b66:	28 01       	movw	r4, r16
    1b68:	22 e0       	ldi	r18, 0x02	; 2
    1b6a:	42 0e       	add	r4, r18
    1b6c:	51 1c       	adc	r5, r1
    1b6e:	f8 01       	movw	r30, r16
    1b70:	a0 80       	ld	r10, Z
    1b72:	b1 80       	ldd	r11, Z+1	; 0x01
    1b74:	36 fe       	sbrs	r3, 6
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <vfprintf+0x198>
    1b78:	69 2d       	mov	r22, r9
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <vfprintf+0x19c>
    1b7e:	6f ef       	ldi	r22, 0xFF	; 255
    1b80:	7f ef       	ldi	r23, 0xFF	; 255
    1b82:	c5 01       	movw	r24, r10
    1b84:	2d d1       	rcall	.+602    	; 0x1de0 <strnlen_P>
    1b86:	4c 01       	movw	r8, r24
    1b88:	f3 2d       	mov	r31, r3
    1b8a:	f0 68       	ori	r31, 0x80	; 128
    1b8c:	3f 2e       	mov	r3, r31
    1b8e:	82 01       	movw	r16, r4
    1b90:	33 fc       	sbrc	r3, 3
    1b92:	19 c0       	rjmp	.+50     	; 0x1bc6 <vfprintf+0x1e0>
    1b94:	82 2d       	mov	r24, r2
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	88 16       	cp	r8, r24
    1b9a:	99 06       	cpc	r9, r25
    1b9c:	a0 f4       	brcc	.+40     	; 0x1bc6 <vfprintf+0x1e0>
    1b9e:	b6 01       	movw	r22, r12
    1ba0:	80 e2       	ldi	r24, 0x20	; 32
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	33 d1       	rcall	.+614    	; 0x1e0c <fputc>
    1ba6:	2a 94       	dec	r2
    1ba8:	f5 cf       	rjmp	.-22     	; 0x1b94 <vfprintf+0x1ae>
    1baa:	f5 01       	movw	r30, r10
    1bac:	37 fc       	sbrc	r3, 7
    1bae:	85 91       	lpm	r24, Z+
    1bb0:	37 fe       	sbrs	r3, 7
    1bb2:	81 91       	ld	r24, Z+
    1bb4:	5f 01       	movw	r10, r30
    1bb6:	b6 01       	movw	r22, r12
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	28 d1       	rcall	.+592    	; 0x1e0c <fputc>
    1bbc:	21 10       	cpse	r2, r1
    1bbe:	2a 94       	dec	r2
    1bc0:	21 e0       	ldi	r18, 0x01	; 1
    1bc2:	82 1a       	sub	r8, r18
    1bc4:	91 08       	sbc	r9, r1
    1bc6:	81 14       	cp	r8, r1
    1bc8:	91 04       	cpc	r9, r1
    1bca:	79 f7       	brne	.-34     	; 0x1baa <vfprintf+0x1c4>
    1bcc:	e1 c0       	rjmp	.+450    	; 0x1d90 <vfprintf+0x3aa>
    1bce:	84 36       	cpi	r24, 0x64	; 100
    1bd0:	11 f0       	breq	.+4      	; 0x1bd6 <vfprintf+0x1f0>
    1bd2:	89 36       	cpi	r24, 0x69	; 105
    1bd4:	39 f5       	brne	.+78     	; 0x1c24 <vfprintf+0x23e>
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	37 fe       	sbrs	r3, 7
    1bda:	07 c0       	rjmp	.+14     	; 0x1bea <vfprintf+0x204>
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	0c 5f       	subi	r16, 0xFC	; 252
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	08 c0       	rjmp	.+16     	; 0x1bfa <vfprintf+0x214>
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	07 2e       	mov	r0, r23
    1bf0:	00 0c       	add	r0, r0
    1bf2:	88 0b       	sbc	r24, r24
    1bf4:	99 0b       	sbc	r25, r25
    1bf6:	0e 5f       	subi	r16, 0xFE	; 254
    1bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfa:	f3 2d       	mov	r31, r3
    1bfc:	ff 76       	andi	r31, 0x6F	; 111
    1bfe:	3f 2e       	mov	r3, r31
    1c00:	97 ff       	sbrs	r25, 7
    1c02:	09 c0       	rjmp	.+18     	; 0x1c16 <vfprintf+0x230>
    1c04:	90 95       	com	r25
    1c06:	80 95       	com	r24
    1c08:	70 95       	com	r23
    1c0a:	61 95       	neg	r22
    1c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c10:	9f 4f       	sbci	r25, 0xFF	; 255
    1c12:	f0 68       	ori	r31, 0x80	; 128
    1c14:	3f 2e       	mov	r3, r31
    1c16:	2a e0       	ldi	r18, 0x0A	; 10
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	a3 01       	movw	r20, r6
    1c1c:	33 d1       	rcall	.+614    	; 0x1e84 <__ultoa_invert>
    1c1e:	88 2e       	mov	r8, r24
    1c20:	86 18       	sub	r8, r6
    1c22:	44 c0       	rjmp	.+136    	; 0x1cac <vfprintf+0x2c6>
    1c24:	85 37       	cpi	r24, 0x75	; 117
    1c26:	31 f4       	brne	.+12     	; 0x1c34 <vfprintf+0x24e>
    1c28:	23 2d       	mov	r18, r3
    1c2a:	2f 7e       	andi	r18, 0xEF	; 239
    1c2c:	b2 2e       	mov	r11, r18
    1c2e:	2a e0       	ldi	r18, 0x0A	; 10
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	25 c0       	rjmp	.+74     	; 0x1c7e <vfprintf+0x298>
    1c34:	93 2d       	mov	r25, r3
    1c36:	99 7f       	andi	r25, 0xF9	; 249
    1c38:	b9 2e       	mov	r11, r25
    1c3a:	8f 36       	cpi	r24, 0x6F	; 111
    1c3c:	c1 f0       	breq	.+48     	; 0x1c6e <vfprintf+0x288>
    1c3e:	18 f4       	brcc	.+6      	; 0x1c46 <vfprintf+0x260>
    1c40:	88 35       	cpi	r24, 0x58	; 88
    1c42:	79 f0       	breq	.+30     	; 0x1c62 <vfprintf+0x27c>
    1c44:	ae c0       	rjmp	.+348    	; 0x1da2 <vfprintf+0x3bc>
    1c46:	80 37       	cpi	r24, 0x70	; 112
    1c48:	19 f0       	breq	.+6      	; 0x1c50 <vfprintf+0x26a>
    1c4a:	88 37       	cpi	r24, 0x78	; 120
    1c4c:	21 f0       	breq	.+8      	; 0x1c56 <vfprintf+0x270>
    1c4e:	a9 c0       	rjmp	.+338    	; 0x1da2 <vfprintf+0x3bc>
    1c50:	e9 2f       	mov	r30, r25
    1c52:	e0 61       	ori	r30, 0x10	; 16
    1c54:	be 2e       	mov	r11, r30
    1c56:	b4 fe       	sbrs	r11, 4
    1c58:	0d c0       	rjmp	.+26     	; 0x1c74 <vfprintf+0x28e>
    1c5a:	fb 2d       	mov	r31, r11
    1c5c:	f4 60       	ori	r31, 0x04	; 4
    1c5e:	bf 2e       	mov	r11, r31
    1c60:	09 c0       	rjmp	.+18     	; 0x1c74 <vfprintf+0x28e>
    1c62:	34 fe       	sbrs	r3, 4
    1c64:	0a c0       	rjmp	.+20     	; 0x1c7a <vfprintf+0x294>
    1c66:	29 2f       	mov	r18, r25
    1c68:	26 60       	ori	r18, 0x06	; 6
    1c6a:	b2 2e       	mov	r11, r18
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <vfprintf+0x294>
    1c6e:	28 e0       	ldi	r18, 0x08	; 8
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	05 c0       	rjmp	.+10     	; 0x1c7e <vfprintf+0x298>
    1c74:	20 e1       	ldi	r18, 0x10	; 16
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <vfprintf+0x298>
    1c7a:	20 e1       	ldi	r18, 0x10	; 16
    1c7c:	32 e0       	ldi	r19, 0x02	; 2
    1c7e:	f8 01       	movw	r30, r16
    1c80:	b7 fe       	sbrs	r11, 7
    1c82:	07 c0       	rjmp	.+14     	; 0x1c92 <vfprintf+0x2ac>
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	0c 5f       	subi	r16, 0xFC	; 252
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	06 c0       	rjmp	.+12     	; 0x1c9e <vfprintf+0x2b8>
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	0e 5f       	subi	r16, 0xFE	; 254
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	a3 01       	movw	r20, r6
    1ca0:	f1 d0       	rcall	.+482    	; 0x1e84 <__ultoa_invert>
    1ca2:	88 2e       	mov	r8, r24
    1ca4:	86 18       	sub	r8, r6
    1ca6:	fb 2d       	mov	r31, r11
    1ca8:	ff 77       	andi	r31, 0x7F	; 127
    1caa:	3f 2e       	mov	r3, r31
    1cac:	36 fe       	sbrs	r3, 6
    1cae:	0d c0       	rjmp	.+26     	; 0x1cca <vfprintf+0x2e4>
    1cb0:	23 2d       	mov	r18, r3
    1cb2:	2e 7f       	andi	r18, 0xFE	; 254
    1cb4:	a2 2e       	mov	r10, r18
    1cb6:	89 14       	cp	r8, r9
    1cb8:	58 f4       	brcc	.+22     	; 0x1cd0 <vfprintf+0x2ea>
    1cba:	34 fe       	sbrs	r3, 4
    1cbc:	0b c0       	rjmp	.+22     	; 0x1cd4 <vfprintf+0x2ee>
    1cbe:	32 fc       	sbrc	r3, 2
    1cc0:	09 c0       	rjmp	.+18     	; 0x1cd4 <vfprintf+0x2ee>
    1cc2:	83 2d       	mov	r24, r3
    1cc4:	8e 7e       	andi	r24, 0xEE	; 238
    1cc6:	a8 2e       	mov	r10, r24
    1cc8:	05 c0       	rjmp	.+10     	; 0x1cd4 <vfprintf+0x2ee>
    1cca:	b8 2c       	mov	r11, r8
    1ccc:	a3 2c       	mov	r10, r3
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <vfprintf+0x2f0>
    1cd0:	b8 2c       	mov	r11, r8
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <vfprintf+0x2f0>
    1cd4:	b9 2c       	mov	r11, r9
    1cd6:	a4 fe       	sbrs	r10, 4
    1cd8:	0f c0       	rjmp	.+30     	; 0x1cf8 <vfprintf+0x312>
    1cda:	fe 01       	movw	r30, r28
    1cdc:	e8 0d       	add	r30, r8
    1cde:	f1 1d       	adc	r31, r1
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 33       	cpi	r24, 0x30	; 48
    1ce4:	21 f4       	brne	.+8      	; 0x1cee <vfprintf+0x308>
    1ce6:	9a 2d       	mov	r25, r10
    1ce8:	99 7e       	andi	r25, 0xE9	; 233
    1cea:	a9 2e       	mov	r10, r25
    1cec:	09 c0       	rjmp	.+18     	; 0x1d00 <vfprintf+0x31a>
    1cee:	a2 fe       	sbrs	r10, 2
    1cf0:	06 c0       	rjmp	.+12     	; 0x1cfe <vfprintf+0x318>
    1cf2:	b3 94       	inc	r11
    1cf4:	b3 94       	inc	r11
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <vfprintf+0x31a>
    1cf8:	8a 2d       	mov	r24, r10
    1cfa:	86 78       	andi	r24, 0x86	; 134
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <vfprintf+0x31a>
    1cfe:	b3 94       	inc	r11
    1d00:	a3 fc       	sbrc	r10, 3
    1d02:	10 c0       	rjmp	.+32     	; 0x1d24 <vfprintf+0x33e>
    1d04:	a0 fe       	sbrs	r10, 0
    1d06:	06 c0       	rjmp	.+12     	; 0x1d14 <vfprintf+0x32e>
    1d08:	b2 14       	cp	r11, r2
    1d0a:	80 f4       	brcc	.+32     	; 0x1d2c <vfprintf+0x346>
    1d0c:	28 0c       	add	r2, r8
    1d0e:	92 2c       	mov	r9, r2
    1d10:	9b 18       	sub	r9, r11
    1d12:	0d c0       	rjmp	.+26     	; 0x1d2e <vfprintf+0x348>
    1d14:	b2 14       	cp	r11, r2
    1d16:	58 f4       	brcc	.+22     	; 0x1d2e <vfprintf+0x348>
    1d18:	b6 01       	movw	r22, r12
    1d1a:	80 e2       	ldi	r24, 0x20	; 32
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	76 d0       	rcall	.+236    	; 0x1e0c <fputc>
    1d20:	b3 94       	inc	r11
    1d22:	f8 cf       	rjmp	.-16     	; 0x1d14 <vfprintf+0x32e>
    1d24:	b2 14       	cp	r11, r2
    1d26:	18 f4       	brcc	.+6      	; 0x1d2e <vfprintf+0x348>
    1d28:	2b 18       	sub	r2, r11
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <vfprintf+0x34a>
    1d2c:	98 2c       	mov	r9, r8
    1d2e:	21 2c       	mov	r2, r1
    1d30:	a4 fe       	sbrs	r10, 4
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <vfprintf+0x36c>
    1d34:	b6 01       	movw	r22, r12
    1d36:	80 e3       	ldi	r24, 0x30	; 48
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	68 d0       	rcall	.+208    	; 0x1e0c <fputc>
    1d3c:	a2 fe       	sbrs	r10, 2
    1d3e:	16 c0       	rjmp	.+44     	; 0x1d6c <vfprintf+0x386>
    1d40:	a1 fc       	sbrc	r10, 1
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <vfprintf+0x364>
    1d44:	88 e7       	ldi	r24, 0x78	; 120
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <vfprintf+0x368>
    1d4a:	88 e5       	ldi	r24, 0x58	; 88
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	b6 01       	movw	r22, r12
    1d50:	0c c0       	rjmp	.+24     	; 0x1d6a <vfprintf+0x384>
    1d52:	8a 2d       	mov	r24, r10
    1d54:	86 78       	andi	r24, 0x86	; 134
    1d56:	51 f0       	breq	.+20     	; 0x1d6c <vfprintf+0x386>
    1d58:	a1 fe       	sbrs	r10, 1
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <vfprintf+0x37a>
    1d5c:	8b e2       	ldi	r24, 0x2B	; 43
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <vfprintf+0x37c>
    1d60:	80 e2       	ldi	r24, 0x20	; 32
    1d62:	a7 fc       	sbrc	r10, 7
    1d64:	8d e2       	ldi	r24, 0x2D	; 45
    1d66:	b6 01       	movw	r22, r12
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	50 d0       	rcall	.+160    	; 0x1e0c <fputc>
    1d6c:	89 14       	cp	r8, r9
    1d6e:	30 f4       	brcc	.+12     	; 0x1d7c <vfprintf+0x396>
    1d70:	b6 01       	movw	r22, r12
    1d72:	80 e3       	ldi	r24, 0x30	; 48
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	4a d0       	rcall	.+148    	; 0x1e0c <fputc>
    1d78:	9a 94       	dec	r9
    1d7a:	f8 cf       	rjmp	.-16     	; 0x1d6c <vfprintf+0x386>
    1d7c:	8a 94       	dec	r8
    1d7e:	f3 01       	movw	r30, r6
    1d80:	e8 0d       	add	r30, r8
    1d82:	f1 1d       	adc	r31, r1
    1d84:	80 81       	ld	r24, Z
    1d86:	b6 01       	movw	r22, r12
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	40 d0       	rcall	.+128    	; 0x1e0c <fputc>
    1d8c:	81 10       	cpse	r8, r1
    1d8e:	f6 cf       	rjmp	.-20     	; 0x1d7c <vfprintf+0x396>
    1d90:	22 20       	and	r2, r2
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <vfprintf+0x3b0>
    1d94:	4e ce       	rjmp	.-868    	; 0x1a32 <vfprintf+0x4c>
    1d96:	b6 01       	movw	r22, r12
    1d98:	80 e2       	ldi	r24, 0x20	; 32
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	37 d0       	rcall	.+110    	; 0x1e0c <fputc>
    1d9e:	2a 94       	dec	r2
    1da0:	f7 cf       	rjmp	.-18     	; 0x1d90 <vfprintf+0x3aa>
    1da2:	f6 01       	movw	r30, r12
    1da4:	86 81       	ldd	r24, Z+6	; 0x06
    1da6:	97 81       	ldd	r25, Z+7	; 0x07
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <vfprintf+0x3c8>
    1daa:	8f ef       	ldi	r24, 0xFF	; 255
    1dac:	9f ef       	ldi	r25, 0xFF	; 255
    1dae:	2b 96       	adiw	r28, 0x0b	; 11
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	9f 90       	pop	r9
    1dd0:	8f 90       	pop	r8
    1dd2:	7f 90       	pop	r7
    1dd4:	6f 90       	pop	r6
    1dd6:	5f 90       	pop	r5
    1dd8:	4f 90       	pop	r4
    1dda:	3f 90       	pop	r3
    1ddc:	2f 90       	pop	r2
    1dde:	08 95       	ret

00001de0 <strnlen_P>:
    1de0:	fc 01       	movw	r30, r24
    1de2:	05 90       	lpm	r0, Z+
    1de4:	61 50       	subi	r22, 0x01	; 1
    1de6:	70 40       	sbci	r23, 0x00	; 0
    1de8:	01 10       	cpse	r0, r1
    1dea:	d8 f7       	brcc	.-10     	; 0x1de2 <strnlen_P+0x2>
    1dec:	80 95       	com	r24
    1dee:	90 95       	com	r25
    1df0:	8e 0f       	add	r24, r30
    1df2:	9f 1f       	adc	r25, r31
    1df4:	08 95       	ret

00001df6 <strnlen>:
    1df6:	fc 01       	movw	r30, r24
    1df8:	61 50       	subi	r22, 0x01	; 1
    1dfa:	70 40       	sbci	r23, 0x00	; 0
    1dfc:	01 90       	ld	r0, Z+
    1dfe:	01 10       	cpse	r0, r1
    1e00:	d8 f7       	brcc	.-10     	; 0x1df8 <strnlen+0x2>
    1e02:	80 95       	com	r24
    1e04:	90 95       	com	r25
    1e06:	8e 0f       	add	r24, r30
    1e08:	9f 1f       	adc	r25, r31
    1e0a:	08 95       	ret

00001e0c <fputc>:
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	fb 01       	movw	r30, r22
    1e16:	23 81       	ldd	r18, Z+3	; 0x03
    1e18:	21 fd       	sbrc	r18, 1
    1e1a:	03 c0       	rjmp	.+6      	; 0x1e22 <fputc+0x16>
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
    1e20:	2c c0       	rjmp	.+88     	; 0x1e7a <fputc+0x6e>
    1e22:	22 ff       	sbrs	r18, 2
    1e24:	16 c0       	rjmp	.+44     	; 0x1e52 <fputc+0x46>
    1e26:	46 81       	ldd	r20, Z+6	; 0x06
    1e28:	57 81       	ldd	r21, Z+7	; 0x07
    1e2a:	24 81       	ldd	r18, Z+4	; 0x04
    1e2c:	35 81       	ldd	r19, Z+5	; 0x05
    1e2e:	42 17       	cp	r20, r18
    1e30:	53 07       	cpc	r21, r19
    1e32:	44 f4       	brge	.+16     	; 0x1e44 <fputc+0x38>
    1e34:	a0 81       	ld	r26, Z
    1e36:	b1 81       	ldd	r27, Z+1	; 0x01
    1e38:	9d 01       	movw	r18, r26
    1e3a:	2f 5f       	subi	r18, 0xFF	; 255
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	31 83       	std	Z+1, r19	; 0x01
    1e40:	20 83       	st	Z, r18
    1e42:	8c 93       	st	X, r24
    1e44:	26 81       	ldd	r18, Z+6	; 0x06
    1e46:	37 81       	ldd	r19, Z+7	; 0x07
    1e48:	2f 5f       	subi	r18, 0xFF	; 255
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	37 83       	std	Z+7, r19	; 0x07
    1e4e:	26 83       	std	Z+6, r18	; 0x06
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <fputc+0x6e>
    1e52:	8b 01       	movw	r16, r22
    1e54:	ec 01       	movw	r28, r24
    1e56:	fb 01       	movw	r30, r22
    1e58:	00 84       	ldd	r0, Z+8	; 0x08
    1e5a:	f1 85       	ldd	r31, Z+9	; 0x09
    1e5c:	e0 2d       	mov	r30, r0
    1e5e:	09 95       	icall
    1e60:	89 2b       	or	r24, r25
    1e62:	e1 f6       	brne	.-72     	; 0x1e1c <fputc+0x10>
    1e64:	d8 01       	movw	r26, r16
    1e66:	16 96       	adiw	r26, 0x06	; 6
    1e68:	8d 91       	ld	r24, X+
    1e6a:	9c 91       	ld	r25, X
    1e6c:	17 97       	sbiw	r26, 0x07	; 7
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	17 96       	adiw	r26, 0x07	; 7
    1e72:	9c 93       	st	X, r25
    1e74:	8e 93       	st	-X, r24
    1e76:	16 97       	sbiw	r26, 0x06	; 6
    1e78:	ce 01       	movw	r24, r28
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <__ultoa_invert>:
    1e84:	fa 01       	movw	r30, r20
    1e86:	aa 27       	eor	r26, r26
    1e88:	28 30       	cpi	r18, 0x08	; 8
    1e8a:	51 f1       	breq	.+84     	; 0x1ee0 <__ultoa_invert+0x5c>
    1e8c:	20 31       	cpi	r18, 0x10	; 16
    1e8e:	81 f1       	breq	.+96     	; 0x1ef0 <__ultoa_invert+0x6c>
    1e90:	e8 94       	clt
    1e92:	6f 93       	push	r22
    1e94:	6e 7f       	andi	r22, 0xFE	; 254
    1e96:	6e 5f       	subi	r22, 0xFE	; 254
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	af 4f       	sbci	r26, 0xFF	; 255
    1ea0:	b1 e0       	ldi	r27, 0x01	; 1
    1ea2:	3e d0       	rcall	.+124    	; 0x1f20 <__ultoa_invert+0x9c>
    1ea4:	b4 e0       	ldi	r27, 0x04	; 4
    1ea6:	3c d0       	rcall	.+120    	; 0x1f20 <__ultoa_invert+0x9c>
    1ea8:	67 0f       	add	r22, r23
    1eaa:	78 1f       	adc	r23, r24
    1eac:	89 1f       	adc	r24, r25
    1eae:	9a 1f       	adc	r25, r26
    1eb0:	a1 1d       	adc	r26, r1
    1eb2:	68 0f       	add	r22, r24
    1eb4:	79 1f       	adc	r23, r25
    1eb6:	8a 1f       	adc	r24, r26
    1eb8:	91 1d       	adc	r25, r1
    1eba:	a1 1d       	adc	r26, r1
    1ebc:	6a 0f       	add	r22, r26
    1ebe:	71 1d       	adc	r23, r1
    1ec0:	81 1d       	adc	r24, r1
    1ec2:	91 1d       	adc	r25, r1
    1ec4:	a1 1d       	adc	r26, r1
    1ec6:	20 d0       	rcall	.+64     	; 0x1f08 <__ultoa_invert+0x84>
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <__ultoa_invert+0x48>
    1eca:	68 94       	set
    1ecc:	3f 91       	pop	r19
    1ece:	2a e0       	ldi	r18, 0x0A	; 10
    1ed0:	26 9f       	mul	r18, r22
    1ed2:	11 24       	eor	r1, r1
    1ed4:	30 19       	sub	r19, r0
    1ed6:	30 5d       	subi	r19, 0xD0	; 208
    1ed8:	31 93       	st	Z+, r19
    1eda:	de f6       	brtc	.-74     	; 0x1e92 <__ultoa_invert+0xe>
    1edc:	cf 01       	movw	r24, r30
    1ede:	08 95       	ret
    1ee0:	46 2f       	mov	r20, r22
    1ee2:	47 70       	andi	r20, 0x07	; 7
    1ee4:	40 5d       	subi	r20, 0xD0	; 208
    1ee6:	41 93       	st	Z+, r20
    1ee8:	b3 e0       	ldi	r27, 0x03	; 3
    1eea:	0f d0       	rcall	.+30     	; 0x1f0a <__ultoa_invert+0x86>
    1eec:	c9 f7       	brne	.-14     	; 0x1ee0 <__ultoa_invert+0x5c>
    1eee:	f6 cf       	rjmp	.-20     	; 0x1edc <__ultoa_invert+0x58>
    1ef0:	46 2f       	mov	r20, r22
    1ef2:	4f 70       	andi	r20, 0x0F	; 15
    1ef4:	40 5d       	subi	r20, 0xD0	; 208
    1ef6:	4a 33       	cpi	r20, 0x3A	; 58
    1ef8:	18 f0       	brcs	.+6      	; 0x1f00 <__ultoa_invert+0x7c>
    1efa:	49 5d       	subi	r20, 0xD9	; 217
    1efc:	31 fd       	sbrc	r19, 1
    1efe:	40 52       	subi	r20, 0x20	; 32
    1f00:	41 93       	st	Z+, r20
    1f02:	02 d0       	rcall	.+4      	; 0x1f08 <__ultoa_invert+0x84>
    1f04:	a9 f7       	brne	.-22     	; 0x1ef0 <__ultoa_invert+0x6c>
    1f06:	ea cf       	rjmp	.-44     	; 0x1edc <__ultoa_invert+0x58>
    1f08:	b4 e0       	ldi	r27, 0x04	; 4
    1f0a:	a6 95       	lsr	r26
    1f0c:	97 95       	ror	r25
    1f0e:	87 95       	ror	r24
    1f10:	77 95       	ror	r23
    1f12:	67 95       	ror	r22
    1f14:	ba 95       	dec	r27
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__ultoa_invert+0x86>
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	61 05       	cpc	r22, r1
    1f1c:	71 05       	cpc	r23, r1
    1f1e:	08 95       	ret
    1f20:	9b 01       	movw	r18, r22
    1f22:	ac 01       	movw	r20, r24
    1f24:	0a 2e       	mov	r0, r26
    1f26:	06 94       	lsr	r0
    1f28:	57 95       	ror	r21
    1f2a:	47 95       	ror	r20
    1f2c:	37 95       	ror	r19
    1f2e:	27 95       	ror	r18
    1f30:	ba 95       	dec	r27
    1f32:	c9 f7       	brne	.-14     	; 0x1f26 <__ultoa_invert+0xa2>
    1f34:	62 0f       	add	r22, r18
    1f36:	73 1f       	adc	r23, r19
    1f38:	84 1f       	adc	r24, r20
    1f3a:	95 1f       	adc	r25, r21
    1f3c:	a0 1d       	adc	r26, r0
    1f3e:	08 95       	ret

00001f40 <_exit>:
    1f40:	f8 94       	cli

00001f42 <__stop_program>:
    1f42:	ff cf       	rjmp	.-2      	; 0x1f42 <__stop_program>
