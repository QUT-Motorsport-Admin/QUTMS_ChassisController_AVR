
cc_merge2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006e4  00800200  00001e2a  00001ebe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  008008e4  008008e4  000025a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000048e7  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001736  00000000  00000000  000072a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002022  00000000  00000000  000089dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b60  00000000  00000000  0000aa00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011e3  00000000  00000000  0000b560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045b3  00000000  00000000  0000c743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  00010cf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c0       	rjmp	.+492    	; 0x1ee <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_1>
       8:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_2>
       c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
      12:	00 00       	nop
      14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
      16:	00 00       	nop
      18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_9>
      28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
      36:	00 00       	nop
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_17>
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_21>
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__vector_25>
      68:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__vector_26>
      6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
      6e:	00 00       	nop
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__vector_36>
      94:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__vector_37>
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
      be:	00 00       	nop
      c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a8 c0       	rjmp	.+336    	; 0x22a <__bad_interrupt>
      da:	00 00       	nop
      dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
      de:	00 00       	nop
      e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 02       	muls	r16, r23
      e6:	68 04       	cpc	r6, r8
      e8:	c4 02       	muls	r28, r20
      ea:	df 02       	muls	r29, r31
      ec:	fa 02       	muls	r31, r26
      ee:	15 03       	mulsu	r17, r21
      f0:	30 03       	mulsu	r19, r16
      f2:	4b 03       	fmul	r20, r19
      f4:	66 03       	mulsu	r22, r22
      f6:	81 03       	fmuls	r16, r17
      f8:	9c 03       	fmulsu	r17, r20
      fa:	b7 03       	fmuls	r19, r23
      fc:	d2 03       	fmuls	r21, r18
      fe:	e4 03       	fmuls	r22, r20
     100:	f6 03       	fmuls	r23, r22
     102:	08 04       	cpc	r0, r8
     104:	1a 04       	cpc	r1, r10
     106:	35 04       	cpc	r3, r5
     108:	4f 04       	cpc	r4, r15
     10a:	68 04       	cpc	r6, r8
     10c:	68 04       	cpc	r6, r8
     10e:	68 04       	cpc	r6, r8
     110:	68 04       	cpc	r6, r8
     112:	68 04       	cpc	r6, r8
     114:	68 04       	cpc	r6, r8
     116:	68 04       	cpc	r6, r8
     118:	68 04       	cpc	r6, r8
     11a:	68 04       	cpc	r6, r8
     11c:	68 04       	cpc	r6, r8
     11e:	68 04       	cpc	r6, r8
     120:	68 04       	cpc	r6, r8
     122:	68 04       	cpc	r6, r8
     124:	68 04       	cpc	r6, r8
     126:	68 04       	cpc	r6, r8
     128:	68 04       	cpc	r6, r8
     12a:	68 04       	cpc	r6, r8
     12c:	68 04       	cpc	r6, r8
     12e:	68 04       	cpc	r6, r8
     130:	68 04       	cpc	r6, r8
     132:	68 04       	cpc	r6, r8
     134:	68 04       	cpc	r6, r8
     136:	68 04       	cpc	r6, r8
     138:	68 04       	cpc	r6, r8
     13a:	68 04       	cpc	r6, r8
     13c:	68 04       	cpc	r6, r8
     13e:	68 04       	cpc	r6, r8
     140:	68 04       	cpc	r6, r8
     142:	68 04       	cpc	r6, r8
     144:	68 04       	cpc	r6, r8
     146:	68 04       	cpc	r6, r8
     148:	68 04       	cpc	r6, r8
     14a:	68 04       	cpc	r6, r8
     14c:	68 04       	cpc	r6, r8
     14e:	68 04       	cpc	r6, r8
     150:	68 04       	cpc	r6, r8
     152:	68 04       	cpc	r6, r8
     154:	68 04       	cpc	r6, r8
     156:	68 04       	cpc	r6, r8
     158:	68 04       	cpc	r6, r8
     15a:	68 04       	cpc	r6, r8
     15c:	68 04       	cpc	r6, r8
     15e:	68 04       	cpc	r6, r8
     160:	68 04       	cpc	r6, r8
     162:	68 04       	cpc	r6, r8
     164:	68 04       	cpc	r6, r8
     166:	68 04       	cpc	r6, r8
     168:	68 04       	cpc	r6, r8
     16a:	68 04       	cpc	r6, r8
     16c:	68 04       	cpc	r6, r8
     16e:	68 04       	cpc	r6, r8
     170:	68 04       	cpc	r6, r8
     172:	68 04       	cpc	r6, r8
     174:	68 04       	cpc	r6, r8
     176:	68 04       	cpc	r6, r8
     178:	68 04       	cpc	r6, r8
     17a:	68 04       	cpc	r6, r8
     17c:	68 04       	cpc	r6, r8
     17e:	68 04       	cpc	r6, r8
     180:	68 04       	cpc	r6, r8
     182:	68 04       	cpc	r6, r8
     184:	68 04       	cpc	r6, r8
     186:	68 04       	cpc	r6, r8
     188:	68 04       	cpc	r6, r8
     18a:	68 04       	cpc	r6, r8
     18c:	68 04       	cpc	r6, r8
     18e:	68 04       	cpc	r6, r8
     190:	68 04       	cpc	r6, r8
     192:	68 04       	cpc	r6, r8
     194:	68 04       	cpc	r6, r8
     196:	68 04       	cpc	r6, r8
     198:	68 04       	cpc	r6, r8
     19a:	68 04       	cpc	r6, r8
     19c:	68 04       	cpc	r6, r8
     19e:	68 04       	cpc	r6, r8
     1a0:	68 04       	cpc	r6, r8
     1a2:	68 04       	cpc	r6, r8
     1a4:	68 04       	cpc	r6, r8
     1a6:	68 04       	cpc	r6, r8
     1a8:	68 04       	cpc	r6, r8
     1aa:	68 04       	cpc	r6, r8
     1ac:	68 04       	cpc	r6, r8
     1ae:	68 04       	cpc	r6, r8
     1b0:	68 04       	cpc	r6, r8
     1b2:	68 04       	cpc	r6, r8
     1b4:	68 04       	cpc	r6, r8
     1b6:	68 04       	cpc	r6, r8
     1b8:	68 04       	cpc	r6, r8
     1ba:	68 04       	cpc	r6, r8
     1bc:	68 04       	cpc	r6, r8
     1be:	68 04       	cpc	r6, r8
     1c0:	68 04       	cpc	r6, r8
     1c2:	22 02       	muls	r18, r18
     1c4:	3d 02       	muls	r19, r29
     1c6:	68 04       	cpc	r6, r8
     1c8:	68 04       	cpc	r6, r8
     1ca:	68 04       	cpc	r6, r8
     1cc:	68 04       	cpc	r6, r8
     1ce:	68 04       	cpc	r6, r8
     1d0:	68 04       	cpc	r6, r8
     1d2:	68 04       	cpc	r6, r8
     1d4:	68 04       	cpc	r6, r8
     1d6:	58 02       	muls	r21, r24
     1d8:	73 02       	muls	r23, r19
     1da:	68 04       	cpc	r6, r8
     1dc:	68 04       	cpc	r6, r8
     1de:	68 04       	cpc	r6, r8
     1e0:	68 04       	cpc	r6, r8
     1e2:	68 04       	cpc	r6, r8
     1e4:	68 04       	cpc	r6, r8
     1e6:	68 04       	cpc	r6, r8
     1e8:	68 04       	cpc	r6, r8
     1ea:	8e 02       	muls	r24, r30
     1ec:	a9 02       	muls	r26, r25

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d1 e2       	ldi	r29, 0x21	; 33
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	18 e0       	ldi	r17, 0x08	; 8
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b2 e0       	ldi	r27, 0x02	; 2
     200:	ea e2       	ldi	r30, 0x2A	; 42
     202:	fe e1       	ldi	r31, 0x1E	; 30
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a4 3e       	cpi	r26, 0xE4	; 228
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	2a e0       	ldi	r18, 0x0A	; 10
     216:	a4 ee       	ldi	r26, 0xE4	; 228
     218:	b8 e0       	ldi	r27, 0x08	; 8
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a8 32       	cpi	r26, 0x28	; 40
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	4e d6       	rcall	.+3228   	; 0xec2 <main>
     226:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <a2dOn>:
// starts conversion, waits until conversion is done, and returns result
unsigned char a2d_8bit()
{
	// do 10-bit conversion and return highest 8 bits
	return a2d_10bit()>>2;			// return ADC MSB byte
}
     22c:	ea e7       	ldi	r30, 0x7A	; 122
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	80 68       	ori	r24, 0x80	; 128
     234:	80 83       	st	Z, r24
     236:	08 95       	ret

00000238 <a2dSetPrescaler>:
     238:	ea e7       	ldi	r30, 0x7A	; 122
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	90 81       	ld	r25, Z
     23e:	98 7f       	andi	r25, 0xF8	; 248
     240:	90 83       	st	Z, r25
     242:	90 81       	ld	r25, Z
     244:	89 2b       	or	r24, r25
     246:	80 83       	st	Z, r24
     248:	08 95       	ret

0000024a <a2dSetReference>:
     24a:	ec e7       	ldi	r30, 0x7C	; 124
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	90 81       	ld	r25, Z
     250:	9c 7f       	andi	r25, 0xFC	; 252
     252:	90 83       	st	Z, r25
     254:	20 81       	ld	r18, Z
     256:	30 e4       	ldi	r19, 0x40	; 64
     258:	83 9f       	mul	r24, r19
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	82 2b       	or	r24, r18
     260:	80 83       	st	Z, r24
     262:	08 95       	ret

00000264 <a2dInit>:
     264:	cf 93       	push	r28
     266:	c6 2f       	mov	r28, r22
     268:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     26c:	ec e7       	ldi	r30, 0x7C	; 124
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	90 81       	ld	r25, Z
     272:	9f 7d       	andi	r25, 0xDF	; 223
     274:	90 83       	st	Z, r25
     276:	e0 df       	rcall	.-64     	; 0x238 <a2dSetPrescaler>
     278:	8c 2f       	mov	r24, r28
     27a:	e7 df       	rcall	.-50     	; 0x24a <a2dSetReference>
     27c:	d7 df       	rcall	.-82     	; 0x22c <a2dOn>
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <a2d_10bitCh>:
// starts conversion, waits until conversion is done, and returns result
// modded for mega1280 by Ant
unsigned short a2d_10bitCh(unsigned char ch)
{
	// set channel
	ADMUX &= ADC_MUX_MASK;	
     282:	ec e7       	ldi	r30, 0x7C	; 124
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	90 81       	ld	r25, Z
     288:	90 7e       	andi	r25, 0xE0	; 224
     28a:	90 83       	st	Z, r25
	
	if (ch > 7) 
     28c:	88 30       	cpi	r24, 0x08	; 8
     28e:	60 f0       	brcs	.+24     	; 0x2a8 <a2d_10bitCh+0x26>
	{
		ADCSRB |= 8;
     290:	eb e7       	ldi	r30, 0x7B	; 123
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	90 81       	ld	r25, Z
     296:	98 60       	ori	r25, 0x08	; 8
     298:	90 83       	st	Z, r25
		ADMUX |= (ch - 8);
     29a:	ec e7       	ldi	r30, 0x7C	; 124
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	90 81       	ld	r25, Z
     2a0:	88 50       	subi	r24, 0x08	; 8
     2a2:	89 2b       	or	r24, r25
     2a4:	80 83       	st	Z, r24
     2a6:	0a c0       	rjmp	.+20     	; 0x2bc <a2d_10bitCh+0x3a>
	}
	else
	{
		ADCSRB &= 247;
     2a8:	eb e7       	ldi	r30, 0x7B	; 123
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	90 81       	ld	r25, Z
     2ae:	97 7f       	andi	r25, 0xF7	; 247
     2b0:	90 83       	st	Z, r25
		ADMUX |= ch;
     2b2:	ec e7       	ldi	r30, 0x7C	; 124
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	90 81       	ld	r25, Z
     2b8:	89 2b       	or	r24, r25
     2ba:	80 83       	st	Z, r24
	}
	
	// ADMUX |= ch;	//comment out this line when using on 16ch parts

	// start conversion
	ADCSRA |= (1<<ADSC);
     2bc:	ea e7       	ldi	r30, 0x7A	; 122
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC)) {} // wait until conversion complete 
     2c6:	80 81       	ld	r24, Z
     2c8:	86 fd       	sbrc	r24, 6
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <a2d_10bitCh+0x44>

	return ADC;                // read ADC (full 10 bits);
     2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// return (8 << ADCH)|(ADCL); // read ADC (full 10 bits);
    // return ADCL;                // read ADC (first 8 bits)
}
     2d4:	08 95       	ret

000002d6 <CAN_send>:
        sendingID|                  // Sending ID, ( First 8 bits, define the device to send to)
        ((uint32_t)type<<18)|       // What sort of command to send
        ((uint32_t)address<<13)|    // Specific address
        status                      // SubID?
    );
}
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	c8 2f       	mov	r28, r24
     2f0:	d6 2f       	mov	r29, r22
     2f2:	6a 01       	movw	r12, r20
     2f4:	48 01       	movw	r8, r16
     2f6:	59 01       	movw	r10, r18
     2f8:	0e 94 42 0a 	call	0x1484	; 0x1484 <MCP2515_findFreeTxBuffer>
     2fc:	85 01       	movw	r16, r10
     2fe:	74 01       	movw	r14, r8
     300:	96 01       	movw	r18, r12
     302:	4d 2f       	mov	r20, r29
     304:	68 2f       	mov	r22, r24
     306:	8c 2f       	mov	r24, r28
     308:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <MCP2515_TX>
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	df 90       	pop	r13
     31a:	cf 90       	pop	r12
     31c:	bf 90       	pop	r11
     31e:	af 90       	pop	r10
     320:	9f 90       	pop	r9
     322:	8f 90       	pop	r8
     324:	08 95       	ret

00000326 <CAN_pull_packet>:

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
     326:	af 92       	push	r10
     328:	bf 92       	push	r11
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	c8 2f       	mov	r28, r24
     33a:	7b 01       	movw	r14, r22
     33c:	6a 01       	movw	r12, r20
     33e:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
     340:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
     344:	82 95       	swap	r24
     346:	86 95       	lsr	r24
     348:	86 95       	lsr	r24
     34a:	83 70       	andi	r24, 0x03	; 3
     34c:	82 30       	cpi	r24, 0x02	; 2
     34e:	59 f0       	breq	.+22     	; 0x366 <CAN_pull_packet+0x40>
     350:	83 30       	cpi	r24, 0x03	; 3
     352:	81 f0       	breq	.+32     	; 0x374 <CAN_pull_packet+0x4e>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	c9 f4       	brne	.+50     	; 0x38a <CAN_pull_packet+0x64>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     358:	85 01       	movw	r16, r10
     35a:	96 01       	movw	r18, r12
     35c:	a7 01       	movw	r20, r14
     35e:	61 e6       	ldi	r22, 0x61	; 97
     360:	8c 2f       	mov	r24, r28
     362:	fd d7       	rcall	.+4090   	; 0x135e <MCP2515_PullCanPacket>
			break;
     364:	12 c0       	rjmp	.+36     	; 0x38a <CAN_pull_packet+0x64>
		case 2: // Message in RXB1
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     366:	85 01       	movw	r16, r10
     368:	96 01       	movw	r18, r12
     36a:	a7 01       	movw	r20, r14
     36c:	61 e6       	ldi	r22, 0x61	; 97
     36e:	8c 2f       	mov	r24, r28
     370:	f6 d7       	rcall	.+4076   	; 0x135e <MCP2515_PullCanPacket>
			break;
     372:	0b c0       	rjmp	.+22     	; 0x38a <CAN_pull_packet+0x64>
		case 3: // Message in both buffers
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     374:	85 01       	movw	r16, r10
     376:	96 01       	movw	r18, r12
     378:	a7 01       	movw	r20, r14
     37a:	61 e6       	ldi	r22, 0x61	; 97
     37c:	8c 2f       	mov	r24, r28
     37e:	ef d7       	rcall	.+4062   	; 0x135e <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     380:	96 01       	movw	r18, r12
     382:	a7 01       	movw	r20, r14
     384:	61 e6       	ldi	r22, 0x61	; 97
     386:	8c 2f       	mov	r24, r28
     388:	ea d7       	rcall	.+4052   	; 0x135e <MCP2515_PullCanPacket>
			break;
		default:
			break;
	}
}
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	bf 90       	pop	r11
     39a:	af 90       	pop	r10
     39c:	08 95       	ret

0000039e <send_error_message>:
 * Returns: none
 * 
 * Formats a 50-character long log message, and sends it over UART.
 * */
void send_error_message(char start[], char message[], uint16_t part_number) 
{
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	18 2f       	mov	r17, r24
     3a8:	09 2f       	mov	r16, r25
	unsigned char *messageWithNumber;
	unsigned char *errorData;
	
	// Format error message with part number if given
	snprintf(messageWithNumber, MAX_ERROR_MESSAGE_LENGTH, message, part_number);
     3aa:	5f 93       	push	r21
     3ac:	4f 93       	push	r20
     3ae:	7f 93       	push	r23
     3b0:	6f 93       	push	r22
     3b2:	1f 92       	push	r1
     3b4:	88 e2       	ldi	r24, 0x28	; 40
     3b6:	8f 93       	push	r24
     3b8:	d0 e0       	ldi	r29, 0x00	; 0
     3ba:	df 93       	push	r29
     3bc:	c0 e0       	ldi	r28, 0x00	; 0
     3be:	cf 93       	push	r28
     3c0:	0e 94 2a 0c 	call	0x1854	; 0x1854 <snprintf>

	// Create error data
	snprintf(errorData, MAX_ERROR_MESSAGE_LENGTH + 10, "%s %s", start, messageWithNumber);
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	8f e1       	ldi	r24, 0x1F	; 31
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	1f 92       	push	r1
     3d6:	82 e3       	ldi	r24, 0x32	; 50
     3d8:	8f 93       	push	r24
     3da:	1f 92       	push	r1
     3dc:	1f 92       	push	r1
     3de:	0e 94 2a 0c 	call	0x1854	; 0x1854 <snprintf>
	
	// Send error data over UART
	// uart_send_data(errorData, MAX_ERROR_MESSAGE_LENGTH + 10);
}
     3e2:	8d b7       	in	r24, 0x3d	; 61
     3e4:	9e b7       	in	r25, 0x3e	; 62
     3e6:	42 96       	adiw	r24, 0x12	; 18
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	9e bf       	out	0x3e, r25	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	8d bf       	out	0x3d, r24	; 61
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <throw_error_code_with_number>:
 * Generates an error message, and takes the necessary actions depending on the severity and error
 * 
 * */
void throw_error_code_with_number(uint16_t severity, uint16_t error_code, uint16_t part_number) 
{
	switch (error_code) {
     3fc:	65 38       	cpi	r22, 0x85	; 133
     3fe:	71 05       	cpc	r23, r1
     400:	08 f0       	brcs	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	66 c2       	rjmp	.+1228   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     404:	fb 01       	movw	r30, r22
     406:	ee 58       	subi	r30, 0x8E	; 142
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__tablejump2__>
		// 		break;
		//     }			
		// break;

        case ERROR_GENERAL:					
			switch (severity) {
     40e:	82 30       	cpi	r24, 0x02	; 2
     410:	91 05       	cpc	r25, r1
     412:	61 f0       	breq	.+24     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     414:	83 30       	cpi	r24, 0x03	; 3
     416:	91 05       	cpc	r25, r1
     418:	79 f0       	breq	.+30     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	58 c2       	rjmp	.+1200   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Error", part_number);
     420:	65 e2       	ldi	r22, 0x25	; 37
     422:	72 e0       	ldi	r23, 0x02	; 2
     424:	8b e2       	ldi	r24, 0x2B	; 43
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	ba cf       	rjmp	.-140    	; 0x39e <send_error_message>
				// Additional Info Handling
				break;
     42a:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Error!", part_number);
     42c:	60 e3       	ldi	r22, 0x30	; 48
     42e:	72 e0       	ldi	r23, 0x02	; 2
     430:	87 e3       	ldi	r24, 0x37	; 55
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	b4 cf       	rjmp	.-152    	; 0x39e <send_error_message>
				// Additional Warning Handling
				break;
     436:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "ERROR", part_number);
     438:	61 e4       	ldi	r22, 0x41	; 65
     43a:	72 e0       	ldi	r23, 0x02	; 2
     43c:	87 e4       	ldi	r24, 0x47	; 71
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	ae cf       	rjmp	.-164    	; 0x39e <send_error_message>
				// Additional Error Handling
				break;
     442:	08 95       	ret

        // CANBUS based errors
        // --------------------------------------------------------------------

        case ERROR_CANBUS_1_NO_RESPONSE:					
			switch (severity) {
     444:	82 30       	cpi	r24, 0x02	; 2
     446:	91 05       	cpc	r25, r1
     448:	61 f0       	breq	.+24     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     44a:	83 30       	cpi	r24, 0x03	; 3
     44c:	91 05       	cpc	r25, r1
     44e:	79 f0       	breq	.+30     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	09 f0       	breq	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	3d c2       	rjmp	.+1146   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 No Response", part_number);
     456:	61 e5       	ldi	r22, 0x51	; 81
     458:	72 e0       	ldi	r23, 0x02	; 2
     45a:	8b e2       	ldi	r24, 0x2B	; 43
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	9f cf       	rjmp	.-194    	; 0x39e <send_error_message>
				// Additional Info Handling
				break;
     460:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 No Response!", part_number);
     462:	66 e6       	ldi	r22, 0x66	; 102
     464:	72 e0       	ldi	r23, 0x02	; 2
     466:	87 e3       	ldi	r24, 0x37	; 55
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	99 cf       	rjmp	.-206    	; 0x39e <send_error_message>
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL NO RESPONSE", part_number);
     46c:	08 95       	ret
     46e:	6c e7       	ldi	r22, 0x7C	; 124
     470:	72 e0       	ldi	r23, 0x02	; 2
     472:	87 e4       	ldi	r24, 0x47	; 71
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	93 cf       	rjmp	.-218    	; 0x39e <send_error_message>
				// Additional Error Handling
				break;
     478:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_1_RESPONSE_MALFORMED:					
			switch (severity) {
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	91 05       	cpc	r25, r1
     47e:	61 f0       	breq	.+24     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     480:	83 30       	cpi	r24, 0x03	; 3
     482:	91 05       	cpc	r25, r1
     484:	79 f0       	breq	.+30     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	09 f0       	breq	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 Malformed Packet", part_number);
     48a:	22 c2       	rjmp	.+1092   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     48c:	6a e9       	ldi	r22, 0x9A	; 154
     48e:	72 e0       	ldi	r23, 0x02	; 2
     490:	8b e2       	ldi	r24, 0x2B	; 43
     492:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     494:	84 cf       	rjmp	.-248    	; 0x39e <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 Malformed Packet!", part_number);
     496:	08 95       	ret
     498:	64 eb       	ldi	r22, 0xB4	; 180
     49a:	72 e0       	ldi	r23, 0x02	; 2
     49c:	87 e3       	ldi	r24, 0x37	; 55
     49e:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4a0:	7e cf       	rjmp	.-260    	; 0x39e <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL MALFORMED PACKET", part_number);
     4a2:	08 95       	ret
     4a4:	6f ec       	ldi	r22, 0xCF	; 207
     4a6:	72 e0       	ldi	r23, 0x02	; 2
     4a8:	87 e4       	ldi	r24, 0x47	; 71
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	78 cf       	rjmp	.-272    	; 0x39e <send_error_message>
				// Additional Error Handling
				break;
     4ae:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_NO_RESPONSE:					
			switch (severity) {
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	91 05       	cpc	r25, r1
     4b4:	61 f0       	breq	.+24     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4b6:	83 30       	cpi	r24, 0x03	; 3
     4b8:	91 05       	cpc	r25, r1
     4ba:	79 f0       	breq	.+30     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	09 f0       	breq	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 No Response", part_number);
     4c0:	07 c2       	rjmp	.+1038   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     4c2:	62 ef       	ldi	r22, 0xF2	; 242
     4c4:	72 e0       	ldi	r23, 0x02	; 2
     4c6:	8b e2       	ldi	r24, 0x2B	; 43
     4c8:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     4ca:	69 cf       	rjmp	.-302    	; 0x39e <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 No Response!", part_number);
     4cc:	08 95       	ret
     4ce:	67 e0       	ldi	r22, 0x07	; 7
     4d0:	73 e0       	ldi	r23, 0x03	; 3
     4d2:	87 e3       	ldi	r24, 0x37	; 55
     4d4:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4d6:	63 cf       	rjmp	.-314    	; 0x39e <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL NO RESPONSE", part_number);
     4d8:	08 95       	ret
     4da:	6d e1       	ldi	r22, 0x1D	; 29
     4dc:	73 e0       	ldi	r23, 0x03	; 3
     4de:	87 e4       	ldi	r24, 0x47	; 71
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	5d cf       	rjmp	.-326    	; 0x39e <send_error_message>
				// Additional Error Handling
				break;
     4e4:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_RESPONSE_MALFORMED:					
			switch (severity) {
     4e6:	82 30       	cpi	r24, 0x02	; 2
     4e8:	91 05       	cpc	r25, r1
     4ea:	61 f0       	breq	.+24     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     4ec:	83 30       	cpi	r24, 0x03	; 3
     4ee:	91 05       	cpc	r25, r1
     4f0:	79 f0       	breq	.+30     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     4f2:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 Malformed Packet", part_number);
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4f6:	ec c1       	rjmp	.+984    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     4f8:	6b e3       	ldi	r22, 0x3B	; 59
     4fa:	73 e0       	ldi	r23, 0x03	; 3
     4fc:	8b e2       	ldi	r24, 0x2B	; 43
				// Additional Info Handling
				break;
     4fe:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 Malformed Packet!", part_number);
     500:	4e cf       	rjmp	.-356    	; 0x39e <send_error_message>
     502:	08 95       	ret
     504:	65 e5       	ldi	r22, 0x55	; 85
     506:	73 e0       	ldi	r23, 0x03	; 3
     508:	87 e3       	ldi	r24, 0x37	; 55
     50a:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     50c:	48 cf       	rjmp	.-368    	; 0x39e <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL MALFORMED PACKET", part_number);
     50e:	08 95       	ret
     510:	60 e7       	ldi	r22, 0x70	; 112
     512:	73 e0       	ldi	r23, 0x03	; 3
     514:	87 e4       	ldi	r24, 0x47	; 71
     516:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     518:	42 cf       	rjmp	.-380    	; 0x39e <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_NO_RESPONSE:					
			switch (severity) {
     51a:	08 95       	ret
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	91 05       	cpc	r25, r1
     520:	61 f0       	breq	.+24     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     522:	83 30       	cpi	r24, 0x03	; 3
     524:	91 05       	cpc	r25, r1
     526:	79 f0       	breq	.+30     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     528:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 No Response", part_number);
     52a:	09 f0       	breq	.+2      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     52c:	d1 c1       	rjmp	.+930    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     52e:	63 e9       	ldi	r22, 0x93	; 147
     530:	73 e0       	ldi	r23, 0x03	; 3
     532:	8b e2       	ldi	r24, 0x2B	; 43
				// Additional Info Handling
				break;
     534:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 No Response!", part_number);
     536:	33 cf       	rjmp	.-410    	; 0x39e <send_error_message>
     538:	08 95       	ret
     53a:	68 ea       	ldi	r22, 0xA8	; 168
     53c:	73 e0       	ldi	r23, 0x03	; 3
     53e:	87 e3       	ldi	r24, 0x37	; 55
     540:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     542:	2d cf       	rjmp	.-422    	; 0x39e <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL NO RESPONSE", part_number);
     544:	08 95       	ret
     546:	6e eb       	ldi	r22, 0xBE	; 190
     548:	73 e0       	ldi	r23, 0x03	; 3
     54a:	87 e4       	ldi	r24, 0x47	; 71
     54c:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     54e:	27 cf       	rjmp	.-434    	; 0x39e <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_RESPONSE_MALFORMED:					
			switch (severity) {
     550:	08 95       	ret
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	91 05       	cpc	r25, r1
     556:	61 f0       	breq	.+24     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     558:	83 30       	cpi	r24, 0x03	; 3
     55a:	91 05       	cpc	r25, r1
     55c:	79 f0       	breq	.+30     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 Malformed Packet", part_number);
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	09 f0       	breq	.+2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     562:	b6 c1       	rjmp	.+876    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     564:	6c ed       	ldi	r22, 0xDC	; 220
     566:	73 e0       	ldi	r23, 0x03	; 3
     568:	8b e2       	ldi	r24, 0x2B	; 43
				// Additional Info Handling
				break;
     56a:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 Malformed Packet!", part_number);
     56c:	18 cf       	rjmp	.-464    	; 0x39e <send_error_message>
     56e:	08 95       	ret
     570:	66 ef       	ldi	r22, 0xF6	; 246
     572:	73 e0       	ldi	r23, 0x03	; 3
     574:	87 e3       	ldi	r24, 0x37	; 55
     576:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL MALFORMED PACKET", part_number);
     578:	12 cf       	rjmp	.-476    	; 0x39e <send_error_message>
     57a:	08 95       	ret
     57c:	61 e1       	ldi	r22, 0x11	; 17
     57e:	74 e0       	ldi	r23, 0x04	; 4
     580:	87 e4       	ldi	r24, 0x47	; 71
				// Additional Error Handling
				break;
     582:	92 e0       	ldi	r25, 0x02	; 2

        // Sensor based errors
        // --------------------------------------------------------------------

		case ERROR_GEARBOX_TEMPERATURE_LOW:					
			switch (severity) {
     584:	0c cf       	rjmp	.-488    	; 0x39e <send_error_message>
     586:	08 95       	ret
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	91 05       	cpc	r25, r1
     58c:	61 f0       	breq	.+24     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     58e:	83 30       	cpi	r24, 0x03	; 3
     590:	91 05       	cpc	r25, r1
     592:	79 f0       	breq	.+30     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	09 f0       	breq	.+2      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     598:	9b c1       	rjmp	.+822    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     59a:	64 e3       	ldi	r22, 0x34	; 52
     59c:	74 e0       	ldi	r23, 0x04	; 4
     59e:	8b e2       	ldi	r24, 0x2B	; 43
				// Additional Info Handling
				break;
     5a0:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally Low!", part_number);
     5a2:	fd ce       	rjmp	.-518    	; 0x39e <send_error_message>
     5a4:	08 95       	ret
     5a6:	62 e5       	ldi	r22, 0x52	; 82
     5a8:	74 e0       	ldi	r23, 0x04	; 4
     5aa:	87 e3       	ldi	r24, 0x37	; 55
				// Additional Warning Handling
				break;
     5ac:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY LOW", part_number);
     5ae:	f7 ce       	rjmp	.-530    	; 0x39e <send_error_message>
     5b0:	08 95       	ret
     5b2:	69 e7       	ldi	r22, 0x79	; 121
     5b4:	74 e0       	ldi	r23, 0x04	; 4
     5b6:	87 e4       	ldi	r24, 0x47	; 71
				// Additional Error Handling
				break;
     5b8:	92 e0       	ldi	r25, 0x02	; 2
			}			
		break;

		case ERROR_GEARBOX_TEMPERATURE_HIGH:					
			switch (severity) {
     5ba:	f1 ce       	rjmp	.-542    	; 0x39e <send_error_message>
     5bc:	08 95       	ret
     5be:	82 30       	cpi	r24, 0x02	; 2
     5c0:	91 05       	cpc	r25, r1
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5c4:	83 30       	cpi	r24, 0x03	; 3
     5c6:	91 05       	cpc	r25, r1
     5c8:	79 f0       	breq	.+30     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     5ce:	80 c1       	rjmp	.+768    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     5d0:	64 e3       	ldi	r22, 0x34	; 52
     5d2:	74 e0       	ldi	r23, 0x04	; 4
     5d4:	8b e2       	ldi	r24, 0x2B	; 43
				// Additional Info Handling
				break;
     5d6:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally High!", part_number);
     5d8:	e2 ce       	rjmp	.-572    	; 0x39e <send_error_message>
     5da:	08 95       	ret
     5dc:	6f e9       	ldi	r22, 0x9F	; 159
     5de:	74 e0       	ldi	r23, 0x04	; 4
     5e0:	87 e3       	ldi	r24, 0x37	; 55
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY HIGH", part_number);
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	dc ce       	rjmp	.-584    	; 0x39e <send_error_message>
     5e6:	08 95       	ret
     5e8:	67 ec       	ldi	r22, 0xC7	; 199
     5ea:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Error Handling
				break;
     5ec:	87 e4       	ldi	r24, 0x47	; 71
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_LOW:					
			switch (severity) {
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	d6 ce       	rjmp	.-596    	; 0x39e <send_error_message>
     5f2:	08 95       	ret
     5f4:	82 30       	cpi	r24, 0x02	; 2
     5f6:	91 05       	cpc	r25, r1
     5f8:	61 f0       	breq	.+24     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     5fa:	83 30       	cpi	r24, 0x03	; 3
     5fc:	91 05       	cpc	r25, r1
     5fe:	79 f0       	breq	.+30     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	09 f0       	breq	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     604:	65 c1       	rjmp	.+714    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     606:	6e ee       	ldi	r22, 0xEE	; 238
     608:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Info Handling
				break;
     60a:	8b e2       	ldi	r24, 0x2B	; 43

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally Low!", part_number);
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	c7 ce       	rjmp	.-626    	; 0x39e <send_error_message>
     610:	08 95       	ret
     612:	6d e0       	ldi	r22, 0x0D	; 13
     614:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;
     616:	87 e3       	ldi	r24, 0x37	; 55

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY LOW", part_number);
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	c1 ce       	rjmp	.-638    	; 0x39e <send_error_message>
     61c:	08 95       	ret
     61e:	65 e3       	ldi	r22, 0x35	; 53
     620:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     622:	87 e4       	ldi	r24, 0x47	; 71
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_HIGH:					
			switch (severity) {
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	bb ce       	rjmp	.-650    	; 0x39e <send_error_message>
     628:	08 95       	ret
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	91 05       	cpc	r25, r1
     62e:	61 f0       	breq	.+24     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     630:	83 30       	cpi	r24, 0x03	; 3
     632:	91 05       	cpc	r25, r1
     634:	79 f0       	breq	.+30     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	09 f0       	breq	.+2      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     63a:	4a c1       	rjmp	.+660    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     63c:	6e ee       	ldi	r22, 0xEE	; 238
     63e:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Info Handling
				break;
     640:	8b e2       	ldi	r24, 0x2B	; 43

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally High!", part_number);
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	ac ce       	rjmp	.-680    	; 0x39e <send_error_message>
     646:	08 95       	ret
     648:	6c e5       	ldi	r22, 0x5C	; 92
     64a:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY HIGH", part_number);
     64c:	87 e3       	ldi	r24, 0x37	; 55
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	a6 ce       	rjmp	.-692    	; 0x39e <send_error_message>
     652:	08 95       	ret
     654:	65 e8       	ldi	r22, 0x85	; 133
     656:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     658:	87 e4       	ldi	r24, 0x47	; 71
			}			
		break;

		case ERROR_BRAKES_PRESSURE_LOW:					
			switch (severity) {
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	a0 ce       	rjmp	.-704    	; 0x39e <send_error_message>
     65e:	08 95       	ret
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	91 05       	cpc	r25, r1
     664:	61 f0       	breq	.+24     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     666:	83 30       	cpi	r24, 0x03	; 3
     668:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     66a:	79 f0       	breq	.+30     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	09 f0       	breq	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     670:	2f c1       	rjmp	.+606    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     672:	6d ea       	ldi	r22, 0xAD	; 173
				// Additional Info Handling
				break;
     674:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally Low!", part_number);
     676:	8b e2       	ldi	r24, 0x2B	; 43
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	91 ce       	rjmp	.-734    	; 0x39e <send_error_message>
     67c:	08 95       	ret
     67e:	67 ec       	ldi	r22, 0xC7	; 199
				// Additional Warning Handling
				break;
     680:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY LOW", part_number);
     682:	87 e3       	ldi	r24, 0x37	; 55
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	8b ce       	rjmp	.-746    	; 0x39e <send_error_message>
     688:	08 95       	ret
     68a:	6a ee       	ldi	r22, 0xEA	; 234
     68c:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     68e:	87 e4       	ldi	r24, 0x47	; 71
			}			
		break;

		case ERROR_BRAKES_PRESSURE_HIGH:					
			switch (severity) {
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	85 ce       	rjmp	.-758    	; 0x39e <send_error_message>
     694:	08 95       	ret
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	91 05       	cpc	r25, r1
     69a:	61 f0       	breq	.+24     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
     69c:	83 30       	cpi	r24, 0x03	; 3
     69e:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6a0:	79 f0       	breq	.+30     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
     6a6:	14 c1       	rjmp	.+552    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     6a8:	6d ea       	ldi	r22, 0xAD	; 173
				// Additional Info Handling
				break;
     6aa:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     6ac:	8b e2       	ldi	r24, 0x2B	; 43
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	76 ce       	rjmp	.-788    	; 0x39e <send_error_message>
     6b2:	08 95       	ret
     6b4:	6c e0       	ldi	r22, 0x0C	; 12
				// Additional Warning Handling
				break;
     6b6:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     6b8:	87 e3       	ldi	r24, 0x37	; 55
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	70 ce       	rjmp	.-800    	; 0x39e <send_error_message>
     6be:	08 95       	ret
     6c0:	60 e3       	ldi	r22, 0x30	; 48
     6c2:	76 e0       	ldi	r23, 0x06	; 6
				// Additional Error Handling
				break;
     6c4:	87 e4       	ldi	r24, 0x47	; 71
			}			
		break;

        case ERROR_BRAKES_PRESSURE:					
			switch (severity) {
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	6a ce       	rjmp	.-812    	; 0x39e <send_error_message>
     6ca:	08 95       	ret
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	91 05       	cpc	r25, r1
     6d0:	61 f0       	breq	.+24     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
     6d2:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6d4:	91 05       	cpc	r25, r1
     6d6:	79 f0       	breq	.+30     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	09 f0       	breq	.+2      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     6dc:	f9 c0       	rjmp	.+498    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
				// Additional Info Handling
				break;
     6de:	6d ea       	ldi	r22, 0xAD	; 173

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Warnning!", part_number);
     6e0:	75 e0       	ldi	r23, 0x05	; 5
     6e2:	8b e2       	ldi	r24, 0x2B	; 43
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	5b ce       	rjmp	.-842    	; 0x39e <send_error_message>
     6e8:	08 95       	ret
     6ea:	63 e5       	ldi	r22, 0x53	; 83
				// Additional Warning Handling
				break;
     6ec:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICAL!", part_number);
     6ee:	87 e3       	ldi	r24, 0x37	; 55
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	55 ce       	rjmp	.-854    	; 0x39e <send_error_message>
     6f4:	08 95       	ret
     6f6:	60 e7       	ldi	r22, 0x70	; 112
				// Additional Error Handling
				break;
     6f8:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_LOW:					
			switch (severity) {
     6fa:	87 e4       	ldi	r24, 0x47	; 71
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	4f ce       	rjmp	.-866    	; 0x39e <send_error_message>
     700:	08 95       	ret
     702:	82 30       	cpi	r24, 0x02	; 2
     704:	91 05       	cpc	r25, r1
     706:	61 f0       	breq	.+24     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     708:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     70a:	91 05       	cpc	r25, r1
     70c:	79 f0       	breq	.+30     	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	09 f0       	breq	.+2      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
     712:	de c0       	rjmp	.+444    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
				// Additional Info Handling
				break;
     714:	6d e8       	ldi	r22, 0x8D	; 141

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Abnormally Low!", part_number);
     716:	76 e0       	ldi	r23, 0x06	; 6
     718:	8b e2       	ldi	r24, 0x2B	; 43
     71a:	92 e0       	ldi	r25, 0x02	; 2
     71c:	40 ce       	rjmp	.-896    	; 0x39e <send_error_message>
     71e:	08 95       	ret
     720:	67 ea       	ldi	r22, 0xA7	; 167
				// Additional Warning Handling
				break;
     722:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICALLY LOW", part_number);
     724:	87 e3       	ldi	r24, 0x37	; 55
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	3a ce       	rjmp	.-908    	; 0x39e <send_error_message>
     72a:	08 95       	ret
     72c:	6a ec       	ldi	r22, 0xCA	; 202
				// Additional Error Handling
				break;
     72e:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_HIGH:					
			switch (severity) {
     730:	87 e4       	ldi	r24, 0x47	; 71
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	34 ce       	rjmp	.-920    	; 0x39e <send_error_message>
     736:	08 95       	ret
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	91 05       	cpc	r25, r1
     73c:	61 f0       	breq	.+24     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	91 05       	cpc	r25, r1
     742:	79 f0       	breq	.+30     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	09 f0       	breq	.+2      	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
     748:	c3 c0       	rjmp	.+390    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
				// Additional Info Handling
				break;
     74a:	6d ea       	ldi	r22, 0xAD	; 173

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     74c:	75 e0       	ldi	r23, 0x05	; 5
     74e:	8b e2       	ldi	r24, 0x2B	; 43
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	25 ce       	rjmp	.-950    	; 0x39e <send_error_message>
     754:	08 95       	ret
				// Additional Warning Handling
				break;
     756:	6c e0       	ldi	r22, 0x0C	; 12

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     758:	76 e0       	ldi	r23, 0x06	; 6
     75a:	87 e3       	ldi	r24, 0x37	; 55
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	1f ce       	rjmp	.-962    	; 0x39e <send_error_message>
     760:	08 95       	ret
				// Additional Error Handling
				break;
     762:	60 e3       	ldi	r22, 0x30	; 48
			}			
		break;

        case ERROR_BRAKES_POSITION:					
			switch (severity) {
     764:	76 e0       	ldi	r23, 0x06	; 6
     766:	87 e4       	ldi	r24, 0x47	; 71
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	19 ce       	rjmp	.-974    	; 0x39e <send_error_message>
     76c:	08 95       	ret
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	91 05       	cpc	r25, r1
     772:	61 f0       	breq	.+24     	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	91 05       	cpc	r25, r1
     778:	79 f0       	breq	.+30     	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	09 f0       	breq	.+2      	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
				// Additional Info Handling
				break;
     77e:	a8 c0       	rjmp	.+336    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Warning!", part_number);
     780:	6d e8       	ldi	r22, 0x8D	; 141
     782:	76 e0       	ldi	r23, 0x06	; 6
     784:	8b e2       	ldi	r24, 0x2B	; 43
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	0a ce       	rjmp	.-1004   	; 0x39e <send_error_message>
     78a:	08 95       	ret
				// Additional Warning Handling
				break;
     78c:	6c ee       	ldi	r22, 0xEC	; 236

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICAL", part_number);
     78e:	76 e0       	ldi	r23, 0x06	; 6
     790:	87 e3       	ldi	r24, 0x37	; 55
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	04 ce       	rjmp	.-1016   	; 0x39e <send_error_message>
     796:	08 95       	ret
				// Additional Error Handling
				break;
     798:	68 e0       	ldi	r22, 0x08	; 8
			}			
		break;

		case ERROR_STEERING_ANGLE_LEFT:					
			switch (severity) {
     79a:	77 e0       	ldi	r23, 0x07	; 7
     79c:	87 e4       	ldi	r24, 0x47	; 71
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	fe cd       	rjmp	.-1028   	; 0x39e <send_error_message>
     7a2:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	91 05       	cpc	r25, r1
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
     7aa:	03 97       	sbiw	r24, 0x03	; 3
     7ac:	39 f0       	breq	.+14     	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
     7ae:	08 95       	ret
				// Additional Info Handling
				break;
     7b0:	64 e2       	ldi	r22, 0x24	; 36

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE LEFT PARAMETER", part_number);
     7b2:	77 e0       	ldi	r23, 0x07	; 7
     7b4:	8b e2       	ldi	r24, 0x2B	; 43
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	f2 cd       	rjmp	.-1052   	; 0x39e <send_error_message>
     7ba:	08 95       	ret
				break;
			}			
		break;

		case ERROR_STEERING_ANGLE_RIGHT:					
			switch (severity) {
     7bc:	6a e3       	ldi	r22, 0x3A	; 58
     7be:	77 e0       	ldi	r23, 0x07	; 7
     7c0:	87 e4       	ldi	r24, 0x47	; 71
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	ec cd       	rjmp	.-1064   	; 0x39e <send_error_message>
     7c6:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	91 05       	cpc	r25, r1
     7cc:	19 f0       	breq	.+6      	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
     7ce:	03 97       	sbiw	r24, 0x03	; 3
     7d0:	39 f0       	breq	.+14     	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
     7d2:	08 95       	ret
				// Additional Info Handling
				break;
     7d4:	64 e2       	ldi	r22, 0x24	; 36

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE RIGHT PARAMETER", part_number);
     7d6:	77 e0       	ldi	r23, 0x07	; 7
     7d8:	8b e2       	ldi	r24, 0x2B	; 43
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	e0 cd       	rjmp	.-1088   	; 0x39e <send_error_message>
     7de:	08 95       	ret
				// Additional Error Handling
				break;
     7e0:	60 e6       	ldi	r22, 0x60	; 96
			}			
		break;

		case ERROR_THROTTLE_ERROR:					
			switch (severity) {
     7e2:	77 e0       	ldi	r23, 0x07	; 7
     7e4:	87 e4       	ldi	r24, 0x47	; 71
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	da cd       	rjmp	.-1100   	; 0x39e <send_error_message>
     7ea:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Throttle Function Normal", part_number);
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	91 05       	cpc	r25, r1
     7f0:	19 f0       	breq	.+6      	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
     7f2:	03 97       	sbiw	r24, 0x03	; 3
     7f4:	39 f0       	breq	.+14     	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
				// Additional Info Handling
				break;
     7f6:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "THROTTLE CRITICAL MALFUNCTION", part_number);
     7f8:	67 e8       	ldi	r22, 0x87	; 135
     7fa:	77 e0       	ldi	r23, 0x07	; 7
     7fc:	8b e2       	ldi	r24, 0x2B	; 43
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	ce cd       	rjmp	.-1124   	; 0x39e <send_error_message>
     802:	08 95       	ret
				// Additional Error Handling
				break;
     804:	60 ea       	ldi	r22, 0xA0	; 160
			}			
		break;

		case ERROR_CAR_UPRIGHT_ERROR:					
			switch (severity) {
     806:	77 e0       	ldi	r23, 0x07	; 7
     808:	87 e4       	ldi	r24, 0x47	; 71
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	c8 cd       	rjmp	.-1136   	; 0x39e <send_error_message>
     80e:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Car is upright", part_number);
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	91 05       	cpc	r25, r1
     814:	19 f0       	breq	.+6      	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
     816:	03 97       	sbiw	r24, 0x03	; 3
     818:	39 f0       	breq	.+14     	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
				// Additional Info Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CAR HAS OVERTURNED", part_number);
     81a:	08 95       	ret
     81c:	6e eb       	ldi	r22, 0xBE	; 190
     81e:	77 e0       	ldi	r23, 0x07	; 7
     820:	8b e2       	ldi	r24, 0x2B	; 43
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	bc cd       	rjmp	.-1160   	; 0x39e <send_error_message>
				// Additional Error Handling
				break;
     826:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_CHARGE:					
			switch (severity) {
     828:	6d ec       	ldi	r22, 0xCD	; 205
     82a:	77 e0       	ldi	r23, 0x07	; 7
     82c:	87 e4       	ldi	r24, 0x47	; 71
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	b6 cd       	rjmp	.-1172   	; 0x39e <send_error_message>
     832:	08 95       	ret
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Charge Normal", part_number);
     838:	61 f0       	breq	.+24     	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
     83a:	83 30       	cpi	r24, 0x03	; 3
     83c:	91 05       	cpc	r25, r1
     83e:	79 f0       	breq	.+30     	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
     840:	01 97       	sbiw	r24, 0x01	; 1
				// Additional Info Handling
				break;
     842:	09 f0       	breq	.+2      	; 0x846 <__LOCK_REGION_LENGTH__+0x446>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Charge Low", part_number);
     844:	45 c0       	rjmp	.+138    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     846:	60 ee       	ldi	r22, 0xE0	; 224
     848:	77 e0       	ldi	r23, 0x07	; 7
     84a:	8b e2       	ldi	r24, 0x2B	; 43
     84c:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     84e:	a7 cd       	rjmp	.-1202   	; 0x39e <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d CHARGE CRITICAL", part_number);
     850:	08 95       	ret
     852:	69 ef       	ldi	r22, 0xF9	; 249
     854:	77 e0       	ldi	r23, 0x07	; 7
     856:	87 e3       	ldi	r24, 0x37	; 55
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	a1 cd       	rjmp	.-1214   	; 0x39e <send_error_message>
				// Additional Error Handling
				break;
     85c:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_LOW:					
			switch (severity) {
     85e:	6f e0       	ldi	r22, 0x0F	; 15
     860:	78 e0       	ldi	r23, 0x08	; 8
     862:	87 e4       	ldi	r24, 0x47	; 71
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	9b cd       	rjmp	.-1226   	; 0x39e <send_error_message>
     868:	08 95       	ret
     86a:	82 30       	cpi	r24, 0x02	; 2
     86c:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     86e:	59 f0       	breq	.+22     	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
     870:	83 30       	cpi	r24, 0x03	; 3
     872:	91 05       	cpc	r25, r1
     874:	71 f0       	breq	.+28     	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	59 f5       	brne	.+86     	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
				// Additional Info Handling
				break;
     87a:	6a e2       	ldi	r22, 0x2A	; 42

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally Low!", part_number);
     87c:	78 e0       	ldi	r23, 0x08	; 8
     87e:	8b e2       	ldi	r24, 0x2B	; 43
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	8d cd       	rjmp	.-1254   	; 0x39e <send_error_message>
     884:	08 95       	ret
     886:	68 e4       	ldi	r22, 0x48	; 72
				// Additional Warning Handling
				break;
     888:	78 e0       	ldi	r23, 0x08	; 8

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY LOW", part_number);
     88a:	87 e3       	ldi	r24, 0x37	; 55
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	87 cd       	rjmp	.-1266   	; 0x39e <send_error_message>
     890:	08 95       	ret
     892:	6f e6       	ldi	r22, 0x6F	; 111
     894:	78 e0       	ldi	r23, 0x08	; 8
				// Additional Error Handling
				break;
     896:	87 e4       	ldi	r24, 0x47	; 71
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_HIGH:					
			switch (severity) {
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	81 cd       	rjmp	.-1278   	; 0x39e <send_error_message>
     89c:	08 95       	ret
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	91 05       	cpc	r25, r1
     8a2:	59 f0       	breq	.+22     	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
     8a4:	83 30       	cpi	r24, 0x03	; 3
     8a6:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     8a8:	71 f0       	breq	.+28     	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	89 f4       	brne	.+34     	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     8ae:	6a e2       	ldi	r22, 0x2A	; 42
     8b0:	78 e0       	ldi	r23, 0x08	; 8
     8b2:	8b e2       	ldi	r24, 0x2B	; 43
				// Additional Info Handling
				break;
     8b4:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally High!", part_number);
     8b6:	73 cd       	rjmp	.-1306   	; 0x39e <send_error_message>
     8b8:	08 95       	ret
     8ba:	65 e9       	ldi	r22, 0x95	; 149
     8bc:	78 e0       	ldi	r23, 0x08	; 8
     8be:	87 e3       	ldi	r24, 0x37	; 55
     8c0:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     8c2:	6d cd       	rjmp	.-1318   	; 0x39e <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY HIGH", part_number);
     8c4:	08 95       	ret
     8c6:	6d eb       	ldi	r22, 0xBD	; 189
     8c8:	78 e0       	ldi	r23, 0x08	; 8
     8ca:	87 e4       	ldi	r24, 0x47	; 71
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	67 cd       	rjmp	.-1330   	; 0x39e <send_error_message>
     8d0:	08 95       	ret

000008d2 <throw_error_code>:
 * Generates an error message, and takes the necessary actions depending on the severity and error.
 * Uses 0 as the part number
 **/
void throw_error_code(uint16_t severity, uint16_t error_code)
{	
	throw_error_code_with_number(severity, error_code, 0);
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	92 cd       	rjmp	.-1244   	; 0x3fc <throw_error_code_with_number>
     8d8:	08 95       	ret

000008da <external_interrupt_init>:
 * 
 */
void external_interrupt_init()
{
	//INT1 for CAN1, INT0 for CAN2, PCINT7 for CAN3
	EICRA |= (2<<ISC00)|(2<<ISC10);
     8da:	e9 e6       	ldi	r30, 0x69	; 105
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	8a 60       	ori	r24, 0x0A	; 10
     8e2:	80 83       	st	Z, r24
	EIMSK  = (1<<INT0) | (1<<INT1);
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	8d bb       	out	0x1d, r24	; 29
	//Enable interrupts for PCINT7:0
	PCICR  = (1<<PCIE0)|(0<<PCIE1);
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	//CAN C interrupt
	PCMSK0 = (1<<PCINT7);
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     8f4:	08 95       	ret

000008f6 <io_init>:
 * 
 */
void io_init()
{
	//pins 8, 9 and 14 for MCP2515_STB high so the things respond (PE6, PE7, PH2)
	DDRE  = 0b11000010;		//PE0 = RS232 RX1; PE1 = RS232 TX1;  PE6 = STB_CAN1; PE7 = STB_CAN2;
     8f6:	82 ec       	ldi	r24, 0xC2	; 194
     8f8:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000000;		
     8fa:	1e b8       	out	0x0e, r1	; 14
	DDRH  = 0b00000111;		//PH0 = CS_CAN1; PH1 = CS_CAN2; PH2 = STB_CAN3
     8fc:	87 e0       	ldi	r24, 0x07	; 7
     8fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	PORTH = 0b00000011;		//CS_CAN1 high; CS_CAN2 high;
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	//pins 12, 13, 19 for the CS for each MCP2515 PH0, PH1, PB0)

	//pin 21 for MOSI, pin 20  for SCK (PB2, PB1)
	DDRB  = 0b01100111;		//PB0 = CS_CAN3; PB1 = SCK; PB2 = MOSI; PB3 = MISO; PB5 = High drive A; PB6 = Low drive A; PB7 = CAN3_INT; 
     908:	87 e6       	ldi	r24, 0x67	; 103
     90a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;		//set CS_CAN3 high;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	85 b9       	out	0x05, r24	; 5
	
	DDRL  = 0b00011000;		//PB3 = High drive B; PB4 = Low Drive B;
     910:	98 e1       	ldi	r25, 0x18	; 24
     912:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	PORTL = 0b00000000;
     916:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	
	DDRD  = 0b11001000;		//PD0 = CAN2_INT; PD1 = CAN1_INT; PD2 = RS232 RX2; PD3 = RS232 TX2; PD6 = CAN1_TXPIN; PD7 = CAN2_TXPIN;
     91a:	88 ec       	ldi	r24, 0xC8	; 200
     91c:	8a b9       	out	0x0a, r24	; 10
	DDRD  = 0b00000000;
     91e:	1a b8       	out	0x0a, r1	; 10
	
	DDRC  = 0b00001000;		//PC3 = CAN3_TXPIN;
     920:	88 e0       	ldi	r24, 0x08	; 8
     922:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
     924:	18 b8       	out	0x08, r1	; 8
	
	DDRJ  = 0b00000000;		//PORTJ is used for digital input;
     926:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	PORTJ |= 64;			//turn the pull-ups on for digital inputs
     92a:	e5 e0       	ldi	r30, 0x05	; 5
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	80 81       	ld	r24, Z
     930:	80 64       	ori	r24, 0x40	; 64
     932:	80 83       	st	Z, r24
	
	DDRA  = 0b00011000;		//PA3 = ENABLE_B; PA4 = ENABLE_A; PA1 = dig input; PA2 = dig input;
     934:	91 b9       	out	0x01, r25	; 1
	PORTA = 0b00010000;		
     936:	80 e1       	ldi	r24, 0x10	; 16
     938:	82 b9       	out	0x02, r24	; 2

	DDRK  = 0b00100000;		//PK5 = debugging LED;
     93a:	80 e2       	ldi	r24, 0x20	; 32
     93c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7e0107>
	// PORTK = 0b00100000;
	
	// Enable external interrupts in order for the CAN bus to communicate with us
	external_interrupt_init();
     940:	cc cf       	rjmp	.-104    	; 0x8da <external_interrupt_init>
     942:	08 95       	ret

00000944 <firmware_init>:
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
void firmware_init()
{
	io_init();
     944:	d8 df       	rcall	.-80     	; 0x8f6 <io_init>
	SPI_init();
     946:	4b d6       	rcall	.+3222   	; 0x15de <SPI_init>
     948:	80 e0       	ldi	r24, 0x00	; 0
    // // uart_init(UART_BAUD_SELECT(19200, 16UL));
    uart_init(19200);
     94a:	9b e4       	ldi	r25, 0x4B	; 75
     94c:	08 d7       	rcall	.+3600   	; 0x175e <uart_init>
     94e:	61 e0       	ldi	r22, 0x01	; 1
    //uart1_init(19200);
	a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); // Turns ON ADC
     950:	86 e0       	ldi	r24, 0x06	; 6
     952:	88 dc       	rcall	.-1776   	; 0x264 <a2dInit>
     954:	81 e0       	ldi	r24, 0x01	; 1
	MCP2515_init(TRACTIVE_CAN);
     956:	df d4       	rcall	.+2494   	; 0x1316 <MCP2515_init>
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	dd c4       	rjmp	.+2490   	; 0x1316 <MCP2515_init>
	MCP2515_init(POWER_CAN);
     95c:	08 95       	ret

0000095e <timer_init>:
     95e:	84 b5       	in	r24, 0x24	; 36
     960:	82 60       	ori	r24, 0x02	; 2
     962:	84 bd       	out	0x24, r24	; 36
void timer_init()
{
    // http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf
    // Set up 1Khz timer
    TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
    TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
     964:	85 b5       	in	r24, 0x25	; 37
     966:	83 60       	ori	r24, 0x03	; 3
     968:	85 bd       	out	0x25, r24	; 37
    OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
     96a:	8a ef       	ldi	r24, 0xFA	; 250
     96c:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);                // Enable COMPA interupt
     96e:	ee e6       	ldi	r30, 0x6E	; 110
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	82 60       	ori	r24, 0x02	; 2
     976:	80 83       	st	Z, r24

    // Set up 50Hz comm timer
	TCCR1A = 0b00000000;			//
     978:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00001101;			// CTC mode & prescale clock by 1024
     97c:	8d e0       	ldi	r24, 0x0D	; 13
     97e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A =  15000;					// 312 gives 50Hz main comms speed
     982:	88 e9       	ldi	r24, 0x98	; 152
     984:	9a e3       	ldi	r25, 0x3A	; 58
     986:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     98a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 0b00000010;			// Turn on compare interrupt for OCR1A
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     994:	08 95       	ret

00000996 <INPUT_scaleInput>:
 * @param max 
 * @param min 
 * @return uint8_t 
 */
uint8_t INPUT_scaleInput(uint16_t * value, uint16_t max, uint16_t min) {
    uint8_t tmp = (((*value - (min - INPUT_ADC_THRESH)) * 100) / ((max + INPUT_ADC_THRESH) - (min - INPUT_ADC_THRESH)));
     996:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <INPUT_ADC_THRESH>
     99a:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <INPUT_ADC_THRESH+0x1>
     99e:	9f 01       	movw	r18, r30
     9a0:	24 1b       	sub	r18, r20
     9a2:	35 0b       	sbc	r19, r21
    return tmp > 100 ? 100 : tmp < 0 ? 0 : tmp;
     9a4:	dc 01       	movw	r26, r24
     9a6:	4d 91       	ld	r20, X+
     9a8:	5c 91       	ld	r21, X
     9aa:	42 0f       	add	r20, r18
     9ac:	53 1f       	adc	r21, r19
     9ae:	a4 e6       	ldi	r26, 0x64	; 100
     9b0:	a4 9f       	mul	r26, r20
     9b2:	c0 01       	movw	r24, r0
     9b4:	a5 9f       	mul	r26, r21
     9b6:	90 0d       	add	r25, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	6e 0f       	add	r22, r30
     9bc:	7f 1f       	adc	r23, r31
     9be:	62 0f       	add	r22, r18
     9c0:	73 1f       	adc	r23, r19
     9c2:	22 d7       	rcall	.+3652   	; 0x1808 <__udivmodhi4>
     9c4:	86 2f       	mov	r24, r22
     9c6:	65 36       	cpi	r22, 0x65	; 101
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <INPUT_scaleInput+0x36>
     9ca:	84 e6       	ldi	r24, 0x64	; 100
}
     9cc:	08 95       	ret

000009ce <INPUT_read_accelPedal>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_accelPedal(uint16_t *throttle) {
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	ec 01       	movw	r28, r24
    static uint16_t primaryHistory[10];
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

    // Read the values of the two throttle sensors and verify if the received values are valid
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
     9d8:	00 91 4a 09 	lds	r16, 0x094A	; 0x80094a <historyIndex.2082>
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	85 e0       	ldi	r24, 0x05	; 5
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	4f dc       	rcall	.-1890   	; 0x282 <a2d_10bitCh>
     9e4:	00 0f       	add	r16, r16
     9e6:	11 1f       	adc	r17, r17
     9e8:	f8 01       	movw	r30, r16
     9ea:	ea 5c       	subi	r30, 0xCA	; 202
     9ec:	f6 4f       	sbci	r31, 0xF6	; 246
     9ee:	91 83       	std	Z+1, r25	; 0x01
     9f0:	80 83       	st	Z, r24
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);
     9f2:	10 91 4a 09 	lds	r17, 0x094A	; 0x80094a <historyIndex.2082>
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	81 0f       	add	r24, r17
     9fa:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <historyIndex.2082>
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	3f dc       	rcall	.-1922   	; 0x282 <a2d_10bitCh>
     a04:	e1 2f       	mov	r30, r17
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	ee 0f       	add	r30, r30
     a0a:	ff 1f       	adc	r31, r31
     a0c:	ee 5d       	subi	r30, 0xDE	; 222
     a0e:	f6 4f       	sbci	r31, 0xF6	; 246
     a10:	91 83       	std	Z+1, r25	; 0x01
     a12:	80 83       	st	Z, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     a14:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <historyIndex.2082>
     a18:	88 30       	cpi	r24, 0x08	; 8
     a1a:	10 f0       	brcs	.+4      	; 0xa20 <INPUT_read_accelPedal+0x52>
     a1c:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <historyIndex.2082>
     a20:	e6 e3       	ldi	r30, 0x36	; 54
     a22:	f9 e0       	ldi	r31, 0x09	; 9
     a24:	a2 e2       	ldi	r26, 0x22	; 34
     a26:	b9 e0       	ldi	r27, 0x09	; 9
     a28:	66 e4       	ldi	r22, 0x46	; 70
     a2a:	79 e0       	ldi	r23, 0x09	; 9

    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }

    uint16_t primaryAverage = 0;
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
     a34:	41 91       	ld	r20, Z+
     a36:	51 91       	ld	r21, Z+
     a38:	24 0f       	add	r18, r20
     a3a:	35 1f       	adc	r19, r21
        secondaryAverage += secondaryHistory[i];
     a3c:	4d 91       	ld	r20, X+
     a3e:	5d 91       	ld	r21, X+
     a40:	84 0f       	add	r24, r20
     a42:	95 1f       	adc	r25, r21

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }

    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     a44:	e6 17       	cp	r30, r22
     a46:	f7 07       	cpc	r31, r23
     a48:	a9 f7       	brne	.-22     	; 0xa34 <INPUT_read_accelPedal+0x66>
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
     a4a:	36 95       	lsr	r19
     a4c:	27 95       	ror	r18
     a4e:	36 95       	lsr	r19
     a50:	27 95       	ror	r18
     a52:	36 95       	lsr	r19
     a54:	27 95       	ror	r18
    secondaryAverage /= ADC_SAMPLES;

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 
     a56:	39 83       	std	Y+1, r19	; 0x01
     a58:	28 83       	st	Y, r18

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
     a5a:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <INPUT_ADC_ERROR>
     a5e:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <INPUT_ADC_ERROR+0x1>
     a62:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <INPUT_PEDAL_THROTTLE_CH1_LOW>
     a66:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     a6a:	46 1b       	sub	r20, r22
     a6c:	57 0b       	sbc	r21, r23
     a6e:	24 17       	cp	r18, r20
     a70:	35 07       	cpc	r19, r21
     a72:	d0 f1       	brcs	.+116    	; 0xae8 <INPUT_read_accelPedal+0x11a>
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
    secondaryAverage /= ADC_SAMPLES;
     a74:	96 95       	lsr	r25
     a76:	87 95       	ror	r24
     a78:	96 95       	lsr	r25
     a7a:	87 95       	ror	r24
     a7c:	96 95       	lsr	r25
     a7e:	87 95       	ror	r24

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
     a80:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <INPUT_PEDAL_THROTTLE_CH2_LOW>
     a84:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <INPUT_PEDAL_THROTTLE_CH2_LOW+0x1>
     a88:	46 1b       	sub	r20, r22
     a8a:	57 0b       	sbc	r21, r23
     a8c:	84 17       	cp	r24, r20
     a8e:	95 07       	cpc	r25, r21
     a90:	68 f1       	brcs	.+90     	; 0xaec <INPUT_read_accelPedal+0x11e>
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
     a92:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     a96:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     a9a:	46 1b       	sub	r20, r22
     a9c:	57 0b       	sbc	r21, r23
     a9e:	42 17       	cp	r20, r18
     aa0:	53 07       	cpc	r21, r19
     aa2:	30 f1       	brcs	.+76     	; 0xaf0 <INPUT_read_accelPedal+0x122>
     aa4:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <INPUT_PEDAL_THROTTLE_CH2_HIGH>
     aa8:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <INPUT_PEDAL_THROTTLE_CH2_HIGH+0x1>
     aac:	46 1b       	sub	r20, r22
     aae:	57 0b       	sbc	r21, r23
     ab0:	48 17       	cp	r20, r24
     ab2:	59 07       	cpc	r21, r25
     ab4:	f8 f0       	brcs	.+62     	; 0xaf4 <INPUT_read_accelPedal+0x126>
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
    secondaryAverage /= ADC_SAMPLES;

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values
     ab6:	28 1b       	sub	r18, r24
     ab8:	39 0b       	sbc	r19, r25
     aba:	c9 01       	movw	r24, r18
     abc:	99 23       	and	r25, r25
     abe:	24 f4       	brge	.+8      	; 0xac8 <INPUT_read_accelPedal+0xfa>
     ac0:	88 27       	eor	r24, r24
     ac2:	99 27       	eor	r25, r25
     ac4:	82 1b       	sub	r24, r18
     ac6:	93 0b       	sbc	r25, r19
	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
            secondaryAverage > INPUT_PEDAL_THROTTLE_CH2_HIGH - INPUT_ADC_ERROR ) { return 2; }
	// Verify if the difference between sensors is within acceptable values
	else if(delta < INPUT_PEDAL_DELTA_THRESH_L ||
     ac8:	20 91 4e 09 	lds	r18, 0x094E	; 0x80094e <INPUT_PEDAL_DELTA_THRESH_L>
     acc:	30 91 4f 09 	lds	r19, 0x094F	; 0x80094f <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     ad0:	82 17       	cp	r24, r18
     ad2:	93 07       	cpc	r25, r19
     ad4:	88 f0       	brcs	.+34     	; 0xaf8 <INPUT_read_accelPedal+0x12a>
     ad6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     ada:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     ade:	28 17       	cp	r18, r24
     ae0:	39 07       	cpc	r19, r25
     ae2:	60 f0       	brcs	.+24     	; 0xafc <INPUT_read_accelPedal+0x12e>
            delta > INPUT_PEDAL_DELTA_THRESH_H) { return 3; }
	return 0;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	0b c0       	rjmp	.+22     	; 0xafe <INPUT_read_accelPedal+0x130>
    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	09 c0       	rjmp	.+18     	; 0xafe <INPUT_read_accelPedal+0x130>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	07 c0       	rjmp	.+14     	; 0xafe <INPUT_read_accelPedal+0x130>
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
            secondaryAverage > INPUT_PEDAL_THROTTLE_CH2_HIGH - INPUT_ADC_ERROR ) { return 2; }
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	05 c0       	rjmp	.+10     	; 0xafe <INPUT_read_accelPedal+0x130>
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	03 c0       	rjmp	.+6      	; 0xafe <INPUT_read_accelPedal+0x130>
	// Verify if the difference between sensors is within acceptable values
	else if(delta < INPUT_PEDAL_DELTA_THRESH_L ||
            delta > INPUT_PEDAL_DELTA_THRESH_H) { return 3; }
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	01 c0       	rjmp	.+2      	; 0xafe <INPUT_read_accelPedal+0x130>
     afc:	83 e0       	ldi	r24, 0x03	; 3
	return 0;
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <INPUT_get_accelPedal>:
uint8_t INPUT_accelerationPedal = 0;
uint8_t INPUT_brakePedal = 0;
uint8_t INPUT_brakePressureFront = 0;
uint8_t INPUT_brakePressureBack = 0;

uint8_t INPUT_get_accelPedal(uint8_t *val) {
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	00 d0       	rcall	.+0      	; 0xb14 <INPUT_get_accelPedal+0xc>
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	7c 01       	movw	r14, r24
    // Get Value
    uint16_t rawValue = 0;
     b1a:	1a 82       	std	Y+2, r1	; 0x02
     b1c:	19 82       	std	Y+1, r1	; 0x01
    uint8_t state = INPUT_read_accelPedal(&rawValue);
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	55 df       	rcall	.-342    	; 0x9ce <INPUT_read_accelPedal>
     b24:	18 2f       	mov	r17, r24
    // Convert Value
    *val = INPUT_scaleInput(
     b26:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <INPUT_PEDAL_THROTTLE_CH1_LOW>
     b2a:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     b2e:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     b32:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	2d df       	rcall	.-422    	; 0x996 <INPUT_scaleInput>
     b3c:	f7 01       	movw	r30, r14
     b3e:	80 83       	st	Z, r24
        &rawValue,
        INPUT_PEDAL_THROTTLE_CH1_HIGH,
        INPUT_PEDAL_THROTTLE_CH1_LOW
    );
    // Error States
    switch (state) {
     b40:	12 30       	cpi	r17, 0x02	; 2
     b42:	51 f0       	breq	.+20     	; 0xb58 <INPUT_get_accelPedal+0x50>
     b44:	13 30       	cpi	r17, 0x03	; 3
     b46:	71 f0       	breq	.+28     	; 0xb64 <INPUT_get_accelPedal+0x5c>
     b48:	11 30       	cpi	r17, 0x01	; 1
     b4a:	89 f4       	brne	.+34     	; 0xb6e <INPUT_get_accelPedal+0x66>
        case 1: // Inputs were too low
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b4c:	6e e0       	ldi	r22, 0x0E	; 14
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	be de       	rcall	.-644    	; 0x8d2 <throw_error_code>
            break;
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <INPUT_get_accelPedal+0x66>
        case 2: // Inputs were too high
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b58:	6e e0       	ldi	r22, 0x0E	; 14
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	b8 de       	rcall	.-656    	; 0x8d2 <throw_error_code>
            break;
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <INPUT_get_accelPedal+0x66>
        case 3: // Delta was found to be in failure
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b64:	6e e0       	ldi	r22, 0x0E	; 14
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	b2 de       	rcall	.-668    	; 0x8d2 <throw_error_code>
        default:
            // Do nothing
            break;
    }
    return state; // Pass up state of read for process and logic use
}
     b6e:	81 2f       	mov	r24, r17
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <INPUT_read_brakePedal>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_brakePedal(uint16_t * brake) {
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	ec 01       	movw	r28, r24
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

	uint8_t returnState = 0;
    // Read the values of the two throttle sensors and verify if the received values are valid
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH1);
     b8a:	00 91 21 09 	lds	r16, 0x0921	; 0x800921 <historyIndex.2097>
     b8e:	10 e0       	ldi	r17, 0x00	; 0
     b90:	8a e0       	ldi	r24, 0x0A	; 10
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	76 db       	rcall	.-2324   	; 0x282 <a2d_10bitCh>
     b96:	00 0f       	add	r16, r16
     b98:	11 1f       	adc	r17, r17
     b9a:	f8 01       	movw	r30, r16
     b9c:	e3 5f       	subi	r30, 0xF3	; 243
     b9e:	f6 4f       	sbci	r31, 0xF6	; 246
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	80 83       	st	Z, r24
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH2);
     ba4:	10 91 21 09 	lds	r17, 0x0921	; 0x800921 <historyIndex.2097>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	81 0f       	add	r24, r17
     bac:	80 93 21 09 	sts	0x0921, r24	; 0x800921 <historyIndex.2097>
     bb0:	88 e0       	ldi	r24, 0x08	; 8
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	66 db       	rcall	.-2356   	; 0x282 <a2d_10bitCh>
     bb6:	e1 2f       	mov	r30, r17
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	e7 50       	subi	r30, 0x07	; 7
     bc0:	f7 4f       	sbci	r31, 0xF7	; 247
     bc2:	91 83       	std	Z+1, r25	; 0x01
     bc4:	80 83       	st	Z, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     bc6:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <historyIndex.2097>
     bca:	88 30       	cpi	r24, 0x08	; 8
     bcc:	10 f0       	brcs	.+4      	; 0xbd2 <INPUT_read_brakePedal+0x52>
     bce:	10 92 21 09 	sts	0x0921, r1	; 0x800921 <historyIndex.2097>
     bd2:	ed e0       	ldi	r30, 0x0D	; 13
     bd4:	f9 e0       	ldi	r31, 0x09	; 9
     bd6:	a9 ef       	ldi	r26, 0xF9	; 249
     bd8:	b8 e0       	ldi	r27, 0x08	; 8
     bda:	6d e1       	ldi	r22, 0x1D	; 29
     bdc:	79 e0       	ldi	r23, 0x09	; 9
	
	
	
    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
	
	
	
    uint16_t primaryAverage = 0;
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
     be6:	41 91       	ld	r20, Z+
     be8:	51 91       	ld	r21, Z+
     bea:	24 0f       	add	r18, r20
     bec:	35 1f       	adc	r19, r21
        secondaryAverage += secondaryHistory[i];
     bee:	4d 91       	ld	r20, X+
     bf0:	5d 91       	ld	r21, X+
     bf2:	84 0f       	add	r24, r20
     bf4:	95 1f       	adc	r25, r21
	
	
	
    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     bf6:	e6 17       	cp	r30, r22
     bf8:	f7 07       	cpc	r31, r23
     bfa:	a9 f7       	brne	.-22     	; 0xbe6 <INPUT_read_brakePedal+0x66>
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
     bfc:	36 95       	lsr	r19
     bfe:	27 95       	ror	r18
     c00:	36 95       	lsr	r19
     c02:	27 95       	ror	r18
     c04:	36 95       	lsr	r19
     c06:	27 95       	ror	r18
    secondaryAverage /= ADC_SAMPLES;
     c08:	ac 01       	movw	r20, r24
     c0a:	56 95       	lsr	r21
     c0c:	47 95       	ror	r20
     c0e:	56 95       	lsr	r21
     c10:	47 95       	ror	r20
     c12:	56 95       	lsr	r21
     c14:	47 95       	ror	r20

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values
     c16:	b9 01       	movw	r22, r18
     c18:	64 1b       	sub	r22, r20
     c1a:	75 0b       	sbc	r23, r21
     c1c:	cb 01       	movw	r24, r22
     c1e:	99 23       	and	r25, r25
     c20:	24 f4       	brge	.+8      	; 0xc2a <INPUT_read_brakePedal+0xaa>
     c22:	88 27       	eor	r24, r24
     c24:	99 27       	eor	r25, r25
     c26:	86 1b       	sub	r24, r22
     c28:	97 0b       	sbc	r25, r23
     c2a:	fc 01       	movw	r30, r24

    *brake = primaryAverage; 
     c2c:	39 83       	std	Y+1, r19	; 0x01
     c2e:	28 83       	st	Y, r18


	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
     c30:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <INPUT_ADC_ERROR>
     c34:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <INPUT_ADC_ERROR+0x1>
     c38:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <INPUT_PEDAL_BRAKE_CH1_LOW>
     c3c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     c40:	86 1b       	sub	r24, r22
     c42:	97 0b       	sbc	r25, r23
     c44:	28 17       	cp	r18, r24
     c46:	39 07       	cpc	r19, r25
     c48:	58 f0       	brcs	.+22     	; 0xc60 <INPUT_read_brakePedal+0xe0>
	
	else if(primaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 2;
     c4a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <INPUT_PEDAL_BRAKE_CH1_HIGH>
     c4e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     c52:	86 0f       	add	r24, r22
     c54:	97 1f       	adc	r25, r23
     c56:	82 17       	cp	r24, r18
     c58:	93 07       	cpc	r25, r19
     c5a:	20 f4       	brcc	.+8      	; 0xc64 <INPUT_read_brakePedal+0xe4>
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	03 c0       	rjmp	.+6      	; 0xc66 <INPUT_read_brakePedal+0xe6>
    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *brake = primaryAverage; 


	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <INPUT_read_brakePedal+0xe6>
    //TODO: Fill buffers with int reads values
    static uint16_t primaryHistory[10];
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

	uint8_t returnState = 0;
     c64:	80 e0       	ldi	r24, 0x00	; 0

	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
	
	else if(primaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 2;
	
	if(secondaryAverage < (INPUT_PEDAL_BRAKE_CH2_LOW - INPUT_ADC_ERROR)) returnState |= 4;
     c66:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <INPUT_PEDAL_BRAKE_CH2_LOW>
     c6a:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <INPUT_PEDAL_BRAKE_CH2_LOW+0x1>
     c6e:	26 1b       	sub	r18, r22
     c70:	37 0b       	sbc	r19, r23
     c72:	42 17       	cp	r20, r18
     c74:	53 07       	cpc	r21, r19
     c76:	10 f4       	brcc	.+4      	; 0xc7c <INPUT_read_brakePedal+0xfc>
     c78:	84 60       	ori	r24, 0x04	; 4
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <INPUT_read_brakePedal+0x110>
	
	else if(secondaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 8;
     c7c:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <INPUT_PEDAL_BRAKE_CH1_HIGH>
     c80:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     c84:	62 0f       	add	r22, r18
     c86:	73 1f       	adc	r23, r19
     c88:	64 17       	cp	r22, r20
     c8a:	75 07       	cpc	r23, r21
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <INPUT_read_brakePedal+0x110>
     c8e:	88 60       	ori	r24, 0x08	; 8

	// Verify if the difference between sensors is within acceptable values
	if(delta < INPUT_PEDAL_DELTA_THRESH_L || delta > INPUT_PEDAL_DELTA_THRESH_H) { returnState |= 16; }  
     c90:	20 91 4e 09 	lds	r18, 0x094E	; 0x80094e <INPUT_PEDAL_DELTA_THRESH_L>
     c94:	30 91 4f 09 	lds	r19, 0x094F	; 0x80094f <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     c98:	e2 17       	cp	r30, r18
     c9a:	f3 07       	cpc	r31, r19
     c9c:	38 f0       	brcs	.+14     	; 0xcac <INPUT_read_brakePedal+0x12c>
     c9e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     ca2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     ca6:	2e 17       	cp	r18, r30
     ca8:	3f 07       	cpc	r19, r31
     caa:	08 f4       	brcc	.+2      	; 0xcae <INPUT_read_brakePedal+0x12e>
     cac:	80 61       	ori	r24, 0x10	; 16
		
	return returnState;
}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	08 95       	ret

00000cb8 <INPUT_get_brakePedal>:
            break;
    }
    return state; // Pass up state of read for process and logic use
}

uint8_t INPUT_get_brakePedal(uint8_t *val) {
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <INPUT_get_brakePedal+0xc>
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	7c 01       	movw	r14, r24
    // Get Value
    uint16_t rawValue = 0;
     cca:	1a 82       	std	Y+2, r1	; 0x02
     ccc:	19 82       	std	Y+1, r1	; 0x01
    uint8_t state = INPUT_read_brakePedal(&rawValue);
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	56 df       	rcall	.-340    	; 0xb80 <INPUT_read_brakePedal>
     cd4:	18 2f       	mov	r17, r24
    // Convert Value
    *val = INPUT_scaleInput(
     cd6:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <INPUT_PEDAL_BRAKE_CH1_LOW>
     cda:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     cde:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <INPUT_PEDAL_BRAKE_CH1_HIGH>
     ce2:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     ce6:	ce 01       	movw	r24, r28
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	55 de       	rcall	.-854    	; 0x996 <INPUT_scaleInput>
     cec:	f7 01       	movw	r30, r14
     cee:	80 83       	st	Z, r24
        &rawValue,
        INPUT_PEDAL_BRAKE_CH1_HIGH,
        INPUT_PEDAL_BRAKE_CH1_LOW
    );
    // Error States
    switch (state) {
     cf0:	12 30       	cpi	r17, 0x02	; 2
     cf2:	51 f0       	breq	.+20     	; 0xd08 <INPUT_get_brakePedal+0x50>
     cf4:	13 30       	cpi	r17, 0x03	; 3
     cf6:	71 f0       	breq	.+28     	; 0xd14 <INPUT_get_brakePedal+0x5c>
     cf8:	11 30       	cpi	r17, 0x01	; 1
     cfa:	89 f4       	brne	.+34     	; 0xd1e <INPUT_get_brakePedal+0x66>
        case 1: // Inputs were too low
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION_LOW);
     cfc:	69 e0       	ldi	r22, 0x09	; 9
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	e6 dd       	rcall	.-1076   	; 0x8d2 <throw_error_code>
            break;
     d06:	0b c0       	rjmp	.+22     	; 0xd1e <INPUT_get_brakePedal+0x66>
        case 2: // Inputs were too high
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION_HIGH);
     d08:	6a e0       	ldi	r22, 0x0A	; 10
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	e0 dd       	rcall	.-1088   	; 0x8d2 <throw_error_code>
            break;
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <INPUT_get_brakePedal+0x66>
        case 3: // Delta was found to be in failure
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION);
     d14:	6b e0       	ldi	r22, 0x0B	; 11
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	da dd       	rcall	.-1100   	; 0x8d2 <throw_error_code>
        default:
            // Do nothing
            break;
    }
    return state; // Pass up state of read for process and logic use
}
     d1e:	81 2f       	mov	r24, r17
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	08 95       	ret

00000d30 <INPUT_read_steeringWheel>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_steeringWheel(uint16_t * steeringAngle) {
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
    static uint8_t historyIndex = 0;

	uint8_t returnState = 0;
	
    // Read the values of the two throttle sensors and verify if the received values are valid
    history[historyIndex] = a2d_10bitCh(INPUT_STEERING_ANGLE_CH);
     d34:	c0 91 f8 08 	lds	r28, 0x08F8	; 0x8008f8 <historyIndex.2111>
     d38:	d0 e0       	ldi	r29, 0x00	; 0
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a1 da       	rcall	.-2750   	; 0x282 <a2d_10bitCh>
     d40:	cc 0f       	add	r28, r28
     d42:	dd 1f       	adc	r29, r29
     d44:	cc 51       	subi	r28, 0x1C	; 28
     d46:	d7 4f       	sbci	r29, 0xF7	; 247
     d48:	99 83       	std	Y+1, r25	; 0x01
     d4a:	88 83       	st	Y, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     d4c:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <historyIndex.2111>
     d50:	88 30       	cpi	r24, 0x08	; 8
     d52:	10 f0       	brcs	.+4      	; 0xd58 <INPUT_read_steeringWheel+0x28>
     d54:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <historyIndex.2111>
    average /= ADC_SAMPLES;

	if(average < (INPUT_STEERING_LEFT - INPUT_ADC_ERROR)) { returnState |= 1; } // Check if the value we received is valid
    if(average > (INPUT_STEERING_RIGHT + INPUT_ADC_ERROR)) { returnState |= 2; } // Check if the value we received is valid
	return 0;
}
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <INPUT_get_steeringWheel>:
            break;
    }
    return state; // Pass up state of read for process and logic use
}

uint8_t INPUT_get_steeringWheel(uint8_t *val) {
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <INPUT_get_steeringWheel+0xc>
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	7c 01       	movw	r14, r24
	// Get Value
	uint16_t rawValue = 0;
     d72:	1a 82       	std	Y+2, r1	; 0x02
     d74:	19 82       	std	Y+1, r1	; 0x01
	uint8_t state = INPUT_read_steeringWheel(&rawValue);
     d76:	ce 01       	movw	r24, r28
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	da df       	rcall	.-76     	; 0xd30 <INPUT_read_steeringWheel>
     d7c:	18 2f       	mov	r17, r24
	// Convert Value
	*val = INPUT_scaleInput(
     d7e:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <INPUT_STEERING_LEFT>
     d82:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <INPUT_STEERING_LEFT+0x1>
     d86:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <INPUT_STEERING_RIGHT>
     d8a:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <INPUT_STEERING_RIGHT+0x1>
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	01 de       	rcall	.-1022   	; 0x996 <INPUT_scaleInput>
     d94:	f7 01       	movw	r30, r14
     d96:	80 83       	st	Z, r24
	&rawValue,
	INPUT_STEERING_RIGHT,
	INPUT_STEERING_LEFT
	);
	// Error States
	switch (state) {
     d98:	11 30       	cpi	r17, 0x01	; 1
     d9a:	19 f0       	breq	.+6      	; 0xda2 <INPUT_get_steeringWheel+0x42>
     d9c:	12 30       	cpi	r17, 0x02	; 2
     d9e:	39 f0       	breq	.+14     	; 0xdae <INPUT_get_steeringWheel+0x4e>
     da0:	0b c0       	rjmp	.+22     	; 0xdb8 <INPUT_get_steeringWheel+0x58>
		case 1: // Inputs were too low
		throw_error_code(ERROR_LEVEL_WARN, ERROR_STEERING_ANGLE_RIGHT);
     da2:	6d e0       	ldi	r22, 0x0D	; 13
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	93 dd       	rcall	.-1242   	; 0x8d2 <throw_error_code>
		break;
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <INPUT_get_steeringWheel+0x58>
		case 2: // Inputs were too high
		throw_error_code(ERROR_LEVEL_WARN, ERROR_STEERING_ANGLE_LEFT);
     dae:	6c e0       	ldi	r22, 0x0C	; 12
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	8d dd       	rcall	.-1254   	; 0x8d2 <throw_error_code>
		default:
		// Do nothing
		break;
	}
	return state; // Pass up state of read for process and logic use
}
     db8:	81 2f       	mov	r24, r17
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	08 95       	ret

00000dca <UART_sendPacket>:
    testPacketArray[3] = INPUT_steeringAngle;       // Steering Angle - 1   -> RADIAN(x -> -0.99 < 0 < 0.99) * 100 + 100
           
    UART_sendPacket(testPacketArray, 4);
}

void UART_sendPacket(uint8_t outgoingString[], uint8_t length) {
     dca:	ff 92       	push	r15
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	8c 01       	movw	r16, r24
     dd6:	f6 2e       	mov	r15, r22
    //uint8_t *ptr = outgoingString;
	
	//int testADC = a2d_10bitCh(5);
	//char  testString[5];
	//itoa(testADC, testString, 10);
	uart_putc('D');
     dd8:	84 e4       	ldi	r24, 0x44	; 68
     dda:	dd d4       	rcall	.+2490   	; 0x1796 <uart_putc>
	int i = 0;
    for(i = 0; i < length; i++) {
     ddc:	ff 20       	and	r15, r15
     dde:	41 f0       	breq	.+16     	; 0xdf0 <UART_sendPacket+0x26>
     de0:	e8 01       	movw	r28, r16
     de2:	0f 0d       	add	r16, r15
     de4:	11 1d       	adc	r17, r1
        uart_putc(outgoingString[i]);
     de6:	89 91       	ld	r24, Y+
     de8:	d6 d4       	rcall	.+2476   	; 0x1796 <uart_putc>
	//int testADC = a2d_10bitCh(5);
	//char  testString[5];
	//itoa(testADC, testString, 10);
	uart_putc('D');
	int i = 0;
    for(i = 0; i < length; i++) {
     dea:	c0 17       	cp	r28, r16
     dec:	d1 07       	cpc	r29, r17
        uart_putc(outgoingString[i]);
    }
	uart_putc('\r');
     dee:	d9 f7       	brne	.-10     	; 0xde6 <UART_sendPacket+0x1c>
     df0:	8d e0       	ldi	r24, 0x0D	; 13
	uart_putc('\n');
     df2:	d1 d4       	rcall	.+2466   	; 0x1796 <uart_putc>
     df4:	8a e0       	ldi	r24, 0x0A	; 10
     df6:	cf d4       	rcall	.+2462   	; 0x1796 <uart_putc>
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	08 95       	ret

00000e04 <UART_formTestPacket>:
// 	}
	
// 	for (int i = 0; i < 32; i++) uart1_putc(outgoingString[i]);
// }

void UART_formTestPacket(void) {
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	00 d0       	rcall	.+0      	; 0xe0a <UART_formTestPacket+0x6>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <UART_formTestPacket+0x8>
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t fakeThrottle = 0;
	
	if(fakeThrottle++ > 100)fakeThrottle = 0;
     e10:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <fakeThrottle.2436>
     e14:	85 36       	cpi	r24, 0x65	; 101
     e16:	20 f4       	brcc	.+8      	; 0xe20 <UART_formTestPacket+0x1c>
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <fakeThrottle.2436>
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <UART_formTestPacket+0x20>
     e20:	10 92 50 09 	sts	0x0950, r1	; 0x800950 <fakeThrottle.2436>
    uint8_t testPacketArray[4];
    testPacketArray[0] = (ignitionState) | (armedState << 1) | (shutdownState << 2); // Button states - 1
     e24:	80 91 98 09 	lds	r24, 0x0998	; 0x800998 <armedState>
     e28:	98 2f       	mov	r25, r24
     e2a:	99 0f       	add	r25, r25
     e2c:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <shutdownState>
     e30:	88 0f       	add	r24, r24
     e32:	88 0f       	add	r24, r24
     e34:	89 2b       	or	r24, r25
     e36:	90 91 99 09 	lds	r25, 0x0999	; 0x800999 <ignitionState>
     e3a:	89 2b       	or	r24, r25
     e3c:	89 83       	std	Y+1, r24	; 0x01
    testPacketArray[1] = INPUT_accelerationPedal;   // Throttle Pedal Percentage - 1
     e3e:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <INPUT_accelerationPedal>
     e42:	8a 83       	std	Y+2, r24	; 0x02
    testPacketArray[2] = INPUT_brakePedal;          // Brake Pedal Percentage - 1
     e44:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <INPUT_brakePedal>
     e48:	8b 83       	std	Y+3, r24	; 0x03
    testPacketArray[3] = INPUT_steeringAngle;       // Steering Angle - 1   -> RADIAN(x -> -0.99 < 0 < 0.99) * 100 + 100
     e4a:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <INPUT_steeringAngle>
     e4e:	8c 83       	std	Y+4, r24	; 0x04
           
    UART_sendPacket(testPacketArray, 4);
     e50:	64 e0       	ldi	r22, 0x04	; 4
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	b9 df       	rcall	.-142    	; 0xdca <UART_sendPacket>
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <uart_parse_input>:
 * Returns: none
 * 
 * 
 **/
void uart_parse_input(unsigned char* s)
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	ec 01       	movw	r28, r24
 * 
 * 
 **/
void uart_parse_poke(unsigned char* s)
{
	PDMarray[0] = s[0];
     e6c:	88 81       	ld	r24, Y
     e6e:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <PDMarray>
 **/
void uart_parse_input(unsigned char* s)
{
	uart_parse_poke(s);
	//uart1_putc('D');				// reply with the header byte (preserved - 33 bytes should follow)
	UART_formTestPacket();
     e72:	c8 df       	rcall	.-112    	; 0xe04 <UART_formTestPacket>

	s[0] = '\0';					// clear the header byte
     e74:	18 82       	st	Y, r1
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <uart_process_byte>:
	
	static unsigned char count = 0;
	static unsigned char incomingString[48];							//made bigger to accommodate PT packets
	static unsigned char stringActive = 0;
	
	if(data == 'D')
     e7c:	84 34       	cpi	r24, 0x44	; 68
     e7e:	21 f4       	brne	.+8      	; 0xe88 <uart_process_byte+0xc>
	{
		stringActive = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <stringActive.2426>
     e86:	0d c0       	rjmp	.+26     	; 0xea2 <uart_process_byte+0x26>
	}
	
	else if(stringActive == 1)
     e88:	90 91 82 09 	lds	r25, 0x0982	; 0x800982 <stringActive.2426>
     e8c:	91 30       	cpi	r25, 0x01	; 1
     e8e:	49 f4       	brne	.+18     	; 0xea2 <uart_process_byte+0x26>
	{
		incomingString[count++] = data;
     e90:	e0 91 81 09 	lds	r30, 0x0981	; 0x800981 <count.2424>
     e94:	9e 0f       	add	r25, r30
     e96:	90 93 81 09 	sts	0x0981, r25	; 0x800981 <count.2424>
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	ef 5a       	subi	r30, 0xAF	; 175
     e9e:	f6 4f       	sbci	r31, 0xF6	; 246
     ea0:	80 83       	st	Z, r24
	}
	
	if(count > 8)
     ea2:	e0 91 81 09 	lds	r30, 0x0981	; 0x800981 <count.2424>
     ea6:	e9 30       	cpi	r30, 0x09	; 9
     ea8:	58 f0       	brcs	.+22     	; 0xec0 <uart_process_byte+0x44>
	{
		incomingString[count - 1] = '\0';
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	e0 5b       	subi	r30, 0xB0	; 176
     eae:	f6 4f       	sbci	r31, 0xF6	; 246
     eb0:	10 82       	st	Z, r1
		count = 0;
     eb2:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <count.2424>
		stringActive = 0;
     eb6:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <stringActive.2426>
		uart_parse_input(incomingString);
     eba:	81 e5       	ldi	r24, 0x51	; 81
     ebc:	99 e0       	ldi	r25, 0x09	; 9
     ebe:	d3 cf       	rjmp	.-90     	; 0xe66 <uart_parse_input>
     ec0:	08 95       	ret

00000ec2 <main>:
 uint8_t PDMarray[8] = {0,0,0,0,0,0,0,0};

int main(void) {    

    // Set Up
    firmware_init();
     ec2:	40 dd       	rcall	.-1408   	; 0x944 <firmware_init>
    timer_init();
     ec4:	4c dd       	rcall	.-1384   	; 0x95e <timer_init>
     ec6:	10 92 97 09 	sts	0x0997, r1	; 0x800997 <shutdownState>

    // Grab the state of the shutdown circuity
    shutdownState = 0;
     eca:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ecc:	89 e6       	ldi	r24, 0x69	; 105
     ece:	98 e1       	ldi	r25, 0x18	; 24
     ed0:	21 50       	subi	r18, 0x01	; 1
     ed2:	80 40       	sbci	r24, 0x00	; 0
     ed4:	90 40       	sbci	r25, 0x00	; 0
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <main+0xe>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <main+0x18>
     eda:	00 00       	nop
	_delay_ms(500);
    // Enable Interupts
    sei();					
     edc:	78 94       	sei
    // Main Poll
    // ------------------------------------------------------------------------
    while(1) {
		
		if(isCharAvailable_1() == 1)uart_process_byte(receiveChar_1());
     ede:	8b d4       	rcall	.+2326   	; 0x17f6 <isCharAvailable_1>
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	e9 f7       	brne	.-6      	; 0xede <main+0x1c>
     ee4:	8e d4       	rcall	.+2332   	; 0x1802 <receiveChar_1>
     ee6:	ca df       	rcall	.-108    	; 0xe7c <uart_process_byte>
     ee8:	fa cf       	rjmp	.-12     	; 0xede <main+0x1c>

00000eea <oneKHzTimer>:
     eea:	0f 93       	push	r16

/**
 * @brief Core system's timer, 1ms, core of the pseudo RTOS system
 */
void oneKHzTimer(void)
{
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	1f 92       	push	r1
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
    // static uint8_t InputTempCount = 5;					// Number of iterations for the temp heartbeat trigger

    // static uint8_t CANInputSendTime = 0;					// Number of iterations for the input send trigger

	// flash the LED to show the system is running
	if(test_counter++ > 100)
     ef8:	80 91 85 09 	lds	r24, 0x0985	; 0x800985 <test_counter.2489>
     efc:	90 91 86 09 	lds	r25, 0x0986	; 0x800986 <test_counter.2489+0x1>
     f00:	85 36       	cpi	r24, 0x65	; 101
     f02:	91 05       	cpc	r25, r1
     f04:	34 f4       	brge	.+12     	; 0xf12 <oneKHzTimer+0x28>
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	90 93 86 09 	sts	0x0986, r25	; 0x800986 <test_counter.2489+0x1>
     f0c:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <test_counter.2489>
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <oneKHzTimer+0x30>
	{
		//PORTK ^= 32;
		test_counter = 0;
     f12:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <test_counter.2489+0x1>
     f16:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <test_counter.2489>
	
	
    // Check the ignition button state
    // 1s debounce, IE hold for 50ms and if held, change state
    // ------------------------------------------------------------------------
	if(!(PINJ & (1<<PJ6))) // Checking Pin J6 (69)
     f1a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7e0103>
     f1e:	86 fd       	sbrc	r24, 6
     f20:	1e c0       	rjmp	.+60     	; 0xf5e <oneKHzTimer+0x74>
    {
        ignitionState = 1; // Tracks that the ignition button is on
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <ignitionState>
        if(ignitionStateDebounceCount++ > 2000) // If 1s has been counted
     f28:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <ignitionStateDebounceCount>
     f2c:	90 91 9c 09 	lds	r25, 0x099C	; 0x80099c <ignitionStateDebounceCount+0x1>
     f30:	9c 01       	movw	r18, r24
     f32:	2f 5f       	subi	r18, 0xFF	; 255
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	30 93 9c 09 	sts	0x099C, r19	; 0x80099c <ignitionStateDebounceCount+0x1>
     f3a:	20 93 9b 09 	sts	0x099B, r18	; 0x80099b <ignitionStateDebounceCount>
     f3e:	81 3d       	cpi	r24, 0xD1	; 209
     f40:	97 40       	sbci	r25, 0x07	; 7
     f42:	a8 f0       	brcs	.+42     	; 0xf6e <oneKHzTimer+0x84>
		{
            //If this is the first time though from a previous press
            if(ignitionStateLock == 0) {
     f44:	80 91 9a 09 	lds	r24, 0x099A	; 0x80099a <ignitionStateLock>
     f48:	81 11       	cpse	r24, r1
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <oneKHzTimer+0x84>
                ignitionStateLock = 1;		// Disabled first run though after press
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <ignitionStateLock>
                armedState ^= 1;
     f52:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <armedState>
     f56:	89 27       	eor	r24, r25
     f58:	80 93 98 09 	sts	0x0998, r24	; 0x800998 <armedState>
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <oneKHzTimer+0x84>
            }
        }
    }
    else {
        ignitionState = 0; // Tracks that the ignition button is off
     f5e:	10 92 99 09 	sts	0x0999, r1	; 0x800999 <ignitionState>
        ignitionStateLock = 0; // Re-enables the first run though after the timer has been reached
     f62:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <ignitionStateLock>
        ignitionStateDebounceCount = 0; // Resets the counter for time the button is pressed
     f66:	10 92 9c 09 	sts	0x099C, r1	; 0x80099c <ignitionStateDebounceCount+0x1>
     f6a:	10 92 9b 09 	sts	0x099B, r1	; 0x80099b <ignitionStateDebounceCount>
     //Send CAN heartbeats -> Inverters: 100Hz, Data: 100Hz, Power: 20Hz
     //100Hz = 1 / 100 = 0.01s = 10ms, 20Hz = 1 / 20 = 0.05s = 50ms
     //------------------------------------------------------------------------
    
	
	 inverterArray[0] = INPUT_accelerationPedal;
     f6e:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <INPUT_accelerationPedal>
     f72:	80 93 8f 09 	sts	0x098F, r24	; 0x80098f <inverterArray>
	 if(CANheartbeatCountInverters >= CAN_HEARTBEAT_TIME_INVERTERS)
     f76:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <CANheartbeatCountInverters.2490>
     f7a:	90 91 84 09 	lds	r25, 0x0984	; 0x800984 <CANheartbeatCountInverters.2490+0x1>
     f7e:	0a 97       	sbiw	r24, 0x0a	; 10
     f80:	68 f0       	brcs	.+26     	; 0xf9c <oneKHzTimer+0xb2>
	 {
		 // Reset inverter heartbeat counter
		 CANheartbeatCountInverters = 0;
     f82:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <CANheartbeatCountInverters.2490+0x1>
     f86:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <CANheartbeatCountInverters.2490>
		 // Send inverter system heartbeat
		 CAN_send(TRACTIVE_CAN, 8, inverterArray, 0b0100100000000000000000000011110);
     f8a:	0e e1       	ldi	r16, 0x1E	; 30
     f8c:	10 e0       	ldi	r17, 0x00	; 0
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	34 e2       	ldi	r19, 0x24	; 36
     f92:	4f e8       	ldi	r20, 0x8F	; 143
     f94:	59 e0       	ldi	r21, 0x09	; 9
     f96:	68 e0       	ldi	r22, 0x08	; 8
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	9d d9       	rcall	.-3270   	; 0x2d6 <CAN_send>
		 // Reset data heartbeat counter
		 CANheartbeatCountData = 0;
		 // Send data system heartbeat
		 // CAN_send(POWER_CAN, )
	 }*/
	 if(CANheartbeatCountPower > CAN_HEARTBEAT_TIME_POWER)
     f9c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CANheartbeatCountPower.2492>
     fa0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <CANheartbeatCountPower.2492+0x1>
     fa4:	c3 97       	sbiw	r24, 0x33	; 51
     fa6:	68 f0       	brcs	.+26     	; 0xfc2 <oneKHzTimer+0xd8>
	 {
		 // Reset power heartbeat counter
		 CANheartbeatCountPower = 0;
     fa8:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <CANheartbeatCountPower.2492+0x1>
     fac:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <CANheartbeatCountPower.2492>
		 // Send power system heartbeat
		 CAN_send(POWER_CAN, 8, PDMarray, HEARTBEAT_PDM_ID | 1);
     fb0:	01 e0       	ldi	r16, 0x01	; 1
     fb2:	10 e0       	ldi	r17, 0x00	; 0
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	39 e0       	ldi	r19, 0x09	; 9
     fb8:	47 e8       	ldi	r20, 0x87	; 135
     fba:	59 e0       	ldi	r21, 0x09	; 9
     fbc:	68 e0       	ldi	r22, 0x08	; 8
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	8a d9       	rcall	.-3308   	; 0x2d6 <CAN_send>
	 }
	 
	 CANheartbeatCountInverters++;
     fc2:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <CANheartbeatCountInverters.2490>
     fc6:	90 91 84 09 	lds	r25, 0x0984	; 0x800984 <CANheartbeatCountInverters.2490+0x1>
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	90 93 84 09 	sts	0x0984, r25	; 0x800984 <CANheartbeatCountInverters.2490+0x1>
     fd0:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <CANheartbeatCountInverters.2490>
	 CANheartbeatCountData++;
     fd4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <CANheartbeatCountData.2491>
     fd8:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <CANheartbeatCountData.2491+0x1>
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <CANheartbeatCountData.2491+0x1>
     fe2:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <CANheartbeatCountData.2491>
	 CANheartbeatCountPower++;
     fe6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CANheartbeatCountPower.2492>
     fea:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <CANheartbeatCountPower.2492+0x1>
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <CANheartbeatCountPower.2492+0x1>
     ff4:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <CANheartbeatCountPower.2492>
    // CanHeartbeatErrorPower++;


    // Send CAN input
    uint8_t tmpInputVal;
    if(InputPedalThrottleCount > INPUT_TIME_PEDAL_THROTTLE)
     ff8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <InputPedalThrottleCount.2493>
     ffc:	8b 30       	cpi	r24, 0x0B	; 11
     ffe:	50 f0       	brcs	.+20     	; 0x1014 <oneKHzTimer+0x12a>
    {
		//INPUT_accelerationPedal = a2d_10bitCh(5);

        if(INPUT_get_accelPedal(&tmpInputVal) == 0) {
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	81 dd       	rcall	.-1278   	; 0xb08 <INPUT_get_accelPedal>
    1006:	81 11       	cpse	r24, r1
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <oneKHzTimer+0x126>
             INPUT_accelerationPedal = tmpInputVal;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <INPUT_accelerationPedal>
        }
        InputPedalThrottleCount = 0;
    1010:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <InputPedalThrottleCount.2493>
    }

    if(InputPedalBrakeCount > INPUT_TIME_PEDAL_BRAKE)
    1014:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <InputPedalBrakeCount.2494>
    1018:	8b 30       	cpi	r24, 0x0B	; 11
    {
        //INPUT_brakePedal = (uint8_t)(a2d_10bitCh(8)/4);
        if(INPUT_get_brakePedal(&tmpInputVal) == 0) {
    101a:	50 f0       	brcs	.+20     	; 0x1030 <oneKHzTimer+0x146>
    101c:	ce 01       	movw	r24, r28
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	4b de       	rcall	.-874    	; 0xcb8 <INPUT_get_brakePedal>
    1022:	81 11       	cpse	r24, r1
    1024:	03 c0       	rjmp	.+6      	; 0x102c <oneKHzTimer+0x142>
             INPUT_brakePedal = tmpInputVal;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <INPUT_brakePedal>
		}
		
        InputPedalBrakeCount = 0;
    102c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <InputPedalBrakeCount.2494>
    }
	
	if(InputSteeringCount > INPUT_TIME_STEERING)
    1030:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <InputSteeringCount.2495>
    1034:	8b 30       	cpi	r24, 0x0B	; 11
	{
		if(INPUT_get_steeringWheel(&tmpInputVal) == 0) {
    1036:	50 f0       	brcs	.+20     	; 0x104c <oneKHzTimer+0x162>
    1038:	ce 01       	movw	r24, r28
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	91 de       	rcall	.-734    	; 0xd60 <INPUT_get_steeringWheel>
    103e:	81 11       	cpse	r24, r1
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <oneKHzTimer+0x15e>
			INPUT_steeringAngle = tmpInputVal;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <INPUT_steeringAngle>
		}
		
		InputPedalBrakeCount = 0;
    1048:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <InputPedalBrakeCount.2494>
	}
    InputPedalThrottleCount++;
    104c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <InputPedalThrottleCount.2493>
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <InputPedalThrottleCount.2493>
    InputPedalBrakeCount++;
    1056:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <InputPedalBrakeCount.2494>
    105a:	8f 5f       	subi	r24, 0xFF	; 255
    105c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <InputPedalBrakeCount.2494>
	InputSteeringCount++;
    1060:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <InputSteeringCount.2495>
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <InputSteeringCount.2495>
    // }
    // if(INPUT_get_brakePressureFront(&tmpInputVal) == 0) {
    //     INPUT_brakePressureFront = tmpInputVal;
    // }
	
}
    106a:	0f 90       	pop	r0
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <__vector_21>:

/**
 * @brief Called whenever the 1Khz timer triggers
 */
ISR(TIMER0_COMPA_vect)
{
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	0b b6       	in	r0, 0x3b	; 59
    1082:	0f 92       	push	r0
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
    oneKHzTimer();
    109c:	26 df       	rcall	.-436    	; 0xeea <oneKHzTimer>
    // led_toggle();
}
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0b be       	out	0x3b, r0	; 59
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1

}
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <__vector_2>:

/**
 * @brief Called whenever CANBUS 1 interupt is triggered
 *        * When ever there is data waiting in CAN 1
 */
ISR(INT1_vect) {
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	0b b6       	in	r0, 0x3b	; 59
    10e4:	0f 92       	push	r0
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	4f 93       	push	r20
    10ec:	5f 93       	push	r21
    10ee:	6f 93       	push	r22
    10f0:	7f 93       	push	r23
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	af 93       	push	r26
    10f8:	bf 93       	push	r27
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	2d 97       	sbiw	r28, 0x0d	; 13
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(TRACTIVE_CAN, &numBytes, data, &ID);
    110c:	9e 01       	movw	r18, r28
    110e:	27 5f       	subi	r18, 0xF7	; 247
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	ae 01       	movw	r20, r28
    1114:	4f 5f       	subi	r20, 0xFF	; 255
    1116:	5f 4f       	sbci	r21, 0xFF	; 255
    1118:	be 01       	movw	r22, r28
    111a:	63 5f       	subi	r22, 0xF3	; 243
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	02 d9       	rcall	.-3580   	; 0x326 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_RESPONSE_MALFORMED);
}
    1122:	2d 96       	adiw	r28, 0x0d	; 13
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	ff 91       	pop	r31
    1134:	ef 91       	pop	r30
    1136:	bf 91       	pop	r27
    1138:	af 91       	pop	r26
    113a:	9f 91       	pop	r25
    113c:	8f 91       	pop	r24
    113e:	7f 91       	pop	r23
    1140:	6f 91       	pop	r22
    1142:	5f 91       	pop	r21
    1144:	4f 91       	pop	r20
    1146:	3f 91       	pop	r19
    1148:	2f 91       	pop	r18
    114a:	0f 90       	pop	r0
    114c:	0b be       	out	0x3b, r0	; 59
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <__vector_1>:

/**
 * @brief Called whenever CANBUS 2 interupt is triggered
 *        * When ever there is data waiting in CAN 2
 */
ISR(INT0_vect)	{
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	0b b6       	in	r0, 0x3b	; 59
    1164:	0f 92       	push	r0
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	2d 97       	sbiw	r28, 0x0d	; 13
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(POWER_CAN, &numBytes, data, &ID);
    118c:	9e 01       	movw	r18, r28
    118e:	27 5f       	subi	r18, 0xF7	; 247
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	ae 01       	movw	r20, r28
    1194:	4f 5f       	subi	r20, 0xFF	; 255
    1196:	5f 4f       	sbci	r21, 0xFF	; 255
    1198:	be 01       	movw	r22, r28
    119a:	63 5f       	subi	r22, 0xF3	; 243
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	c2 d8       	rcall	.-3708   	; 0x326 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
}
    11a2:	2d 96       	adiw	r28, 0x0d	; 13
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0b be       	out	0x3b, r0	; 59
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <__vector_9>:

/**
 * @brief Called whenever CANBUS 3 interupt is triggered
 *        * When ever there is data waiting in CAN 3
 */
ISR(PCINT0_vect) {
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	0b b6       	in	r0, 0x3b	; 59
    11e4:	0f 92       	push	r0
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	2d 97       	sbiw	r28, 0x0d	; 13
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(DATA_CAN, &numBytes, data, &ID);
    120c:	9e 01       	movw	r18, r28
    120e:	27 5f       	subi	r18, 0xF7	; 247
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	ae 01       	movw	r20, r28
    1214:	4f 5f       	subi	r20, 0xFF	; 255
    1216:	5f 4f       	sbci	r21, 0xFF	; 255
    1218:	be 01       	movw	r22, r28
    121a:	63 5f       	subi	r22, 0xF3	; 243
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	84 e0       	ldi	r24, 0x04	; 4
    1220:	82 d8       	rcall	.-3836   	; 0x326 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);
    1222:	2d 96       	adiw	r28, 0x0d	; 13
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	ff 91       	pop	r31
    1234:	ef 91       	pop	r30
    1236:	bf 91       	pop	r27
    1238:	af 91       	pop	r26
    123a:	9f 91       	pop	r25
    123c:	8f 91       	pop	r24
    123e:	7f 91       	pop	r23
    1240:	6f 91       	pop	r22
    1242:	5f 91       	pop	r21
    1244:	4f 91       	pop	r20
    1246:	3f 91       	pop	r19
    1248:	2f 91       	pop	r18
    124a:	0f 90       	pop	r0
    124c:	0b be       	out	0x3b, r0	; 59
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti

00001258 <MCP2515_CS_low>:
			MCP2515_reg_write(CANbus, MCP2515_RXM1EID0, IDmsk & 0xFF );
			if(IDmsk) MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
			else MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
	}	
	return 1;
}
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	51 f0       	breq	.+20     	; 0x1270 <MCP2515_CS_low+0x18>
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	71 f0       	breq	.+28     	; 0x127c <MCP2515_CS_low+0x24>
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	69 f4       	brne	.+26     	; 0x127e <MCP2515_CS_low+0x26>
    1264:	e2 e0       	ldi	r30, 0x02	; 2
    1266:	f1 e0       	ldi	r31, 0x01	; 1
    1268:	80 81       	ld	r24, Z
    126a:	8e 7f       	andi	r24, 0xFE	; 254
    126c:	80 83       	st	Z, r24
    126e:	08 95       	ret
    1270:	e2 e0       	ldi	r30, 0x02	; 2
    1272:	f1 e0       	ldi	r31, 0x01	; 1
    1274:	80 81       	ld	r24, Z
    1276:	8d 7f       	andi	r24, 0xFD	; 253
    1278:	80 83       	st	Z, r24
    127a:	08 95       	ret
    127c:	28 98       	cbi	0x05, 0	; 5
    127e:	08 95       	ret

00001280 <MCP2515_CS_high>:
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	51 f0       	breq	.+20     	; 0x1298 <MCP2515_CS_high+0x18>
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	71 f0       	breq	.+28     	; 0x12a4 <MCP2515_CS_high+0x24>
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	69 f4       	brne	.+26     	; 0x12a6 <MCP2515_CS_high+0x26>
    128c:	e2 e0       	ldi	r30, 0x02	; 2
    128e:	f1 e0       	ldi	r31, 0x01	; 1
    1290:	80 81       	ld	r24, Z
    1292:	81 60       	ori	r24, 0x01	; 1
    1294:	80 83       	st	Z, r24
    1296:	08 95       	ret
    1298:	e2 e0       	ldi	r30, 0x02	; 2
    129a:	f1 e0       	ldi	r31, 0x01	; 1
    129c:	80 81       	ld	r24, Z
    129e:	82 60       	ori	r24, 0x02	; 2
    12a0:	80 83       	st	Z, r24
    12a2:	08 95       	ret
    12a4:	28 9a       	sbi	0x05, 0	; 5
    12a6:	08 95       	ret

000012a8 <MCP2515_reg_write>:
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	c8 2f       	mov	r28, r24
    12b0:	16 2f       	mov	r17, r22
    12b2:	d4 2f       	mov	r29, r20
    12b4:	d1 df       	rcall	.-94     	; 0x1258 <MCP2515_CS_low>
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	8c d1       	rcall	.+792    	; 0x15d2 <SPI_send_byte>
    12ba:	81 2f       	mov	r24, r17
    12bc:	8a d1       	rcall	.+788    	; 0x15d2 <SPI_send_byte>
    12be:	8d 2f       	mov	r24, r29
    12c0:	88 d1       	rcall	.+784    	; 0x15d2 <SPI_send_byte>
    12c2:	8c 2f       	mov	r24, r28
    12c4:	dd df       	rcall	.-70     	; 0x1280 <MCP2515_CS_high>
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	08 95       	ret

000012ce <MCP2515_instruction>:
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	c8 2f       	mov	r28, r24
    12d4:	d6 2f       	mov	r29, r22
    12d6:	c0 df       	rcall	.-128    	; 0x1258 <MCP2515_CS_low>
    12d8:	8d 2f       	mov	r24, r29
    12da:	7b d1       	rcall	.+758    	; 0x15d2 <SPI_send_byte>
    12dc:	8c 2f       	mov	r24, r28
    12de:	d0 df       	rcall	.-96     	; 0x1280 <MCP2515_CS_high>
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <MCP2515_bit_modify>:
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	c8 2f       	mov	r28, r24
    12f0:	06 2f       	mov	r16, r22
    12f2:	d4 2f       	mov	r29, r20
    12f4:	12 2f       	mov	r17, r18
    12f6:	b0 df       	rcall	.-160    	; 0x1258 <MCP2515_CS_low>
    12f8:	85 e0       	ldi	r24, 0x05	; 5
    12fa:	6b d1       	rcall	.+726    	; 0x15d2 <SPI_send_byte>
    12fc:	80 2f       	mov	r24, r16
    12fe:	69 d1       	rcall	.+722    	; 0x15d2 <SPI_send_byte>
    1300:	81 2f       	mov	r24, r17
    1302:	67 d1       	rcall	.+718    	; 0x15d2 <SPI_send_byte>
    1304:	8d 2f       	mov	r24, r29
    1306:	65 d1       	rcall	.+714    	; 0x15d2 <SPI_send_byte>
    1308:	8c 2f       	mov	r24, r28
    130a:	ba df       	rcall	.-140    	; 0x1280 <MCP2515_CS_high>
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	08 95       	ret

00001316 <MCP2515_init>:
    1316:	cf 93       	push	r28
    1318:	c8 2f       	mov	r28, r24
    131a:	60 ec       	ldi	r22, 0xC0	; 192
    131c:	d8 df       	rcall	.-80     	; 0x12ce <MCP2515_instruction>
    131e:	20 ee       	ldi	r18, 0xE0	; 224
    1320:	40 e8       	ldi	r20, 0x80	; 128
    1322:	6f e0       	ldi	r22, 0x0F	; 15
    1324:	8c 2f       	mov	r24, r28
    1326:	df df       	rcall	.-66     	; 0x12e6 <MCP2515_bit_modify>
    1328:	44 e0       	ldi	r20, 0x04	; 4
    132a:	6a e2       	ldi	r22, 0x2A	; 42
    132c:	8c 2f       	mov	r24, r28
    132e:	bc df       	rcall	.-136    	; 0x12a8 <MCP2515_reg_write>
    1330:	4a ec       	ldi	r20, 0xCA	; 202
    1332:	69 e2       	ldi	r22, 0x29	; 41
    1334:	8c 2f       	mov	r24, r28
    1336:	b8 df       	rcall	.-144    	; 0x12a8 <MCP2515_reg_write>
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	68 e2       	ldi	r22, 0x28	; 40
    133c:	8c 2f       	mov	r24, r28
    133e:	b4 df       	rcall	.-152    	; 0x12a8 <MCP2515_reg_write>
    1340:	43 e0       	ldi	r20, 0x03	; 3
    1342:	6b e2       	ldi	r22, 0x2B	; 43
    1344:	8c 2f       	mov	r24, r28
    1346:	b0 df       	rcall	.-160    	; 0x12a8 <MCP2515_reg_write>
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	6d e0       	ldi	r22, 0x0D	; 13
    134c:	8c 2f       	mov	r24, r28
    134e:	ac df       	rcall	.-168    	; 0x12a8 <MCP2515_reg_write>
    1350:	28 ee       	ldi	r18, 0xE8	; 232
    1352:	48 e0       	ldi	r20, 0x08	; 8
    1354:	6f e0       	ldi	r22, 0x0F	; 15
    1356:	8c 2f       	mov	r24, r28
    1358:	c6 df       	rcall	.-116    	; 0x12e6 <MCP2515_bit_modify>
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <MCP2515_PullCanPacket>:
    135e:	7f 92       	push	r7
    1360:	8f 92       	push	r8
    1362:	9f 92       	push	r9
    1364:	af 92       	push	r10
    1366:	bf 92       	push	r11
    1368:	cf 92       	push	r12
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	2d 97       	sbiw	r28, 0x0d	; 13
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	78 2e       	mov	r7, r24
    138a:	4a 01       	movw	r8, r20
    138c:	59 01       	movw	r10, r18
    138e:	61 37       	cpi	r22, 0x71	; 113
    1390:	28 f4       	brcc	.+10     	; 0x139c <MCP2515_PullCanPacket+0x3e>
    1392:	0f 2e       	mov	r0, r31
    1394:	f0 e9       	ldi	r31, 0x90	; 144
    1396:	ff 2e       	mov	r15, r31
    1398:	f0 2d       	mov	r31, r0
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <MCP2515_PullCanPacket+0x46>
    139c:	0f 2e       	mov	r0, r31
    139e:	f4 e9       	ldi	r31, 0x94	; 148
    13a0:	ff 2e       	mov	r15, r31
    13a2:	f0 2d       	mov	r31, r0
    13a4:	87 2d       	mov	r24, r7
    13a6:	58 df       	rcall	.-336    	; 0x1258 <MCP2515_CS_low>
    13a8:	8f 2d       	mov	r24, r15
    13aa:	13 d1       	rcall	.+550    	; 0x15d2 <SPI_send_byte>
    13ac:	ce 01       	movw	r24, r28
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	7c 01       	movw	r14, r24
    13b2:	6e 01       	movw	r12, r28
    13b4:	9e e0       	ldi	r25, 0x0E	; 14
    13b6:	c9 0e       	add	r12, r25
    13b8:	d1 1c       	adc	r13, r1
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	0a d1       	rcall	.+532    	; 0x15d2 <SPI_send_byte>
    13be:	f7 01       	movw	r30, r14
    13c0:	81 93       	st	Z+, r24
    13c2:	7f 01       	movw	r14, r30
    13c4:	ec 15       	cp	r30, r12
    13c6:	fd 05       	cpc	r31, r13
    13c8:	c1 f7       	brne	.-16     	; 0x13ba <MCP2515_PullCanPacket+0x5c>
    13ca:	2a 81       	ldd	r18, Y+2	; 0x02
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 e0       	ldi	r26, 0x00	; 0
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	07 2e       	mov	r0, r23
    13d6:	75 e1       	ldi	r23, 0x15	; 21
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	aa 1f       	adc	r26, r26
    13de:	bb 1f       	adc	r27, r27
    13e0:	7a 95       	dec	r23
    13e2:	d1 f7       	brne	.-12     	; 0x13d8 <MCP2515_PullCanPacket+0x7a>
    13e4:	70 2d       	mov	r23, r0
    13e6:	3b 81       	ldd	r19, Y+3	; 0x03
    13e8:	93 2b       	or	r25, r19
    13ea:	3c 81       	ldd	r19, Y+4	; 0x04
    13ec:	83 2b       	or	r24, r19
    13ee:	42 2f       	mov	r20, r18
    13f0:	40 7e       	andi	r20, 0xE0	; 224
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	03 2e       	mov	r0, r19
    13fa:	3d e0       	ldi	r19, 0x0D	; 13
    13fc:	44 0f       	add	r20, r20
    13fe:	55 1f       	adc	r21, r21
    1400:	66 1f       	adc	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	3a 95       	dec	r19
    1406:	d1 f7       	brne	.-12     	; 0x13fc <MCP2515_PullCanPacket+0x9e>
    1408:	30 2d       	mov	r19, r0
    140a:	84 2b       	or	r24, r20
    140c:	95 2b       	or	r25, r21
    140e:	a6 2b       	or	r26, r22
    1410:	b7 2b       	or	r27, r23
    1412:	23 70       	andi	r18, 0x03	; 3
    1414:	a2 2b       	or	r26, r18
    1416:	f8 01       	movw	r30, r16
    1418:	80 83       	st	Z, r24
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	a2 83       	std	Z+2, r26	; 0x02
    141e:	b3 83       	std	Z+3, r27	; 0x03
    1420:	4d 85       	ldd	r20, Y+13	; 0x0d
    1422:	4f 70       	andi	r20, 0x0F	; 15
    1424:	f4 01       	movw	r30, r8
    1426:	40 83       	st	Z, r20
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	be 01       	movw	r22, r28
    142c:	6b 5f       	subi	r22, 0xFB	; 251
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	c5 01       	movw	r24, r10
    1432:	07 d2       	rcall	.+1038   	; 0x1842 <memcpy>
    1434:	87 2d       	mov	r24, r7
    1436:	24 df       	rcall	.-440    	; 0x1280 <MCP2515_CS_high>
    1438:	2d 96       	adiw	r28, 0x0d	; 13
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	bf 90       	pop	r11
    1456:	af 90       	pop	r10
    1458:	9f 90       	pop	r9
    145a:	8f 90       	pop	r8
    145c:	7f 90       	pop	r7
    145e:	08 95       	ret

00001460 <MCP2515_reg_read>:
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	c8 2f       	mov	r28, r24
    1466:	d6 2f       	mov	r29, r22
    1468:	f7 de       	rcall	.-530    	; 0x1258 <MCP2515_CS_low>
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	b2 d0       	rcall	.+356    	; 0x15d2 <SPI_send_byte>
    146e:	8d 2f       	mov	r24, r29
    1470:	b0 d0       	rcall	.+352    	; 0x15d2 <SPI_send_byte>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	ae d0       	rcall	.+348    	; 0x15d2 <SPI_send_byte>
    1476:	d8 2f       	mov	r29, r24
    1478:	8c 2f       	mov	r24, r28
    147a:	02 df       	rcall	.-508    	; 0x1280 <MCP2515_CS_high>
    147c:	8d 2f       	mov	r24, r29
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <MCP2515_findFreeTxBuffer>:
    1484:	cf 93       	push	r28
    1486:	c8 2f       	mov	r28, r24
    1488:	60 e3       	ldi	r22, 0x30	; 48
    148a:	ea df       	rcall	.-44     	; 0x1460 <MCP2515_reg_read>
    148c:	83 ff       	sbrs	r24, 3
    148e:	0c c0       	rjmp	.+24     	; 0x14a8 <MCP2515_findFreeTxBuffer+0x24>
    1490:	60 e4       	ldi	r22, 0x40	; 64
    1492:	8c 2f       	mov	r24, r28
    1494:	e5 df       	rcall	.-54     	; 0x1460 <MCP2515_reg_read>
    1496:	83 ff       	sbrs	r24, 3
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <MCP2515_findFreeTxBuffer+0x28>
    149a:	60 e5       	ldi	r22, 0x50	; 80
    149c:	8c 2f       	mov	r24, r28
    149e:	e0 df       	rcall	.-64     	; 0x1460 <MCP2515_reg_read>
    14a0:	83 ff       	sbrs	r24, 3
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <MCP2515_findFreeTxBuffer+0x2c>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	05 c0       	rjmp	.+10     	; 0x14b2 <MCP2515_findFreeTxBuffer+0x2e>
    14a8:	80 e3       	ldi	r24, 0x30	; 48
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <MCP2515_findFreeTxBuffer+0x2e>
    14ac:	80 e4       	ldi	r24, 0x40	; 64
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <MCP2515_findFreeTxBuffer+0x2e>
    14b0:	80 e5       	ldi	r24, 0x50	; 80
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <MCP2515_TX>:

void MCP2515_TX(uint8_t CANbus, int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID)
{
    14b6:	8f 92       	push	r8
    14b8:	9f 92       	push	r9
    14ba:	af 92       	push	r10
    14bc:	bf 92       	push	r11
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
	if(mob == 0)return;						//no free mob or invalid mob
    14cc:	66 23       	and	r22, r22
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <MCP2515_TX+0x1c>
    14d0:	63 c0       	rjmp	.+198    	; 0x1598 <MCP2515_TX+0xe2>
    14d2:	47 01       	movw	r8, r14
    14d4:	58 01       	movw	r10, r16
    14d6:	c3 2f       	mov	r28, r19
    14d8:	e2 2e       	mov	r14, r18
    14da:	d4 2e       	mov	r13, r20
    14dc:	f6 2e       	mov	r15, r22
    14de:	d8 2f       	mov	r29, r24
	MCP2515_reg_write(CANbus, mob, 0x03);			//we shall set this to the highest priority so that it sends it immediately.
    14e0:	43 e0       	ldi	r20, 0x03	; 3
    14e2:	e2 de       	rcall	.-572    	; 0x12a8 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+1, (ID>>21) & 0xFF);	//shift the ID data to fill the respective MCP registers
    14e4:	b5 01       	movw	r22, r10
    14e6:	a4 01       	movw	r20, r8
    14e8:	03 2e       	mov	r0, r19
    14ea:	35 e1       	ldi	r19, 0x15	; 21
    14ec:	76 95       	lsr	r23
    14ee:	67 95       	ror	r22
    14f0:	57 95       	ror	r21
    14f2:	47 95       	ror	r20
    14f4:	3a 95       	dec	r19
    14f6:	d1 f7       	brne	.-12     	; 0x14ec <MCP2515_TX+0x36>
    14f8:	30 2d       	mov	r19, r0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	8f 0d       	add	r24, r15
    14fe:	68 2f       	mov	r22, r24
    1500:	8d 2f       	mov	r24, r29
    1502:	d2 de       	rcall	.-604    	; 0x12a8 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+2, (((ID>>13) & 224)| ((ID>>16) & 3) | ((1<<3) & 0xFF)));	//set the EXIDE bit, which makes it extended (CAN 2.0B)
    1504:	b5 01       	movw	r22, r10
    1506:	a4 01       	movw	r20, r8
    1508:	03 2e       	mov	r0, r19
    150a:	3d e0       	ldi	r19, 0x0D	; 13
    150c:	76 95       	lsr	r23
    150e:	67 95       	ror	r22
    1510:	57 95       	ror	r21
    1512:	47 95       	ror	r20
    1514:	3a 95       	dec	r19
    1516:	d1 f7       	brne	.-12     	; 0x150c <MCP2515_TX+0x56>
    1518:	30 2d       	mov	r19, r0
    151a:	40 7e       	andi	r20, 0xE0	; 224
    151c:	8a 2d       	mov	r24, r10
    151e:	83 70       	andi	r24, 0x03	; 3
    1520:	48 2b       	or	r20, r24
    1522:	48 60       	ori	r20, 0x08	; 8
    1524:	62 e0       	ldi	r22, 0x02	; 2
    1526:	6f 0d       	add	r22, r15
    1528:	8d 2f       	mov	r24, r29
    152a:	be de       	rcall	.-644    	; 0x12a8 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+3, (ID>>8) & 0xFF );
    152c:	77 27       	eor	r23, r23
    152e:	6b 2d       	mov	r22, r11
    1530:	5a 2d       	mov	r21, r10
    1532:	49 2d       	mov	r20, r9
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	8f 0d       	add	r24, r15
    1538:	68 2f       	mov	r22, r24
    153a:	8d 2f       	mov	r24, r29
    153c:	b5 de       	rcall	.-662    	; 0x12a8 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+4, ID & 0xFF );
    153e:	64 e0       	ldi	r22, 0x04	; 4
    1540:	6f 0d       	add	r22, r15
    1542:	48 2d       	mov	r20, r8
    1544:	8d 2f       	mov	r24, r29
    1546:	b0 de       	rcall	.-672    	; 0x12a8 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+5, numBytes);		//set how many bytes we wish to send
    1548:	65 e0       	ldi	r22, 0x05	; 5
    154a:	6f 0d       	add	r22, r15
    154c:	4d 2d       	mov	r20, r13
    154e:	8d 2f       	mov	r24, r29
    1550:	ab de       	rcall	.-682    	; 0x12a8 <MCP2515_reg_write>
    1552:	dd 20       	and	r13, r13
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);
	
	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    1554:	89 f0       	breq	.+34     	; 0x1578 <MCP2515_TX+0xc2>
    1556:	0e 2d       	mov	r16, r14
    1558:	1c 2f       	mov	r17, r28
    155a:	c6 e0       	ldi	r28, 0x06	; 6
    155c:	cf 0d       	add	r28, r15
    155e:	46 e0       	ldi	r20, 0x06	; 6
    1560:	4d 0d       	add	r20, r13
    1562:	e4 2e       	mov	r14, r20
    1564:	ef 0c       	add	r14, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
    1566:	f8 01       	movw	r30, r16
    1568:	41 91       	ld	r20, Z+
    156a:	8f 01       	movw	r16, r30
    156c:	6c 2f       	mov	r22, r28
    156e:	8d 2f       	mov	r24, r29
    1570:	9b de       	rcall	.-714    	; 0x12a8 <MCP2515_reg_write>
    1572:	cf 5f       	subi	r28, 0xFF	; 255
    1574:	ce 11       	cpse	r28, r14
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);
	
	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    1576:	f7 cf       	rjmp	.-18     	; 0x1566 <MCP2515_TX+0xb0>
    1578:	8f 2d       	mov	r24, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
	}
	MCP2515_instruction(CANbus, 128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
    157a:	85 95       	asr	r24
    157c:	85 95       	asr	r24
    157e:	85 95       	asr	r24
    1580:	85 95       	asr	r24
    1582:	83 50       	subi	r24, 0x03	; 3
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	02 c0       	rjmp	.+4      	; 0x158e <MCP2515_TX+0xd8>
    158a:	66 0f       	add	r22, r22
    158c:	77 1f       	adc	r23, r23
    158e:	8a 95       	dec	r24
    1590:	e2 f7       	brpl	.-8      	; 0x158a <MCP2515_TX+0xd4>
    1592:	60 68       	ori	r22, 0x80	; 128
    1594:	8d 2f       	mov	r24, r29
    1596:	9b de       	rcall	.-714    	; 0x12ce <MCP2515_instruction>
    1598:	df 91       	pop	r29
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	df 90       	pop	r13
    15a6:	bf 90       	pop	r11
    15a8:	af 90       	pop	r10
    15aa:	9f 90       	pop	r9
    15ac:	8f 90       	pop	r8
    15ae:	08 95       	ret

000015b0 <MCP2515_check_receive_status>:
    15b0:	cf 93       	push	r28


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
    15b2:	df 93       	push	r29
    15b4:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
    15b6:	50 de       	rcall	.-864    	; 0x1258 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
    15b8:	80 eb       	ldi	r24, 0xB0	; 176
    15ba:	0b d0       	rcall	.+22     	; 0x15d2 <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	09 d0       	rcall	.+18     	; 0x15d2 <SPI_send_byte>
    15c0:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	06 d0       	rcall	.+12     	; 0x15d2 <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
    15c6:	8c 2f       	mov	r24, r28
    15c8:	5b de       	rcall	.-842    	; 0x1280 <MCP2515_CS_high>
    15ca:	8d 2f       	mov	r24, r29
	return status;
}
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    15d2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    15d4:	0d b4       	in	r0, 0x2d	; 45
    15d6:	07 fe       	sbrs	r0, 7
    15d8:	fd cf       	rjmp	.-6      	; 0x15d4 <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    15da:	8e b5       	in	r24, 0x2e	; 46
}
    15dc:	08 95       	ret

000015de <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
    15de:	81 e5       	ldi	r24, 0x51	; 81
    15e0:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
    15e6:	1e bc       	out	0x2e, r1	; 46
    15e8:	08 95       	ret

000015ea <__vector_25>:
char receiveChar()
{
	// Return the char in the UDR0 register
	return UDR0;
	
}
    15ea:	1f 92       	push	r1
    15ec:	0f 92       	push	r0
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	0f 92       	push	r0
    15f2:	11 24       	eor	r1, r1
    15f4:	0b b6       	in	r0, 0x3b	; 59
    15f6:	0f 92       	push	r0
    15f8:	2f 93       	push	r18
    15fa:	8f 93       	push	r24
    15fc:	9f 93       	push	r25
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
    1602:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1606:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    160a:	88 71       	andi	r24, 0x18	; 24
    160c:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <UART_RxHead>
    1610:	ef 5f       	subi	r30, 0xFF	; 255
    1612:	ef 71       	andi	r30, 0x1F	; 31
    1614:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <UART_RxTail>
    1618:	e9 17       	cp	r30, r25
    161a:	39 f0       	breq	.+14     	; 0x162a <__vector_25+0x40>
    161c:	e0 93 e4 09 	sts	0x09E4, r30	; 0x8009e4 <UART_RxHead>
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	e9 51       	subi	r30, 0x19	; 25
    1624:	f6 4f       	sbci	r31, 0xF6	; 246
    1626:	20 83       	st	Z, r18
    1628:	01 c0       	rjmp	.+2      	; 0x162c <__vector_25+0x42>
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <UART_LastRxError>
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	9f 91       	pop	r25
    1636:	8f 91       	pop	r24
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	0b be       	out	0x3b, r0	; 59
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <__vector_36>:
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	11 24       	eor	r1, r1
    1652:	0b b6       	in	r0, 0x3b	; 59
    1654:	0f 92       	push	r0
    1656:	2f 93       	push	r18
    1658:	8f 93       	push	r24
    165a:	9f 93       	push	r25
    165c:	ef 93       	push	r30
    165e:	ff 93       	push	r31
    1660:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1664:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1668:	88 71       	andi	r24, 0x18	; 24
    166a:	e0 91 9f 09 	lds	r30, 0x099F	; 0x80099f <UART1_RxHead>
    166e:	ef 5f       	subi	r30, 0xFF	; 255
    1670:	ef 71       	andi	r30, 0x1F	; 31
    1672:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <UART1_RxTail>
    1676:	e9 17       	cp	r30, r25
    1678:	39 f0       	breq	.+14     	; 0x1688 <__vector_36+0x40>
    167a:	e0 93 9f 09 	sts	0x099F, r30	; 0x80099f <UART1_RxHead>
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	ee 55       	subi	r30, 0x5E	; 94
    1682:	f6 4f       	sbci	r31, 0xF6	; 246
    1684:	20 83       	st	Z, r18
    1686:	01 c0       	rjmp	.+2      	; 0x168a <__vector_36+0x42>
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	80 93 9d 09 	sts	0x099D, r24	; 0x80099d <UART1_LastRxError>
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	2f 91       	pop	r18
    1698:	0f 90       	pop	r0
    169a:	0b be       	out	0x3b, r0	; 59
    169c:	0f 90       	pop	r0
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	0f 90       	pop	r0
    16a2:	1f 90       	pop	r1
    16a4:	18 95       	reti

000016a6 <__vector_26>:
    16a6:	1f 92       	push	r1
    16a8:	0f 92       	push	r0
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	0f 92       	push	r0
    16ae:	11 24       	eor	r1, r1
    16b0:	0b b6       	in	r0, 0x3b	; 59
    16b2:	0f 92       	push	r0
    16b4:	8f 93       	push	r24
    16b6:	9f 93       	push	r25
    16b8:	ef 93       	push	r30
    16ba:	ff 93       	push	r31
    16bc:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <UART_TxHead>
    16c0:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <UART_TxTail>
    16c4:	98 17       	cp	r25, r24
    16c6:	69 f0       	breq	.+26     	; 0x16e2 <__vector_26+0x3c>
    16c8:	e0 91 e5 09 	lds	r30, 0x09E5	; 0x8009e5 <UART_TxTail>
    16cc:	ef 5f       	subi	r30, 0xFF	; 255
    16ce:	ef 71       	andi	r30, 0x1F	; 31
    16d0:	e0 93 e5 09 	sts	0x09E5, r30	; 0x8009e5 <UART_TxTail>
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	e9 5f       	subi	r30, 0xF9	; 249
    16d8:	f5 4f       	sbci	r31, 0xF5	; 245
    16da:	80 81       	ld	r24, Z
    16dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <__vector_26+0x46>
    16e2:	e1 ec       	ldi	r30, 0xC1	; 193
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8f 7d       	andi	r24, 0xDF	; 223
    16ea:	80 83       	st	Z, r24
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	0f 90       	pop	r0
    16f6:	0b be       	out	0x3b, r0	; 59
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	0f 90       	pop	r0
    16fe:	1f 90       	pop	r1
    1700:	18 95       	reti

00001702 <__vector_37>:
    1702:	1f 92       	push	r1
    1704:	0f 92       	push	r0
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	0f 92       	push	r0
    170a:	11 24       	eor	r1, r1
    170c:	0b b6       	in	r0, 0x3b	; 59
    170e:	0f 92       	push	r0
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	ef 93       	push	r30
    1716:	ff 93       	push	r31
    1718:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <UART1_TxHead>
    171c:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <UART1_TxTail>
    1720:	98 17       	cp	r25, r24
    1722:	69 f0       	breq	.+26     	; 0x173e <__vector_37+0x3c>
    1724:	e0 91 a0 09 	lds	r30, 0x09A0	; 0x8009a0 <UART1_TxTail>
    1728:	ef 5f       	subi	r30, 0xFF	; 255
    172a:	ef 71       	andi	r30, 0x1F	; 31
    172c:	e0 93 a0 09 	sts	0x09A0, r30	; 0x8009a0 <UART1_TxTail>
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	ee 53       	subi	r30, 0x3E	; 62
    1734:	f6 4f       	sbci	r31, 0xF6	; 246
    1736:	80 81       	ld	r24, Z
    1738:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <__vector_37+0x46>
    173e:	e9 ec       	ldi	r30, 0xC9	; 201
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8f 7d       	andi	r24, 0xDF	; 223
    1746:	80 83       	st	Z, r24
    1748:	ff 91       	pop	r31
    174a:	ef 91       	pop	r30
    174c:	9f 91       	pop	r25
    174e:	8f 91       	pop	r24
    1750:	0f 90       	pop	r0
    1752:	0b be       	out	0x3b, r0	; 59
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	0f 90       	pop	r0
    175a:	1f 90       	pop	r1
    175c:	18 95       	reti

0000175e <uart_init>:
    175e:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <UART_TxHead>
    1762:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <UART_TxTail>
    1766:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <UART_RxHead>
    176a:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <UART_RxTail>
    176e:	e1 e6       	ldi	r30, 0x61	; 97
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 e8       	ldi	r24, 0x80	; 128
    1774:	80 83       	st	Z, r24
    1776:	10 82       	st	Z, r1
    1778:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    177c:	87 e6       	ldi	r24, 0x67	; 103
    177e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1788:	88 e1       	ldi	r24, 0x18	; 24
    178a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    178e:	86 e0       	ldi	r24, 0x06	; 6
    1790:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1794:	08 95       	ret

00001796 <uart_putc>:
    1796:	90 91 27 0a 	lds	r25, 0x0A27	; 0x800a27 <portKey>
    179a:	91 11       	cpse	r25, r1
    179c:	15 c0       	rjmp	.+42     	; 0x17c8 <uart_putc+0x32>
    179e:	20 91 e6 09 	lds	r18, 0x09E6	; 0x8009e6 <UART_TxHead>
    17a2:	2f 5f       	subi	r18, 0xFF	; 255
    17a4:	2f 71       	andi	r18, 0x1F	; 31
    17a6:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <UART_TxTail>
    17aa:	29 17       	cp	r18, r25
    17ac:	e1 f3       	breq	.-8      	; 0x17a6 <uart_putc+0x10>
    17ae:	e2 2f       	mov	r30, r18
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	e9 5f       	subi	r30, 0xF9	; 249
    17b4:	f5 4f       	sbci	r31, 0xF5	; 245
    17b6:	80 83       	st	Z, r24
    17b8:	20 93 e6 09 	sts	0x09E6, r18	; 0x8009e6 <UART_TxHead>
    17bc:	e1 ec       	ldi	r30, 0xC1	; 193
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	80 62       	ori	r24, 0x20	; 32
    17c4:	80 83       	st	Z, r24
    17c6:	08 95       	ret
    17c8:	91 30       	cpi	r25, 0x01	; 1
    17ca:	a1 f4       	brne	.+40     	; 0x17f4 <uart_putc+0x5e>
    17cc:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <UART1_TxHead>
    17d0:	2f 5f       	subi	r18, 0xFF	; 255
    17d2:	2f 71       	andi	r18, 0x1F	; 31
    17d4:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <UART1_TxTail>
    17d8:	29 17       	cp	r18, r25
    17da:	e1 f3       	breq	.-8      	; 0x17d4 <uart_putc+0x3e>
    17dc:	e2 2f       	mov	r30, r18
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	ee 53       	subi	r30, 0x3E	; 62
    17e2:	f6 4f       	sbci	r31, 0xF6	; 246
    17e4:	80 83       	st	Z, r24
    17e6:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <UART1_TxHead>
    17ea:	e9 ec       	ldi	r30, 0xC9	; 201
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 62       	ori	r24, 0x20	; 32
    17f2:	80 83       	st	Z, r24
    17f4:	08 95       	ret

000017f6 <isCharAvailable_1>:
    17f6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    17fa:	88 1f       	adc	r24, r24
    17fc:	88 27       	eor	r24, r24
    17fe:	88 1f       	adc	r24, r24
    1800:	08 95       	ret

00001802 <receiveChar_1>:

char receiveChar_1()
{
	// Return the char in the UDR2 register
	return UDR1;
    1802:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	
    1806:	08 95       	ret

00001808 <__udivmodhi4>:
    1808:	aa 1b       	sub	r26, r26
    180a:	bb 1b       	sub	r27, r27
    180c:	51 e1       	ldi	r21, 0x11	; 17
    180e:	07 c0       	rjmp	.+14     	; 0x181e <__udivmodhi4_ep>

00001810 <__udivmodhi4_loop>:
    1810:	aa 1f       	adc	r26, r26
    1812:	bb 1f       	adc	r27, r27
    1814:	a6 17       	cp	r26, r22
    1816:	b7 07       	cpc	r27, r23
    1818:	10 f0       	brcs	.+4      	; 0x181e <__udivmodhi4_ep>
    181a:	a6 1b       	sub	r26, r22
    181c:	b7 0b       	sbc	r27, r23

0000181e <__udivmodhi4_ep>:
    181e:	88 1f       	adc	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	5a 95       	dec	r21
    1824:	a9 f7       	brne	.-22     	; 0x1810 <__udivmodhi4_loop>
    1826:	80 95       	com	r24
    1828:	90 95       	com	r25
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	08 95       	ret

00001830 <__tablejump2__>:
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	00 24       	eor	r0, r0
    1836:	00 1c       	adc	r0, r0
    1838:	0b be       	out	0x3b, r0	; 59
    183a:	07 90       	elpm	r0, Z+
    183c:	f6 91       	elpm	r31, Z
    183e:	e0 2d       	mov	r30, r0
    1840:	09 94       	ijmp

00001842 <memcpy>:
    1842:	fb 01       	movw	r30, r22
    1844:	dc 01       	movw	r26, r24
    1846:	02 c0       	rjmp	.+4      	; 0x184c <memcpy+0xa>
    1848:	01 90       	ld	r0, Z+
    184a:	0d 92       	st	X+, r0
    184c:	41 50       	subi	r20, 0x01	; 1
    184e:	50 40       	sbci	r21, 0x00	; 0
    1850:	d8 f7       	brcc	.-10     	; 0x1848 <memcpy+0x6>
    1852:	08 95       	ret

00001854 <snprintf>:
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	2e 97       	sbiw	r28, 0x0e	; 14
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	0d 89       	ldd	r16, Y+21	; 0x15
    186e:	1e 89       	ldd	r17, Y+22	; 0x16
    1870:	8f 89       	ldd	r24, Y+23	; 0x17
    1872:	98 8d       	ldd	r25, Y+24	; 0x18
    1874:	26 e0       	ldi	r18, 0x06	; 6
    1876:	2c 83       	std	Y+4, r18	; 0x04
    1878:	1a 83       	std	Y+2, r17	; 0x02
    187a:	09 83       	std	Y+1, r16	; 0x01
    187c:	97 ff       	sbrs	r25, 7
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <snprintf+0x30>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e8       	ldi	r25, 0x80	; 128
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	ae 01       	movw	r20, r28
    188c:	45 5e       	subi	r20, 0xE5	; 229
    188e:	5f 4f       	sbci	r21, 0xFF	; 255
    1890:	69 8d       	ldd	r22, Y+25	; 0x19
    1892:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1894:	ce 01       	movw	r24, r28
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	19 d0       	rcall	.+50     	; 0x18cc <vfprintf>
    189a:	4d 81       	ldd	r20, Y+5	; 0x05
    189c:	5e 81       	ldd	r21, Y+6	; 0x06
    189e:	57 fd       	sbrc	r21, 7
    18a0:	0a c0       	rjmp	.+20     	; 0x18b6 <snprintf+0x62>
    18a2:	2f 81       	ldd	r18, Y+7	; 0x07
    18a4:	38 85       	ldd	r19, Y+8	; 0x08
    18a6:	42 17       	cp	r20, r18
    18a8:	53 07       	cpc	r21, r19
    18aa:	0c f4       	brge	.+2      	; 0x18ae <snprintf+0x5a>
    18ac:	9a 01       	movw	r18, r20
    18ae:	f8 01       	movw	r30, r16
    18b0:	e2 0f       	add	r30, r18
    18b2:	f3 1f       	adc	r31, r19
    18b4:	10 82       	st	Z, r1
    18b6:	2e 96       	adiw	r28, 0x0e	; 14
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	08 95       	ret

000018cc <vfprintf>:
    18cc:	2f 92       	push	r2
    18ce:	3f 92       	push	r3
    18d0:	4f 92       	push	r4
    18d2:	5f 92       	push	r5
    18d4:	6f 92       	push	r6
    18d6:	7f 92       	push	r7
    18d8:	8f 92       	push	r8
    18da:	9f 92       	push	r9
    18dc:	af 92       	push	r10
    18de:	bf 92       	push	r11
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	2b 97       	sbiw	r28, 0x0b	; 11
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	6c 01       	movw	r12, r24
    1902:	7b 01       	movw	r14, r22
    1904:	8a 01       	movw	r16, r20
    1906:	fc 01       	movw	r30, r24
    1908:	17 82       	std	Z+7, r1	; 0x07
    190a:	16 82       	std	Z+6, r1	; 0x06
    190c:	83 81       	ldd	r24, Z+3	; 0x03
    190e:	81 ff       	sbrs	r24, 1
    1910:	bf c1       	rjmp	.+894    	; 0x1c90 <vfprintf+0x3c4>
    1912:	ce 01       	movw	r24, r28
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	3c 01       	movw	r6, r24
    1918:	f6 01       	movw	r30, r12
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	f7 01       	movw	r30, r14
    191e:	93 fd       	sbrc	r25, 3
    1920:	85 91       	lpm	r24, Z+
    1922:	93 ff       	sbrs	r25, 3
    1924:	81 91       	ld	r24, Z+
    1926:	7f 01       	movw	r14, r30
    1928:	88 23       	and	r24, r24
    192a:	09 f4       	brne	.+2      	; 0x192e <vfprintf+0x62>
    192c:	ad c1       	rjmp	.+858    	; 0x1c88 <vfprintf+0x3bc>
    192e:	85 32       	cpi	r24, 0x25	; 37
    1930:	39 f4       	brne	.+14     	; 0x1940 <vfprintf+0x74>
    1932:	93 fd       	sbrc	r25, 3
    1934:	85 91       	lpm	r24, Z+
    1936:	93 ff       	sbrs	r25, 3
    1938:	81 91       	ld	r24, Z+
    193a:	7f 01       	movw	r14, r30
    193c:	85 32       	cpi	r24, 0x25	; 37
    193e:	21 f4       	brne	.+8      	; 0x1948 <vfprintf+0x7c>
    1940:	b6 01       	movw	r22, r12
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	d6 d1       	rcall	.+940    	; 0x1cf2 <fputc>
    1946:	e8 cf       	rjmp	.-48     	; 0x1918 <vfprintf+0x4c>
    1948:	91 2c       	mov	r9, r1
    194a:	21 2c       	mov	r2, r1
    194c:	31 2c       	mov	r3, r1
    194e:	ff e1       	ldi	r31, 0x1F	; 31
    1950:	f3 15       	cp	r31, r3
    1952:	d8 f0       	brcs	.+54     	; 0x198a <vfprintf+0xbe>
    1954:	8b 32       	cpi	r24, 0x2B	; 43
    1956:	79 f0       	breq	.+30     	; 0x1976 <vfprintf+0xaa>
    1958:	38 f4       	brcc	.+14     	; 0x1968 <vfprintf+0x9c>
    195a:	80 32       	cpi	r24, 0x20	; 32
    195c:	79 f0       	breq	.+30     	; 0x197c <vfprintf+0xb0>
    195e:	83 32       	cpi	r24, 0x23	; 35
    1960:	a1 f4       	brne	.+40     	; 0x198a <vfprintf+0xbe>
    1962:	23 2d       	mov	r18, r3
    1964:	20 61       	ori	r18, 0x10	; 16
    1966:	1d c0       	rjmp	.+58     	; 0x19a2 <vfprintf+0xd6>
    1968:	8d 32       	cpi	r24, 0x2D	; 45
    196a:	61 f0       	breq	.+24     	; 0x1984 <vfprintf+0xb8>
    196c:	80 33       	cpi	r24, 0x30	; 48
    196e:	69 f4       	brne	.+26     	; 0x198a <vfprintf+0xbe>
    1970:	23 2d       	mov	r18, r3
    1972:	21 60       	ori	r18, 0x01	; 1
    1974:	16 c0       	rjmp	.+44     	; 0x19a2 <vfprintf+0xd6>
    1976:	83 2d       	mov	r24, r3
    1978:	82 60       	ori	r24, 0x02	; 2
    197a:	38 2e       	mov	r3, r24
    197c:	e3 2d       	mov	r30, r3
    197e:	e4 60       	ori	r30, 0x04	; 4
    1980:	3e 2e       	mov	r3, r30
    1982:	2a c0       	rjmp	.+84     	; 0x19d8 <vfprintf+0x10c>
    1984:	f3 2d       	mov	r31, r3
    1986:	f8 60       	ori	r31, 0x08	; 8
    1988:	1d c0       	rjmp	.+58     	; 0x19c4 <vfprintf+0xf8>
    198a:	37 fc       	sbrc	r3, 7
    198c:	2d c0       	rjmp	.+90     	; 0x19e8 <vfprintf+0x11c>
    198e:	20 ed       	ldi	r18, 0xD0	; 208
    1990:	28 0f       	add	r18, r24
    1992:	2a 30       	cpi	r18, 0x0A	; 10
    1994:	40 f0       	brcs	.+16     	; 0x19a6 <vfprintf+0xda>
    1996:	8e 32       	cpi	r24, 0x2E	; 46
    1998:	b9 f4       	brne	.+46     	; 0x19c8 <vfprintf+0xfc>
    199a:	36 fc       	sbrc	r3, 6
    199c:	75 c1       	rjmp	.+746    	; 0x1c88 <vfprintf+0x3bc>
    199e:	23 2d       	mov	r18, r3
    19a0:	20 64       	ori	r18, 0x40	; 64
    19a2:	32 2e       	mov	r3, r18
    19a4:	19 c0       	rjmp	.+50     	; 0x19d8 <vfprintf+0x10c>
    19a6:	36 fe       	sbrs	r3, 6
    19a8:	06 c0       	rjmp	.+12     	; 0x19b6 <vfprintf+0xea>
    19aa:	8a e0       	ldi	r24, 0x0A	; 10
    19ac:	98 9e       	mul	r9, r24
    19ae:	20 0d       	add	r18, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	92 2e       	mov	r9, r18
    19b4:	11 c0       	rjmp	.+34     	; 0x19d8 <vfprintf+0x10c>
    19b6:	ea e0       	ldi	r30, 0x0A	; 10
    19b8:	2e 9e       	mul	r2, r30
    19ba:	20 0d       	add	r18, r0
    19bc:	11 24       	eor	r1, r1
    19be:	22 2e       	mov	r2, r18
    19c0:	f3 2d       	mov	r31, r3
    19c2:	f0 62       	ori	r31, 0x20	; 32
    19c4:	3f 2e       	mov	r3, r31
    19c6:	08 c0       	rjmp	.+16     	; 0x19d8 <vfprintf+0x10c>
    19c8:	8c 36       	cpi	r24, 0x6C	; 108
    19ca:	21 f4       	brne	.+8      	; 0x19d4 <vfprintf+0x108>
    19cc:	83 2d       	mov	r24, r3
    19ce:	80 68       	ori	r24, 0x80	; 128
    19d0:	38 2e       	mov	r3, r24
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <vfprintf+0x10c>
    19d4:	88 36       	cpi	r24, 0x68	; 104
    19d6:	41 f4       	brne	.+16     	; 0x19e8 <vfprintf+0x11c>
    19d8:	f7 01       	movw	r30, r14
    19da:	93 fd       	sbrc	r25, 3
    19dc:	85 91       	lpm	r24, Z+
    19de:	93 ff       	sbrs	r25, 3
    19e0:	81 91       	ld	r24, Z+
    19e2:	7f 01       	movw	r14, r30
    19e4:	81 11       	cpse	r24, r1
    19e6:	b3 cf       	rjmp	.-154    	; 0x194e <vfprintf+0x82>
    19e8:	98 2f       	mov	r25, r24
    19ea:	9f 7d       	andi	r25, 0xDF	; 223
    19ec:	95 54       	subi	r25, 0x45	; 69
    19ee:	93 30       	cpi	r25, 0x03	; 3
    19f0:	28 f4       	brcc	.+10     	; 0x19fc <vfprintf+0x130>
    19f2:	0c 5f       	subi	r16, 0xFC	; 252
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	9f e3       	ldi	r25, 0x3F	; 63
    19f8:	99 83       	std	Y+1, r25	; 0x01
    19fa:	0d c0       	rjmp	.+26     	; 0x1a16 <vfprintf+0x14a>
    19fc:	83 36       	cpi	r24, 0x63	; 99
    19fe:	31 f0       	breq	.+12     	; 0x1a0c <vfprintf+0x140>
    1a00:	83 37       	cpi	r24, 0x73	; 115
    1a02:	71 f0       	breq	.+28     	; 0x1a20 <vfprintf+0x154>
    1a04:	83 35       	cpi	r24, 0x53	; 83
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <vfprintf+0x13e>
    1a08:	55 c0       	rjmp	.+170    	; 0x1ab4 <vfprintf+0x1e8>
    1a0a:	20 c0       	rjmp	.+64     	; 0x1a4c <vfprintf+0x180>
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	80 81       	ld	r24, Z
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	0e 5f       	subi	r16, 0xFE	; 254
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	88 24       	eor	r8, r8
    1a18:	83 94       	inc	r8
    1a1a:	91 2c       	mov	r9, r1
    1a1c:	53 01       	movw	r10, r6
    1a1e:	12 c0       	rjmp	.+36     	; 0x1a44 <vfprintf+0x178>
    1a20:	28 01       	movw	r4, r16
    1a22:	f2 e0       	ldi	r31, 0x02	; 2
    1a24:	4f 0e       	add	r4, r31
    1a26:	51 1c       	adc	r5, r1
    1a28:	f8 01       	movw	r30, r16
    1a2a:	a0 80       	ld	r10, Z
    1a2c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a2e:	36 fe       	sbrs	r3, 6
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <vfprintf+0x16c>
    1a32:	69 2d       	mov	r22, r9
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <vfprintf+0x170>
    1a38:	6f ef       	ldi	r22, 0xFF	; 255
    1a3a:	7f ef       	ldi	r23, 0xFF	; 255
    1a3c:	c5 01       	movw	r24, r10
    1a3e:	4e d1       	rcall	.+668    	; 0x1cdc <strnlen>
    1a40:	4c 01       	movw	r8, r24
    1a42:	82 01       	movw	r16, r4
    1a44:	f3 2d       	mov	r31, r3
    1a46:	ff 77       	andi	r31, 0x7F	; 127
    1a48:	3f 2e       	mov	r3, r31
    1a4a:	15 c0       	rjmp	.+42     	; 0x1a76 <vfprintf+0x1aa>
    1a4c:	28 01       	movw	r4, r16
    1a4e:	22 e0       	ldi	r18, 0x02	; 2
    1a50:	42 0e       	add	r4, r18
    1a52:	51 1c       	adc	r5, r1
    1a54:	f8 01       	movw	r30, r16
    1a56:	a0 80       	ld	r10, Z
    1a58:	b1 80       	ldd	r11, Z+1	; 0x01
    1a5a:	36 fe       	sbrs	r3, 6
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <vfprintf+0x198>
    1a5e:	69 2d       	mov	r22, r9
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <vfprintf+0x19c>
    1a64:	6f ef       	ldi	r22, 0xFF	; 255
    1a66:	7f ef       	ldi	r23, 0xFF	; 255
    1a68:	c5 01       	movw	r24, r10
    1a6a:	2d d1       	rcall	.+602    	; 0x1cc6 <strnlen_P>
    1a6c:	4c 01       	movw	r8, r24
    1a6e:	f3 2d       	mov	r31, r3
    1a70:	f0 68       	ori	r31, 0x80	; 128
    1a72:	3f 2e       	mov	r3, r31
    1a74:	82 01       	movw	r16, r4
    1a76:	33 fc       	sbrc	r3, 3
    1a78:	19 c0       	rjmp	.+50     	; 0x1aac <vfprintf+0x1e0>
    1a7a:	82 2d       	mov	r24, r2
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	88 16       	cp	r8, r24
    1a80:	99 06       	cpc	r9, r25
    1a82:	a0 f4       	brcc	.+40     	; 0x1aac <vfprintf+0x1e0>
    1a84:	b6 01       	movw	r22, r12
    1a86:	80 e2       	ldi	r24, 0x20	; 32
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	33 d1       	rcall	.+614    	; 0x1cf2 <fputc>
    1a8c:	2a 94       	dec	r2
    1a8e:	f5 cf       	rjmp	.-22     	; 0x1a7a <vfprintf+0x1ae>
    1a90:	f5 01       	movw	r30, r10
    1a92:	37 fc       	sbrc	r3, 7
    1a94:	85 91       	lpm	r24, Z+
    1a96:	37 fe       	sbrs	r3, 7
    1a98:	81 91       	ld	r24, Z+
    1a9a:	5f 01       	movw	r10, r30
    1a9c:	b6 01       	movw	r22, r12
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	28 d1       	rcall	.+592    	; 0x1cf2 <fputc>
    1aa2:	21 10       	cpse	r2, r1
    1aa4:	2a 94       	dec	r2
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	82 1a       	sub	r8, r18
    1aaa:	91 08       	sbc	r9, r1
    1aac:	81 14       	cp	r8, r1
    1aae:	91 04       	cpc	r9, r1
    1ab0:	79 f7       	brne	.-34     	; 0x1a90 <vfprintf+0x1c4>
    1ab2:	e1 c0       	rjmp	.+450    	; 0x1c76 <vfprintf+0x3aa>
    1ab4:	84 36       	cpi	r24, 0x64	; 100
    1ab6:	11 f0       	breq	.+4      	; 0x1abc <vfprintf+0x1f0>
    1ab8:	89 36       	cpi	r24, 0x69	; 105
    1aba:	39 f5       	brne	.+78     	; 0x1b0a <vfprintf+0x23e>
    1abc:	f8 01       	movw	r30, r16
    1abe:	37 fe       	sbrs	r3, 7
    1ac0:	07 c0       	rjmp	.+14     	; 0x1ad0 <vfprintf+0x204>
    1ac2:	60 81       	ld	r22, Z
    1ac4:	71 81       	ldd	r23, Z+1	; 0x01
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	0c 5f       	subi	r16, 0xFC	; 252
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <vfprintf+0x214>
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	07 2e       	mov	r0, r23
    1ad6:	00 0c       	add	r0, r0
    1ad8:	88 0b       	sbc	r24, r24
    1ada:	99 0b       	sbc	r25, r25
    1adc:	0e 5f       	subi	r16, 0xFE	; 254
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae0:	f3 2d       	mov	r31, r3
    1ae2:	ff 76       	andi	r31, 0x6F	; 111
    1ae4:	3f 2e       	mov	r3, r31
    1ae6:	97 ff       	sbrs	r25, 7
    1ae8:	09 c0       	rjmp	.+18     	; 0x1afc <vfprintf+0x230>
    1aea:	90 95       	com	r25
    1aec:	80 95       	com	r24
    1aee:	70 95       	com	r23
    1af0:	61 95       	neg	r22
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255
    1af4:	8f 4f       	sbci	r24, 0xFF	; 255
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	f0 68       	ori	r31, 0x80	; 128
    1afa:	3f 2e       	mov	r3, r31
    1afc:	2a e0       	ldi	r18, 0x0A	; 10
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	a3 01       	movw	r20, r6
    1b02:	33 d1       	rcall	.+614    	; 0x1d6a <__ultoa_invert>
    1b04:	88 2e       	mov	r8, r24
    1b06:	86 18       	sub	r8, r6
    1b08:	44 c0       	rjmp	.+136    	; 0x1b92 <vfprintf+0x2c6>
    1b0a:	85 37       	cpi	r24, 0x75	; 117
    1b0c:	31 f4       	brne	.+12     	; 0x1b1a <vfprintf+0x24e>
    1b0e:	23 2d       	mov	r18, r3
    1b10:	2f 7e       	andi	r18, 0xEF	; 239
    1b12:	b2 2e       	mov	r11, r18
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	25 c0       	rjmp	.+74     	; 0x1b64 <vfprintf+0x298>
    1b1a:	93 2d       	mov	r25, r3
    1b1c:	99 7f       	andi	r25, 0xF9	; 249
    1b1e:	b9 2e       	mov	r11, r25
    1b20:	8f 36       	cpi	r24, 0x6F	; 111
    1b22:	c1 f0       	breq	.+48     	; 0x1b54 <vfprintf+0x288>
    1b24:	18 f4       	brcc	.+6      	; 0x1b2c <vfprintf+0x260>
    1b26:	88 35       	cpi	r24, 0x58	; 88
    1b28:	79 f0       	breq	.+30     	; 0x1b48 <vfprintf+0x27c>
    1b2a:	ae c0       	rjmp	.+348    	; 0x1c88 <vfprintf+0x3bc>
    1b2c:	80 37       	cpi	r24, 0x70	; 112
    1b2e:	19 f0       	breq	.+6      	; 0x1b36 <vfprintf+0x26a>
    1b30:	88 37       	cpi	r24, 0x78	; 120
    1b32:	21 f0       	breq	.+8      	; 0x1b3c <vfprintf+0x270>
    1b34:	a9 c0       	rjmp	.+338    	; 0x1c88 <vfprintf+0x3bc>
    1b36:	e9 2f       	mov	r30, r25
    1b38:	e0 61       	ori	r30, 0x10	; 16
    1b3a:	be 2e       	mov	r11, r30
    1b3c:	b4 fe       	sbrs	r11, 4
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <vfprintf+0x28e>
    1b40:	fb 2d       	mov	r31, r11
    1b42:	f4 60       	ori	r31, 0x04	; 4
    1b44:	bf 2e       	mov	r11, r31
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <vfprintf+0x28e>
    1b48:	34 fe       	sbrs	r3, 4
    1b4a:	0a c0       	rjmp	.+20     	; 0x1b60 <vfprintf+0x294>
    1b4c:	29 2f       	mov	r18, r25
    1b4e:	26 60       	ori	r18, 0x06	; 6
    1b50:	b2 2e       	mov	r11, r18
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <vfprintf+0x294>
    1b54:	28 e0       	ldi	r18, 0x08	; 8
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <vfprintf+0x298>
    1b5a:	20 e1       	ldi	r18, 0x10	; 16
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <vfprintf+0x298>
    1b60:	20 e1       	ldi	r18, 0x10	; 16
    1b62:	32 e0       	ldi	r19, 0x02	; 2
    1b64:	f8 01       	movw	r30, r16
    1b66:	b7 fe       	sbrs	r11, 7
    1b68:	07 c0       	rjmp	.+14     	; 0x1b78 <vfprintf+0x2ac>
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	0c 5f       	subi	r16, 0xFC	; 252
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	06 c0       	rjmp	.+12     	; 0x1b84 <vfprintf+0x2b8>
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 5f       	subi	r16, 0xFE	; 254
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	a3 01       	movw	r20, r6
    1b86:	f1 d0       	rcall	.+482    	; 0x1d6a <__ultoa_invert>
    1b88:	88 2e       	mov	r8, r24
    1b8a:	86 18       	sub	r8, r6
    1b8c:	fb 2d       	mov	r31, r11
    1b8e:	ff 77       	andi	r31, 0x7F	; 127
    1b90:	3f 2e       	mov	r3, r31
    1b92:	36 fe       	sbrs	r3, 6
    1b94:	0d c0       	rjmp	.+26     	; 0x1bb0 <vfprintf+0x2e4>
    1b96:	23 2d       	mov	r18, r3
    1b98:	2e 7f       	andi	r18, 0xFE	; 254
    1b9a:	a2 2e       	mov	r10, r18
    1b9c:	89 14       	cp	r8, r9
    1b9e:	58 f4       	brcc	.+22     	; 0x1bb6 <vfprintf+0x2ea>
    1ba0:	34 fe       	sbrs	r3, 4
    1ba2:	0b c0       	rjmp	.+22     	; 0x1bba <vfprintf+0x2ee>
    1ba4:	32 fc       	sbrc	r3, 2
    1ba6:	09 c0       	rjmp	.+18     	; 0x1bba <vfprintf+0x2ee>
    1ba8:	83 2d       	mov	r24, r3
    1baa:	8e 7e       	andi	r24, 0xEE	; 238
    1bac:	a8 2e       	mov	r10, r24
    1bae:	05 c0       	rjmp	.+10     	; 0x1bba <vfprintf+0x2ee>
    1bb0:	b8 2c       	mov	r11, r8
    1bb2:	a3 2c       	mov	r10, r3
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <vfprintf+0x2f0>
    1bb6:	b8 2c       	mov	r11, r8
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <vfprintf+0x2f0>
    1bba:	b9 2c       	mov	r11, r9
    1bbc:	a4 fe       	sbrs	r10, 4
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <vfprintf+0x312>
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e8 0d       	add	r30, r8
    1bc4:	f1 1d       	adc	r31, r1
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 33       	cpi	r24, 0x30	; 48
    1bca:	21 f4       	brne	.+8      	; 0x1bd4 <vfprintf+0x308>
    1bcc:	9a 2d       	mov	r25, r10
    1bce:	99 7e       	andi	r25, 0xE9	; 233
    1bd0:	a9 2e       	mov	r10, r25
    1bd2:	09 c0       	rjmp	.+18     	; 0x1be6 <vfprintf+0x31a>
    1bd4:	a2 fe       	sbrs	r10, 2
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <vfprintf+0x318>
    1bd8:	b3 94       	inc	r11
    1bda:	b3 94       	inc	r11
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <vfprintf+0x31a>
    1bde:	8a 2d       	mov	r24, r10
    1be0:	86 78       	andi	r24, 0x86	; 134
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <vfprintf+0x31a>
    1be4:	b3 94       	inc	r11
    1be6:	a3 fc       	sbrc	r10, 3
    1be8:	10 c0       	rjmp	.+32     	; 0x1c0a <vfprintf+0x33e>
    1bea:	a0 fe       	sbrs	r10, 0
    1bec:	06 c0       	rjmp	.+12     	; 0x1bfa <vfprintf+0x32e>
    1bee:	b2 14       	cp	r11, r2
    1bf0:	80 f4       	brcc	.+32     	; 0x1c12 <vfprintf+0x346>
    1bf2:	28 0c       	add	r2, r8
    1bf4:	92 2c       	mov	r9, r2
    1bf6:	9b 18       	sub	r9, r11
    1bf8:	0d c0       	rjmp	.+26     	; 0x1c14 <vfprintf+0x348>
    1bfa:	b2 14       	cp	r11, r2
    1bfc:	58 f4       	brcc	.+22     	; 0x1c14 <vfprintf+0x348>
    1bfe:	b6 01       	movw	r22, r12
    1c00:	80 e2       	ldi	r24, 0x20	; 32
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	76 d0       	rcall	.+236    	; 0x1cf2 <fputc>
    1c06:	b3 94       	inc	r11
    1c08:	f8 cf       	rjmp	.-16     	; 0x1bfa <vfprintf+0x32e>
    1c0a:	b2 14       	cp	r11, r2
    1c0c:	18 f4       	brcc	.+6      	; 0x1c14 <vfprintf+0x348>
    1c0e:	2b 18       	sub	r2, r11
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <vfprintf+0x34a>
    1c12:	98 2c       	mov	r9, r8
    1c14:	21 2c       	mov	r2, r1
    1c16:	a4 fe       	sbrs	r10, 4
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <vfprintf+0x36c>
    1c1a:	b6 01       	movw	r22, r12
    1c1c:	80 e3       	ldi	r24, 0x30	; 48
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	68 d0       	rcall	.+208    	; 0x1cf2 <fputc>
    1c22:	a2 fe       	sbrs	r10, 2
    1c24:	16 c0       	rjmp	.+44     	; 0x1c52 <vfprintf+0x386>
    1c26:	a1 fc       	sbrc	r10, 1
    1c28:	03 c0       	rjmp	.+6      	; 0x1c30 <vfprintf+0x364>
    1c2a:	88 e7       	ldi	r24, 0x78	; 120
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <vfprintf+0x368>
    1c30:	88 e5       	ldi	r24, 0x58	; 88
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	b6 01       	movw	r22, r12
    1c36:	0c c0       	rjmp	.+24     	; 0x1c50 <vfprintf+0x384>
    1c38:	8a 2d       	mov	r24, r10
    1c3a:	86 78       	andi	r24, 0x86	; 134
    1c3c:	51 f0       	breq	.+20     	; 0x1c52 <vfprintf+0x386>
    1c3e:	a1 fe       	sbrs	r10, 1
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <vfprintf+0x37a>
    1c42:	8b e2       	ldi	r24, 0x2B	; 43
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <vfprintf+0x37c>
    1c46:	80 e2       	ldi	r24, 0x20	; 32
    1c48:	a7 fc       	sbrc	r10, 7
    1c4a:	8d e2       	ldi	r24, 0x2D	; 45
    1c4c:	b6 01       	movw	r22, r12
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	50 d0       	rcall	.+160    	; 0x1cf2 <fputc>
    1c52:	89 14       	cp	r8, r9
    1c54:	30 f4       	brcc	.+12     	; 0x1c62 <vfprintf+0x396>
    1c56:	b6 01       	movw	r22, r12
    1c58:	80 e3       	ldi	r24, 0x30	; 48
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	4a d0       	rcall	.+148    	; 0x1cf2 <fputc>
    1c5e:	9a 94       	dec	r9
    1c60:	f8 cf       	rjmp	.-16     	; 0x1c52 <vfprintf+0x386>
    1c62:	8a 94       	dec	r8
    1c64:	f3 01       	movw	r30, r6
    1c66:	e8 0d       	add	r30, r8
    1c68:	f1 1d       	adc	r31, r1
    1c6a:	80 81       	ld	r24, Z
    1c6c:	b6 01       	movw	r22, r12
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	40 d0       	rcall	.+128    	; 0x1cf2 <fputc>
    1c72:	81 10       	cpse	r8, r1
    1c74:	f6 cf       	rjmp	.-20     	; 0x1c62 <vfprintf+0x396>
    1c76:	22 20       	and	r2, r2
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <vfprintf+0x3b0>
    1c7a:	4e ce       	rjmp	.-868    	; 0x1918 <vfprintf+0x4c>
    1c7c:	b6 01       	movw	r22, r12
    1c7e:	80 e2       	ldi	r24, 0x20	; 32
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	37 d0       	rcall	.+110    	; 0x1cf2 <fputc>
    1c84:	2a 94       	dec	r2
    1c86:	f7 cf       	rjmp	.-18     	; 0x1c76 <vfprintf+0x3aa>
    1c88:	f6 01       	movw	r30, r12
    1c8a:	86 81       	ldd	r24, Z+6	; 0x06
    1c8c:	97 81       	ldd	r25, Z+7	; 0x07
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <vfprintf+0x3c8>
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	9f ef       	ldi	r25, 0xFF	; 255
    1c94:	2b 96       	adiw	r28, 0x0b	; 11
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	bf 90       	pop	r11
    1cb2:	af 90       	pop	r10
    1cb4:	9f 90       	pop	r9
    1cb6:	8f 90       	pop	r8
    1cb8:	7f 90       	pop	r7
    1cba:	6f 90       	pop	r6
    1cbc:	5f 90       	pop	r5
    1cbe:	4f 90       	pop	r4
    1cc0:	3f 90       	pop	r3
    1cc2:	2f 90       	pop	r2
    1cc4:	08 95       	ret

00001cc6 <strnlen_P>:
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	05 90       	lpm	r0, Z+
    1cca:	61 50       	subi	r22, 0x01	; 1
    1ccc:	70 40       	sbci	r23, 0x00	; 0
    1cce:	01 10       	cpse	r0, r1
    1cd0:	d8 f7       	brcc	.-10     	; 0x1cc8 <strnlen_P+0x2>
    1cd2:	80 95       	com	r24
    1cd4:	90 95       	com	r25
    1cd6:	8e 0f       	add	r24, r30
    1cd8:	9f 1f       	adc	r25, r31
    1cda:	08 95       	ret

00001cdc <strnlen>:
    1cdc:	fc 01       	movw	r30, r24
    1cde:	61 50       	subi	r22, 0x01	; 1
    1ce0:	70 40       	sbci	r23, 0x00	; 0
    1ce2:	01 90       	ld	r0, Z+
    1ce4:	01 10       	cpse	r0, r1
    1ce6:	d8 f7       	brcc	.-10     	; 0x1cde <strnlen+0x2>
    1ce8:	80 95       	com	r24
    1cea:	90 95       	com	r25
    1cec:	8e 0f       	add	r24, r30
    1cee:	9f 1f       	adc	r25, r31
    1cf0:	08 95       	ret

00001cf2 <fputc>:
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	fb 01       	movw	r30, r22
    1cfc:	23 81       	ldd	r18, Z+3	; 0x03
    1cfe:	21 fd       	sbrc	r18, 1
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <fputc+0x16>
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	9f ef       	ldi	r25, 0xFF	; 255
    1d06:	2c c0       	rjmp	.+88     	; 0x1d60 <fputc+0x6e>
    1d08:	22 ff       	sbrs	r18, 2
    1d0a:	16 c0       	rjmp	.+44     	; 0x1d38 <fputc+0x46>
    1d0c:	46 81       	ldd	r20, Z+6	; 0x06
    1d0e:	57 81       	ldd	r21, Z+7	; 0x07
    1d10:	24 81       	ldd	r18, Z+4	; 0x04
    1d12:	35 81       	ldd	r19, Z+5	; 0x05
    1d14:	42 17       	cp	r20, r18
    1d16:	53 07       	cpc	r21, r19
    1d18:	44 f4       	brge	.+16     	; 0x1d2a <fputc+0x38>
    1d1a:	a0 81       	ld	r26, Z
    1d1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d1e:	9d 01       	movw	r18, r26
    1d20:	2f 5f       	subi	r18, 0xFF	; 255
    1d22:	3f 4f       	sbci	r19, 0xFF	; 255
    1d24:	31 83       	std	Z+1, r19	; 0x01
    1d26:	20 83       	st	Z, r18
    1d28:	8c 93       	st	X, r24
    1d2a:	26 81       	ldd	r18, Z+6	; 0x06
    1d2c:	37 81       	ldd	r19, Z+7	; 0x07
    1d2e:	2f 5f       	subi	r18, 0xFF	; 255
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	37 83       	std	Z+7, r19	; 0x07
    1d34:	26 83       	std	Z+6, r18	; 0x06
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <fputc+0x6e>
    1d38:	8b 01       	movw	r16, r22
    1d3a:	ec 01       	movw	r28, r24
    1d3c:	fb 01       	movw	r30, r22
    1d3e:	00 84       	ldd	r0, Z+8	; 0x08
    1d40:	f1 85       	ldd	r31, Z+9	; 0x09
    1d42:	e0 2d       	mov	r30, r0
    1d44:	09 95       	icall
    1d46:	89 2b       	or	r24, r25
    1d48:	e1 f6       	brne	.-72     	; 0x1d02 <fputc+0x10>
    1d4a:	d8 01       	movw	r26, r16
    1d4c:	16 96       	adiw	r26, 0x06	; 6
    1d4e:	8d 91       	ld	r24, X+
    1d50:	9c 91       	ld	r25, X
    1d52:	17 97       	sbiw	r26, 0x07	; 7
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	17 96       	adiw	r26, 0x07	; 7
    1d58:	9c 93       	st	X, r25
    1d5a:	8e 93       	st	-X, r24
    1d5c:	16 97       	sbiw	r26, 0x06	; 6
    1d5e:	ce 01       	movw	r24, r28
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	08 95       	ret

00001d6a <__ultoa_invert>:
    1d6a:	fa 01       	movw	r30, r20
    1d6c:	aa 27       	eor	r26, r26
    1d6e:	28 30       	cpi	r18, 0x08	; 8
    1d70:	51 f1       	breq	.+84     	; 0x1dc6 <__ultoa_invert+0x5c>
    1d72:	20 31       	cpi	r18, 0x10	; 16
    1d74:	81 f1       	breq	.+96     	; 0x1dd6 <__ultoa_invert+0x6c>
    1d76:	e8 94       	clt
    1d78:	6f 93       	push	r22
    1d7a:	6e 7f       	andi	r22, 0xFE	; 254
    1d7c:	6e 5f       	subi	r22, 0xFE	; 254
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	8f 4f       	sbci	r24, 0xFF	; 255
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	af 4f       	sbci	r26, 0xFF	; 255
    1d86:	b1 e0       	ldi	r27, 0x01	; 1
    1d88:	3e d0       	rcall	.+124    	; 0x1e06 <__ultoa_invert+0x9c>
    1d8a:	b4 e0       	ldi	r27, 0x04	; 4
    1d8c:	3c d0       	rcall	.+120    	; 0x1e06 <__ultoa_invert+0x9c>
    1d8e:	67 0f       	add	r22, r23
    1d90:	78 1f       	adc	r23, r24
    1d92:	89 1f       	adc	r24, r25
    1d94:	9a 1f       	adc	r25, r26
    1d96:	a1 1d       	adc	r26, r1
    1d98:	68 0f       	add	r22, r24
    1d9a:	79 1f       	adc	r23, r25
    1d9c:	8a 1f       	adc	r24, r26
    1d9e:	91 1d       	adc	r25, r1
    1da0:	a1 1d       	adc	r26, r1
    1da2:	6a 0f       	add	r22, r26
    1da4:	71 1d       	adc	r23, r1
    1da6:	81 1d       	adc	r24, r1
    1da8:	91 1d       	adc	r25, r1
    1daa:	a1 1d       	adc	r26, r1
    1dac:	20 d0       	rcall	.+64     	; 0x1dee <__ultoa_invert+0x84>
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <__ultoa_invert+0x48>
    1db0:	68 94       	set
    1db2:	3f 91       	pop	r19
    1db4:	2a e0       	ldi	r18, 0x0A	; 10
    1db6:	26 9f       	mul	r18, r22
    1db8:	11 24       	eor	r1, r1
    1dba:	30 19       	sub	r19, r0
    1dbc:	30 5d       	subi	r19, 0xD0	; 208
    1dbe:	31 93       	st	Z+, r19
    1dc0:	de f6       	brtc	.-74     	; 0x1d78 <__ultoa_invert+0xe>
    1dc2:	cf 01       	movw	r24, r30
    1dc4:	08 95       	ret
    1dc6:	46 2f       	mov	r20, r22
    1dc8:	47 70       	andi	r20, 0x07	; 7
    1dca:	40 5d       	subi	r20, 0xD0	; 208
    1dcc:	41 93       	st	Z+, r20
    1dce:	b3 e0       	ldi	r27, 0x03	; 3
    1dd0:	0f d0       	rcall	.+30     	; 0x1df0 <__ultoa_invert+0x86>
    1dd2:	c9 f7       	brne	.-14     	; 0x1dc6 <__ultoa_invert+0x5c>
    1dd4:	f6 cf       	rjmp	.-20     	; 0x1dc2 <__ultoa_invert+0x58>
    1dd6:	46 2f       	mov	r20, r22
    1dd8:	4f 70       	andi	r20, 0x0F	; 15
    1dda:	40 5d       	subi	r20, 0xD0	; 208
    1ddc:	4a 33       	cpi	r20, 0x3A	; 58
    1dde:	18 f0       	brcs	.+6      	; 0x1de6 <__ultoa_invert+0x7c>
    1de0:	49 5d       	subi	r20, 0xD9	; 217
    1de2:	31 fd       	sbrc	r19, 1
    1de4:	40 52       	subi	r20, 0x20	; 32
    1de6:	41 93       	st	Z+, r20
    1de8:	02 d0       	rcall	.+4      	; 0x1dee <__ultoa_invert+0x84>
    1dea:	a9 f7       	brne	.-22     	; 0x1dd6 <__ultoa_invert+0x6c>
    1dec:	ea cf       	rjmp	.-44     	; 0x1dc2 <__ultoa_invert+0x58>
    1dee:	b4 e0       	ldi	r27, 0x04	; 4
    1df0:	a6 95       	lsr	r26
    1df2:	97 95       	ror	r25
    1df4:	87 95       	ror	r24
    1df6:	77 95       	ror	r23
    1df8:	67 95       	ror	r22
    1dfa:	ba 95       	dec	r27
    1dfc:	c9 f7       	brne	.-14     	; 0x1df0 <__ultoa_invert+0x86>
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	61 05       	cpc	r22, r1
    1e02:	71 05       	cpc	r23, r1
    1e04:	08 95       	ret
    1e06:	9b 01       	movw	r18, r22
    1e08:	ac 01       	movw	r20, r24
    1e0a:	0a 2e       	mov	r0, r26
    1e0c:	06 94       	lsr	r0
    1e0e:	57 95       	ror	r21
    1e10:	47 95       	ror	r20
    1e12:	37 95       	ror	r19
    1e14:	27 95       	ror	r18
    1e16:	ba 95       	dec	r27
    1e18:	c9 f7       	brne	.-14     	; 0x1e0c <__ultoa_invert+0xa2>
    1e1a:	62 0f       	add	r22, r18
    1e1c:	73 1f       	adc	r23, r19
    1e1e:	84 1f       	adc	r24, r20
    1e20:	95 1f       	adc	r25, r21
    1e22:	a0 1d       	adc	r26, r0
    1e24:	08 95       	ret

00001e26 <_exit>:
    1e26:	f8 94       	cli

00001e28 <__stop_program>:
    1e28:	ff cf       	rjmp	.-2      	; 0x1e28 <__stop_program>
