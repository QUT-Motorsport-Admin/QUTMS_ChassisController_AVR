
cc_merge2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000072c  00800200  00002256  000022ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  0080092c  0080092c  00002a16  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00002ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fd1  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018e8  00000000  00000000  00007e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024d5  00000000  00000000  0000973d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c80  00000000  00000000  0000bc14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000145d  00000000  00000000  0000c894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004aa2  00000000  00000000  0000dcf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  00012793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c0       	rjmp	.+492    	; 0x1ee <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_1>
       8:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_2>
       c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
      12:	00 00       	nop
      14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
      16:	00 00       	nop
      18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_9>
      28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
      36:	00 00       	nop
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_17>
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_21>
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_25>
      68:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__vector_26>
      6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
      6e:	00 00       	nop
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__vector_36>
      94:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__vector_37>
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
      be:	00 00       	nop
      c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a8 c0       	rjmp	.+336    	; 0x22a <__bad_interrupt>
      da:	00 00       	nop
      dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
      de:	00 00       	nop
      e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	10 02       	muls	r17, r16
      e6:	83 04       	cpc	r8, r3
      e8:	cd 02       	muls	r28, r29
      ea:	e8 02       	muls	r30, r24
      ec:	03 03       	mulsu	r16, r19
      ee:	1e 03       	fmul	r17, r22
      f0:	39 03       	fmul	r19, r17
      f2:	54 03       	mulsu	r21, r20
      f4:	6f 03       	fmul	r22, r23
      f6:	8a 03       	fmulsu	r16, r18
      f8:	a5 03       	fmuls	r18, r21
      fa:	c0 03       	fmuls	r20, r16
      fc:	db 03       	fmulsu	r21, r19
      fe:	ed 03       	fmulsu	r22, r21
     100:	ff 03       	fmulsu	r23, r23
     102:	11 04       	cpc	r1, r1
     104:	23 04       	cpc	r2, r3
     106:	35 04       	cpc	r3, r5
     108:	50 04       	cpc	r5, r0
     10a:	6a 04       	cpc	r6, r10
     10c:	83 04       	cpc	r8, r3
     10e:	83 04       	cpc	r8, r3
     110:	83 04       	cpc	r8, r3
     112:	83 04       	cpc	r8, r3
     114:	83 04       	cpc	r8, r3
     116:	83 04       	cpc	r8, r3
     118:	83 04       	cpc	r8, r3
     11a:	83 04       	cpc	r8, r3
     11c:	83 04       	cpc	r8, r3
     11e:	83 04       	cpc	r8, r3
     120:	83 04       	cpc	r8, r3
     122:	83 04       	cpc	r8, r3
     124:	83 04       	cpc	r8, r3
     126:	83 04       	cpc	r8, r3
     128:	83 04       	cpc	r8, r3
     12a:	83 04       	cpc	r8, r3
     12c:	83 04       	cpc	r8, r3
     12e:	83 04       	cpc	r8, r3
     130:	83 04       	cpc	r8, r3
     132:	83 04       	cpc	r8, r3
     134:	83 04       	cpc	r8, r3
     136:	83 04       	cpc	r8, r3
     138:	83 04       	cpc	r8, r3
     13a:	83 04       	cpc	r8, r3
     13c:	83 04       	cpc	r8, r3
     13e:	83 04       	cpc	r8, r3
     140:	83 04       	cpc	r8, r3
     142:	83 04       	cpc	r8, r3
     144:	83 04       	cpc	r8, r3
     146:	83 04       	cpc	r8, r3
     148:	83 04       	cpc	r8, r3
     14a:	83 04       	cpc	r8, r3
     14c:	83 04       	cpc	r8, r3
     14e:	83 04       	cpc	r8, r3
     150:	83 04       	cpc	r8, r3
     152:	83 04       	cpc	r8, r3
     154:	83 04       	cpc	r8, r3
     156:	83 04       	cpc	r8, r3
     158:	83 04       	cpc	r8, r3
     15a:	83 04       	cpc	r8, r3
     15c:	83 04       	cpc	r8, r3
     15e:	83 04       	cpc	r8, r3
     160:	83 04       	cpc	r8, r3
     162:	83 04       	cpc	r8, r3
     164:	83 04       	cpc	r8, r3
     166:	83 04       	cpc	r8, r3
     168:	83 04       	cpc	r8, r3
     16a:	83 04       	cpc	r8, r3
     16c:	83 04       	cpc	r8, r3
     16e:	83 04       	cpc	r8, r3
     170:	83 04       	cpc	r8, r3
     172:	83 04       	cpc	r8, r3
     174:	83 04       	cpc	r8, r3
     176:	83 04       	cpc	r8, r3
     178:	83 04       	cpc	r8, r3
     17a:	83 04       	cpc	r8, r3
     17c:	83 04       	cpc	r8, r3
     17e:	83 04       	cpc	r8, r3
     180:	83 04       	cpc	r8, r3
     182:	83 04       	cpc	r8, r3
     184:	83 04       	cpc	r8, r3
     186:	83 04       	cpc	r8, r3
     188:	83 04       	cpc	r8, r3
     18a:	83 04       	cpc	r8, r3
     18c:	83 04       	cpc	r8, r3
     18e:	83 04       	cpc	r8, r3
     190:	83 04       	cpc	r8, r3
     192:	83 04       	cpc	r8, r3
     194:	83 04       	cpc	r8, r3
     196:	83 04       	cpc	r8, r3
     198:	83 04       	cpc	r8, r3
     19a:	83 04       	cpc	r8, r3
     19c:	83 04       	cpc	r8, r3
     19e:	83 04       	cpc	r8, r3
     1a0:	83 04       	cpc	r8, r3
     1a2:	83 04       	cpc	r8, r3
     1a4:	83 04       	cpc	r8, r3
     1a6:	83 04       	cpc	r8, r3
     1a8:	83 04       	cpc	r8, r3
     1aa:	83 04       	cpc	r8, r3
     1ac:	83 04       	cpc	r8, r3
     1ae:	83 04       	cpc	r8, r3
     1b0:	83 04       	cpc	r8, r3
     1b2:	83 04       	cpc	r8, r3
     1b4:	83 04       	cpc	r8, r3
     1b6:	83 04       	cpc	r8, r3
     1b8:	83 04       	cpc	r8, r3
     1ba:	83 04       	cpc	r8, r3
     1bc:	83 04       	cpc	r8, r3
     1be:	83 04       	cpc	r8, r3
     1c0:	83 04       	cpc	r8, r3
     1c2:	2b 02       	muls	r18, r27
     1c4:	46 02       	muls	r20, r22
     1c6:	83 04       	cpc	r8, r3
     1c8:	83 04       	cpc	r8, r3
     1ca:	83 04       	cpc	r8, r3
     1cc:	83 04       	cpc	r8, r3
     1ce:	83 04       	cpc	r8, r3
     1d0:	83 04       	cpc	r8, r3
     1d2:	83 04       	cpc	r8, r3
     1d4:	83 04       	cpc	r8, r3
     1d6:	61 02       	muls	r22, r17
     1d8:	7c 02       	muls	r23, r28
     1da:	83 04       	cpc	r8, r3
     1dc:	83 04       	cpc	r8, r3
     1de:	83 04       	cpc	r8, r3
     1e0:	83 04       	cpc	r8, r3
     1e2:	83 04       	cpc	r8, r3
     1e4:	83 04       	cpc	r8, r3
     1e6:	83 04       	cpc	r8, r3
     1e8:	83 04       	cpc	r8, r3
     1ea:	97 02       	muls	r25, r23
     1ec:	b2 02       	muls	r27, r18

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d1 e2       	ldi	r29, 0x21	; 33
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	19 e0       	ldi	r17, 0x09	; 9
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b2 e0       	ldi	r27, 0x02	; 2
     200:	e6 e5       	ldi	r30, 0x56	; 86
     202:	f2 e2       	ldi	r31, 0x22	; 34
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	ac 32       	cpi	r26, 0x2C	; 44
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	2a e0       	ldi	r18, 0x0A	; 10
     216:	ac e2       	ldi	r26, 0x2C	; 44
     218:	b9 e0       	ldi	r27, 0x09	; 9
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a4 33       	cpi	r26, 0x34	; 52
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	9b d7       	rcall	.+3894   	; 0x115c <main>
     226:	0c 94 29 11 	jmp	0x2252	; 0x2252 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <a2dOn>:
// starts conversion, waits until conversion is done, and returns result
unsigned char a2d_8bit()
{
	// do 10-bit conversion and return highest 8 bits
	return a2d_10bit()>>2;			// return ADC MSB byte
}
     22c:	ea e7       	ldi	r30, 0x7A	; 122
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	80 68       	ori	r24, 0x80	; 128
     234:	80 83       	st	Z, r24
     236:	08 95       	ret

00000238 <a2dSetPrescaler>:
     238:	ea e7       	ldi	r30, 0x7A	; 122
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	90 81       	ld	r25, Z
     23e:	98 7f       	andi	r25, 0xF8	; 248
     240:	90 83       	st	Z, r25
     242:	90 81       	ld	r25, Z
     244:	89 2b       	or	r24, r25
     246:	80 83       	st	Z, r24
     248:	08 95       	ret

0000024a <a2dSetReference>:
     24a:	ec e7       	ldi	r30, 0x7C	; 124
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	90 81       	ld	r25, Z
     250:	9c 7f       	andi	r25, 0xFC	; 252
     252:	90 83       	st	Z, r25
     254:	20 81       	ld	r18, Z
     256:	30 e4       	ldi	r19, 0x40	; 64
     258:	83 9f       	mul	r24, r19
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	82 2b       	or	r24, r18
     260:	80 83       	st	Z, r24
     262:	08 95       	ret

00000264 <a2dInit>:
     264:	cf 93       	push	r28
     266:	c6 2f       	mov	r28, r22
     268:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     26c:	ec e7       	ldi	r30, 0x7C	; 124
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	90 81       	ld	r25, Z
     272:	9f 7d       	andi	r25, 0xDF	; 223
     274:	90 83       	st	Z, r25
     276:	e0 df       	rcall	.-64     	; 0x238 <a2dSetPrescaler>
     278:	8c 2f       	mov	r24, r28
     27a:	e7 df       	rcall	.-50     	; 0x24a <a2dSetReference>
     27c:	d7 df       	rcall	.-82     	; 0x22c <a2dOn>
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <a2d_10bitCh>:
// starts conversion, waits until conversion is done, and returns result
// modded for mega1280 by Ant
unsigned short a2d_10bitCh(unsigned char ch)
{
	// set channel
	ADMUX &= ADC_MUX_MASK;	
     282:	ec e7       	ldi	r30, 0x7C	; 124
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	90 81       	ld	r25, Z
     288:	90 7e       	andi	r25, 0xE0	; 224
     28a:	90 83       	st	Z, r25
	
	if (ch > 7) 
     28c:	88 30       	cpi	r24, 0x08	; 8
     28e:	60 f0       	brcs	.+24     	; 0x2a8 <a2d_10bitCh+0x26>
	{
		ADCSRB |= 8;
     290:	eb e7       	ldi	r30, 0x7B	; 123
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	90 81       	ld	r25, Z
     296:	98 60       	ori	r25, 0x08	; 8
     298:	90 83       	st	Z, r25
		ADMUX |= (ch - 8);
     29a:	ec e7       	ldi	r30, 0x7C	; 124
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	90 81       	ld	r25, Z
     2a0:	88 50       	subi	r24, 0x08	; 8
     2a2:	89 2b       	or	r24, r25
     2a4:	80 83       	st	Z, r24
     2a6:	0a c0       	rjmp	.+20     	; 0x2bc <a2d_10bitCh+0x3a>
	}
	else
	{
		ADCSRB &= 247;
     2a8:	eb e7       	ldi	r30, 0x7B	; 123
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	90 81       	ld	r25, Z
     2ae:	97 7f       	andi	r25, 0xF7	; 247
     2b0:	90 83       	st	Z, r25
		ADMUX |= ch;
     2b2:	ec e7       	ldi	r30, 0x7C	; 124
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	90 81       	ld	r25, Z
     2b8:	89 2b       	or	r24, r25
     2ba:	80 83       	st	Z, r24
	}
	
	// ADMUX |= ch;	//comment out this line when using on 16ch parts

	// start conversion
	ADCSRA |= (1<<ADSC);
     2bc:	ea e7       	ldi	r30, 0x7A	; 122
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC)) {} // wait until conversion complete 
     2c6:	80 81       	ld	r24, Z
     2c8:	86 fd       	sbrc	r24, 6
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <a2d_10bitCh+0x44>

	return ADC;                // read ADC (full 10 bits);
     2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// return (8 << ADCH)|(ADCL); // read ADC (full 10 bits);
    // return ADCL;                // read ADC (first 8 bits)
}
     2d4:	08 95       	ret

000002d6 <CAN_send>:
        sendingID|                  // Sending ID, ( First 8 bits, define the device to send to)
        ((uint32_t)type<<18)|       // What sort of command to send
        ((uint32_t)address<<13)|    // Specific address
        status                      // SubID?
    );
}
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	c8 2f       	mov	r28, r24
     2f0:	d6 2f       	mov	r29, r22
     2f2:	6a 01       	movw	r12, r20
     2f4:	48 01       	movw	r8, r16
     2f6:	59 01       	movw	r10, r18
     2f8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <MCP2515_findFreeTxBuffer>
     2fc:	85 01       	movw	r16, r10
     2fe:	74 01       	movw	r14, r8
     300:	96 01       	movw	r18, r12
     302:	4d 2f       	mov	r20, r29
     304:	68 2f       	mov	r22, r24
     306:	8c 2f       	mov	r24, r28
     308:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <MCP2515_TX>
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	df 90       	pop	r13
     31a:	cf 90       	pop	r12
     31c:	bf 90       	pop	r11
     31e:	af 90       	pop	r10
     320:	9f 90       	pop	r9
     322:	8f 90       	pop	r8
     324:	08 95       	ret

00000326 <CAN_pull_packet>:

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
     326:	af 92       	push	r10
     328:	bf 92       	push	r11
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	c8 2f       	mov	r28, r24
     33a:	7b 01       	movw	r14, r22
     33c:	6a 01       	movw	r12, r20
     33e:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
     340:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
     344:	82 95       	swap	r24
     346:	86 95       	lsr	r24
     348:	86 95       	lsr	r24
     34a:	83 70       	andi	r24, 0x03	; 3
     34c:	82 30       	cpi	r24, 0x02	; 2
     34e:	61 f0       	breq	.+24     	; 0x368 <CAN_pull_packet+0x42>
     350:	83 30       	cpi	r24, 0x03	; 3
     352:	91 f0       	breq	.+36     	; 0x378 <CAN_pull_packet+0x52>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	e9 f4       	brne	.+58     	; 0x392 <CAN_pull_packet+0x6c>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     358:	85 01       	movw	r16, r10
     35a:	96 01       	movw	r18, r12
     35c:	a7 01       	movw	r20, r14
     35e:	61 e6       	ldi	r22, 0x61	; 97
     360:	8c 2f       	mov	r24, r28
     362:	0e 94 ce 0b 	call	0x179c	; 0x179c <MCP2515_PullCanPacket>
			break;
     366:	15 c0       	rjmp	.+42     	; 0x392 <CAN_pull_packet+0x6c>
		case 2: // Message in RXB1=
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
     368:	85 01       	movw	r16, r10
     36a:	96 01       	movw	r18, r12
     36c:	a7 01       	movw	r20, r14
     36e:	61 e7       	ldi	r22, 0x71	; 113
     370:	8c 2f       	mov	r24, r28
     372:	0e 94 ce 0b 	call	0x179c	; 0x179c <MCP2515_PullCanPacket>
			break;
     376:	0d c0       	rjmp	.+26     	; 0x392 <CAN_pull_packet+0x6c>
		case 3: // Message in both buffers
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     378:	85 01       	movw	r16, r10
     37a:	96 01       	movw	r18, r12
     37c:	a7 01       	movw	r20, r14
     37e:	61 e6       	ldi	r22, 0x61	; 97
     380:	8c 2f       	mov	r24, r28
     382:	0e 94 ce 0b 	call	0x179c	; 0x179c <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
     386:	96 01       	movw	r18, r12
     388:	a7 01       	movw	r20, r14
     38a:	61 e7       	ldi	r22, 0x71	; 113
     38c:	8c 2f       	mov	r24, r28
     38e:	0e 94 ce 0b 	call	0x179c	; 0x179c <MCP2515_PullCanPacket>
			break;
		default:
			break;
	}
}
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	08 95       	ret

000003a6 <send_error_message>:
 * Returns: none
 * 
 * Formats a 50-character long log message, and sends it over UART.
 * */
void send_error_message(char start[], char message[], uint16_t part_number) 
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	18 2f       	mov	r17, r24
     3b0:	09 2f       	mov	r16, r25
	unsigned char *messageWithNumber;
	unsigned char *errorData;
	
	// Format error message with part number if given
	snprintf(messageWithNumber, MAX_ERROR_MESSAGE_LENGTH, message, part_number);
     3b2:	5f 93       	push	r21
     3b4:	4f 93       	push	r20
     3b6:	7f 93       	push	r23
     3b8:	6f 93       	push	r22
     3ba:	1f 92       	push	r1
     3bc:	88 e2       	ldi	r24, 0x28	; 40
     3be:	8f 93       	push	r24
     3c0:	d0 e0       	ldi	r29, 0x00	; 0
     3c2:	df 93       	push	r29
     3c4:	c0 e0       	ldi	r28, 0x00	; 0
     3c6:	cf 93       	push	r28
     3c8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <snprintf>

	// Create error data
	snprintf(errorData, MAX_ERROR_MESSAGE_LENGTH + 10, "%s %s", start, messageWithNumber);
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	85 e3       	ldi	r24, 0x35	; 53
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	1f 92       	push	r1
     3de:	82 e3       	ldi	r24, 0x32	; 50
     3e0:	8f 93       	push	r24
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <snprintf>
	
	// Send error data over UART
	UART_sendPacket(errorData, MAX_ERROR_MESSAGE_LENGTH + 10);
     3ea:	62 e3       	ldi	r22, 0x32	; 50
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	8d 2f       	mov	r24, r29
     3f0:	9c 2f       	mov	r25, r28
     3f2:	35 d6       	rcall	.+3178   	; 0x105e <UART_sendPacket>
}
     3f4:	8d b7       	in	r24, 0x3d	; 61
     3f6:	9e b7       	in	r25, 0x3e	; 62
     3f8:	42 96       	adiw	r24, 0x12	; 18
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	9e bf       	out	0x3e, r25	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	8d bf       	out	0x3d, r24	; 61
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	08 95       	ret

0000040e <throw_error_code_with_number>:
 * Generates an error message, and takes the necessary actions depending on the severity and error
 * 
 * */
void throw_error_code_with_number(uint16_t severity, uint16_t error_code, uint16_t part_number) 
{
	switch (error_code) {
     40e:	65 38       	cpi	r22, 0x85	; 133
     410:	71 05       	cpc	r23, r1
     412:	08 f0       	brcs	.+2      	; 0x416 <throw_error_code_with_number+0x8>
     414:	78 c2       	rjmp	.+1264   	; 0x906 <throw_error_code_with_number+0x4f8>
     416:	fb 01       	movw	r30, r22
     418:	ee 58       	subi	r30, 0x8E	; 142
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__tablejump2__>
		// 		break;
		//     }			
		// break;

        case ERROR_GENERAL:					
			switch (severity) {
     420:	82 30       	cpi	r24, 0x02	; 2
     422:	91 05       	cpc	r25, r1
     424:	61 f0       	breq	.+24     	; 0x43e <throw_error_code_with_number+0x30>
     426:	83 30       	cpi	r24, 0x03	; 3
     428:	91 05       	cpc	r25, r1
     42a:	79 f0       	breq	.+30     	; 0x44a <throw_error_code_with_number+0x3c>
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	09 f0       	breq	.+2      	; 0x432 <throw_error_code_with_number+0x24>
     430:	6a c2       	rjmp	.+1236   	; 0x906 <throw_error_code_with_number+0x4f8>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Error", part_number);
     432:	6b e3       	ldi	r22, 0x3B	; 59
     434:	72 e0       	ldi	r23, 0x02	; 2
     436:	81 e4       	ldi	r24, 0x41	; 65
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	b5 cf       	rjmp	.-150    	; 0x3a6 <send_error_message>
				// Additional Info Handling
				break;
     43c:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Error!", part_number);
     43e:	66 e4       	ldi	r22, 0x46	; 70
     440:	72 e0       	ldi	r23, 0x02	; 2
     442:	8d e4       	ldi	r24, 0x4D	; 77
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	af cf       	rjmp	.-162    	; 0x3a6 <send_error_message>
				// Additional Warning Handling
				break;
     448:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "ERROR", part_number);
     44a:	67 e5       	ldi	r22, 0x57	; 87
     44c:	72 e0       	ldi	r23, 0x02	; 2
     44e:	8d e5       	ldi	r24, 0x5D	; 93
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	a9 cf       	rjmp	.-174    	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     454:	08 95       	ret

        // CANBUS based errors
        // --------------------------------------------------------------------

        case ERROR_CANBUS_1_NO_RESPONSE:					
			switch (severity) {
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	91 05       	cpc	r25, r1
     45a:	61 f0       	breq	.+24     	; 0x474 <throw_error_code_with_number+0x66>
     45c:	83 30       	cpi	r24, 0x03	; 3
     45e:	91 05       	cpc	r25, r1
     460:	79 f0       	breq	.+30     	; 0x480 <throw_error_code_with_number+0x72>
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	09 f0       	breq	.+2      	; 0x468 <throw_error_code_with_number+0x5a>
     466:	4f c2       	rjmp	.+1182   	; 0x906 <throw_error_code_with_number+0x4f8>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 No Response", part_number);
     468:	67 e6       	ldi	r22, 0x67	; 103
     46a:	72 e0       	ldi	r23, 0x02	; 2
     46c:	81 e4       	ldi	r24, 0x41	; 65
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	9a cf       	rjmp	.-204    	; 0x3a6 <send_error_message>
				// Additional Info Handling
				break;
     472:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 No Response!", part_number);
     474:	6c e7       	ldi	r22, 0x7C	; 124
     476:	72 e0       	ldi	r23, 0x02	; 2
     478:	8d e4       	ldi	r24, 0x4D	; 77
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	94 cf       	rjmp	.-216    	; 0x3a6 <send_error_message>
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL NO RESPONSE", part_number);
     47e:	08 95       	ret
     480:	62 e9       	ldi	r22, 0x92	; 146
     482:	72 e0       	ldi	r23, 0x02	; 2
     484:	8d e5       	ldi	r24, 0x5D	; 93
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	8e cf       	rjmp	.-228    	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     48a:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_1_RESPONSE_MALFORMED:					
			switch (severity) {
     48c:	82 30       	cpi	r24, 0x02	; 2
     48e:	91 05       	cpc	r25, r1
     490:	61 f0       	breq	.+24     	; 0x4aa <throw_error_code_with_number+0x9c>
     492:	83 30       	cpi	r24, 0x03	; 3
     494:	91 05       	cpc	r25, r1
     496:	79 f0       	breq	.+30     	; 0x4b6 <throw_error_code_with_number+0xa8>
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	09 f0       	breq	.+2      	; 0x49e <throw_error_code_with_number+0x90>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 Malformed Packet", part_number);
     49c:	34 c2       	rjmp	.+1128   	; 0x906 <throw_error_code_with_number+0x4f8>
     49e:	60 eb       	ldi	r22, 0xB0	; 176
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	81 e4       	ldi	r24, 0x41	; 65
     4a4:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     4a6:	7f cf       	rjmp	.-258    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 Malformed Packet!", part_number);
     4a8:	08 95       	ret
     4aa:	6a ec       	ldi	r22, 0xCA	; 202
     4ac:	72 e0       	ldi	r23, 0x02	; 2
     4ae:	8d e4       	ldi	r24, 0x4D	; 77
     4b0:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4b2:	79 cf       	rjmp	.-270    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL MALFORMED PACKET", part_number);
     4b4:	08 95       	ret
     4b6:	65 ee       	ldi	r22, 0xE5	; 229
     4b8:	72 e0       	ldi	r23, 0x02	; 2
     4ba:	8d e5       	ldi	r24, 0x5D	; 93
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	73 cf       	rjmp	.-282    	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     4c0:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_NO_RESPONSE:					
			switch (severity) {
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	91 05       	cpc	r25, r1
     4c6:	61 f0       	breq	.+24     	; 0x4e0 <throw_error_code_with_number+0xd2>
     4c8:	83 30       	cpi	r24, 0x03	; 3
     4ca:	91 05       	cpc	r25, r1
     4cc:	79 f0       	breq	.+30     	; 0x4ec <throw_error_code_with_number+0xde>
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <throw_error_code_with_number+0xc6>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 No Response", part_number);
     4d2:	19 c2       	rjmp	.+1074   	; 0x906 <throw_error_code_with_number+0x4f8>
     4d4:	68 e0       	ldi	r22, 0x08	; 8
     4d6:	73 e0       	ldi	r23, 0x03	; 3
     4d8:	81 e4       	ldi	r24, 0x41	; 65
     4da:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     4dc:	64 cf       	rjmp	.-312    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 No Response!", part_number);
     4de:	08 95       	ret
     4e0:	6d e1       	ldi	r22, 0x1D	; 29
     4e2:	73 e0       	ldi	r23, 0x03	; 3
     4e4:	8d e4       	ldi	r24, 0x4D	; 77
     4e6:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4e8:	5e cf       	rjmp	.-324    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL NO RESPONSE", part_number);
     4ea:	08 95       	ret
     4ec:	63 e3       	ldi	r22, 0x33	; 51
     4ee:	73 e0       	ldi	r23, 0x03	; 3
     4f0:	8d e5       	ldi	r24, 0x5D	; 93
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	58 cf       	rjmp	.-336    	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     4f6:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_RESPONSE_MALFORMED:					
			switch (severity) {
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	91 05       	cpc	r25, r1
     4fc:	61 f0       	breq	.+24     	; 0x516 <throw_error_code_with_number+0x108>
     4fe:	83 30       	cpi	r24, 0x03	; 3
     500:	91 05       	cpc	r25, r1
     502:	79 f0       	breq	.+30     	; 0x522 <throw_error_code_with_number+0x114>
     504:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 Malformed Packet", part_number);
     506:	09 f0       	breq	.+2      	; 0x50a <throw_error_code_with_number+0xfc>
     508:	fe c1       	rjmp	.+1020   	; 0x906 <throw_error_code_with_number+0x4f8>
     50a:	61 e5       	ldi	r22, 0x51	; 81
     50c:	73 e0       	ldi	r23, 0x03	; 3
     50e:	81 e4       	ldi	r24, 0x41	; 65
				// Additional Info Handling
				break;
     510:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 Malformed Packet!", part_number);
     512:	49 cf       	rjmp	.-366    	; 0x3a6 <send_error_message>
     514:	08 95       	ret
     516:	6b e6       	ldi	r22, 0x6B	; 107
     518:	73 e0       	ldi	r23, 0x03	; 3
     51a:	8d e4       	ldi	r24, 0x4D	; 77
     51c:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     51e:	43 cf       	rjmp	.-378    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL MALFORMED PACKET", part_number);
     520:	08 95       	ret
     522:	66 e8       	ldi	r22, 0x86	; 134
     524:	73 e0       	ldi	r23, 0x03	; 3
     526:	8d e5       	ldi	r24, 0x5D	; 93
     528:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     52a:	3d cf       	rjmp	.-390    	; 0x3a6 <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_NO_RESPONSE:					
			switch (severity) {
     52c:	08 95       	ret
     52e:	82 30       	cpi	r24, 0x02	; 2
     530:	91 05       	cpc	r25, r1
     532:	61 f0       	breq	.+24     	; 0x54c <throw_error_code_with_number+0x13e>
     534:	83 30       	cpi	r24, 0x03	; 3
     536:	91 05       	cpc	r25, r1
     538:	79 f0       	breq	.+30     	; 0x558 <throw_error_code_with_number+0x14a>
     53a:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 No Response", part_number);
     53c:	09 f0       	breq	.+2      	; 0x540 <throw_error_code_with_number+0x132>
     53e:	e3 c1       	rjmp	.+966    	; 0x906 <throw_error_code_with_number+0x4f8>
     540:	69 ea       	ldi	r22, 0xA9	; 169
     542:	73 e0       	ldi	r23, 0x03	; 3
     544:	81 e4       	ldi	r24, 0x41	; 65
				// Additional Info Handling
				break;
     546:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 No Response!", part_number);
     548:	2e cf       	rjmp	.-420    	; 0x3a6 <send_error_message>
     54a:	08 95       	ret
     54c:	6e eb       	ldi	r22, 0xBE	; 190
     54e:	73 e0       	ldi	r23, 0x03	; 3
     550:	8d e4       	ldi	r24, 0x4D	; 77
     552:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     554:	28 cf       	rjmp	.-432    	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL NO RESPONSE", part_number);
     556:	08 95       	ret
     558:	64 ed       	ldi	r22, 0xD4	; 212
     55a:	73 e0       	ldi	r23, 0x03	; 3
     55c:	8d e5       	ldi	r24, 0x5D	; 93
     55e:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     560:	22 cf       	rjmp	.-444    	; 0x3a6 <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_RESPONSE_MALFORMED:					
			switch (severity) {
     562:	08 95       	ret
     564:	82 30       	cpi	r24, 0x02	; 2
     566:	91 05       	cpc	r25, r1
     568:	61 f0       	breq	.+24     	; 0x582 <throw_error_code_with_number+0x174>
     56a:	83 30       	cpi	r24, 0x03	; 3
     56c:	91 05       	cpc	r25, r1
     56e:	79 f0       	breq	.+30     	; 0x58e <throw_error_code_with_number+0x180>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 Malformed Packet", part_number);
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	09 f0       	breq	.+2      	; 0x576 <throw_error_code_with_number+0x168>
     574:	c8 c1       	rjmp	.+912    	; 0x906 <throw_error_code_with_number+0x4f8>
     576:	62 ef       	ldi	r22, 0xF2	; 242
     578:	73 e0       	ldi	r23, 0x03	; 3
     57a:	81 e4       	ldi	r24, 0x41	; 65
				// Additional Info Handling
				break;
     57c:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 Malformed Packet!", part_number);
     57e:	13 cf       	rjmp	.-474    	; 0x3a6 <send_error_message>
     580:	08 95       	ret
     582:	6c e0       	ldi	r22, 0x0C	; 12
     584:	74 e0       	ldi	r23, 0x04	; 4
     586:	8d e4       	ldi	r24, 0x4D	; 77
     588:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL MALFORMED PACKET", part_number);
     58a:	0d cf       	rjmp	.-486    	; 0x3a6 <send_error_message>
     58c:	08 95       	ret
     58e:	67 e2       	ldi	r22, 0x27	; 39
     590:	74 e0       	ldi	r23, 0x04	; 4
     592:	8d e5       	ldi	r24, 0x5D	; 93
				// Additional Error Handling
				break;
     594:	92 e0       	ldi	r25, 0x02	; 2

        // Sensor based errors
        // --------------------------------------------------------------------

		case ERROR_GEARBOX_TEMPERATURE_LOW:					
			switch (severity) {
     596:	07 cf       	rjmp	.-498    	; 0x3a6 <send_error_message>
     598:	08 95       	ret
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	91 05       	cpc	r25, r1
     59e:	61 f0       	breq	.+24     	; 0x5b8 <throw_error_code_with_number+0x1aa>
     5a0:	83 30       	cpi	r24, 0x03	; 3
     5a2:	91 05       	cpc	r25, r1
     5a4:	79 f0       	breq	.+30     	; 0x5c4 <throw_error_code_with_number+0x1b6>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	09 f0       	breq	.+2      	; 0x5ac <throw_error_code_with_number+0x19e>
     5aa:	ad c1       	rjmp	.+858    	; 0x906 <throw_error_code_with_number+0x4f8>
     5ac:	6a e4       	ldi	r22, 0x4A	; 74
     5ae:	74 e0       	ldi	r23, 0x04	; 4
     5b0:	81 e4       	ldi	r24, 0x41	; 65
				// Additional Info Handling
				break;
     5b2:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally Low!", part_number);
     5b4:	f8 ce       	rjmp	.-528    	; 0x3a6 <send_error_message>
     5b6:	08 95       	ret
     5b8:	68 e6       	ldi	r22, 0x68	; 104
     5ba:	74 e0       	ldi	r23, 0x04	; 4
     5bc:	8d e4       	ldi	r24, 0x4D	; 77
				// Additional Warning Handling
				break;
     5be:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY LOW", part_number);
     5c0:	f2 ce       	rjmp	.-540    	; 0x3a6 <send_error_message>
     5c2:	08 95       	ret
     5c4:	6f e8       	ldi	r22, 0x8F	; 143
     5c6:	74 e0       	ldi	r23, 0x04	; 4
     5c8:	8d e5       	ldi	r24, 0x5D	; 93
				// Additional Error Handling
				break;
     5ca:	92 e0       	ldi	r25, 0x02	; 2
			}			
		break;

		case ERROR_GEARBOX_TEMPERATURE_HIGH:					
			switch (severity) {
     5cc:	ec ce       	rjmp	.-552    	; 0x3a6 <send_error_message>
     5ce:	08 95       	ret
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	91 05       	cpc	r25, r1
     5d4:	61 f0       	breq	.+24     	; 0x5ee <throw_error_code_with_number+0x1e0>
     5d6:	83 30       	cpi	r24, 0x03	; 3
     5d8:	91 05       	cpc	r25, r1
     5da:	79 f0       	breq	.+30     	; 0x5fa <throw_error_code_with_number+0x1ec>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	09 f0       	breq	.+2      	; 0x5e2 <throw_error_code_with_number+0x1d4>
     5e0:	92 c1       	rjmp	.+804    	; 0x906 <throw_error_code_with_number+0x4f8>
     5e2:	6a e4       	ldi	r22, 0x4A	; 74
     5e4:	74 e0       	ldi	r23, 0x04	; 4
     5e6:	81 e4       	ldi	r24, 0x41	; 65
				// Additional Info Handling
				break;
     5e8:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally High!", part_number);
     5ea:	dd ce       	rjmp	.-582    	; 0x3a6 <send_error_message>
     5ec:	08 95       	ret
     5ee:	65 eb       	ldi	r22, 0xB5	; 181
     5f0:	74 e0       	ldi	r23, 0x04	; 4
     5f2:	8d e4       	ldi	r24, 0x4D	; 77
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY HIGH", part_number);
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	d7 ce       	rjmp	.-594    	; 0x3a6 <send_error_message>
     5f8:	08 95       	ret
     5fa:	6d ed       	ldi	r22, 0xDD	; 221
     5fc:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Error Handling
				break;
     5fe:	8d e5       	ldi	r24, 0x5D	; 93
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_LOW:					
			switch (severity) {
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	d1 ce       	rjmp	.-606    	; 0x3a6 <send_error_message>
     604:	08 95       	ret
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	91 05       	cpc	r25, r1
     60a:	61 f0       	breq	.+24     	; 0x624 <throw_error_code_with_number+0x216>
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	91 05       	cpc	r25, r1
     610:	79 f0       	breq	.+30     	; 0x630 <throw_error_code_with_number+0x222>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	09 f0       	breq	.+2      	; 0x618 <throw_error_code_with_number+0x20a>
     616:	77 c1       	rjmp	.+750    	; 0x906 <throw_error_code_with_number+0x4f8>
     618:	64 e0       	ldi	r22, 0x04	; 4
     61a:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Info Handling
				break;
     61c:	81 e4       	ldi	r24, 0x41	; 65

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally Low!", part_number);
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	c2 ce       	rjmp	.-636    	; 0x3a6 <send_error_message>
     622:	08 95       	ret
     624:	63 e2       	ldi	r22, 0x23	; 35
     626:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;
     628:	8d e4       	ldi	r24, 0x4D	; 77

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY LOW", part_number);
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	bc ce       	rjmp	.-648    	; 0x3a6 <send_error_message>
     62e:	08 95       	ret
     630:	6b e4       	ldi	r22, 0x4B	; 75
     632:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     634:	8d e5       	ldi	r24, 0x5D	; 93
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_HIGH:					
			switch (severity) {
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	b6 ce       	rjmp	.-660    	; 0x3a6 <send_error_message>
     63a:	08 95       	ret
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	91 05       	cpc	r25, r1
     640:	61 f0       	breq	.+24     	; 0x65a <throw_error_code_with_number+0x24c>
     642:	83 30       	cpi	r24, 0x03	; 3
     644:	91 05       	cpc	r25, r1
     646:	79 f0       	breq	.+30     	; 0x666 <throw_error_code_with_number+0x258>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	09 f0       	breq	.+2      	; 0x64e <throw_error_code_with_number+0x240>
     64c:	5c c1       	rjmp	.+696    	; 0x906 <throw_error_code_with_number+0x4f8>
     64e:	64 e0       	ldi	r22, 0x04	; 4
     650:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Info Handling
				break;
     652:	81 e4       	ldi	r24, 0x41	; 65

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally High!", part_number);
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	a7 ce       	rjmp	.-690    	; 0x3a6 <send_error_message>
     658:	08 95       	ret
     65a:	62 e7       	ldi	r22, 0x72	; 114
     65c:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY HIGH", part_number);
     65e:	8d e4       	ldi	r24, 0x4D	; 77
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	a1 ce       	rjmp	.-702    	; 0x3a6 <send_error_message>
     664:	08 95       	ret
     666:	6b e9       	ldi	r22, 0x9B	; 155
     668:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     66a:	8d e5       	ldi	r24, 0x5D	; 93
			}			
		break;

		case ERROR_BRAKES_PRESSURE_LOW:					
			switch (severity) {
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	9b ce       	rjmp	.-714    	; 0x3a6 <send_error_message>
     670:	08 95       	ret
     672:	82 30       	cpi	r24, 0x02	; 2
     674:	91 05       	cpc	r25, r1
     676:	61 f0       	breq	.+24     	; 0x690 <throw_error_code_with_number+0x282>
     678:	83 30       	cpi	r24, 0x03	; 3
     67a:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     67c:	79 f0       	breq	.+30     	; 0x69c <throw_error_code_with_number+0x28e>
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	09 f0       	breq	.+2      	; 0x684 <throw_error_code_with_number+0x276>
     682:	41 c1       	rjmp	.+642    	; 0x906 <throw_error_code_with_number+0x4f8>
     684:	63 ec       	ldi	r22, 0xC3	; 195
				// Additional Info Handling
				break;
     686:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally Low!", part_number);
     688:	81 e4       	ldi	r24, 0x41	; 65
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	8c ce       	rjmp	.-744    	; 0x3a6 <send_error_message>
     68e:	08 95       	ret
     690:	6d ed       	ldi	r22, 0xDD	; 221
				// Additional Warning Handling
				break;
     692:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY LOW", part_number);
     694:	8d e4       	ldi	r24, 0x4D	; 77
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	86 ce       	rjmp	.-756    	; 0x3a6 <send_error_message>
     69a:	08 95       	ret
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	76 e0       	ldi	r23, 0x06	; 6
				// Additional Error Handling
				break;
     6a0:	8d e5       	ldi	r24, 0x5D	; 93
			}			
		break;

		case ERROR_BRAKES_PRESSURE_HIGH:					
			switch (severity) {
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	80 ce       	rjmp	.-768    	; 0x3a6 <send_error_message>
     6a6:	08 95       	ret
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	91 05       	cpc	r25, r1
     6ac:	61 f0       	breq	.+24     	; 0x6c6 <throw_error_code_with_number+0x2b8>
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6b2:	79 f0       	breq	.+30     	; 0x6d2 <throw_error_code_with_number+0x2c4>
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	09 f0       	breq	.+2      	; 0x6ba <throw_error_code_with_number+0x2ac>
     6b8:	26 c1       	rjmp	.+588    	; 0x906 <throw_error_code_with_number+0x4f8>
     6ba:	63 ec       	ldi	r22, 0xC3	; 195
				// Additional Info Handling
				break;
     6bc:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     6be:	81 e4       	ldi	r24, 0x41	; 65
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	71 ce       	rjmp	.-798    	; 0x3a6 <send_error_message>
     6c4:	08 95       	ret
     6c6:	62 e2       	ldi	r22, 0x22	; 34
				// Additional Warning Handling
				break;
     6c8:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     6ca:	8d e4       	ldi	r24, 0x4D	; 77
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	6b ce       	rjmp	.-810    	; 0x3a6 <send_error_message>
     6d0:	08 95       	ret
     6d2:	66 e4       	ldi	r22, 0x46	; 70
     6d4:	76 e0       	ldi	r23, 0x06	; 6
				// Additional Error Handling
				break;
     6d6:	8d e5       	ldi	r24, 0x5D	; 93
			}			
		break;

        case ERROR_BRAKES_PRESSURE:					
			switch (severity) {
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	65 ce       	rjmp	.-822    	; 0x3a6 <send_error_message>
     6dc:	08 95       	ret
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	91 05       	cpc	r25, r1
     6e2:	61 f0       	breq	.+24     	; 0x6fc <throw_error_code_with_number+0x2ee>
     6e4:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6e6:	91 05       	cpc	r25, r1
     6e8:	79 f0       	breq	.+30     	; 0x708 <throw_error_code_with_number+0x2fa>
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <throw_error_code_with_number+0x2e2>
     6ee:	0b c1       	rjmp	.+534    	; 0x906 <throw_error_code_with_number+0x4f8>
				// Additional Info Handling
				break;
     6f0:	63 ec       	ldi	r22, 0xC3	; 195

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Warnning!", part_number);
     6f2:	75 e0       	ldi	r23, 0x05	; 5
     6f4:	81 e4       	ldi	r24, 0x41	; 65
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	56 ce       	rjmp	.-852    	; 0x3a6 <send_error_message>
     6fa:	08 95       	ret
     6fc:	69 e6       	ldi	r22, 0x69	; 105
				// Additional Warning Handling
				break;
     6fe:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICAL!", part_number);
     700:	8d e4       	ldi	r24, 0x4D	; 77
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	50 ce       	rjmp	.-864    	; 0x3a6 <send_error_message>
     706:	08 95       	ret
     708:	66 e8       	ldi	r22, 0x86	; 134
				// Additional Error Handling
				break;
     70a:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_LOW:					
			switch (severity) {
     70c:	8d e5       	ldi	r24, 0x5D	; 93
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	4a ce       	rjmp	.-876    	; 0x3a6 <send_error_message>
     712:	08 95       	ret
     714:	82 30       	cpi	r24, 0x02	; 2
     716:	91 05       	cpc	r25, r1
     718:	61 f0       	breq	.+24     	; 0x732 <throw_error_code_with_number+0x324>
     71a:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     71c:	91 05       	cpc	r25, r1
     71e:	79 f0       	breq	.+30     	; 0x73e <throw_error_code_with_number+0x330>
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	09 f0       	breq	.+2      	; 0x726 <throw_error_code_with_number+0x318>
     724:	f0 c0       	rjmp	.+480    	; 0x906 <throw_error_code_with_number+0x4f8>
				// Additional Info Handling
				break;
     726:	63 ea       	ldi	r22, 0xA3	; 163

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Abnormally Low!", part_number);
     728:	76 e0       	ldi	r23, 0x06	; 6
     72a:	81 e4       	ldi	r24, 0x41	; 65
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	3b ce       	rjmp	.-906    	; 0x3a6 <send_error_message>
     730:	08 95       	ret
     732:	6d eb       	ldi	r22, 0xBD	; 189
				// Additional Warning Handling
				break;
     734:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICALLY LOW", part_number);
     736:	8d e4       	ldi	r24, 0x4D	; 77
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	35 ce       	rjmp	.-918    	; 0x3a6 <send_error_message>
     73c:	08 95       	ret
     73e:	60 ee       	ldi	r22, 0xE0	; 224
				// Additional Error Handling
				break;
     740:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_HIGH:					
			switch (severity) {
     742:	8d e5       	ldi	r24, 0x5D	; 93
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	2f ce       	rjmp	.-930    	; 0x3a6 <send_error_message>
     748:	08 95       	ret
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	91 05       	cpc	r25, r1
     74e:	61 f0       	breq	.+24     	; 0x768 <throw_error_code_with_number+0x35a>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     750:	83 30       	cpi	r24, 0x03	; 3
     752:	91 05       	cpc	r25, r1
     754:	79 f0       	breq	.+30     	; 0x774 <throw_error_code_with_number+0x366>
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	09 f0       	breq	.+2      	; 0x75c <throw_error_code_with_number+0x34e>
     75a:	d5 c0       	rjmp	.+426    	; 0x906 <throw_error_code_with_number+0x4f8>
				// Additional Info Handling
				break;
     75c:	63 ec       	ldi	r22, 0xC3	; 195

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     75e:	75 e0       	ldi	r23, 0x05	; 5
     760:	81 e4       	ldi	r24, 0x41	; 65
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	20 ce       	rjmp	.-960    	; 0x3a6 <send_error_message>
     766:	08 95       	ret
				// Additional Warning Handling
				break;
     768:	62 e2       	ldi	r22, 0x22	; 34

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     76a:	76 e0       	ldi	r23, 0x06	; 6
     76c:	8d e4       	ldi	r24, 0x4D	; 77
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	1a ce       	rjmp	.-972    	; 0x3a6 <send_error_message>
     772:	08 95       	ret
				// Additional Error Handling
				break;
     774:	66 e4       	ldi	r22, 0x46	; 70
			}			
		break;

        case ERROR_BRAKES_POSITION:					
			switch (severity) {
     776:	76 e0       	ldi	r23, 0x06	; 6
     778:	8d e5       	ldi	r24, 0x5D	; 93
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	14 ce       	rjmp	.-984    	; 0x3a6 <send_error_message>
     77e:	08 95       	ret
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	91 05       	cpc	r25, r1
     784:	61 f0       	breq	.+24     	; 0x79e <throw_error_code_with_number+0x390>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     786:	83 30       	cpi	r24, 0x03	; 3
     788:	91 05       	cpc	r25, r1
     78a:	79 f0       	breq	.+30     	; 0x7aa <throw_error_code_with_number+0x39c>
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	09 f0       	breq	.+2      	; 0x792 <throw_error_code_with_number+0x384>
				// Additional Info Handling
				break;
     790:	ba c0       	rjmp	.+372    	; 0x906 <throw_error_code_with_number+0x4f8>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Warning!", part_number);
     792:	63 ea       	ldi	r22, 0xA3	; 163
     794:	76 e0       	ldi	r23, 0x06	; 6
     796:	81 e4       	ldi	r24, 0x41	; 65
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	05 ce       	rjmp	.-1014   	; 0x3a6 <send_error_message>
     79c:	08 95       	ret
				// Additional Warning Handling
				break;
     79e:	62 e0       	ldi	r22, 0x02	; 2

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICAL", part_number);
     7a0:	77 e0       	ldi	r23, 0x07	; 7
     7a2:	8d e4       	ldi	r24, 0x4D	; 77
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	ff cd       	rjmp	.-1026   	; 0x3a6 <send_error_message>
     7a8:	08 95       	ret
				// Additional Error Handling
				break;
     7aa:	6e e1       	ldi	r22, 0x1E	; 30
			}			
		break;
		
		case ERROR_BRAKES_ERROR:
		switch (severity) {
     7ac:	77 e0       	ldi	r23, 0x07	; 7
     7ae:	8d e5       	ldi	r24, 0x5D	; 93
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	f9 cd       	rjmp	.-1038   	; 0x3a6 <send_error_message>
     7b4:	08 95       	ret
			case ERROR_LEVEL_INFO:
			// Logging behaviour for Info-level logs
			send_error_message(ERROR_STRING_INFO, "Brake Function Normal", part_number);
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	91 05       	cpc	r25, r1
     7ba:	19 f0       	breq	.+6      	; 0x7c2 <throw_error_code_with_number+0x3b4>
     7bc:	03 97       	sbiw	r24, 0x03	; 3
     7be:	39 f0       	breq	.+14     	; 0x7ce <throw_error_code_with_number+0x3c0>
     7c0:	08 95       	ret
			// Additional Info Handling
			break;
     7c2:	6a e3       	ldi	r22, 0x3A	; 58

			case ERROR_LEVEL_ERROR:
			// Logging behaviour for Error-level logs
			send_error_message(ERROR_STRING_ERROR, "BRAKE CRITICAL MALFUNCTION", part_number);
     7c4:	77 e0       	ldi	r23, 0x07	; 7
     7c6:	81 e4       	ldi	r24, 0x41	; 65
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	ed cd       	rjmp	.-1062   	; 0x3a6 <send_error_message>
     7cc:	08 95       	ret
			break;
		}
		break;

		case ERROR_STEERING_ANGLE_LEFT:					
			switch (severity) {
     7ce:	60 e5       	ldi	r22, 0x50	; 80
     7d0:	77 e0       	ldi	r23, 0x07	; 7
     7d2:	8d e5       	ldi	r24, 0x5D	; 93
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	e7 cd       	rjmp	.-1074   	; 0x3a6 <send_error_message>
     7d8:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	91 05       	cpc	r25, r1
     7de:	19 f0       	breq	.+6      	; 0x7e6 <throw_error_code_with_number+0x3d8>
     7e0:	03 97       	sbiw	r24, 0x03	; 3
     7e2:	39 f0       	breq	.+14     	; 0x7f2 <throw_error_code_with_number+0x3e4>
				// Additional Info Handling
				break;
     7e4:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE LEFT PARAMETER", part_number);
     7e6:	6b e6       	ldi	r22, 0x6B	; 107
     7e8:	77 e0       	ldi	r23, 0x07	; 7
     7ea:	81 e4       	ldi	r24, 0x41	; 65
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	db cd       	rjmp	.-1098   	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     7f0:	08 95       	ret
			}			
		break;

		case ERROR_STEERING_ANGLE_RIGHT:					
			switch (severity) {
     7f2:	61 e8       	ldi	r22, 0x81	; 129
     7f4:	77 e0       	ldi	r23, 0x07	; 7
     7f6:	8d e5       	ldi	r24, 0x5D	; 93
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	d5 cd       	rjmp	.-1110   	; 0x3a6 <send_error_message>
     7fc:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	91 05       	cpc	r25, r1
     802:	19 f0       	breq	.+6      	; 0x80a <throw_error_code_with_number+0x3fc>
     804:	03 97       	sbiw	r24, 0x03	; 3
     806:	39 f0       	breq	.+14     	; 0x816 <throw_error_code_with_number+0x408>
     808:	08 95       	ret
				// Additional Info Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE RIGHT PARAMETER", part_number);
     80a:	6b e6       	ldi	r22, 0x6B	; 107
     80c:	77 e0       	ldi	r23, 0x07	; 7
     80e:	81 e4       	ldi	r24, 0x41	; 65
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	c9 cd       	rjmp	.-1134   	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     814:	08 95       	ret
			}			
		break;

		case ERROR_THROTTLE_ERROR:					
			switch (severity) {
     816:	67 ea       	ldi	r22, 0xA7	; 167
     818:	77 e0       	ldi	r23, 0x07	; 7
     81a:	8d e5       	ldi	r24, 0x5D	; 93
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	c3 cd       	rjmp	.-1146   	; 0x3a6 <send_error_message>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Throttle Function Normal", part_number);
     820:	08 95       	ret
     822:	81 30       	cpi	r24, 0x01	; 1
     824:	91 05       	cpc	r25, r1
     826:	19 f0       	breq	.+6      	; 0x82e <throw_error_code_with_number+0x420>
     828:	03 97       	sbiw	r24, 0x03	; 3
     82a:	39 f0       	breq	.+14     	; 0x83a <throw_error_code_with_number+0x42c>
				// Additional Info Handling
				break;
     82c:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "THROTTLE CRITICAL MALFUNCTION", part_number);
     82e:	6e ec       	ldi	r22, 0xCE	; 206
     830:	77 e0       	ldi	r23, 0x07	; 7
     832:	81 e4       	ldi	r24, 0x41	; 65
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	b7 cd       	rjmp	.-1170   	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     838:	08 95       	ret
			}			
		break;

		case ERROR_CAR_UPRIGHT_ERROR:					
			switch (severity) {
     83a:	67 ee       	ldi	r22, 0xE7	; 231
     83c:	77 e0       	ldi	r23, 0x07	; 7
     83e:	8d e5       	ldi	r24, 0x5D	; 93
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	b1 cd       	rjmp	.-1182   	; 0x3a6 <send_error_message>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Car is upright", part_number);
     844:	08 95       	ret
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	91 05       	cpc	r25, r1
     84a:	19 f0       	breq	.+6      	; 0x852 <throw_error_code_with_number+0x444>
     84c:	03 97       	sbiw	r24, 0x03	; 3
				// Additional Info Handling
				break;
     84e:	39 f0       	breq	.+14     	; 0x85e <throw_error_code_with_number+0x450>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CAR HAS OVERTURNED", part_number);
     850:	08 95       	ret
     852:	65 e0       	ldi	r22, 0x05	; 5
     854:	78 e0       	ldi	r23, 0x08	; 8
     856:	81 e4       	ldi	r24, 0x41	; 65
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	a5 cd       	rjmp	.-1206   	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     85c:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_CHARGE:					
			switch (severity) {
     85e:	64 e1       	ldi	r22, 0x14	; 20
     860:	78 e0       	ldi	r23, 0x08	; 8
     862:	8d e5       	ldi	r24, 0x5D	; 93
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	9f cd       	rjmp	.-1218   	; 0x3a6 <send_error_message>
     868:	08 95       	ret
     86a:	82 30       	cpi	r24, 0x02	; 2
     86c:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Charge Normal", part_number);
     86e:	61 f0       	breq	.+24     	; 0x888 <throw_error_code_with_number+0x47a>
     870:	83 30       	cpi	r24, 0x03	; 3
     872:	91 05       	cpc	r25, r1
     874:	79 f0       	breq	.+30     	; 0x894 <throw_error_code_with_number+0x486>
     876:	01 97       	sbiw	r24, 0x01	; 1
				// Additional Info Handling
				break;
     878:	09 f0       	breq	.+2      	; 0x87c <throw_error_code_with_number+0x46e>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Charge Low", part_number);
     87a:	45 c0       	rjmp	.+138    	; 0x906 <throw_error_code_with_number+0x4f8>
     87c:	67 e2       	ldi	r22, 0x27	; 39
     87e:	78 e0       	ldi	r23, 0x08	; 8
     880:	81 e4       	ldi	r24, 0x41	; 65
     882:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     884:	90 cd       	rjmp	.-1248   	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d CHARGE CRITICAL", part_number);
     886:	08 95       	ret
     888:	60 e4       	ldi	r22, 0x40	; 64
     88a:	78 e0       	ldi	r23, 0x08	; 8
     88c:	8d e4       	ldi	r24, 0x4D	; 77
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	8a cd       	rjmp	.-1260   	; 0x3a6 <send_error_message>
				// Additional Error Handling
				break;
     892:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_LOW:					
			switch (severity) {
     894:	66 e5       	ldi	r22, 0x56	; 86
     896:	78 e0       	ldi	r23, 0x08	; 8
     898:	8d e5       	ldi	r24, 0x5D	; 93
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	84 cd       	rjmp	.-1272   	; 0x3a6 <send_error_message>
     89e:	08 95       	ret
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     8a4:	59 f0       	breq	.+22     	; 0x8bc <throw_error_code_with_number+0x4ae>
     8a6:	83 30       	cpi	r24, 0x03	; 3
     8a8:	91 05       	cpc	r25, r1
     8aa:	71 f0       	breq	.+28     	; 0x8c8 <throw_error_code_with_number+0x4ba>
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	59 f5       	brne	.+86     	; 0x906 <throw_error_code_with_number+0x4f8>
				// Additional Info Handling
				break;
     8b0:	61 e7       	ldi	r22, 0x71	; 113

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally Low!", part_number);
     8b2:	78 e0       	ldi	r23, 0x08	; 8
     8b4:	81 e4       	ldi	r24, 0x41	; 65
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	76 cd       	rjmp	.-1300   	; 0x3a6 <send_error_message>
     8ba:	08 95       	ret
     8bc:	6f e8       	ldi	r22, 0x8F	; 143
				// Additional Warning Handling
				break;
     8be:	78 e0       	ldi	r23, 0x08	; 8

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY LOW", part_number);
     8c0:	8d e4       	ldi	r24, 0x4D	; 77
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	70 cd       	rjmp	.-1312   	; 0x3a6 <send_error_message>
     8c6:	08 95       	ret
     8c8:	66 eb       	ldi	r22, 0xB6	; 182
     8ca:	78 e0       	ldi	r23, 0x08	; 8
				// Additional Error Handling
				break;
     8cc:	8d e5       	ldi	r24, 0x5D	; 93
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_HIGH:					
			switch (severity) {
     8ce:	92 e0       	ldi	r25, 0x02	; 2
     8d0:	6a cd       	rjmp	.-1324   	; 0x3a6 <send_error_message>
     8d2:	08 95       	ret
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	91 05       	cpc	r25, r1
     8d8:	59 f0       	breq	.+22     	; 0x8f0 <throw_error_code_with_number+0x4e2>
     8da:	83 30       	cpi	r24, 0x03	; 3
     8dc:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     8de:	71 f0       	breq	.+28     	; 0x8fc <throw_error_code_with_number+0x4ee>
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	89 f4       	brne	.+34     	; 0x906 <throw_error_code_with_number+0x4f8>
     8e4:	61 e7       	ldi	r22, 0x71	; 113
     8e6:	78 e0       	ldi	r23, 0x08	; 8
     8e8:	81 e4       	ldi	r24, 0x41	; 65
				// Additional Info Handling
				break;
     8ea:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally High!", part_number);
     8ec:	5c cd       	rjmp	.-1352   	; 0x3a6 <send_error_message>
     8ee:	08 95       	ret
     8f0:	6c ed       	ldi	r22, 0xDC	; 220
     8f2:	78 e0       	ldi	r23, 0x08	; 8
     8f4:	8d e4       	ldi	r24, 0x4D	; 77
     8f6:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     8f8:	56 cd       	rjmp	.-1364   	; 0x3a6 <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY HIGH", part_number);
     8fa:	08 95       	ret
     8fc:	64 e0       	ldi	r22, 0x04	; 4
     8fe:	79 e0       	ldi	r23, 0x09	; 9
     900:	8d e5       	ldi	r24, 0x5D	; 93
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	50 cd       	rjmp	.-1376   	; 0x3a6 <send_error_message>
     906:	08 95       	ret

00000908 <throw_error_code>:
 * Generates an error message, and takes the necessary actions depending on the severity and error.
 * Uses 0 as the part number
 **/
void throw_error_code(uint16_t severity, uint16_t error_code)
{	
	throw_error_code_with_number(severity, error_code, 0);
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	80 cd       	rjmp	.-1280   	; 0x40e <throw_error_code_with_number>
     90e:	08 95       	ret

00000910 <external_interrupt_init>:
 * 
 */
void external_interrupt_init()
{
	//INT1 for CAN1, INT0 for CAN2, PCINT7 for CAN3
	EICRA |= (2<<ISC00)|(2<<ISC10);
     910:	e9 e6       	ldi	r30, 0x69	; 105
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	8a 60       	ori	r24, 0x0A	; 10
     918:	80 83       	st	Z, r24
	EIMSK  = (1<<INT0) | (1<<INT1);
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	8d bb       	out	0x1d, r24	; 29
	
	//Enable interrupts for PCINT7:0
	PCICR  = (1<<PCIE0)|(0<<PCIE1);
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	//CAN C interrupt
	PCMSK0 = (1<<PCINT7);
     924:	80 e8       	ldi	r24, 0x80	; 128
     926:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     92a:	08 95       	ret

0000092c <io_init>:
 * 
 */
void io_init()
{
	//pins 8, 9 and 14 for MCP2515_STB high so the things respond (PE6, PE7, PH2)
	DDRE  = 0b11000010;		//PE0 = RS232 RX1; PE1 = RS232 TX1;  PE6 = STB_CAN1; PE7 = STB_CAN2;
     92c:	82 ec       	ldi	r24, 0xC2	; 194
     92e:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000000;		
     930:	1e b8       	out	0x0e, r1	; 14
	DDRH  = 0b00000111;		//PH0 = CS_CAN1; PH1 = CS_CAN2; PH2 = STB_CAN3
     932:	87 e0       	ldi	r24, 0x07	; 7
     934:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	PORTH = 0b00000011;		//CS_CAN1 high; CS_CAN2 high;
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	//pins 12, 13, 19 for the CS for each MCP2515 PH0, PH1, PB0)

	//pin 21 for MOSI, pin 20  for SCK (PB2, PB1)
	DDRB  = 0b01100111;		//PB0 = CS_CAN3; PB1 = SCK; PB2 = MOSI; PB3 = MISO; PB5 = High drive A; PB6 = Low drive A; PB7 = CAN3_INT; 
     93e:	87 e6       	ldi	r24, 0x67	; 103
     940:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;		//set CS_CAN3 high;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	85 b9       	out	0x05, r24	; 5
	
	DDRL  = 0b00011000;		//PB3 = High drive B; PB4 = Low Drive B;
     946:	98 e1       	ldi	r25, 0x18	; 24
     948:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	PORTL = 0b00000000;
     94c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	
	DDRD  = 0b11001000;		//PD0 = CAN2_INT; PD1 = CAN1_INT; PD2 = RS232 RX2; PD3 = RS232 TX2; PD6 = CAN1_TXPIN; PD7 = CAN2_TXPIN;
     950:	88 ec       	ldi	r24, 0xC8	; 200
     952:	8a b9       	out	0x0a, r24	; 10
	DDRD  = 0b00000000;
     954:	1a b8       	out	0x0a, r1	; 10
	
	DDRC  = 0b00001000;		//PC3 = CAN3_TXPIN;
     956:	88 e0       	ldi	r24, 0x08	; 8
     958:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
     95a:	18 b8       	out	0x08, r1	; 8
	
	DDRJ  = 0b00000000;		//PORTJ is used for digital input;
     95c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	PORTJ |= 64;			//turn the pull-ups on for digital inputs
     960:	e5 e0       	ldi	r30, 0x05	; 5
     962:	f1 e0       	ldi	r31, 0x01	; 1
     964:	80 81       	ld	r24, Z
     966:	80 64       	ori	r24, 0x40	; 64
     968:	80 83       	st	Z, r24
	
	DDRA  = 0b00011000;		//PA3 = ENABLE_B; PA4 = ENABLE_A; PA1 = dig input; PA2 = dig input;
     96a:	91 b9       	out	0x01, r25	; 1
	PORTA = 0b00010000;		
     96c:	80 e1       	ldi	r24, 0x10	; 16
     96e:	82 b9       	out	0x02, r24	; 2

	DDRK  = 0b00100000;		//PK5 = debugging LED;
     970:	80 e2       	ldi	r24, 0x20	; 32
     972:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7e0107>
	// PORTK = 0b00100000;
	
	// Enable external interrupts in order for the CAN bus to communicate with us
	external_interrupt_init();
     976:	cc cf       	rjmp	.-104    	; 0x910 <external_interrupt_init>
     978:	08 95       	ret

0000097a <firmware_init>:
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
void firmware_init()
{
	io_init();
     97a:	d8 df       	rcall	.-80     	; 0x92c <io_init>
	SPI_init();
     97c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <SPI_init>
    // // uart_init(UART_BAUD_SELECT(19200, 16UL));
    uart_init(19200);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	9b e4       	ldi	r25, 0x4B	; 75
     984:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <uart_init>
    //uart1_init(19200);
	a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); // Turns ON ADC
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	6b dc       	rcall	.-1834   	; 0x264 <a2dInit>
	MCP2515_init(TRACTIVE_CAN);
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	e1 d6       	rcall	.+3522   	; 0x1754 <MCP2515_init>
	MCP2515_init(POWER_CAN);
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	df d6       	rcall	.+3518   	; 0x1754 <MCP2515_init>
	MCP2515_init(DATA_CAN);
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	dd d6       	rcall	.+3514   	; 0x1754 <MCP2515_init>
     99a:	e5 e0       	ldi	r30, 0x05	; 5

	// Enable the pullup on the input. This allows the pin to be active low
	PORTJ |= (1<<PINJ6);
     99c:	f1 e0       	ldi	r31, 0x01	; 1
     99e:	80 81       	ld	r24, Z
     9a0:	80 64       	ori	r24, 0x40	; 64
     9a2:	80 83       	st	Z, r24
	// 	inverters[i].temperature = 0;
	// }

	// accumulators[0].ID=ACCUMULATOR_FRONT;
	
	INPUT_init_input();
     9a4:	77 c2       	rjmp	.+1262   	; 0xe94 <INPUT_init_input>
     9a6:	08 95       	ret

000009a8 <timer_init>:
     9a8:	84 b5       	in	r24, 0x24	; 36
 */
void timer_init()
{
    // http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf
    // Set up 1Khz timer
    TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
     9aa:	82 60       	ori	r24, 0x02	; 2
     9ac:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
     9ae:	85 b5       	in	r24, 0x25	; 37
     9b0:	83 60       	ori	r24, 0x03	; 3
     9b2:	85 bd       	out	0x25, r24	; 37
    OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
     9b4:	8a ef       	ldi	r24, 0xFA	; 250
     9b6:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);                // Enable COMPA interupt
     9b8:	ee e6       	ldi	r30, 0x6E	; 110
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	82 60       	ori	r24, 0x02	; 2
     9c0:	80 83       	st	Z, r24

    // Set up 50Hz comm timer
	TCCR1A = 0b00000000;			//
     9c2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00001101;			// CTC mode & prescale clock by 1024
     9c6:	8d e0       	ldi	r24, 0x0D	; 13
     9c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A =  15000;					// 312 gives 50Hz main comms speed
     9cc:	88 e9       	ldi	r24, 0x98	; 152
     9ce:	9a e3       	ldi	r25, 0x3A	; 58
     9d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     9d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 0b00000010;			// Turn on compare interrupt for OCR1A
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     9de:	08 95       	ret

000009e0 <INPUT_scaleInput>:
    average /= ADC_SAMPLES;

	if(average < INPUT_PRESSURE_BRAKE_LOW) { return 1; } // Check if the value we received is valid
    if(average > INPUT_PRESSURE_BRAKE_HIGH) { return 2; } // Check if the value we received is valid
	return 0;
}
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	68 17       	cp	r22, r24
     9e8:	79 07       	cpc	r23, r25
     9ea:	e0 f0       	brcs	.+56     	; 0xa24 <INPUT_scaleInput+0x44>
     9ec:	84 17       	cp	r24, r20
     9ee:	95 07       	cpc	r25, r21
     9f0:	d8 f0       	brcs	.+54     	; 0xa28 <INPUT_scaleInput+0x48>
     9f2:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <INPUT_ADC_THRESH>
     9f6:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <INPUT_ADC_THRESH+0x1>
     9fa:	9f 01       	movw	r18, r30
     9fc:	24 1b       	sub	r18, r20
     9fe:	35 0b       	sbc	r19, r21
     a00:	a9 01       	movw	r20, r18
     a02:	9c 01       	movw	r18, r24
     a04:	24 0f       	add	r18, r20
     a06:	35 1f       	adc	r19, r21
     a08:	a4 e6       	ldi	r26, 0x64	; 100
     a0a:	a2 9f       	mul	r26, r18
     a0c:	c0 01       	movw	r24, r0
     a0e:	a3 9f       	mul	r26, r19
     a10:	90 0d       	add	r25, r0
     a12:	11 24       	eor	r1, r1
     a14:	64 0f       	add	r22, r20
     a16:	75 1f       	adc	r23, r21
     a18:	6e 0f       	add	r22, r30
     a1a:	7f 1f       	adc	r23, r31
     a1c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__udivmodhi4>
     a20:	86 2f       	mov	r24, r22
     a22:	08 95       	ret
     a24:	84 e6       	ldi	r24, 0x64	; 100
     a26:	08 95       	ret
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	08 95       	ret

00000a2c <INPUT_read_accelPedal>:
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
     a36:	00 91 7e 09 	lds	r16, 0x097E	; 0x80097e <historyIndex.2092>
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	85 e0       	ldi	r24, 0x05	; 5
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	20 dc       	rcall	.-1984   	; 0x282 <a2d_10bitCh>
     a42:	00 0f       	add	r16, r16
     a44:	11 1f       	adc	r17, r17
     a46:	f8 01       	movw	r30, r16
     a48:	e2 59       	subi	r30, 0x92	; 146
     a4a:	f6 4f       	sbci	r31, 0xF6	; 246
     a4c:	91 83       	std	Z+1, r25	; 0x01
     a4e:	80 83       	st	Z, r24
     a50:	10 91 7e 09 	lds	r17, 0x097E	; 0x80097e <historyIndex.2092>
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	81 0f       	add	r24, r17
     a58:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <historyIndex.2092>
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	10 dc       	rcall	.-2016   	; 0x282 <a2d_10bitCh>
     a62:	e1 2f       	mov	r30, r17
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	e2 5a       	subi	r30, 0xA2	; 162
     a6c:	f6 4f       	sbci	r31, 0xF6	; 246
     a6e:	91 83       	std	Z+1, r25	; 0x01
     a70:	80 83       	st	Z, r24
     a72:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <historyIndex.2092>
     a76:	88 30       	cpi	r24, 0x08	; 8
     a78:	10 f0       	brcs	.+4      	; 0xa7e <INPUT_read_accelPedal+0x52>
     a7a:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <historyIndex.2092>
     a7e:	ee e6       	ldi	r30, 0x6E	; 110
     a80:	f9 e0       	ldi	r31, 0x09	; 9
     a82:	ae e5       	ldi	r26, 0x5E	; 94
     a84:	b9 e0       	ldi	r27, 0x09	; 9
     a86:	6e e7       	ldi	r22, 0x7E	; 126
     a88:	79 e0       	ldi	r23, 0x09	; 9
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	41 91       	ld	r20, Z+
     a94:	51 91       	ld	r21, Z+
     a96:	24 0f       	add	r18, r20
     a98:	35 1f       	adc	r19, r21
     a9a:	4d 91       	ld	r20, X+
     a9c:	5d 91       	ld	r21, X+
     a9e:	84 0f       	add	r24, r20
     aa0:	95 1f       	adc	r25, r21
     aa2:	e6 17       	cp	r30, r22
     aa4:	f7 07       	cpc	r31, r23
     aa6:	a9 f7       	brne	.-22     	; 0xa92 <INPUT_read_accelPedal+0x66>
     aa8:	36 95       	lsr	r19
     aaa:	27 95       	ror	r18
     aac:	36 95       	lsr	r19
     aae:	27 95       	ror	r18
     ab0:	36 95       	lsr	r19
     ab2:	27 95       	ror	r18
     ab4:	39 83       	std	Y+1, r19	; 0x01
     ab6:	28 83       	st	Y, r18
     ab8:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <INPUT_ADC_ERROR>
     abc:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <INPUT_ADC_ERROR+0x1>
     ac0:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <INPUT_PEDAL_THROTTLE_CH1_LOW>
     ac4:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     ac8:	46 1b       	sub	r20, r22
     aca:	57 0b       	sbc	r21, r23
     acc:	24 17       	cp	r18, r20
     ace:	35 07       	cpc	r19, r21
     ad0:	d0 f1       	brcs	.+116    	; 0xb46 <INPUT_read_accelPedal+0x11a>
     ad2:	96 95       	lsr	r25
     ad4:	87 95       	ror	r24
     ad6:	96 95       	lsr	r25
     ad8:	87 95       	ror	r24
     ada:	96 95       	lsr	r25
     adc:	87 95       	ror	r24
     ade:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <INPUT_PEDAL_THROTTLE_CH2_LOW>
     ae2:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <INPUT_PEDAL_THROTTLE_CH2_LOW+0x1>
     ae6:	46 1b       	sub	r20, r22
     ae8:	57 0b       	sbc	r21, r23
     aea:	84 17       	cp	r24, r20
     aec:	95 07       	cpc	r25, r21
     aee:	68 f1       	brcs	.+90     	; 0xb4a <INPUT_read_accelPedal+0x11e>
     af0:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     af4:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     af8:	46 1b       	sub	r20, r22
     afa:	57 0b       	sbc	r21, r23
     afc:	42 17       	cp	r20, r18
     afe:	53 07       	cpc	r21, r19
     b00:	30 f1       	brcs	.+76     	; 0xb4e <INPUT_read_accelPedal+0x122>
     b02:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <INPUT_PEDAL_THROTTLE_CH2_HIGH>
     b06:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <INPUT_PEDAL_THROTTLE_CH2_HIGH+0x1>
     b0a:	46 1b       	sub	r20, r22
     b0c:	57 0b       	sbc	r21, r23
     b0e:	48 17       	cp	r20, r24
     b10:	59 07       	cpc	r21, r25
     b12:	f8 f0       	brcs	.+62     	; 0xb52 <INPUT_read_accelPedal+0x126>
     b14:	28 1b       	sub	r18, r24
     b16:	39 0b       	sbc	r19, r25
     b18:	c9 01       	movw	r24, r18
     b1a:	99 23       	and	r25, r25
     b1c:	24 f4       	brge	.+8      	; 0xb26 <INPUT_read_accelPedal+0xfa>
     b1e:	88 27       	eor	r24, r24
     b20:	99 27       	eor	r25, r25
     b22:	82 1b       	sub	r24, r18
     b24:	93 0b       	sbc	r25, r19
     b26:	20 91 82 09 	lds	r18, 0x0982	; 0x800982 <INPUT_PEDAL_DELTA_THRESH_L>
     b2a:	30 91 83 09 	lds	r19, 0x0983	; 0x800983 <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	88 f0       	brcs	.+34     	; 0xb56 <INPUT_read_accelPedal+0x12a>
     b34:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     b38:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     b3c:	28 17       	cp	r18, r24
     b3e:	39 07       	cpc	r19, r25
     b40:	60 f0       	brcs	.+24     	; 0xb5a <INPUT_read_accelPedal+0x12e>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0b c0       	rjmp	.+22     	; 0xb5c <INPUT_read_accelPedal+0x130>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <INPUT_read_accelPedal+0x130>
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	07 c0       	rjmp	.+14     	; 0xb5c <INPUT_read_accelPedal+0x130>
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <INPUT_read_accelPedal+0x130>
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <INPUT_read_accelPedal+0x130>
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <INPUT_read_accelPedal+0x130>
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	08 95       	ret

00000b66 <INPUT_get_accelPedal>:
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	00 d0       	rcall	.+0      	; 0xb72 <INPUT_get_accelPedal+0xc>
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	7c 01       	movw	r14, r24
     b78:	1a 82       	std	Y+2, r1	; 0x02
     b7a:	19 82       	std	Y+1, r1	; 0x01
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	55 df       	rcall	.-342    	; 0xa2c <INPUT_read_accelPedal>
     b82:	18 2f       	mov	r17, r24
     b84:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <INPUT_PEDAL_THROTTLE_CH1_LOW>
     b88:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     b8c:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     b90:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	23 df       	rcall	.-442    	; 0x9e0 <INPUT_scaleInput>
     b9a:	f7 01       	movw	r30, r14
     b9c:	80 83       	st	Z, r24
     b9e:	12 30       	cpi	r17, 0x02	; 2
     ba0:	51 f0       	breq	.+20     	; 0xbb6 <INPUT_get_accelPedal+0x50>
     ba2:	13 30       	cpi	r17, 0x03	; 3
     ba4:	71 f0       	breq	.+28     	; 0xbc2 <INPUT_get_accelPedal+0x5c>
     ba6:	11 30       	cpi	r17, 0x01	; 1
     ba8:	89 f4       	brne	.+34     	; 0xbcc <INPUT_get_accelPedal+0x66>
     baa:	6f e0       	ldi	r22, 0x0F	; 15
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	aa de       	rcall	.-684    	; 0x908 <throw_error_code>
     bb4:	0b c0       	rjmp	.+22     	; 0xbcc <INPUT_get_accelPedal+0x66>
     bb6:	6f e0       	ldi	r22, 0x0F	; 15
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a4 de       	rcall	.-696    	; 0x908 <throw_error_code>
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <INPUT_get_accelPedal+0x66>
     bc2:	6f e0       	ldi	r22, 0x0F	; 15
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	9e de       	rcall	.-708    	; 0x908 <throw_error_code>
     bcc:	81 2f       	mov	r24, r17
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	08 95       	ret

00000bde <INPUT_read_brakePedal>:
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	ec 01       	movw	r28, r24
     be8:	00 91 5d 09 	lds	r16, 0x095D	; 0x80095d <historyIndex.2107>
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	47 db       	rcall	.-2418   	; 0x282 <a2d_10bitCh>
     bf4:	00 0f       	add	r16, r16
     bf6:	11 1f       	adc	r17, r17
     bf8:	f8 01       	movw	r30, r16
     bfa:	e3 5b       	subi	r30, 0xB3	; 179
     bfc:	f6 4f       	sbci	r31, 0xF6	; 246
     bfe:	91 83       	std	Z+1, r25	; 0x01
     c00:	80 83       	st	Z, r24
     c02:	10 91 5d 09 	lds	r17, 0x095D	; 0x80095d <historyIndex.2107>
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	81 0f       	add	r24, r17
     c0a:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <historyIndex.2107>
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	37 db       	rcall	.-2450   	; 0x282 <a2d_10bitCh>
     c14:	e1 2f       	mov	r30, r17
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	e3 5c       	subi	r30, 0xC3	; 195
     c1e:	f6 4f       	sbci	r31, 0xF6	; 246
     c20:	91 83       	std	Z+1, r25	; 0x01
     c22:	80 83       	st	Z, r24
     c24:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <historyIndex.2107>
     c28:	88 30       	cpi	r24, 0x08	; 8
     c2a:	10 f0       	brcs	.+4      	; 0xc30 <INPUT_read_brakePedal+0x52>
     c2c:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <historyIndex.2107>
     c30:	ed e4       	ldi	r30, 0x4D	; 77
     c32:	f9 e0       	ldi	r31, 0x09	; 9
     c34:	ad e3       	ldi	r26, 0x3D	; 61
     c36:	b9 e0       	ldi	r27, 0x09	; 9
     c38:	6d e5       	ldi	r22, 0x5D	; 93
     c3a:	79 e0       	ldi	r23, 0x09	; 9
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	41 91       	ld	r20, Z+
     c46:	51 91       	ld	r21, Z+
     c48:	24 0f       	add	r18, r20
     c4a:	35 1f       	adc	r19, r21
     c4c:	4d 91       	ld	r20, X+
     c4e:	5d 91       	ld	r21, X+
     c50:	84 0f       	add	r24, r20
     c52:	95 1f       	adc	r25, r21
     c54:	e6 17       	cp	r30, r22
     c56:	f7 07       	cpc	r31, r23
     c58:	a9 f7       	brne	.-22     	; 0xc44 <INPUT_read_brakePedal+0x66>
     c5a:	36 95       	lsr	r19
     c5c:	27 95       	ror	r18
     c5e:	36 95       	lsr	r19
     c60:	27 95       	ror	r18
     c62:	36 95       	lsr	r19
     c64:	27 95       	ror	r18
     c66:	ac 01       	movw	r20, r24
     c68:	56 95       	lsr	r21
     c6a:	47 95       	ror	r20
     c6c:	56 95       	lsr	r21
     c6e:	47 95       	ror	r20
     c70:	56 95       	lsr	r21
     c72:	47 95       	ror	r20
     c74:	b9 01       	movw	r22, r18
     c76:	64 1b       	sub	r22, r20
     c78:	75 0b       	sbc	r23, r21
     c7a:	cb 01       	movw	r24, r22
     c7c:	99 23       	and	r25, r25
     c7e:	24 f4       	brge	.+8      	; 0xc88 <INPUT_read_brakePedal+0xaa>
     c80:	88 27       	eor	r24, r24
     c82:	99 27       	eor	r25, r25
     c84:	86 1b       	sub	r24, r22
     c86:	97 0b       	sbc	r25, r23
     c88:	fc 01       	movw	r30, r24
     c8a:	39 83       	std	Y+1, r19	; 0x01
     c8c:	28 83       	st	Y, r18
     c8e:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <INPUT_ADC_ERROR>
     c92:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <INPUT_ADC_ERROR+0x1>
     c96:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <INPUT_PEDAL_BRAKE_CH1_LOW>
     c9a:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     c9e:	86 1b       	sub	r24, r22
     ca0:	97 0b       	sbc	r25, r23
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	58 f0       	brcs	.+22     	; 0xcbe <INPUT_read_brakePedal+0xe0>
     ca8:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <INPUT_PEDAL_BRAKE_CH1_HIGH>
     cac:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     cb0:	86 0f       	add	r24, r22
     cb2:	97 1f       	adc	r25, r23
     cb4:	82 17       	cp	r24, r18
     cb6:	93 07       	cpc	r25, r19
     cb8:	20 f4       	brcc	.+8      	; 0xcc2 <INPUT_read_brakePedal+0xe4>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <INPUT_read_brakePedal+0xe6>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <INPUT_read_brakePedal+0xe6>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <INPUT_PEDAL_BRAKE_CH2_LOW>
     cc8:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <INPUT_PEDAL_BRAKE_CH2_LOW+0x1>
     ccc:	26 1b       	sub	r18, r22
     cce:	37 0b       	sbc	r19, r23
     cd0:	42 17       	cp	r20, r18
     cd2:	53 07       	cpc	r21, r19
     cd4:	10 f4       	brcc	.+4      	; 0xcda <INPUT_read_brakePedal+0xfc>
     cd6:	84 60       	ori	r24, 0x04	; 4
     cd8:	0a c0       	rjmp	.+20     	; 0xcee <INPUT_read_brakePedal+0x110>
     cda:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <INPUT_PEDAL_BRAKE_CH1_HIGH>
     cde:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     ce2:	62 0f       	add	r22, r18
     ce4:	73 1f       	adc	r23, r19
     ce6:	64 17       	cp	r22, r20
     ce8:	75 07       	cpc	r23, r21
     cea:	08 f4       	brcc	.+2      	; 0xcee <INPUT_read_brakePedal+0x110>
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	20 91 82 09 	lds	r18, 0x0982	; 0x800982 <INPUT_PEDAL_DELTA_THRESH_L>
     cf2:	30 91 83 09 	lds	r19, 0x0983	; 0x800983 <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     cf6:	e2 17       	cp	r30, r18
     cf8:	f3 07       	cpc	r31, r19
     cfa:	38 f0       	brcs	.+14     	; 0xd0a <INPUT_read_brakePedal+0x12c>
     cfc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     d00:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     d04:	2e 17       	cp	r18, r30
     d06:	3f 07       	cpc	r19, r31
     d08:	08 f4       	brcc	.+2      	; 0xd0c <INPUT_read_brakePedal+0x12e>
     d0a:	80 61       	ori	r24, 0x10	; 16
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <INPUT_get_brakePedal>:
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	00 d0       	rcall	.+0      	; 0xd22 <INPUT_get_brakePedal+0xc>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	7c 01       	movw	r14, r24
     d28:	1a 82       	std	Y+2, r1	; 0x02
     d2a:	19 82       	std	Y+1, r1	; 0x01
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	56 df       	rcall	.-340    	; 0xbde <INPUT_read_brakePedal>
     d32:	18 2f       	mov	r17, r24
     d34:	40 91 1a 02 	lds	r20, 0x021A	; 0x80021a <INPUT_PEDAL_BRAKE_CH1_LOW>
     d38:	50 91 1b 02 	lds	r21, 0x021B	; 0x80021b <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     d3c:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <INPUT_PEDAL_BRAKE_CH1_HIGH>
     d40:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	4b de       	rcall	.-874    	; 0x9e0 <INPUT_scaleInput>
     d4a:	f7 01       	movw	r30, r14
     d4c:	80 83       	st	Z, r24
     d4e:	12 30       	cpi	r17, 0x02	; 2
     d50:	51 f0       	breq	.+20     	; 0xd66 <INPUT_get_brakePedal+0x50>
     d52:	13 30       	cpi	r17, 0x03	; 3
     d54:	71 f0       	breq	.+28     	; 0xd72 <INPUT_get_brakePedal+0x5c>
     d56:	11 30       	cpi	r17, 0x01	; 1
     d58:	89 f4       	brne	.+34     	; 0xd7c <INPUT_get_brakePedal+0x66>
     d5a:	6c e0       	ldi	r22, 0x0C	; 12
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	d2 dd       	rcall	.-1116   	; 0x908 <throw_error_code>
     d64:	0b c0       	rjmp	.+22     	; 0xd7c <INPUT_get_brakePedal+0x66>
     d66:	6c e0       	ldi	r22, 0x0C	; 12
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	cc dd       	rcall	.-1128   	; 0x908 <throw_error_code>
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <INPUT_get_brakePedal+0x66>
     d72:	6c e0       	ldi	r22, 0x0C	; 12
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	c6 dd       	rcall	.-1140   	; 0x908 <throw_error_code>
     d7c:	81 2f       	mov	r24, r17
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	08 95       	ret

00000d8e <INPUT_read_steeringWheel>:
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	ec 01       	movw	r28, r24
     d96:	10 91 3c 09 	lds	r17, 0x093C	; 0x80093c <historyIndex.2122>
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	81 0f       	add	r24, r17
     d9e:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <historyIndex.2122>
     da2:	84 e0       	ldi	r24, 0x04	; 4
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	6d da       	rcall	.-2854   	; 0x282 <a2d_10bitCh>
     da8:	e1 2f       	mov	r30, r17
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	ee 0f       	add	r30, r30
     dae:	ff 1f       	adc	r31, r31
     db0:	e4 5d       	subi	r30, 0xD4	; 212
     db2:	f6 4f       	sbci	r31, 0xF6	; 246
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
     db8:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <historyIndex.2122>
     dbc:	88 30       	cpi	r24, 0x08	; 8
     dbe:	10 f0       	brcs	.+4      	; 0xdc4 <INPUT_read_steeringWheel+0x36>
     dc0:	10 92 3c 09 	sts	0x093C, r1	; 0x80093c <historyIndex.2122>
     dc4:	ec e2       	ldi	r30, 0x2C	; 44
     dc6:	f9 e0       	ldi	r31, 0x09	; 9
     dc8:	4c e3       	ldi	r20, 0x3C	; 60
     dca:	59 e0       	ldi	r21, 0x09	; 9
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	21 91       	ld	r18, Z+
     dd2:	31 91       	ld	r19, Z+
     dd4:	82 0f       	add	r24, r18
     dd6:	93 1f       	adc	r25, r19
     dd8:	e4 17       	cp	r30, r20
     dda:	f5 07       	cpc	r31, r21
     ddc:	c9 f7       	brne	.-14     	; 0xdd0 <INPUT_read_steeringWheel+0x42>
     dde:	9c 01       	movw	r18, r24
     de0:	36 95       	lsr	r19
     de2:	27 95       	ror	r18
     de4:	36 95       	lsr	r19
     de6:	27 95       	ror	r18
     de8:	36 95       	lsr	r19
     dea:	27 95       	ror	r18
     dec:	39 83       	std	Y+1, r19	; 0x01
     dee:	28 83       	st	Y, r18
     df0:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <INPUT_ADC_ERROR>
     df4:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <INPUT_ADC_ERROR+0x1>
     df8:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <INPUT_STEERING_LEFT>
     dfc:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <INPUT_STEERING_LEFT+0x1>
     e00:	6e 1b       	sub	r22, r30
     e02:	7f 0b       	sbc	r23, r31
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	26 17       	cp	r18, r22
     e08:	37 07       	cpc	r19, r23
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <INPUT_read_steeringWheel+0x80>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <INPUT_STEERING_RIGHT>
     e12:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <INPUT_STEERING_RIGHT+0x1>
     e16:	4e 0f       	add	r20, r30
     e18:	5f 1f       	adc	r21, r31
     e1a:	42 17       	cp	r20, r18
     e1c:	53 07       	cpc	r21, r19
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <INPUT_read_steeringWheel+0x94>
     e20:	8e 5f       	subi	r24, 0xFE	; 254
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <INPUT_get_steeringWheel>:
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	00 d0       	rcall	.+0      	; 0xe36 <INPUT_get_steeringWheel+0xc>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	7c 01       	movw	r14, r24
     e3c:	1a 82       	std	Y+2, r1	; 0x02
     e3e:	19 82       	std	Y+1, r1	; 0x01
     e40:	ce 01       	movw	r24, r28
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	a4 df       	rcall	.-184    	; 0xd8e <INPUT_read_steeringWheel>
     e46:	18 2f       	mov	r17, r24
     e48:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <INPUT_STEERING_LEFT>
     e4c:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <INPUT_STEERING_LEFT+0x1>
     e50:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <INPUT_STEERING_RIGHT>
     e54:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <INPUT_STEERING_RIGHT+0x1>
     e58:	ce 01       	movw	r24, r28
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	c1 dd       	rcall	.-1150   	; 0x9e0 <INPUT_scaleInput>
     e5e:	f7 01       	movw	r30, r14
     e60:	80 83       	st	Z, r24
     e62:	11 30       	cpi	r17, 0x01	; 1
     e64:	19 f0       	breq	.+6      	; 0xe6c <INPUT_get_steeringWheel+0x42>
     e66:	12 30       	cpi	r17, 0x02	; 2
     e68:	39 f0       	breq	.+14     	; 0xe78 <INPUT_get_steeringWheel+0x4e>
     e6a:	0b c0       	rjmp	.+22     	; 0xe82 <INPUT_get_steeringWheel+0x58>
     e6c:	6e e0       	ldi	r22, 0x0E	; 14
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	49 dd       	rcall	.-1390   	; 0x908 <throw_error_code>
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <INPUT_get_steeringWheel+0x58>
     e78:	6d e0       	ldi	r22, 0x0D	; 13
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	43 dd       	rcall	.-1402   	; 0x908 <throw_error_code>
     e82:	81 2f       	mov	r24, r17
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	08 95       	ret

00000e94 <INPUT_init_input>:

/*
 * Point of this function is to deal with the ever increasing shift in the input pots
 * Will set the lowest to what its currently sensing plus a buffer
 */
void INPUT_init_input() {
     e94:	4f 92       	push	r4
     e96:	5f 92       	push	r5
     e98:	6f 92       	push	r6
     e9a:	7f 92       	push	r7
     e9c:	8f 92       	push	r8
     e9e:	9f 92       	push	r9
     ea0:	af 92       	push	r10
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	a0 97       	sbiw	r28, 0x20	; 32
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	ce 01       	movw	r24, r28
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	5c 01       	movw	r10, r24
     eca:	3e 01       	movw	r6, r28
     ecc:	91 e1       	ldi	r25, 0x11	; 17
     ece:	69 0e       	add	r6, r25
     ed0:	71 1c       	adc	r7, r1
     ed2:	63 01       	movw	r12, r6
     ed4:	73 01       	movw	r14, r6
     ed6:	85 01       	movw	r16, r10
	
	
	// BRAKE SETTING
	
	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
		primaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH1);
     ed8:	8a e0       	ldi	r24, 0x0A	; 10
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	d2 d9       	rcall	.-3164   	; 0x282 <a2d_10bitCh>
     ede:	f8 01       	movw	r30, r16
     ee0:	81 93       	st	Z+, r24
     ee2:	91 93       	st	Z+, r25
     ee4:	8f 01       	movw	r16, r30
		secondaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH2);
     ee6:	88 e0       	ldi	r24, 0x08	; 8
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	cb d9       	rcall	.-3178   	; 0x282 <a2d_10bitCh>
     eec:	f7 01       	movw	r30, r14
     eee:	81 93       	st	Z+, r24
     ef0:	91 93       	st	Z+, r25
     ef2:	7f 01       	movw	r14, r30
	uint16_t secondaryAverage = 0;
	
	
	// BRAKE SETTING
	
	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     ef4:	0c 15       	cp	r16, r12
     ef6:	1d 05       	cpc	r17, r13
     ef8:	79 f7       	brne	.-34     	; 0xed8 <INPUT_init_input+0x44>
     efa:	d3 01       	movw	r26, r6
     efc:	f5 01       	movw	r30, r10
     efe:	e1 2c       	mov	r14, r1
     f00:	f1 2c       	mov	r15, r1
     f02:	00 e0       	ldi	r16, 0x00	; 0
     f04:	10 e0       	ldi	r17, 0x00	; 0
		primaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH1);
		secondaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH2);
	}
	
	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
		primaryAverage += primaryHistory[i];
     f06:	81 91       	ld	r24, Z+
     f08:	91 91       	ld	r25, Z+
     f0a:	08 0f       	add	r16, r24
     f0c:	19 1f       	adc	r17, r25
		secondaryAverage += secondaryHistory[i];
     f0e:	8d 91       	ld	r24, X+
     f10:	9d 91       	ld	r25, X+
     f12:	e8 0e       	add	r14, r24
     f14:	f9 1e       	adc	r15, r25
	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
		primaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH1);
		secondaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH2);
	}
	
	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     f16:	ec 15       	cp	r30, r12
     f18:	fd 05       	cpc	r31, r13
     f1a:	a9 f7       	brne	.-22     	; 0xf06 <INPUT_init_input+0x72>
		primaryAverage += primaryHistory[i];
		secondaryAverage += secondaryHistory[i];
	}
	primaryAverage /= ADC_SAMPLES;
     f1c:	16 95       	lsr	r17
     f1e:	07 95       	ror	r16
     f20:	16 95       	lsr	r17
     f22:	07 95       	ror	r16
     f24:	16 95       	lsr	r17
     f26:	07 95       	ror	r16
	secondaryAverage /= ADC_SAMPLES;
     f28:	f6 94       	lsr	r15
     f2a:	e7 94       	ror	r14
     f2c:	f6 94       	lsr	r15
     f2e:	e7 94       	ror	r14
     f30:	f6 94       	lsr	r15
     f32:	e7 94       	ror	r14
	
	INPUT_PEDAL_BRAKE_CH1_LOW = primaryAverage + INPUT_BUFFER;
     f34:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <INPUT_BUFFER>
     f38:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <INPUT_BUFFER+0x1>
     f3c:	98 01       	movw	r18, r16
     f3e:	28 0f       	add	r18, r24
     f40:	39 1f       	adc	r19, r25
     f42:	30 93 1b 02 	sts	0x021B, r19	; 0x80021b <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     f46:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <INPUT_PEDAL_BRAKE_CH1_LOW>
	INPUT_PEDAL_BRAKE_CH2_LOW = secondaryAverage + INPUT_BUFFER;
     f4a:	8e 0d       	add	r24, r14
     f4c:	9f 1d       	adc	r25, r15
     f4e:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <INPUT_PEDAL_BRAKE_CH2_LOW+0x1>
     f52:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <INPUT_PEDAL_BRAKE_CH2_LOW>
	INPUT_PEDAL_BRAKE_CH1_HIGH = primaryAverage + INPUT_BUFFER + INPUT_PEDAL_BRAKE_CH1_DIFF;
     f56:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <INPUT_PEDAL_BRAKE_CH1_DIFF>
     f5a:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <INPUT_PEDAL_BRAKE_CH1_DIFF+0x1>
     f5e:	24 0f       	add	r18, r20
     f60:	35 1f       	adc	r19, r21
     f62:	30 93 1f 02 	sts	0x021F, r19	; 0x80021f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     f66:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <INPUT_PEDAL_BRAKE_CH1_HIGH>
	INPUT_PEDAL_BRAKE_CH2_HIGH = secondaryAverage + INPUT_BUFFER + INPUT_PEDAL_BRAKE_CH2_DIFF;
     f6a:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <INPUT_PEDAL_BRAKE_CH2_DIFF>
     f6e:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <INPUT_PEDAL_BRAKE_CH2_DIFF+0x1>
     f72:	82 0f       	add	r24, r18
     f74:	93 1f       	adc	r25, r19
     f76:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <INPUT_PEDAL_BRAKE_CH2_HIGH+0x1>
     f7a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <INPUT_PEDAL_BRAKE_CH2_HIGH>
     f7e:	23 01       	movw	r4, r6
     f80:	45 01       	movw	r8, r10
	
	
	// THROTTLE SETTING

	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
		primaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
     f82:	85 e0       	ldi	r24, 0x05	; 5
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	7d d9       	rcall	.-3334   	; 0x282 <a2d_10bitCh>
     f88:	f4 01       	movw	r30, r8
     f8a:	81 93       	st	Z+, r24
     f8c:	91 93       	st	Z+, r25
     f8e:	4f 01       	movw	r8, r30
		secondaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	76 d9       	rcall	.-3348   	; 0x282 <a2d_10bitCh>
     f96:	f2 01       	movw	r30, r4
     f98:	81 93       	st	Z+, r24
     f9a:	91 93       	st	Z+, r25
     f9c:	2f 01       	movw	r4, r30
     f9e:	8c 14       	cp	r8, r12
	INPUT_PEDAL_BRAKE_CH2_HIGH = secondaryAverage + INPUT_BUFFER + INPUT_PEDAL_BRAKE_CH2_DIFF;
	
	
	// THROTTLE SETTING

	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     fa0:	9d 04       	cpc	r9, r13
     fa2:	79 f7       	brne	.-34     	; 0xf82 <INPUT_init_input+0xee>
     fa4:	f5 01       	movw	r30, r10
		primaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
		secondaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);
	}
	
	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
		primaryAverage += primaryHistory[i];
     fa6:	81 91       	ld	r24, Z+
     fa8:	91 91       	ld	r25, Z+
     faa:	5f 01       	movw	r10, r30
     fac:	08 0f       	add	r16, r24
     fae:	19 1f       	adc	r17, r25
     fb0:	f3 01       	movw	r30, r6
		secondaryAverage += secondaryHistory[i];
     fb2:	81 91       	ld	r24, Z+
     fb4:	91 91       	ld	r25, Z+
     fb6:	3f 01       	movw	r6, r30
     fb8:	e8 0e       	add	r14, r24
     fba:	f9 1e       	adc	r15, r25
     fbc:	ac 14       	cp	r10, r12
	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
		primaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
		secondaryHistory[i] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);
	}
	
	for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     fbe:	bd 04       	cpc	r11, r13
     fc0:	89 f7       	brne	.-30     	; 0xfa4 <INPUT_init_input+0x110>
     fc2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <INPUT_BUFFER>
		secondaryAverage += secondaryHistory[i];
	}
	primaryAverage /= ADC_SAMPLES;
	secondaryAverage /= ADC_SAMPLES;
	
	INPUT_PEDAL_THROTTLE_CH1_LOW = primaryAverage + INPUT_BUFFER;
     fc6:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <INPUT_BUFFER+0x1>
     fca:	16 95       	lsr	r17
     fcc:	07 95       	ror	r16
     fce:	16 95       	lsr	r17
     fd0:	07 95       	ror	r16
     fd2:	16 95       	lsr	r17
     fd4:	07 95       	ror	r16
     fd6:	08 0f       	add	r16, r24
     fd8:	19 1f       	adc	r17, r25
     fda:	10 93 0d 02 	sts	0x020D, r17	; 0x80020d <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     fde:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <INPUT_PEDAL_THROTTLE_CH1_LOW>
     fe2:	f6 94       	lsr	r15
	INPUT_PEDAL_THROTTLE_CH2_LOW = secondaryAverage + INPUT_BUFFER;
     fe4:	e7 94       	ror	r14
     fe6:	f6 94       	lsr	r15
     fe8:	e7 94       	ror	r14
     fea:	f6 94       	lsr	r15
     fec:	e7 94       	ror	r14
     fee:	e8 0e       	add	r14, r24
     ff0:	f9 1e       	adc	r15, r25
     ff2:	f0 92 07 02 	sts	0x0207, r15	; 0x800207 <INPUT_PEDAL_THROTTLE_CH2_LOW+0x1>
     ff6:	e0 92 06 02 	sts	0x0206, r14	; 0x800206 <INPUT_PEDAL_THROTTLE_CH2_LOW>
     ffa:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <INPUT_PEDAL_THROTTLE_CH1_DIFF>
	INPUT_PEDAL_THROTTLE_CH1_HIGH = primaryAverage + INPUT_BUFFER + INPUT_PEDAL_THROTTLE_CH1_DIFF;
     ffe:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <INPUT_PEDAL_THROTTLE_CH1_DIFF+0x1>
    1002:	08 0f       	add	r16, r24
    1004:	19 1f       	adc	r17, r25
    1006:	10 93 11 02 	sts	0x0211, r17	; 0x800211 <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
    100a:	00 93 10 02 	sts	0x0210, r16	; 0x800210 <INPUT_PEDAL_THROTTLE_CH1_HIGH>
    100e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <INPUT_PEDAL_THROTTLE_CH2_DIFF>
	INPUT_PEDAL_THROTTLE_CH2_HIGH = secondaryAverage + INPUT_BUFFER + INPUT_PEDAL_THROTTLE_CH2_DIFF;
    1012:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <INPUT_PEDAL_THROTTLE_CH2_DIFF+0x1>
    1016:	e8 0e       	add	r14, r24
    1018:	f9 1e       	adc	r15, r25
    101a:	f0 92 0b 02 	sts	0x020B, r15	; 0x80020b <INPUT_PEDAL_THROTTLE_CH2_HIGH+0x1>
    101e:	e0 92 0a 02 	sts	0x020A, r14	; 0x80020a <INPUT_PEDAL_THROTTLE_CH2_HIGH>
    1022:	a0 96       	adiw	r28, 0x20	; 32
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	9f 90       	pop	r9
    1044:	8f 90       	pop	r8
    1046:	7f 90       	pop	r7
    1048:	6f 90       	pop	r6
    104a:	5f 90       	pop	r5
    104c:	4f 90       	pop	r4
    104e:	08 95       	ret

00001050 <led_toggle>:
 * 
 * Reference: ATmega Datasheet Chapter 13 (I/O-Ports)
 **/
void led_toggle(void)
{
    PORTK ^= 0b00100000;
    1050:	e8 e0       	ldi	r30, 0x08	; 8
    1052:	f1 e0       	ldi	r31, 0x01	; 1
    1054:	90 81       	ld	r25, Z
    1056:	80 e2       	ldi	r24, 0x20	; 32
    1058:	89 27       	eor	r24, r25
    105a:	80 83       	st	Z, r24
    105c:	08 95       	ret

0000105e <UART_sendPacket>:
	
	UART_sendPacket(testPacketArray, 1);
	*/
}

void UART_sendPacket(uint8_t outgoingString[], uint8_t length) {
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	7c 01       	movw	r14, r24
	//uart_putc('D');
	int8_t i = 0;
    for(i = 0; i < length; i++) {
    106a:	06 2f       	mov	r16, r22
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	10 16       	cp	r1, r16
    1070:	11 06       	cpc	r1, r17
    1072:	b4 f4       	brge	.+44     	; 0x10a0 <UART_sendPacket+0x42>
    1074:	c0 e0       	ldi	r28, 0x00	; 0
        uart_putc(outgoingString[i]);
    1076:	f7 01       	movw	r30, r14
    1078:	ec 0f       	add	r30, r28
    107a:	f1 1d       	adc	r31, r1
    107c:	c7 fd       	sbrc	r28, 7
    107e:	fa 95       	dec	r31
    1080:	80 81       	ld	r24, Z
    1082:	a8 d5       	rcall	.+2896   	; 0x1bd4 <uart_putc>
    1084:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_sendPacket(uint8_t outgoingString[], uint8_t length) {
	//uart_putc('D');
	int8_t i = 0;
    for(i = 0; i < length; i++) {
    1086:	8c 2f       	mov	r24, r28
    1088:	0c 2e       	mov	r0, r28
    108a:	00 0c       	add	r0, r0
    108c:	99 0b       	sbc	r25, r25
    108e:	80 17       	cp	r24, r16
    1090:	91 07       	cpc	r25, r17
    1092:	8c f3       	brlt	.-30     	; 0x1076 <UART_sendPacket+0x18>
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <UART_sendPacket+0x42>
        uart_putc(outgoingString[i]);
    }
	i = 0;
	for(i = 0; i <= UART_DELIMITER_AMOUNT; i++) {
		uart_putc(UART_DELIMITER);
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	9d d5       	rcall	.+2874   	; 0x1bd4 <uart_putc>
    109a:	c1 50       	subi	r28, 0x01	; 1
	int8_t i = 0;
    for(i = 0; i < length; i++) {
        uart_putc(outgoingString[i]);
    }
	i = 0;
	for(i = 0; i <= UART_DELIMITER_AMOUNT; i++) {
    109c:	e1 f7       	brne	.-8      	; 0x1096 <UART_sendPacket+0x38>
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <UART_sendPacket+0x46>
}

void UART_sendPacket(uint8_t outgoingString[], uint8_t length) {
	//uart_putc('D');
	int8_t i = 0;
    for(i = 0; i < length; i++) {
    10a0:	c8 e0       	ldi	r28, 0x08	; 8
    10a2:	f9 cf       	rjmp	.-14     	; 0x1096 <UART_sendPacket+0x38>
    }
	i = 0;
	for(i = 0; i <= UART_DELIMITER_AMOUNT; i++) {
		uart_putc(UART_DELIMITER);
	}
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	08 95       	ret

000010b0 <UART_formTestPacket>:
// 	}
	
// 	for (int i = 0; i < 32; i++) uart1_putc(outgoingString[i]);
// }

void UART_formTestPacket(void) {
    10b0:	8f 92       	push	r8
    10b2:	9f 92       	push	r9
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	60 97       	sbiw	r28, 0x10	; 16
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t testPacketArray[15];
	
	uint16_t rawPedalThrottleCH1 = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
    10d8:	85 e0       	ldi	r24, 0x05	; 5
    10da:	d3 d8       	rcall	.-3674   	; 0x282 <a2d_10bitCh>
    10dc:	08 2f       	mov	r16, r24
    10de:	89 2e       	mov	r8, r25
	uint16_t rawPedalThrottleCH2 = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	cf d8       	rcall	.-3682   	; 0x282 <a2d_10bitCh>
    10e4:	e8 2e       	mov	r14, r24
    10e6:	99 2e       	mov	r9, r25
	uint16_t rawPedalBrakeCH1 = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH1);
    10e8:	8a e0       	ldi	r24, 0x0A	; 10
    10ea:	cb d8       	rcall	.-3690   	; 0x282 <a2d_10bitCh>
    10ec:	f8 2e       	mov	r15, r24
    10ee:	a9 2e       	mov	r10, r25
	uint16_t rawPedalBrakeCH2 = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH2);
    10f0:	88 e0       	ldi	r24, 0x08	; 8
    10f2:	c7 d8       	rcall	.-3698   	; 0x282 <a2d_10bitCh>
    10f4:	18 2f       	mov	r17, r24
    10f6:	b9 2e       	mov	r11, r25
	uint16_t rawSteering = a2d_10bitCh(INPUT_STEERING_ANGLE_CH);
    10f8:	84 e0       	ldi	r24, 0x04	; 4
    10fa:	c3 d8       	rcall	.-3706   	; 0x282 <a2d_10bitCh>
    10fc:	d8 2e       	mov	r13, r24
    10fe:	c9 2e       	mov	r12, r25
    1100:	81 e0       	ldi	r24, 0x01	; 1
	
	uint8_t testSpeed = 1;
    1102:	88 8b       	std	Y+16, r24	; 0x10
    1104:	89 82       	std	Y+1, r8	; 0x01
	
	testPacketArray[0] = rawPedalThrottleCH1 >> 8;
    1106:	0a 83       	std	Y+2, r16	; 0x02
	testPacketArray[1] = rawPedalThrottleCH1;
    1108:	9b 82       	std	Y+3, r9	; 0x03
	testPacketArray[2] = rawPedalThrottleCH2 >> 8;
    110a:	ec 82       	std	Y+4, r14	; 0x04
	testPacketArray[3] = rawPedalThrottleCH2;
    110c:	0e 19       	sub	r16, r14
	testPacketArray[4] = (uint8_t)rawPedalThrottleCH1 - (uint8_t)rawPedalThrottleCH2;
    110e:	0d 83       	std	Y+5, r16	; 0x05
    1110:	ae 82       	std	Y+6, r10	; 0x06
	testPacketArray[5] = rawPedalBrakeCH1 >> 8;
    1112:	ff 82       	std	Y+7, r15	; 0x07
	testPacketArray[6] = rawPedalBrakeCH1;
    1114:	b8 86       	std	Y+8, r11	; 0x08
	testPacketArray[7] = rawPedalBrakeCH2 >> 8;
    1116:	19 87       	std	Y+9, r17	; 0x09
	testPacketArray[8] = rawPedalBrakeCH2;
    1118:	1f 19       	sub	r17, r15
	testPacketArray[9] = (uint8_t)rawPedalBrakeCH2 - (uint8_t)rawPedalBrakeCH1;
    111a:	1a 87       	std	Y+10, r17	; 0x0a
	testPacketArray[10] = 0;
    111c:	1b 86       	std	Y+11, r1	; 0x0b
	INPUT_get_accelPedal(&testSpeed);
    111e:	ce 01       	movw	r24, r28
    1120:	40 96       	adiw	r24, 0x10	; 16
    1122:	21 dd       	rcall	.-1470   	; 0xb66 <INPUT_get_accelPedal>
    1124:	88 89       	ldd	r24, Y+16	; 0x10
	testPacketArray[11] = testSpeed; 
    1126:	8c 87       	std	Y+12, r24	; 0x0c
    1128:	1d 86       	std	Y+13, r1	; 0x0d
	testPacketArray[12] = 0;
	testPacketArray[13] = rawSteering >> 8;
    112a:	ce 86       	std	Y+14, r12	; 0x0e
	testPacketArray[14] = rawSteering | 0b00000000;
    112c:	df 86       	std	Y+15, r13	; 0x0f
	
    UART_sendPacket(testPacketArray, 15);
    112e:	6f e0       	ldi	r22, 0x0F	; 15
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	94 df       	rcall	.-216    	; 0x105e <UART_sendPacket>
    1136:	60 96       	adiw	r28, 0x10	; 16
	//testPacketArray[0] = pedalBrake;
	testPacketArray[2] = steeringAngle;
	
	UART_sendPacket(testPacketArray, 1);
	*/
}
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	bf 90       	pop	r11
    1154:	af 90       	pop	r10
    1156:	9f 90       	pop	r9
    1158:	8f 90       	pop	r8
    115a:	08 95       	ret

0000115c <main>:
volatile uint8_t ouft = 0;

int main(void) {    

    // Set Up
    firmware_init();
    115c:	0e dc       	rcall	.-2020   	; 0x97a <firmware_init>
    timer_init();
    115e:	24 dc       	rcall	.-1976   	; 0x9a8 <timer_init>
    1160:	10 92 9b 09 	sts	0x099B, r1	; 0x80099b <shutdownState>

    // Grab the state of the shutdown circuity
    shutdownState = 0;
    1164:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <isSirenOn>
	isSirenOn = 0;
    1168:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    116a:	89 e6       	ldi	r24, 0x69	; 105
    116c:	98 e1       	ldi	r25, 0x18	; 24
    116e:	21 50       	subi	r18, 0x01	; 1
    1170:	80 40       	sbci	r24, 0x00	; 0
    1172:	90 40       	sbci	r25, 0x00	; 0
    1174:	e1 f7       	brne	.-8      	; 0x116e <main+0x12>
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <main+0x1c>
    1178:	00 00       	nop
    117a:	78 94       	sei
	_delay_ms(500);
    // Enable Interupts
    sei();		
    117c:	ff cf       	rjmp	.-2      	; 0x117c <main+0x20>

0000117e <oneKHzTimer>:
    117e:	0f 93       	push	r16

/**
 * @brief Core system's timer, 1ms, core of the pseudo RTOS system
 */
void oneKHzTimer(void)
{
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	1f 92       	push	r1
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t InputSteeringCount = 7;					// Number of iterations for the steering angle heartbeat trigger	
	
    // Check the ignition button state
    // 1s debounce, IE hold for 50ms and if held, change state
    // ------------------------------------------------------------------------
	if(!(PINJ & (1<<PJ6))) // Checking Pin J6 (69)
    118c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7e0103>
    1190:	86 fd       	sbrc	r24, 6
    1192:	2e c0       	rjmp	.+92     	; 0x11f0 <oneKHzTimer+0x72>
    {
        ignitionState = 1; // Tracks that the ignition button is on
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <ignitionState>
        if(ignitionStateDebounceCount++ > 1500) // If 1.5s has been counted
    119a:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <ignitionStateDebounceCount>
    119e:	90 91 a8 09 	lds	r25, 0x09A8	; 0x8009a8 <ignitionStateDebounceCount+0x1>
    11a2:	9c 01       	movw	r18, r24
    11a4:	2f 5f       	subi	r18, 0xFF	; 255
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	30 93 a8 09 	sts	0x09A8, r19	; 0x8009a8 <ignitionStateDebounceCount+0x1>
    11ac:	20 93 a7 09 	sts	0x09A7, r18	; 0x8009a7 <ignitionStateDebounceCount>
    11b0:	8d 3d       	cpi	r24, 0xDD	; 221
    11b2:	95 40       	sbci	r25, 0x05	; 5
    11b4:	28 f1       	brcs	.+74     	; 0x1200 <oneKHzTimer+0x82>
		{
            //If this is the first time though from a previous press
            if(ignitionStateLock == 0) {
    11b6:	80 91 a6 09 	lds	r24, 0x09A6	; 0x8009a6 <ignitionStateLock>
    11ba:	81 11       	cpse	r24, r1
    11bc:	21 c0       	rjmp	.+66     	; 0x1200 <oneKHzTimer+0x82>
                ignitionStateLock = 1;		// Disabled first run though after press
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <ignitionStateLock>
                isArmedState ^= 1;
    11c4:	90 91 a4 09 	lds	r25, 0x09A4	; 0x8009a4 <isArmedState>
    11c8:	89 27       	eor	r24, r25
    11ca:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <isArmedState>
				// If the armed state has just been turned on, activate the siren
				if(isArmedState == 1) {
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	39 f4       	brne	.+14     	; 0x11e0 <oneKHzTimer+0x62>
					led_toggle();
    11d2:	3e df       	rcall	.-388    	; 0x1050 <led_toggle>
					isSirenOn = 1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <isSirenOn>
					isPreChargeOn = 1;
    11da:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <isPreChargeOn>
				} else {
					led_toggle();
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <oneKHzTimer+0x8a>
    11e0:	37 df       	rcall	.-402    	; 0x1050 <led_toggle>
					// Turnning it all off just in case
					isContactorHighOn = 0;
    11e2:	10 92 9d 09 	sts	0x099D, r1	; 0x80099d <isContactorHighOn>
					isPreChargeOn = 0;
    11e6:	10 92 9e 09 	sts	0x099E, r1	; 0x80099e <isPreChargeOn>
					isSirenOn = 0;
    11ea:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <isSirenOn>
    11ee:	3b c0       	rjmp	.+118    	; 0x1266 <oneKHzTimer+0xe8>
            }
			
        }
    }
    else {
        ignitionState = 0; // Tracks that the ignition button is off
    11f0:	10 92 a5 09 	sts	0x09A5, r1	; 0x8009a5 <ignitionState>
        ignitionStateLock = 0; // Re-enables the first run though after the timer has been reached
    11f4:	10 92 a6 09 	sts	0x09A6, r1	; 0x8009a6 <ignitionStateLock>
        ignitionStateDebounceCount = 0; // Resets the counter for time the button is pressed
    11f8:	10 92 a8 09 	sts	0x09A8, r1	; 0x8009a8 <ignitionStateDebounceCount+0x1>
    11fc:	10 92 a7 09 	sts	0x09A7, r1	; 0x8009a7 <ignitionStateDebounceCount>
    }
	
	// Additionally, see if the siren needs to sound that the HV is on
	if(isSirenOn == 1) { // Checks to see if the siren should be active
    1200:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <isSirenOn>
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	a1 f4       	brne	.+40     	; 0x1230 <oneKHzTimer+0xb2>
		if(sirenOnCount++ > sirenOnDuration) { // Counts up time, and if over allowance
    1208:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <sirenOnCount>
    120c:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <sirenOnCount+0x1>
    1210:	9c 01       	movw	r18, r24
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	30 93 a2 09 	sts	0x09A2, r19	; 0x8009a2 <sirenOnCount+0x1>
    121a:	20 93 a1 09 	sts	0x09A1, r18	; 0x8009a1 <sirenOnCount>
    121e:	81 3d       	cpi	r24, 0xD1	; 209
    1220:	97 40       	sbci	r25, 0x07	; 7
    1222:	30 f0       	brcs	.+12     	; 0x1230 <oneKHzTimer+0xb2>
			isSirenOn = 0; // Turn of siren
    1224:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <isSirenOn>
			sirenOnCount = 0;
    1228:	10 92 a2 09 	sts	0x09A2, r1	; 0x8009a2 <sirenOnCount+0x1>
    122c:	10 92 a1 09 	sts	0x09A1, r1	; 0x8009a1 <sirenOnCount>
		}
	}
	
	// Manage the Precharge time
	if(isPreChargeOn == 1) { // Checks to see if the siren should be active
    1230:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <isPreChargeOn>
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	b9 f4       	brne	.+46     	; 0x1266 <oneKHzTimer+0xe8>
		if(preChargeOnCount++ > preChargeOnDuration) { // Counts up time, and if over allowance
    1238:	80 91 9f 09 	lds	r24, 0x099F	; 0x80099f <preChargeOnCount>
    123c:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <preChargeOnCount+0x1>
    1240:	9c 01       	movw	r18, r24
    1242:	2f 5f       	subi	r18, 0xFF	; 255
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	30 93 a0 09 	sts	0x09A0, r19	; 0x8009a0 <preChargeOnCount+0x1>
    124a:	20 93 9f 09 	sts	0x099F, r18	; 0x80099f <preChargeOnCount>
    124e:	8b 3f       	cpi	r24, 0xFB	; 251
    1250:	91 05       	cpc	r25, r1
    1252:	48 f0       	brcs	.+18     	; 0x1266 <oneKHzTimer+0xe8>
			isPreChargeOn = 0;
    1254:	10 92 9e 09 	sts	0x099E, r1	; 0x80099e <isPreChargeOn>
			preChargeOnCount = 0;
    1258:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <preChargeOnCount+0x1>
    125c:	10 92 9f 09 	sts	0x099F, r1	; 0x80099f <preChargeOnCount>
			isContactorHighOn = 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	80 93 9d 09 	sts	0x099D, r24	; 0x80099d <isContactorHighOn>
	
	// Gather all input pedals
	//------------------------------------------------------------------------
	
    uint8_t tmpInputVal;
    if(InputPedalThrottleCount > INPUT_TIME_PEDAL_THROTTLE)
    1266:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <InputPedalThrottleCount.2515>
    126a:	8b 30       	cpi	r24, 0x0B	; 11
    126c:	50 f0       	brcs	.+20     	; 0x1282 <oneKHzTimer+0x104>
    {
		//INPUT_accelerationPedal = (uint8_t)(a2d_10bitCh(5)); // Raw ADC sample
        if(INPUT_get_accelPedal(&tmpInputVal) == 0) {
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	79 dc       	rcall	.-1806   	; 0xb66 <INPUT_get_accelPedal>
    1274:	81 11       	cpse	r24, r1
    1276:	03 c0       	rjmp	.+6      	; 0x127e <oneKHzTimer+0x100>
             INPUT_accelerationPedal = tmpInputVal;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <INPUT_accelerationPedal>
        }
        InputPedalThrottleCount = 0;
    127e:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <InputPedalThrottleCount.2515>
    }
    if(InputPedalBrakeCount > INPUT_TIME_PEDAL_BRAKE)
    1282:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <InputPedalBrakeCount.2516>
    1286:	8b 30       	cpi	r24, 0x0B	; 11
    {
        //INPUT_brakePedal = (uint8_t)(a2d_10bitCh(8)); // Raw ADC sample
        if(INPUT_get_brakePedal(&tmpInputVal) == 0) {
    1288:	50 f0       	brcs	.+20     	; 0x129e <oneKHzTimer+0x120>
    128a:	ce 01       	movw	r24, r28
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	43 dd       	rcall	.-1402   	; 0xd16 <INPUT_get_brakePedal>
    1290:	81 11       	cpse	r24, r1
    1292:	03 c0       	rjmp	.+6      	; 0x129a <oneKHzTimer+0x11c>
             INPUT_brakePedal = tmpInputVal;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <INPUT_brakePedal>
		}
        InputPedalBrakeCount = 0;
    129a:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <InputPedalBrakeCount.2516>
    }
	if(InputSteeringCount > INPUT_TIME_STEERING)
    129e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <InputSteeringCount.2517>
    12a2:	8b 30       	cpi	r24, 0x0B	; 11
	{
		//INPUT_steeringAngle = (uint16_t)(a2d_8bitCh(4)); // Raw ADC sample
		if(INPUT_get_steeringWheel(&tmpInputVal) == 0) {
    12a4:	50 f0       	brcs	.+20     	; 0x12ba <oneKHzTimer+0x13c>
    12a6:	ce 01       	movw	r24, r28
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	bf dd       	rcall	.-1154   	; 0xe2a <INPUT_get_steeringWheel>
    12ac:	81 11       	cpse	r24, r1
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <oneKHzTimer+0x138>
			INPUT_steeringAngle = tmpInputVal;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <INPUT_steeringAngle>
		}
		InputSteeringCount = 0;
    12b6:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <InputSteeringCount.2517>
	//}
	//if(INPUT_get_brakePressureFront(&tmpInputVal) == 0) {
	//    INPUT_brakePressureFront = tmpInputVal;
	//}
	
    InputPedalThrottleCount++;
    12ba:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <InputPedalThrottleCount.2515>
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <InputPedalThrottleCount.2515>
    InputPedalBrakeCount++;
    12c4:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <InputPedalBrakeCount.2516>
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <InputPedalBrakeCount.2516>
	InputSteeringCount++;
    12ce:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <InputSteeringCount.2517>
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <InputSteeringCount.2517>
	
	// Brake light code
	if(INPUT_brakePedal > INPUT_PEDAL_BRAKE_LIGHT_ON) {
    12d8:	60 91 7f 09 	lds	r22, 0x097F	; 0x80097f <INPUT_brakePedal>
    12dc:	26 2f       	mov	r18, r22
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <INPUT_PEDAL_BRAKE_LIGHT_ON>
    12e4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <INPUT_PEDAL_BRAKE_LIGHT_ON+0x1>
    12e8:	82 17       	cp	r24, r18
    12ea:	93 07       	cpc	r25, r19
    12ec:	20 f4       	brcc	.+8      	; 0x12f6 <oneKHzTimer+0x178>
		isBrakeLightOn = 1;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	80 93 9c 09 	sts	0x099C, r24	; 0x80099c <isBrakeLightOn>
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <oneKHzTimer+0x17c>
	} else {
		isBrakeLightOn = 0;
    12f6:	10 92 9c 09 	sts	0x099C, r1	; 0x80099c <isBrakeLightOn>
	}
    
	// Creating CANBUS Packet data for transmission
	//------------------------------------------------------------------------
	
	inverterArray[0] = INPUT_accelerationPedal;
    12fa:	10 91 80 09 	lds	r17, 0x0980	; 0x800980 <INPUT_accelerationPedal>
    12fe:	e3 e9       	ldi	r30, 0x93	; 147
    1300:	f9 e0       	ldi	r31, 0x09	; 9
    1302:	10 83       	st	Z, r17
	inverterArray[1] = INPUT_brakePedal;
    1304:	61 83       	std	Z+1, r22	; 0x01
	inverterArray[2] = INPUT_steeringAngle;
    1306:	b0 91 81 09 	lds	r27, 0x0981	; 0x800981 <INPUT_steeringAngle>
    130a:	b2 83       	std	Z+2, r27	; 0x02
	inverterArray[3] = isArmedState;
    130c:	a0 91 a4 09 	lds	r26, 0x09A4	; 0x8009a4 <isArmedState>
    1310:	a3 83       	std	Z+3, r26	; 0x03
	inverterArray[4] = sirenOnCount;
    1312:	70 91 a1 09 	lds	r23, 0x09A1	; 0x8009a1 <sirenOnCount>
    1316:	74 83       	std	Z+4, r23	; 0x04
	inverterArray[5] = isContactorHighOn << 7 | isPreChargeOn << 6 | isSirenOn << 5 | isBrakeLightOn << 4 |
    1318:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <isContactorHighOn>
    131c:	90 e8       	ldi	r25, 0x80	; 128
    131e:	89 9f       	mul	r24, r25
    1320:	90 01       	movw	r18, r0
    1322:	11 24       	eor	r1, r1
    1324:	30 91 9e 09 	lds	r19, 0x099E	; 0x80099e <isPreChargeOn>
    1328:	40 e4       	ldi	r20, 0x40	; 64
    132a:	34 9f       	mul	r19, r20
    132c:	c0 01       	movw	r24, r0
    132e:	11 24       	eor	r1, r1
    1330:	82 2b       	or	r24, r18
    1332:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <isCoolingPumpRightOn>
    1336:	82 2b       	or	r24, r18
    1338:	30 91 a3 09 	lds	r19, 0x09A3	; 0x8009a3 <isSirenOn>
    133c:	90 e2       	ldi	r25, 0x20	; 32
    133e:	39 9f       	mul	r19, r25
    1340:	a0 01       	movw	r20, r0
    1342:	11 24       	eor	r1, r1
    1344:	28 2f       	mov	r18, r24
    1346:	24 2b       	or	r18, r20
    1348:	30 91 9c 09 	lds	r19, 0x099C	; 0x80099c <isBrakeLightOn>
    134c:	40 e1       	ldi	r20, 0x10	; 16
    134e:	34 9f       	mul	r19, r20
    1350:	c0 01       	movw	r24, r0
    1352:	11 24       	eor	r1, r1
    1354:	82 2b       	or	r24, r18
    1356:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <isCoolingFanLeftOn>
    135a:	99 0f       	add	r25, r25
    135c:	99 0f       	add	r25, r25
    135e:	99 0f       	add	r25, r25
    1360:	29 2f       	mov	r18, r25
    1362:	28 2b       	or	r18, r24
    1364:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <isCoolingPumpLeftOn>
    1368:	88 0f       	add	r24, r24
    136a:	88 0f       	add	r24, r24
    136c:	98 2f       	mov	r25, r24
    136e:	92 2b       	or	r25, r18
    1370:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <isCoolingFanRightOn>
    1374:	88 0f       	add	r24, r24
    1376:	89 2b       	or	r24, r25
    1378:	85 83       	std	Z+5, r24	; 0x05
	isCoolingFanLeftOn << 3 | isCoolingPumpLeftOn << 2 | isCoolingFanRightOn << 1 | isCoolingPumpRightOn | 0; // General State
	
	WheelArray[0] = INPUT_accelerationPedal;
    137a:	e6 e8       	ldi	r30, 0x86	; 134
    137c:	f9 e0       	ldi	r31, 0x09	; 9
    137e:	10 83       	st	Z, r17
    WheelArray[1] = INPUT_brakePedal;
    1380:	61 83       	std	Z+1, r22	; 0x01
	WheelArray[2] = INPUT_steeringAngle;
    1382:	b2 83       	std	Z+2, r27	; 0x02
	WheelArray[3] = isArmedState;
    1384:	a3 83       	std	Z+3, r26	; 0x03
	WheelArray[4] = sirenOnCount;
    1386:	74 83       	std	Z+4, r23	; 0x04
	WheelArray[5] = isContactorHighOn << 7 | isPreChargeOn << 6 | isSirenOn << 5 | isBrakeLightOn << 4 |
    1388:	85 83       	std	Z+5, r24	; 0x05
	isCoolingFanLeftOn << 3 | isCoolingPumpLeftOn << 2 | isCoolingFanRightOn << 1 | isCoolingPumpRightOn | 0; // General State

	// Fill PDM Array
	PDMarray[0] = isContactorHighOn << 7 | isPreChargeOn << 6 | isSirenOn << 5 | isBrakeLightOn << 4 | 
    138a:	ee e8       	ldi	r30, 0x8E	; 142
    138c:	f9 e0       	ldi	r31, 0x09	; 9
    138e:	80 83       	st	Z, r24
				  isCoolingFanLeftOn << 3 | isCoolingPumpLeftOn << 2 | isCoolingFanRightOn << 1 | isCoolingPumpRightOn | 0; // General State
	PDMarray[1] = 100; // 
    1390:	84 e6       	ldi	r24, 0x64	; 100
    1392:	81 83       	std	Z+1, r24	; 0x01
	PDMarray[2] = 100; // 
    1394:	82 83       	std	Z+2, r24	; 0x02
	PDMarray[3] = 100; // 
    1396:	83 83       	std	Z+3, r24	; 0x03
	PDMarray[4] = 100; // 
    1398:	84 83       	std	Z+4, r24	; 0x04
	// CANBUS Sending
	// Send CAN heartbeats -> Inverters: 100Hz, Data: 100Hz, Power: 20Hz
	// 100Hz = 1 / 100 = 0.01s = 10ms, 20Hz = 1 / 20 = 0.05s = 50ms
	//------------------------------------------------------------------------
	
	if(CANheartbeatCountInverters >= CAN_HEARTBEAT_TIME_INVERTERS) {
    139a:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <CANheartbeatCountInverters.2510>
    139e:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <CANheartbeatCountInverters.2510+0x1>
    13a2:	84 36       	cpi	r24, 0x64	; 100
    13a4:	91 05       	cpc	r25, r1
    13a6:	70 f0       	brcs	.+28     	; 0x13c4 <oneKHzTimer+0x246>
		// Reset inverter heartbeat counter
		CANheartbeatCountInverters = 0;
    13a8:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <CANheartbeatCountInverters.2510+0x1>
    13ac:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <CANheartbeatCountInverters.2510>
		// Send inverter system heartbeat 0b0100100000000000000000000011110
		CAN_send(TRACTIVE_CAN, 8, inverterArray, HEARTBEAT_INV_ID);
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	34 e0       	ldi	r19, 0x04	; 4
    13b8:	43 e9       	ldi	r20, 0x93	; 147
    13ba:	59 e0       	ldi	r21, 0x09	; 9
    13bc:	68 e0       	ldi	r22, 0x08	; 8
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CAN_send>
		
	}
	if(CANheartbeatCountWheel > CAN_HEARTBEAT_TIME_WHEEL) {
    13c4:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <CANheartbeatCountWheel.2511>
    13c8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <CANheartbeatCountWheel.2511+0x1>
    13cc:	85 36       	cpi	r24, 0x65	; 101
    13ce:	91 05       	cpc	r25, r1
    13d0:	70 f0       	brcs	.+28     	; 0x13ee <oneKHzTimer+0x270>
		// Reset data heartbeat counter
		CANheartbeatCountWheel = 0;
    13d2:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <CANheartbeatCountWheel.2511+0x1>
    13d6:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <CANheartbeatCountWheel.2511>
		// Send data system heartbeat
		CAN_send(DATA_CAN, 8, WheelArray, HEARTBEAT_WHEEL_ID | 1);
    13da:	01 e0       	ldi	r16, 0x01	; 1
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	20 e4       	ldi	r18, 0x40	; 64
    13e0:	38 e0       	ldi	r19, 0x08	; 8
    13e2:	46 e8       	ldi	r20, 0x86	; 134
    13e4:	59 e0       	ldi	r21, 0x09	; 9
    13e6:	68 e0       	ldi	r22, 0x08	; 8
    13e8:	84 e0       	ldi	r24, 0x04	; 4
    13ea:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CAN_send>
	}
	if(CANheartbeatCountPDM > CAN_HEARTBEAT_TIME_PDM) {
    13ee:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <CANheartbeatCountPDM.2512>
    13f2:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <CANheartbeatCountPDM.2512+0x1>
    13f6:	85 36       	cpi	r24, 0x65	; 101
    13f8:	91 05       	cpc	r25, r1
    13fa:	70 f0       	brcs	.+28     	; 0x1418 <oneKHzTimer+0x29a>
		// Reset power heartbeat counter
		CANheartbeatCountPDM = 0;
    13fc:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <CANheartbeatCountPDM.2512+0x1>
    1400:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <CANheartbeatCountPDM.2512>
		// isContactorHighOn ^= 1;
		// Send power system heartbeat (5 bytes in PDM array)
		CAN_send(POWER_CAN, 5, PDMarray, HEARTBEAT_PDM_ID | 1);
    1404:	01 e0       	ldi	r16, 0x01	; 1
    1406:	10 e0       	ldi	r17, 0x00	; 0
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	39 e0       	ldi	r19, 0x09	; 9
    140c:	4e e8       	ldi	r20, 0x8E	; 142
    140e:	59 e0       	ldi	r21, 0x09	; 9
    1410:	65 e0       	ldi	r22, 0x05	; 5
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CAN_send>
	}
	if(CANheartbeatCountShutdown > CAN_HEARTBEAT_TIME_SHUTDOWN)
    1418:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <CANheartbeatCountShutdown.2513>
    141c:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <CANheartbeatCountShutdown.2513+0x1>
    1420:	85 36       	cpi	r24, 0x65	; 101
    1422:	91 05       	cpc	r25, r1
    1424:	20 f0       	brcs	.+8      	; 0x142e <oneKHzTimer+0x2b0>
	{
		// Reset power heartbeat counter
		CANheartbeatCountShutdown = 0;
    1426:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <CANheartbeatCountShutdown.2513+0x1>
    142a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <CANheartbeatCountShutdown.2513>
		// Send shutdown heartbeat (dont care what for now) (5 bytes in PDM array)
		// CAN_send(POWER_CAN, 5, WheelArray, HEARTBEAT_SHUTDOWN_ID | 1);
	}
	if(CANheartbeatCountAMU > CAN_HEARTBEAT_TIME_AMU) {
    142e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <CANheartbeatCountAMU.2514>
    1432:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <CANheartbeatCountAMU.2514+0x1>
    1436:	85 36       	cpi	r24, 0x65	; 101
    1438:	91 05       	cpc	r25, r1
		// Reset power heartbeat counter
		CANheartbeatCountAMU = 0;
    143a:	28 f0       	brcs	.+10     	; 0x1446 <oneKHzTimer+0x2c8>
    143c:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <CANheartbeatCountAMU.2514+0x1>
    1440:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <CANheartbeatCountAMU.2514>
		// Send shutdown heartbeat (dont care what for now)
		// CAN_send(POWER_CAN, 5, PDMarray, HEARTBEAT_AMU_ID | 1);
		UART_formTestPacket();
    1444:	35 de       	rcall	.-918    	; 0x10b0 <UART_formTestPacket>
	}
	
	// the adding commented to test a counting system in the inverters if statement
	CANheartbeatCountInverters++;
    1446:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <CANheartbeatCountInverters.2510>
    144a:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <CANheartbeatCountInverters.2510+0x1>
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	90 93 85 09 	sts	0x0985, r25	; 0x800985 <CANheartbeatCountInverters.2510+0x1>
    1454:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <CANheartbeatCountInverters.2510>
	CANheartbeatCountWheel++;
    1458:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <CANheartbeatCountWheel.2511>
    145c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <CANheartbeatCountWheel.2511+0x1>
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <CANheartbeatCountWheel.2511+0x1>
    1466:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <CANheartbeatCountWheel.2511>
	CANheartbeatCountPDM++;
    146a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <CANheartbeatCountPDM.2512>
    146e:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <CANheartbeatCountPDM.2512+0x1>
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <CANheartbeatCountPDM.2512+0x1>
    1478:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <CANheartbeatCountPDM.2512>
	CANheartbeatCountShutdown++;
    147c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <CANheartbeatCountShutdown.2513>
    1480:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <CANheartbeatCountShutdown.2513+0x1>
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <CANheartbeatCountShutdown.2513+0x1>
    148a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <CANheartbeatCountShutdown.2513>
	CANheartbeatCountAMU++;
    148e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <CANheartbeatCountAMU.2514>
    1492:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <CANheartbeatCountAMU.2514+0x1>
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <CANheartbeatCountAMU.2514+0x1>
    149c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <CANheartbeatCountAMU.2514>
	// }
	// CanHeartbeatErrorInverters++;
	// CanHeartbeatErrorData++;
	// CanHeartbeatErrorPower++;
	
}
    14a0:	0f 90       	pop	r0
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	08 95       	ret

000014ac <__vector_21>:

/**
 * @brief Called whenever the 1Khz timer triggers
 */
ISR(TIMER0_COMPA_vect)
{
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	0f 92       	push	r0
    14b4:	11 24       	eor	r1, r1
    14b6:	0b b6       	in	r0, 0x3b	; 59
    14b8:	0f 92       	push	r0
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
    oneKHzTimer();
    14d2:	55 de       	rcall	.-854    	; 0x117e <oneKHzTimer>
}
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0b be       	out	0x3b, r0	; 59
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1

}
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <__vector_2>:

/**
 * @brief Called whenever CANBUS 1 interupt is triggered
 *        * When ever there is data waiting in CAN 1
 */
ISR(INT1_vect) {
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	0b b6       	in	r0, 0x3b	; 59
    151a:	0f 92       	push	r0
    151c:	2f 93       	push	r18
    151e:	3f 93       	push	r19
    1520:	4f 93       	push	r20
    1522:	5f 93       	push	r21
    1524:	6f 93       	push	r22
    1526:	7f 93       	push	r23
    1528:	8f 93       	push	r24
    152a:	9f 93       	push	r25
    152c:	af 93       	push	r26
    152e:	bf 93       	push	r27
    1530:	ef 93       	push	r30
    1532:	ff 93       	push	r31
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	2d 97       	sbiw	r28, 0x0d	; 13
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	cd bf       	out	0x3d, r28	; 61
	// Details about the message we're attempting to pull from the CAN bus
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	// Get the data from the CAN bus and process it
	CAN_pull_packet(TRACTIVE_CAN, &numBytes, data, &ID);
    1542:	9e 01       	movw	r18, r28
    1544:	27 5f       	subi	r18, 0xF7	; 247
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	ae 01       	movw	r20, r28
    154a:	4f 5f       	subi	r20, 0xFF	; 255
    154c:	5f 4f       	sbci	r21, 0xFF	; 255
    154e:	be 01       	movw	r22, r28
    1550:	63 5f       	subi	r22, 0xF3	; 243
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	0e 94 93 01 	call	0x326	; 0x326 <CAN_pull_packet>
	led_toggle();
    155a:	7a dd       	rcall	.-1292   	; 0x1050 <led_toggle>
    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_RESPONSE_MALFORMED);
	//out++;
	
	//sprintf(out, "%x,%x,%x,%x,%x,%x,%x,%x", data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
}
    155c:	2d 96       	adiw	r28, 0x0d	; 13
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	ff 91       	pop	r31
    156e:	ef 91       	pop	r30
    1570:	bf 91       	pop	r27
    1572:	af 91       	pop	r26
    1574:	9f 91       	pop	r25
    1576:	8f 91       	pop	r24
    1578:	7f 91       	pop	r23
    157a:	6f 91       	pop	r22
    157c:	5f 91       	pop	r21
    157e:	4f 91       	pop	r20
    1580:	3f 91       	pop	r19
    1582:	2f 91       	pop	r18
    1584:	0f 90       	pop	r0
    1586:	0b be       	out	0x3b, r0	; 59
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	0f 90       	pop	r0
    158e:	1f 90       	pop	r1
    1590:	18 95       	reti

00001592 <__vector_1>:

/**
 * @brief Called whenever CANBUS 2 interupt is triggered
 *        * When ever there is data waiting in CAN 2
 */
ISR(INT0_vect)	{
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	0b b6       	in	r0, 0x3b	; 59
    159e:	0f 92       	push	r0
    15a0:	2f 93       	push	r18
    15a2:	3f 93       	push	r19
    15a4:	4f 93       	push	r20
    15a6:	5f 93       	push	r21
    15a8:	6f 93       	push	r22
    15aa:	7f 93       	push	r23
    15ac:	8f 93       	push	r24
    15ae:	9f 93       	push	r25
    15b0:	af 93       	push	r26
    15b2:	bf 93       	push	r27
    15b4:	ef 93       	push	r30
    15b6:	ff 93       	push	r31
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	2d 97       	sbiw	r28, 0x0d	; 13
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	//led_toggle();
	// Get the data from the CAN bus and process it
	CAN_pull_packet(POWER_CAN, &numBytes, data, &ID);
    15c6:	9e 01       	movw	r18, r28
    15c8:	27 5f       	subi	r18, 0xF7	; 247
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	ae 01       	movw	r20, r28
    15ce:	4f 5f       	subi	r20, 0xFF	; 255
    15d0:	5f 4f       	sbci	r21, 0xFF	; 255
    15d2:	be 01       	movw	r22, r28
    15d4:	63 5f       	subi	r22, 0xF3	; 243
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	0e 94 93 01 	call	0x326	; 0x326 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
		
}
    15de:	2d 96       	adiw	r28, 0x0d	; 13
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0b be       	out	0x3b, r0	; 59
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <__vector_9>:

/**
 * @brief Called whenever CANBUS 3 interupt is triggered
 *        * When ever there is data waiting in CAN 3
 */
ISR(PCINT0_vect) {
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	0b b6       	in	r0, 0x3b	; 59
    1620:	0f 92       	push	r0
    1622:	2f 93       	push	r18
    1624:	3f 93       	push	r19
    1626:	4f 93       	push	r20
    1628:	5f 93       	push	r21
    162a:	6f 93       	push	r22
    162c:	7f 93       	push	r23
    162e:	8f 93       	push	r24
    1630:	9f 93       	push	r25
    1632:	af 93       	push	r26
    1634:	bf 93       	push	r27
    1636:	ef 93       	push	r30
    1638:	ff 93       	push	r31
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	2d 97       	sbiw	r28, 0x0d	; 13
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	//led_toggle();
	// Get the data from the CAN bus and process it
	CAN_pull_packet(DATA_CAN, &numBytes, data, &ID);
    1648:	9e 01       	movw	r18, r28
    164a:	27 5f       	subi	r18, 0xF7	; 247
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	ae 01       	movw	r20, r28
    1650:	4f 5f       	subi	r20, 0xFF	; 255
    1652:	5f 4f       	sbci	r21, 0xFF	; 255
    1654:	be 01       	movw	r22, r28
    1656:	63 5f       	subi	r22, 0xF3	; 243
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	0e 94 93 01 	call	0x326	; 0x326 <CAN_pull_packet>
    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);

	

    1660:	2d 96       	adiw	r28, 0x0d	; 13
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	ff 91       	pop	r31
    1672:	ef 91       	pop	r30
    1674:	bf 91       	pop	r27
    1676:	af 91       	pop	r26
    1678:	9f 91       	pop	r25
    167a:	8f 91       	pop	r24
    167c:	7f 91       	pop	r23
    167e:	6f 91       	pop	r22
    1680:	5f 91       	pop	r21
    1682:	4f 91       	pop	r20
    1684:	3f 91       	pop	r19
    1686:	2f 91       	pop	r18
    1688:	0f 90       	pop	r0
    168a:	0b be       	out	0x3b, r0	; 59
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <MCP2515_CS_low>:
			MCP2515_reg_write(CANbus, MCP2515_RXM1EID0, IDmsk & 0xFF );
			if(IDmsk) MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
			else MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
	}	
	return 1;
}
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	51 f0       	breq	.+20     	; 0x16ae <MCP2515_CS_low+0x18>
    169a:	84 30       	cpi	r24, 0x04	; 4
    169c:	71 f0       	breq	.+28     	; 0x16ba <MCP2515_CS_low+0x24>
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	69 f4       	brne	.+26     	; 0x16bc <MCP2515_CS_low+0x26>
    16a2:	e2 e0       	ldi	r30, 0x02	; 2
    16a4:	f1 e0       	ldi	r31, 0x01	; 1
    16a6:	80 81       	ld	r24, Z
    16a8:	8e 7f       	andi	r24, 0xFE	; 254
    16aa:	80 83       	st	Z, r24
    16ac:	08 95       	ret
    16ae:	e2 e0       	ldi	r30, 0x02	; 2
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    16b2:	80 81       	ld	r24, Z
    16b4:	8d 7f       	andi	r24, 0xFD	; 253
    16b6:	80 83       	st	Z, r24
    16b8:	08 95       	ret
    16ba:	28 98       	cbi	0x05, 0	; 5
    16bc:	08 95       	ret

000016be <MCP2515_CS_high>:
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	51 f0       	breq	.+20     	; 0x16d6 <MCP2515_CS_high+0x18>
    16c2:	84 30       	cpi	r24, 0x04	; 4
    16c4:	71 f0       	breq	.+28     	; 0x16e2 <MCP2515_CS_high+0x24>
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	69 f4       	brne	.+26     	; 0x16e4 <MCP2515_CS_high+0x26>
    16ca:	e2 e0       	ldi	r30, 0x02	; 2
    16cc:	f1 e0       	ldi	r31, 0x01	; 1
    16ce:	80 81       	ld	r24, Z
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	80 83       	st	Z, r24
    16d4:	08 95       	ret
    16d6:	e2 e0       	ldi	r30, 0x02	; 2
    16d8:	f1 e0       	ldi	r31, 0x01	; 1
    16da:	80 81       	ld	r24, Z
    16dc:	82 60       	ori	r24, 0x02	; 2
    16de:	80 83       	st	Z, r24
    16e0:	08 95       	ret
    16e2:	28 9a       	sbi	0x05, 0	; 5
    16e4:	08 95       	ret

000016e6 <MCP2515_reg_write>:
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	c8 2f       	mov	r28, r24
    16ee:	16 2f       	mov	r17, r22
    16f0:	d4 2f       	mov	r29, r20
    16f2:	d1 df       	rcall	.-94     	; 0x1696 <MCP2515_CS_low>
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	8c d1       	rcall	.+792    	; 0x1a10 <SPI_send_byte>
    16f8:	81 2f       	mov	r24, r17
    16fa:	8a d1       	rcall	.+788    	; 0x1a10 <SPI_send_byte>
    16fc:	8d 2f       	mov	r24, r29
    16fe:	88 d1       	rcall	.+784    	; 0x1a10 <SPI_send_byte>
    1700:	8c 2f       	mov	r24, r28
    1702:	dd df       	rcall	.-70     	; 0x16be <MCP2515_CS_high>
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	08 95       	ret

0000170c <MCP2515_instruction>:
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	c8 2f       	mov	r28, r24
    1712:	d6 2f       	mov	r29, r22
    1714:	c0 df       	rcall	.-128    	; 0x1696 <MCP2515_CS_low>
    1716:	8d 2f       	mov	r24, r29
    1718:	7b d1       	rcall	.+758    	; 0x1a10 <SPI_send_byte>
    171a:	8c 2f       	mov	r24, r28
    171c:	d0 df       	rcall	.-96     	; 0x16be <MCP2515_CS_high>
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	08 95       	ret

00001724 <MCP2515_bit_modify>:
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	c8 2f       	mov	r28, r24
    172e:	06 2f       	mov	r16, r22
    1730:	d4 2f       	mov	r29, r20
    1732:	12 2f       	mov	r17, r18
    1734:	b0 df       	rcall	.-160    	; 0x1696 <MCP2515_CS_low>
    1736:	85 e0       	ldi	r24, 0x05	; 5
    1738:	6b d1       	rcall	.+726    	; 0x1a10 <SPI_send_byte>
    173a:	80 2f       	mov	r24, r16
    173c:	69 d1       	rcall	.+722    	; 0x1a10 <SPI_send_byte>
    173e:	81 2f       	mov	r24, r17
    1740:	67 d1       	rcall	.+718    	; 0x1a10 <SPI_send_byte>
    1742:	8d 2f       	mov	r24, r29
    1744:	65 d1       	rcall	.+714    	; 0x1a10 <SPI_send_byte>
    1746:	8c 2f       	mov	r24, r28
    1748:	ba df       	rcall	.-140    	; 0x16be <MCP2515_CS_high>
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	08 95       	ret

00001754 <MCP2515_init>:
    1754:	cf 93       	push	r28
    1756:	c8 2f       	mov	r28, r24
    1758:	60 ec       	ldi	r22, 0xC0	; 192
    175a:	d8 df       	rcall	.-80     	; 0x170c <MCP2515_instruction>
    175c:	20 ee       	ldi	r18, 0xE0	; 224
    175e:	40 e8       	ldi	r20, 0x80	; 128
    1760:	6f e0       	ldi	r22, 0x0F	; 15
    1762:	8c 2f       	mov	r24, r28
    1764:	df df       	rcall	.-66     	; 0x1724 <MCP2515_bit_modify>
    1766:	44 e0       	ldi	r20, 0x04	; 4
    1768:	6a e2       	ldi	r22, 0x2A	; 42
    176a:	8c 2f       	mov	r24, r28
    176c:	bc df       	rcall	.-136    	; 0x16e6 <MCP2515_reg_write>
    176e:	4a ec       	ldi	r20, 0xCA	; 202
    1770:	69 e2       	ldi	r22, 0x29	; 41
    1772:	8c 2f       	mov	r24, r28
    1774:	b8 df       	rcall	.-144    	; 0x16e6 <MCP2515_reg_write>
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	68 e2       	ldi	r22, 0x28	; 40
    177a:	8c 2f       	mov	r24, r28
    177c:	b4 df       	rcall	.-152    	; 0x16e6 <MCP2515_reg_write>
    177e:	43 e0       	ldi	r20, 0x03	; 3
    1780:	6b e2       	ldi	r22, 0x2B	; 43
    1782:	8c 2f       	mov	r24, r28
    1784:	b0 df       	rcall	.-160    	; 0x16e6 <MCP2515_reg_write>
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	6d e0       	ldi	r22, 0x0D	; 13
    178a:	8c 2f       	mov	r24, r28
    178c:	ac df       	rcall	.-168    	; 0x16e6 <MCP2515_reg_write>
    178e:	28 ee       	ldi	r18, 0xE8	; 232
    1790:	48 e0       	ldi	r20, 0x08	; 8
    1792:	6f e0       	ldi	r22, 0x0F	; 15
    1794:	8c 2f       	mov	r24, r28
    1796:	c6 df       	rcall	.-116    	; 0x1724 <MCP2515_bit_modify>
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <MCP2515_PullCanPacket>:
    179c:	7f 92       	push	r7
    179e:	8f 92       	push	r8
    17a0:	9f 92       	push	r9
    17a2:	af 92       	push	r10
    17a4:	bf 92       	push	r11
    17a6:	cf 92       	push	r12
    17a8:	df 92       	push	r13
    17aa:	ef 92       	push	r14
    17ac:	ff 92       	push	r15
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	2d 97       	sbiw	r28, 0x0d	; 13
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	78 2e       	mov	r7, r24
    17c8:	4a 01       	movw	r8, r20
    17ca:	59 01       	movw	r10, r18
    17cc:	61 37       	cpi	r22, 0x71	; 113
    17ce:	28 f4       	brcc	.+10     	; 0x17da <MCP2515_PullCanPacket+0x3e>
    17d0:	0f 2e       	mov	r0, r31
    17d2:	f0 e9       	ldi	r31, 0x90	; 144
    17d4:	ff 2e       	mov	r15, r31
    17d6:	f0 2d       	mov	r31, r0
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <MCP2515_PullCanPacket+0x46>
    17da:	0f 2e       	mov	r0, r31
    17dc:	f4 e9       	ldi	r31, 0x94	; 148
    17de:	ff 2e       	mov	r15, r31
    17e0:	f0 2d       	mov	r31, r0
    17e2:	87 2d       	mov	r24, r7
    17e4:	58 df       	rcall	.-336    	; 0x1696 <MCP2515_CS_low>
    17e6:	8f 2d       	mov	r24, r15
    17e8:	13 d1       	rcall	.+550    	; 0x1a10 <SPI_send_byte>
    17ea:	ce 01       	movw	r24, r28
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	7c 01       	movw	r14, r24
    17f0:	6e 01       	movw	r12, r28
    17f2:	9e e0       	ldi	r25, 0x0E	; 14
    17f4:	c9 0e       	add	r12, r25
    17f6:	d1 1c       	adc	r13, r1
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	0a d1       	rcall	.+532    	; 0x1a10 <SPI_send_byte>
    17fc:	f7 01       	movw	r30, r14
    17fe:	81 93       	st	Z+, r24
    1800:	7f 01       	movw	r14, r30
    1802:	ec 15       	cp	r30, r12
    1804:	fd 05       	cpc	r31, r13
    1806:	c1 f7       	brne	.-16     	; 0x17f8 <MCP2515_PullCanPacket+0x5c>
    1808:	2a 81       	ldd	r18, Y+2	; 0x02
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	a0 e0       	ldi	r26, 0x00	; 0
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	07 2e       	mov	r0, r23
    1814:	75 e1       	ldi	r23, 0x15	; 21
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	aa 1f       	adc	r26, r26
    181c:	bb 1f       	adc	r27, r27
    181e:	7a 95       	dec	r23
    1820:	d1 f7       	brne	.-12     	; 0x1816 <MCP2515_PullCanPacket+0x7a>
    1822:	70 2d       	mov	r23, r0
    1824:	3b 81       	ldd	r19, Y+3	; 0x03
    1826:	93 2b       	or	r25, r19
    1828:	3c 81       	ldd	r19, Y+4	; 0x04
    182a:	83 2b       	or	r24, r19
    182c:	42 2f       	mov	r20, r18
    182e:	40 7e       	andi	r20, 0xE0	; 224
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	03 2e       	mov	r0, r19
    1838:	3d e0       	ldi	r19, 0x0D	; 13
    183a:	44 0f       	add	r20, r20
    183c:	55 1f       	adc	r21, r21
    183e:	66 1f       	adc	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	3a 95       	dec	r19
    1844:	d1 f7       	brne	.-12     	; 0x183a <MCP2515_PullCanPacket+0x9e>
    1846:	30 2d       	mov	r19, r0
    1848:	84 2b       	or	r24, r20
    184a:	95 2b       	or	r25, r21
    184c:	a6 2b       	or	r26, r22
    184e:	b7 2b       	or	r27, r23
    1850:	23 70       	andi	r18, 0x03	; 3
    1852:	a2 2b       	or	r26, r18
    1854:	f8 01       	movw	r30, r16
    1856:	80 83       	st	Z, r24
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	a2 83       	std	Z+2, r26	; 0x02
    185c:	b3 83       	std	Z+3, r27	; 0x03
    185e:	4d 81       	ldd	r20, Y+5	; 0x05
    1860:	4f 70       	andi	r20, 0x0F	; 15
    1862:	f4 01       	movw	r30, r8
    1864:	40 83       	st	Z, r20
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	be 01       	movw	r22, r28
    186a:	6a 5f       	subi	r22, 0xFA	; 250
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	c5 01       	movw	r24, r10
    1870:	fe d1       	rcall	.+1020   	; 0x1c6e <memcpy>
    1872:	87 2d       	mov	r24, r7
    1874:	24 df       	rcall	.-440    	; 0x16be <MCP2515_CS_high>
    1876:	2d 96       	adiw	r28, 0x0d	; 13
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	df 90       	pop	r13
    1890:	cf 90       	pop	r12
    1892:	bf 90       	pop	r11
    1894:	af 90       	pop	r10
    1896:	9f 90       	pop	r9
    1898:	8f 90       	pop	r8
    189a:	7f 90       	pop	r7
    189c:	08 95       	ret

0000189e <MCP2515_reg_read>:
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	c8 2f       	mov	r28, r24
    18a4:	d6 2f       	mov	r29, r22
    18a6:	f7 de       	rcall	.-530    	; 0x1696 <MCP2515_CS_low>
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	b2 d0       	rcall	.+356    	; 0x1a10 <SPI_send_byte>
    18ac:	8d 2f       	mov	r24, r29
    18ae:	b0 d0       	rcall	.+352    	; 0x1a10 <SPI_send_byte>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	ae d0       	rcall	.+348    	; 0x1a10 <SPI_send_byte>
    18b4:	d8 2f       	mov	r29, r24
    18b6:	8c 2f       	mov	r24, r28
    18b8:	02 df       	rcall	.-508    	; 0x16be <MCP2515_CS_high>
    18ba:	8d 2f       	mov	r24, r29
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <MCP2515_findFreeTxBuffer>:
    18c2:	cf 93       	push	r28
    18c4:	c8 2f       	mov	r28, r24
    18c6:	60 e3       	ldi	r22, 0x30	; 48
    18c8:	ea df       	rcall	.-44     	; 0x189e <MCP2515_reg_read>
    18ca:	83 ff       	sbrs	r24, 3
    18cc:	0c c0       	rjmp	.+24     	; 0x18e6 <MCP2515_findFreeTxBuffer+0x24>
    18ce:	60 e4       	ldi	r22, 0x40	; 64
    18d0:	8c 2f       	mov	r24, r28
    18d2:	e5 df       	rcall	.-54     	; 0x189e <MCP2515_reg_read>
    18d4:	83 ff       	sbrs	r24, 3
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <MCP2515_findFreeTxBuffer+0x28>
    18d8:	60 e5       	ldi	r22, 0x50	; 80
    18da:	8c 2f       	mov	r24, r28
    18dc:	e0 df       	rcall	.-64     	; 0x189e <MCP2515_reg_read>
    18de:	83 ff       	sbrs	r24, 3
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <MCP2515_findFreeTxBuffer+0x2c>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <MCP2515_findFreeTxBuffer+0x2e>
    18e6:	80 e3       	ldi	r24, 0x30	; 48
    18e8:	03 c0       	rjmp	.+6      	; 0x18f0 <MCP2515_findFreeTxBuffer+0x2e>
    18ea:	80 e4       	ldi	r24, 0x40	; 64
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <MCP2515_findFreeTxBuffer+0x2e>
    18ee:	80 e5       	ldi	r24, 0x50	; 80
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <MCP2515_TX>:

void MCP2515_TX(uint8_t CANbus, int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID)
{
    18f4:	8f 92       	push	r8
    18f6:	9f 92       	push	r9
    18f8:	af 92       	push	r10
    18fa:	bf 92       	push	r11
    18fc:	df 92       	push	r13
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
	if(mob == 0)return;						//no free mob or invalid mob
    190a:	66 23       	and	r22, r22
    190c:	09 f4       	brne	.+2      	; 0x1910 <MCP2515_TX+0x1c>
    190e:	63 c0       	rjmp	.+198    	; 0x19d6 <MCP2515_TX+0xe2>
    1910:	47 01       	movw	r8, r14
    1912:	58 01       	movw	r10, r16
    1914:	c3 2f       	mov	r28, r19
    1916:	e2 2e       	mov	r14, r18
    1918:	d4 2e       	mov	r13, r20
    191a:	f6 2e       	mov	r15, r22
    191c:	d8 2f       	mov	r29, r24
	MCP2515_reg_write(CANbus, mob, 0x03);			//we shall set this to the highest priority so that it sends it immediately.
    191e:	43 e0       	ldi	r20, 0x03	; 3
    1920:	e2 de       	rcall	.-572    	; 0x16e6 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+1, (ID>>21) & 0xFF);	//shift the ID data to fill the respective MCP registers
    1922:	b5 01       	movw	r22, r10
    1924:	a4 01       	movw	r20, r8
    1926:	03 2e       	mov	r0, r19
    1928:	35 e1       	ldi	r19, 0x15	; 21
    192a:	76 95       	lsr	r23
    192c:	67 95       	ror	r22
    192e:	57 95       	ror	r21
    1930:	47 95       	ror	r20
    1932:	3a 95       	dec	r19
    1934:	d1 f7       	brne	.-12     	; 0x192a <MCP2515_TX+0x36>
    1936:	30 2d       	mov	r19, r0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	8f 0d       	add	r24, r15
    193c:	68 2f       	mov	r22, r24
    193e:	8d 2f       	mov	r24, r29
    1940:	d2 de       	rcall	.-604    	; 0x16e6 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+2, (((ID>>13) & 224)| ((ID>>16) & 3) | ((1<<3) & 0xFF)));	//set the EXIDE bit, which makes it extended (CAN 2.0B)
    1942:	b5 01       	movw	r22, r10
    1944:	a4 01       	movw	r20, r8
    1946:	03 2e       	mov	r0, r19
    1948:	3d e0       	ldi	r19, 0x0D	; 13
    194a:	76 95       	lsr	r23
    194c:	67 95       	ror	r22
    194e:	57 95       	ror	r21
    1950:	47 95       	ror	r20
    1952:	3a 95       	dec	r19
    1954:	d1 f7       	brne	.-12     	; 0x194a <MCP2515_TX+0x56>
    1956:	30 2d       	mov	r19, r0
    1958:	40 7e       	andi	r20, 0xE0	; 224
    195a:	8a 2d       	mov	r24, r10
    195c:	83 70       	andi	r24, 0x03	; 3
    195e:	48 2b       	or	r20, r24
    1960:	48 60       	ori	r20, 0x08	; 8
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	6f 0d       	add	r22, r15
    1966:	8d 2f       	mov	r24, r29
    1968:	be de       	rcall	.-644    	; 0x16e6 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+3, (ID>>8) & 0xFF );
    196a:	77 27       	eor	r23, r23
    196c:	6b 2d       	mov	r22, r11
    196e:	5a 2d       	mov	r21, r10
    1970:	49 2d       	mov	r20, r9
    1972:	83 e0       	ldi	r24, 0x03	; 3
    1974:	8f 0d       	add	r24, r15
    1976:	68 2f       	mov	r22, r24
    1978:	8d 2f       	mov	r24, r29
    197a:	b5 de       	rcall	.-662    	; 0x16e6 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+4, ID & 0xFF );
    197c:	64 e0       	ldi	r22, 0x04	; 4
    197e:	6f 0d       	add	r22, r15
    1980:	48 2d       	mov	r20, r8
    1982:	8d 2f       	mov	r24, r29
    1984:	b0 de       	rcall	.-672    	; 0x16e6 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+5, numBytes);		//set how many bytes we wish to send
    1986:	65 e0       	ldi	r22, 0x05	; 5
    1988:	6f 0d       	add	r22, r15
    198a:	4d 2d       	mov	r20, r13
    198c:	8d 2f       	mov	r24, r29
    198e:	ab de       	rcall	.-682    	; 0x16e6 <MCP2515_reg_write>
    1990:	dd 20       	and	r13, r13
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);

	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    1992:	89 f0       	breq	.+34     	; 0x19b6 <MCP2515_TX+0xc2>
    1994:	0e 2d       	mov	r16, r14
    1996:	1c 2f       	mov	r17, r28
    1998:	c6 e0       	ldi	r28, 0x06	; 6
    199a:	cf 0d       	add	r28, r15
    199c:	46 e0       	ldi	r20, 0x06	; 6
    199e:	4d 0d       	add	r20, r13
    19a0:	e4 2e       	mov	r14, r20
    19a2:	ef 0c       	add	r14, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
    19a4:	f8 01       	movw	r30, r16
    19a6:	41 91       	ld	r20, Z+
    19a8:	8f 01       	movw	r16, r30
    19aa:	6c 2f       	mov	r22, r28
    19ac:	8d 2f       	mov	r24, r29
    19ae:	9b de       	rcall	.-714    	; 0x16e6 <MCP2515_reg_write>
    19b0:	cf 5f       	subi	r28, 0xFF	; 255
    19b2:	ce 11       	cpse	r28, r14
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);

	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    19b4:	f7 cf       	rjmp	.-18     	; 0x19a4 <MCP2515_TX+0xb0>
    19b6:	8f 2d       	mov	r24, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
	}
	MCP2515_instruction(CANbus, 128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
    19b8:	85 95       	asr	r24
    19ba:	85 95       	asr	r24
    19bc:	85 95       	asr	r24
    19be:	85 95       	asr	r24
    19c0:	83 50       	subi	r24, 0x03	; 3
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <MCP2515_TX+0xd8>
    19c8:	66 0f       	add	r22, r22
    19ca:	77 1f       	adc	r23, r23
    19cc:	8a 95       	dec	r24
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <MCP2515_TX+0xd4>
    19d0:	60 68       	ori	r22, 0x80	; 128
    19d2:	8d 2f       	mov	r24, r29
    19d4:	9b de       	rcall	.-714    	; 0x170c <MCP2515_instruction>
    19d6:	df 91       	pop	r29
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	bf 90       	pop	r11
    19e6:	af 90       	pop	r10
    19e8:	9f 90       	pop	r9
    19ea:	8f 90       	pop	r8
    19ec:	08 95       	ret

000019ee <MCP2515_check_receive_status>:
    19ee:	cf 93       	push	r28


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
    19f0:	df 93       	push	r29
    19f2:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
    19f4:	50 de       	rcall	.-864    	; 0x1696 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
    19f6:	80 eb       	ldi	r24, 0xB0	; 176
    19f8:	0b d0       	rcall	.+22     	; 0x1a10 <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	09 d0       	rcall	.+18     	; 0x1a10 <SPI_send_byte>
    19fe:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	06 d0       	rcall	.+12     	; 0x1a10 <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
    1a04:	8c 2f       	mov	r24, r28
    1a06:	5b de       	rcall	.-842    	; 0x16be <MCP2515_CS_high>
    1a08:	8d 2f       	mov	r24, r29
	return status;
}
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	08 95       	ret

00001a10 <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    1a10:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    1a12:	0d b4       	in	r0, 0x2d	; 45
    1a14:	07 fe       	sbrs	r0, 7
    1a16:	fd cf       	rjmp	.-6      	; 0x1a12 <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    1a18:	8e b5       	in	r24, 0x2e	; 46
}
    1a1a:	08 95       	ret

00001a1c <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
    1a1c:	81 e5       	ldi	r24, 0x51	; 81
    1a1e:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
    1a24:	1e bc       	out	0x2e, r1	; 46
    1a26:	08 95       	ret

00001a28 <__vector_25>:
    /* get data from receive buffer */
    data1 = UART1_RxBuf[tmptail1];
    
    return (UART1_LastRxError << 8) + data1;

}/* uart1_getc */
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	0b b6       	in	r0, 0x3b	; 59
    1a34:	0f 92       	push	r0
    1a36:	2f 93       	push	r18
    1a38:	8f 93       	push	r24
    1a3a:	9f 93       	push	r25
    1a3c:	ef 93       	push	r30
    1a3e:	ff 93       	push	r31
    1a40:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1a44:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1a48:	88 71       	andi	r24, 0x18	; 24
    1a4a:	e0 91 f0 09 	lds	r30, 0x09F0	; 0x8009f0 <UART_RxHead>
    1a4e:	ef 5f       	subi	r30, 0xFF	; 255
    1a50:	ef 71       	andi	r30, 0x1F	; 31
    1a52:	90 91 ef 09 	lds	r25, 0x09EF	; 0x8009ef <UART_RxTail>
    1a56:	e9 17       	cp	r30, r25
    1a58:	39 f0       	breq	.+14     	; 0x1a68 <__vector_25+0x40>
    1a5a:	e0 93 f0 09 	sts	0x09F0, r30	; 0x8009f0 <UART_RxHead>
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	ed 50       	subi	r30, 0x0D	; 13
    1a62:	f6 4f       	sbci	r31, 0xF6	; 246
    1a64:	20 83       	st	Z, r18
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <__vector_25+0x42>
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <UART_LastRxError>
    1a6e:	ff 91       	pop	r31
    1a70:	ef 91       	pop	r30
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	2f 91       	pop	r18
    1a78:	0f 90       	pop	r0
    1a7a:	0b be       	out	0x3b, r0	; 59
    1a7c:	0f 90       	pop	r0
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	0f 90       	pop	r0
    1a82:	1f 90       	pop	r1
    1a84:	18 95       	reti

00001a86 <__vector_36>:
    1a86:	1f 92       	push	r1
    1a88:	0f 92       	push	r0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	0f 92       	push	r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	0b b6       	in	r0, 0x3b	; 59
    1a92:	0f 92       	push	r0
    1a94:	2f 93       	push	r18
    1a96:	8f 93       	push	r24
    1a98:	9f 93       	push	r25
    1a9a:	ef 93       	push	r30
    1a9c:	ff 93       	push	r31
    1a9e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1aa2:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1aa6:	88 71       	andi	r24, 0x18	; 24
    1aa8:	e0 91 ab 09 	lds	r30, 0x09AB	; 0x8009ab <UART1_RxHead>
    1aac:	ef 5f       	subi	r30, 0xFF	; 255
    1aae:	ef 71       	andi	r30, 0x1F	; 31
    1ab0:	90 91 aa 09 	lds	r25, 0x09AA	; 0x8009aa <UART1_RxTail>
    1ab4:	e9 17       	cp	r30, r25
    1ab6:	39 f0       	breq	.+14     	; 0x1ac6 <__vector_36+0x40>
    1ab8:	e0 93 ab 09 	sts	0x09AB, r30	; 0x8009ab <UART1_RxHead>
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	e2 55       	subi	r30, 0x52	; 82
    1ac0:	f6 4f       	sbci	r31, 0xF6	; 246
    1ac2:	20 83       	st	Z, r18
    1ac4:	01 c0       	rjmp	.+2      	; 0x1ac8 <__vector_36+0x42>
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <UART1_LastRxError>
    1acc:	ff 91       	pop	r31
    1ace:	ef 91       	pop	r30
    1ad0:	9f 91       	pop	r25
    1ad2:	8f 91       	pop	r24
    1ad4:	2f 91       	pop	r18
    1ad6:	0f 90       	pop	r0
    1ad8:	0b be       	out	0x3b, r0	; 59
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	0f 90       	pop	r0
    1ae0:	1f 90       	pop	r1
    1ae2:	18 95       	reti

00001ae4 <__vector_26>:
    1ae4:	1f 92       	push	r1
    1ae6:	0f 92       	push	r0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	0b b6       	in	r0, 0x3b	; 59
    1af0:	0f 92       	push	r0
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	ef 93       	push	r30
    1af8:	ff 93       	push	r31
    1afa:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <UART_TxHead>
    1afe:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <UART_TxTail>
    1b02:	98 17       	cp	r25, r24
    1b04:	69 f0       	breq	.+26     	; 0x1b20 <__vector_26+0x3c>
    1b06:	e0 91 f1 09 	lds	r30, 0x09F1	; 0x8009f1 <UART_TxTail>
    1b0a:	ef 5f       	subi	r30, 0xFF	; 255
    1b0c:	ef 71       	andi	r30, 0x1F	; 31
    1b0e:	e0 93 f1 09 	sts	0x09F1, r30	; 0x8009f1 <UART_TxTail>
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	ed 5e       	subi	r30, 0xED	; 237
    1b16:	f5 4f       	sbci	r31, 0xF5	; 245
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1b1e:	05 c0       	rjmp	.+10     	; 0x1b2a <__vector_26+0x46>
    1b20:	e1 ec       	ldi	r30, 0xC1	; 193
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	8f 7d       	andi	r24, 0xDF	; 223
    1b28:	80 83       	st	Z, r24
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	0f 90       	pop	r0
    1b34:	0b be       	out	0x3b, r0	; 59
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <__vector_37>:
    1b40:	1f 92       	push	r1
    1b42:	0f 92       	push	r0
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	0f 92       	push	r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	0b b6       	in	r0, 0x3b	; 59
    1b4c:	0f 92       	push	r0
    1b4e:	8f 93       	push	r24
    1b50:	9f 93       	push	r25
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
    1b56:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <UART1_TxHead>
    1b5a:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <UART1_TxTail>
    1b5e:	98 17       	cp	r25, r24
    1b60:	69 f0       	breq	.+26     	; 0x1b7c <__vector_37+0x3c>
    1b62:	e0 91 ac 09 	lds	r30, 0x09AC	; 0x8009ac <UART1_TxTail>
    1b66:	ef 5f       	subi	r30, 0xFF	; 255
    1b68:	ef 71       	andi	r30, 0x1F	; 31
    1b6a:	e0 93 ac 09 	sts	0x09AC, r30	; 0x8009ac <UART1_TxTail>
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	e2 53       	subi	r30, 0x32	; 50
    1b72:	f6 4f       	sbci	r31, 0xF6	; 246
    1b74:	80 81       	ld	r24, Z
    1b76:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <__vector_37+0x46>
    1b7c:	e9 ec       	ldi	r30, 0xC9	; 201
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	8f 7d       	andi	r24, 0xDF	; 223
    1b84:	80 83       	st	Z, r24
    1b86:	ff 91       	pop	r31
    1b88:	ef 91       	pop	r30
    1b8a:	9f 91       	pop	r25
    1b8c:	8f 91       	pop	r24
    1b8e:	0f 90       	pop	r0
    1b90:	0b be       	out	0x3b, r0	; 59
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	0f 90       	pop	r0
    1b98:	1f 90       	pop	r1
    1b9a:	18 95       	reti

00001b9c <uart_init>:
    1b9c:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <UART_TxHead>
    1ba0:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <UART_TxTail>
    1ba4:	10 92 f0 09 	sts	0x09F0, r1	; 0x8009f0 <UART_RxHead>
    1ba8:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <UART_RxTail>
    1bac:	e1 e6       	ldi	r30, 0x61	; 97
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 e8       	ldi	r24, 0x80	; 128
    1bb2:	80 83       	st	Z, r24
    1bb4:	10 82       	st	Z, r1
    1bb6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bba:	87 e6       	ldi	r24, 0x67	; 103
    1bbc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1bc6:	88 e1       	ldi	r24, 0x18	; 24
    1bc8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1bcc:	86 e0       	ldi	r24, 0x06	; 6
    1bce:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1bd2:	08 95       	ret

00001bd4 <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{	
	unsigned char tmphead;
	
	if (portKey == 0)
    1bd4:	90 91 33 0a 	lds	r25, 0x0A33	; 0x800a33 <portKey>
    1bd8:	91 11       	cpse	r25, r1
    1bda:	15 c0       	rjmp	.+42     	; 0x1c06 <uart_putc+0x32>
	{
		tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1bdc:	20 91 f2 09 	lds	r18, 0x09F2	; 0x8009f2 <UART_TxHead>
    1be0:	2f 5f       	subi	r18, 0xFF	; 255
    1be2:	2f 71       	andi	r18, 0x1F	; 31
    
		while ( tmphead == UART_TxTail ){
    1be4:	90 91 f1 09 	lds	r25, 0x09F1	; 0x8009f1 <UART_TxTail>
    1be8:	29 17       	cp	r18, r25
    1bea:	e1 f3       	breq	.-8      	; 0x1be4 <uart_putc+0x10>
			;// wait for free space in buffer 
		}
		
		UART_TxBuf[tmphead] = data;
    1bec:	e2 2f       	mov	r30, r18
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	ed 5e       	subi	r30, 0xED	; 237
    1bf2:	f5 4f       	sbci	r31, 0xF5	; 245
    1bf4:	80 83       	st	Z, r24
		UART_TxHead = tmphead;
    1bf6:	20 93 f2 09 	sts	0x09F2, r18	; 0x8009f2 <UART_TxHead>

		// enable UDRE interrupt 
		UART0_CONTROL |= (1 << UART0_UDRIE);
    1bfa:	e1 ec       	ldi	r30, 0xC1	; 193
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 62       	ori	r24, 0x20	; 32
    1c02:	80 83       	st	Z, r24
    1c04:	08 95       	ret
		
	}
	
	else if (portKey == 1)
    1c06:	91 30       	cpi	r25, 0x01	; 1
    1c08:	a1 f4       	brne	.+40     	; 0x1c32 <uart_putc+0x5e>
	{
		tmphead  = (UART1_TxHead + 1) & UART1_TX_BUFFER_MASK;
    1c0a:	20 91 ad 09 	lds	r18, 0x09AD	; 0x8009ad <UART1_TxHead>
    1c0e:	2f 5f       	subi	r18, 0xFF	; 255
    1c10:	2f 71       	andi	r18, 0x1F	; 31
    
		while ( tmphead == UART1_TxTail ){
    1c12:	90 91 ac 09 	lds	r25, 0x09AC	; 0x8009ac <UART1_TxTail>
    1c16:	29 17       	cp	r18, r25
    1c18:	e1 f3       	breq	.-8      	; 0x1c12 <uart_putc+0x3e>
			;// wait for free space in buffer 		
		}
		//PORTH &= 251;
    
		UART1_TxBuf[tmphead] = data;
    1c1a:	e2 2f       	mov	r30, r18
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	e2 53       	subi	r30, 0x32	; 50
    1c20:	f6 4f       	sbci	r31, 0xF6	; 246
    1c22:	80 83       	st	Z, r24
		UART1_TxHead = tmphead;
    1c24:	20 93 ad 09 	sts	0x09AD, r18	; 0x8009ad <UART1_TxHead>

		// enable UDRE interrupt 
		UART1_CONTROL |= (1 << UART1_UDRIE);	
    1c28:	e9 ec       	ldi	r30, 0xC9	; 201
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 62       	ori	r24, 0x20	; 32
    1c30:	80 83       	st	Z, r24
    1c32:	08 95       	ret

00001c34 <__udivmodhi4>:
    1c34:	aa 1b       	sub	r26, r26
    1c36:	bb 1b       	sub	r27, r27
    1c38:	51 e1       	ldi	r21, 0x11	; 17
    1c3a:	07 c0       	rjmp	.+14     	; 0x1c4a <__udivmodhi4_ep>

00001c3c <__udivmodhi4_loop>:
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	a6 17       	cp	r26, r22
    1c42:	b7 07       	cpc	r27, r23
    1c44:	10 f0       	brcs	.+4      	; 0x1c4a <__udivmodhi4_ep>
    1c46:	a6 1b       	sub	r26, r22
    1c48:	b7 0b       	sbc	r27, r23

00001c4a <__udivmodhi4_ep>:
    1c4a:	88 1f       	adc	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	5a 95       	dec	r21
    1c50:	a9 f7       	brne	.-22     	; 0x1c3c <__udivmodhi4_loop>
    1c52:	80 95       	com	r24
    1c54:	90 95       	com	r25
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	08 95       	ret

00001c5c <__tablejump2__>:
    1c5c:	ee 0f       	add	r30, r30
    1c5e:	ff 1f       	adc	r31, r31
    1c60:	00 24       	eor	r0, r0
    1c62:	00 1c       	adc	r0, r0
    1c64:	0b be       	out	0x3b, r0	; 59
    1c66:	07 90       	elpm	r0, Z+
    1c68:	f6 91       	elpm	r31, Z
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	09 94       	ijmp

00001c6e <memcpy>:
    1c6e:	fb 01       	movw	r30, r22
    1c70:	dc 01       	movw	r26, r24
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <memcpy+0xa>
    1c74:	01 90       	ld	r0, Z+
    1c76:	0d 92       	st	X+, r0
    1c78:	41 50       	subi	r20, 0x01	; 1
    1c7a:	50 40       	sbci	r21, 0x00	; 0
    1c7c:	d8 f7       	brcc	.-10     	; 0x1c74 <memcpy+0x6>
    1c7e:	08 95       	ret

00001c80 <snprintf>:
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	0d 89       	ldd	r16, Y+21	; 0x15
    1c9a:	1e 89       	ldd	r17, Y+22	; 0x16
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca0:	26 e0       	ldi	r18, 0x06	; 6
    1ca2:	2c 83       	std	Y+4, r18	; 0x04
    1ca4:	1a 83       	std	Y+2, r17	; 0x02
    1ca6:	09 83       	std	Y+1, r16	; 0x01
    1ca8:	97 ff       	sbrs	r25, 7
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <snprintf+0x30>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e8       	ldi	r25, 0x80	; 128
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	ae 01       	movw	r20, r28
    1cb8:	45 5e       	subi	r20, 0xE5	; 229
    1cba:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	19 d0       	rcall	.+50     	; 0x1cf8 <vfprintf>
    1cc6:	4d 81       	ldd	r20, Y+5	; 0x05
    1cc8:	5e 81       	ldd	r21, Y+6	; 0x06
    1cca:	57 fd       	sbrc	r21, 7
    1ccc:	0a c0       	rjmp	.+20     	; 0x1ce2 <snprintf+0x62>
    1cce:	2f 81       	ldd	r18, Y+7	; 0x07
    1cd0:	38 85       	ldd	r19, Y+8	; 0x08
    1cd2:	42 17       	cp	r20, r18
    1cd4:	53 07       	cpc	r21, r19
    1cd6:	0c f4       	brge	.+2      	; 0x1cda <snprintf+0x5a>
    1cd8:	9a 01       	movw	r18, r20
    1cda:	f8 01       	movw	r30, r16
    1cdc:	e2 0f       	add	r30, r18
    1cde:	f3 1f       	adc	r31, r19
    1ce0:	10 82       	st	Z, r1
    1ce2:	2e 96       	adiw	r28, 0x0e	; 14
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	08 95       	ret

00001cf8 <vfprintf>:
    1cf8:	2f 92       	push	r2
    1cfa:	3f 92       	push	r3
    1cfc:	4f 92       	push	r4
    1cfe:	5f 92       	push	r5
    1d00:	6f 92       	push	r6
    1d02:	7f 92       	push	r7
    1d04:	8f 92       	push	r8
    1d06:	9f 92       	push	r9
    1d08:	af 92       	push	r10
    1d0a:	bf 92       	push	r11
    1d0c:	cf 92       	push	r12
    1d0e:	df 92       	push	r13
    1d10:	ef 92       	push	r14
    1d12:	ff 92       	push	r15
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	2b 97       	sbiw	r28, 0x0b	; 11
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	6c 01       	movw	r12, r24
    1d2e:	7b 01       	movw	r14, r22
    1d30:	8a 01       	movw	r16, r20
    1d32:	fc 01       	movw	r30, r24
    1d34:	17 82       	std	Z+7, r1	; 0x07
    1d36:	16 82       	std	Z+6, r1	; 0x06
    1d38:	83 81       	ldd	r24, Z+3	; 0x03
    1d3a:	81 ff       	sbrs	r24, 1
    1d3c:	bf c1       	rjmp	.+894    	; 0x20bc <vfprintf+0x3c4>
    1d3e:	ce 01       	movw	r24, r28
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	3c 01       	movw	r6, r24
    1d44:	f6 01       	movw	r30, r12
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	f7 01       	movw	r30, r14
    1d4a:	93 fd       	sbrc	r25, 3
    1d4c:	85 91       	lpm	r24, Z+
    1d4e:	93 ff       	sbrs	r25, 3
    1d50:	81 91       	ld	r24, Z+
    1d52:	7f 01       	movw	r14, r30
    1d54:	88 23       	and	r24, r24
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <vfprintf+0x62>
    1d58:	ad c1       	rjmp	.+858    	; 0x20b4 <vfprintf+0x3bc>
    1d5a:	85 32       	cpi	r24, 0x25	; 37
    1d5c:	39 f4       	brne	.+14     	; 0x1d6c <vfprintf+0x74>
    1d5e:	93 fd       	sbrc	r25, 3
    1d60:	85 91       	lpm	r24, Z+
    1d62:	93 ff       	sbrs	r25, 3
    1d64:	81 91       	ld	r24, Z+
    1d66:	7f 01       	movw	r14, r30
    1d68:	85 32       	cpi	r24, 0x25	; 37
    1d6a:	21 f4       	brne	.+8      	; 0x1d74 <vfprintf+0x7c>
    1d6c:	b6 01       	movw	r22, r12
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	d6 d1       	rcall	.+940    	; 0x211e <fputc>
    1d72:	e8 cf       	rjmp	.-48     	; 0x1d44 <vfprintf+0x4c>
    1d74:	91 2c       	mov	r9, r1
    1d76:	21 2c       	mov	r2, r1
    1d78:	31 2c       	mov	r3, r1
    1d7a:	ff e1       	ldi	r31, 0x1F	; 31
    1d7c:	f3 15       	cp	r31, r3
    1d7e:	d8 f0       	brcs	.+54     	; 0x1db6 <vfprintf+0xbe>
    1d80:	8b 32       	cpi	r24, 0x2B	; 43
    1d82:	79 f0       	breq	.+30     	; 0x1da2 <vfprintf+0xaa>
    1d84:	38 f4       	brcc	.+14     	; 0x1d94 <vfprintf+0x9c>
    1d86:	80 32       	cpi	r24, 0x20	; 32
    1d88:	79 f0       	breq	.+30     	; 0x1da8 <vfprintf+0xb0>
    1d8a:	83 32       	cpi	r24, 0x23	; 35
    1d8c:	a1 f4       	brne	.+40     	; 0x1db6 <vfprintf+0xbe>
    1d8e:	23 2d       	mov	r18, r3
    1d90:	20 61       	ori	r18, 0x10	; 16
    1d92:	1d c0       	rjmp	.+58     	; 0x1dce <vfprintf+0xd6>
    1d94:	8d 32       	cpi	r24, 0x2D	; 45
    1d96:	61 f0       	breq	.+24     	; 0x1db0 <vfprintf+0xb8>
    1d98:	80 33       	cpi	r24, 0x30	; 48
    1d9a:	69 f4       	brne	.+26     	; 0x1db6 <vfprintf+0xbe>
    1d9c:	23 2d       	mov	r18, r3
    1d9e:	21 60       	ori	r18, 0x01	; 1
    1da0:	16 c0       	rjmp	.+44     	; 0x1dce <vfprintf+0xd6>
    1da2:	83 2d       	mov	r24, r3
    1da4:	82 60       	ori	r24, 0x02	; 2
    1da6:	38 2e       	mov	r3, r24
    1da8:	e3 2d       	mov	r30, r3
    1daa:	e4 60       	ori	r30, 0x04	; 4
    1dac:	3e 2e       	mov	r3, r30
    1dae:	2a c0       	rjmp	.+84     	; 0x1e04 <vfprintf+0x10c>
    1db0:	f3 2d       	mov	r31, r3
    1db2:	f8 60       	ori	r31, 0x08	; 8
    1db4:	1d c0       	rjmp	.+58     	; 0x1df0 <vfprintf+0xf8>
    1db6:	37 fc       	sbrc	r3, 7
    1db8:	2d c0       	rjmp	.+90     	; 0x1e14 <vfprintf+0x11c>
    1dba:	20 ed       	ldi	r18, 0xD0	; 208
    1dbc:	28 0f       	add	r18, r24
    1dbe:	2a 30       	cpi	r18, 0x0A	; 10
    1dc0:	40 f0       	brcs	.+16     	; 0x1dd2 <vfprintf+0xda>
    1dc2:	8e 32       	cpi	r24, 0x2E	; 46
    1dc4:	b9 f4       	brne	.+46     	; 0x1df4 <vfprintf+0xfc>
    1dc6:	36 fc       	sbrc	r3, 6
    1dc8:	75 c1       	rjmp	.+746    	; 0x20b4 <vfprintf+0x3bc>
    1dca:	23 2d       	mov	r18, r3
    1dcc:	20 64       	ori	r18, 0x40	; 64
    1dce:	32 2e       	mov	r3, r18
    1dd0:	19 c0       	rjmp	.+50     	; 0x1e04 <vfprintf+0x10c>
    1dd2:	36 fe       	sbrs	r3, 6
    1dd4:	06 c0       	rjmp	.+12     	; 0x1de2 <vfprintf+0xea>
    1dd6:	8a e0       	ldi	r24, 0x0A	; 10
    1dd8:	98 9e       	mul	r9, r24
    1dda:	20 0d       	add	r18, r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	92 2e       	mov	r9, r18
    1de0:	11 c0       	rjmp	.+34     	; 0x1e04 <vfprintf+0x10c>
    1de2:	ea e0       	ldi	r30, 0x0A	; 10
    1de4:	2e 9e       	mul	r2, r30
    1de6:	20 0d       	add	r18, r0
    1de8:	11 24       	eor	r1, r1
    1dea:	22 2e       	mov	r2, r18
    1dec:	f3 2d       	mov	r31, r3
    1dee:	f0 62       	ori	r31, 0x20	; 32
    1df0:	3f 2e       	mov	r3, r31
    1df2:	08 c0       	rjmp	.+16     	; 0x1e04 <vfprintf+0x10c>
    1df4:	8c 36       	cpi	r24, 0x6C	; 108
    1df6:	21 f4       	brne	.+8      	; 0x1e00 <vfprintf+0x108>
    1df8:	83 2d       	mov	r24, r3
    1dfa:	80 68       	ori	r24, 0x80	; 128
    1dfc:	38 2e       	mov	r3, r24
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <vfprintf+0x10c>
    1e00:	88 36       	cpi	r24, 0x68	; 104
    1e02:	41 f4       	brne	.+16     	; 0x1e14 <vfprintf+0x11c>
    1e04:	f7 01       	movw	r30, r14
    1e06:	93 fd       	sbrc	r25, 3
    1e08:	85 91       	lpm	r24, Z+
    1e0a:	93 ff       	sbrs	r25, 3
    1e0c:	81 91       	ld	r24, Z+
    1e0e:	7f 01       	movw	r14, r30
    1e10:	81 11       	cpse	r24, r1
    1e12:	b3 cf       	rjmp	.-154    	; 0x1d7a <vfprintf+0x82>
    1e14:	98 2f       	mov	r25, r24
    1e16:	9f 7d       	andi	r25, 0xDF	; 223
    1e18:	95 54       	subi	r25, 0x45	; 69
    1e1a:	93 30       	cpi	r25, 0x03	; 3
    1e1c:	28 f4       	brcc	.+10     	; 0x1e28 <vfprintf+0x130>
    1e1e:	0c 5f       	subi	r16, 0xFC	; 252
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	9f e3       	ldi	r25, 0x3F	; 63
    1e24:	99 83       	std	Y+1, r25	; 0x01
    1e26:	0d c0       	rjmp	.+26     	; 0x1e42 <vfprintf+0x14a>
    1e28:	83 36       	cpi	r24, 0x63	; 99
    1e2a:	31 f0       	breq	.+12     	; 0x1e38 <vfprintf+0x140>
    1e2c:	83 37       	cpi	r24, 0x73	; 115
    1e2e:	71 f0       	breq	.+28     	; 0x1e4c <vfprintf+0x154>
    1e30:	83 35       	cpi	r24, 0x53	; 83
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <vfprintf+0x13e>
    1e34:	55 c0       	rjmp	.+170    	; 0x1ee0 <vfprintf+0x1e8>
    1e36:	20 c0       	rjmp	.+64     	; 0x1e78 <vfprintf+0x180>
    1e38:	f8 01       	movw	r30, r16
    1e3a:	80 81       	ld	r24, Z
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	0e 5f       	subi	r16, 0xFE	; 254
    1e40:	1f 4f       	sbci	r17, 0xFF	; 255
    1e42:	88 24       	eor	r8, r8
    1e44:	83 94       	inc	r8
    1e46:	91 2c       	mov	r9, r1
    1e48:	53 01       	movw	r10, r6
    1e4a:	12 c0       	rjmp	.+36     	; 0x1e70 <vfprintf+0x178>
    1e4c:	28 01       	movw	r4, r16
    1e4e:	f2 e0       	ldi	r31, 0x02	; 2
    1e50:	4f 0e       	add	r4, r31
    1e52:	51 1c       	adc	r5, r1
    1e54:	f8 01       	movw	r30, r16
    1e56:	a0 80       	ld	r10, Z
    1e58:	b1 80       	ldd	r11, Z+1	; 0x01
    1e5a:	36 fe       	sbrs	r3, 6
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <vfprintf+0x16c>
    1e5e:	69 2d       	mov	r22, r9
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <vfprintf+0x170>
    1e64:	6f ef       	ldi	r22, 0xFF	; 255
    1e66:	7f ef       	ldi	r23, 0xFF	; 255
    1e68:	c5 01       	movw	r24, r10
    1e6a:	4e d1       	rcall	.+668    	; 0x2108 <strnlen>
    1e6c:	4c 01       	movw	r8, r24
    1e6e:	82 01       	movw	r16, r4
    1e70:	f3 2d       	mov	r31, r3
    1e72:	ff 77       	andi	r31, 0x7F	; 127
    1e74:	3f 2e       	mov	r3, r31
    1e76:	15 c0       	rjmp	.+42     	; 0x1ea2 <vfprintf+0x1aa>
    1e78:	28 01       	movw	r4, r16
    1e7a:	22 e0       	ldi	r18, 0x02	; 2
    1e7c:	42 0e       	add	r4, r18
    1e7e:	51 1c       	adc	r5, r1
    1e80:	f8 01       	movw	r30, r16
    1e82:	a0 80       	ld	r10, Z
    1e84:	b1 80       	ldd	r11, Z+1	; 0x01
    1e86:	36 fe       	sbrs	r3, 6
    1e88:	03 c0       	rjmp	.+6      	; 0x1e90 <vfprintf+0x198>
    1e8a:	69 2d       	mov	r22, r9
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <vfprintf+0x19c>
    1e90:	6f ef       	ldi	r22, 0xFF	; 255
    1e92:	7f ef       	ldi	r23, 0xFF	; 255
    1e94:	c5 01       	movw	r24, r10
    1e96:	2d d1       	rcall	.+602    	; 0x20f2 <strnlen_P>
    1e98:	4c 01       	movw	r8, r24
    1e9a:	f3 2d       	mov	r31, r3
    1e9c:	f0 68       	ori	r31, 0x80	; 128
    1e9e:	3f 2e       	mov	r3, r31
    1ea0:	82 01       	movw	r16, r4
    1ea2:	33 fc       	sbrc	r3, 3
    1ea4:	19 c0       	rjmp	.+50     	; 0x1ed8 <vfprintf+0x1e0>
    1ea6:	82 2d       	mov	r24, r2
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	88 16       	cp	r8, r24
    1eac:	99 06       	cpc	r9, r25
    1eae:	a0 f4       	brcc	.+40     	; 0x1ed8 <vfprintf+0x1e0>
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	80 e2       	ldi	r24, 0x20	; 32
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	33 d1       	rcall	.+614    	; 0x211e <fputc>
    1eb8:	2a 94       	dec	r2
    1eba:	f5 cf       	rjmp	.-22     	; 0x1ea6 <vfprintf+0x1ae>
    1ebc:	f5 01       	movw	r30, r10
    1ebe:	37 fc       	sbrc	r3, 7
    1ec0:	85 91       	lpm	r24, Z+
    1ec2:	37 fe       	sbrs	r3, 7
    1ec4:	81 91       	ld	r24, Z+
    1ec6:	5f 01       	movw	r10, r30
    1ec8:	b6 01       	movw	r22, r12
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	28 d1       	rcall	.+592    	; 0x211e <fputc>
    1ece:	21 10       	cpse	r2, r1
    1ed0:	2a 94       	dec	r2
    1ed2:	21 e0       	ldi	r18, 0x01	; 1
    1ed4:	82 1a       	sub	r8, r18
    1ed6:	91 08       	sbc	r9, r1
    1ed8:	81 14       	cp	r8, r1
    1eda:	91 04       	cpc	r9, r1
    1edc:	79 f7       	brne	.-34     	; 0x1ebc <vfprintf+0x1c4>
    1ede:	e1 c0       	rjmp	.+450    	; 0x20a2 <vfprintf+0x3aa>
    1ee0:	84 36       	cpi	r24, 0x64	; 100
    1ee2:	11 f0       	breq	.+4      	; 0x1ee8 <vfprintf+0x1f0>
    1ee4:	89 36       	cpi	r24, 0x69	; 105
    1ee6:	39 f5       	brne	.+78     	; 0x1f36 <vfprintf+0x23e>
    1ee8:	f8 01       	movw	r30, r16
    1eea:	37 fe       	sbrs	r3, 7
    1eec:	07 c0       	rjmp	.+14     	; 0x1efc <vfprintf+0x204>
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	0c 5f       	subi	r16, 0xFC	; 252
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	08 c0       	rjmp	.+16     	; 0x1f0c <vfprintf+0x214>
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	07 2e       	mov	r0, r23
    1f02:	00 0c       	add	r0, r0
    1f04:	88 0b       	sbc	r24, r24
    1f06:	99 0b       	sbc	r25, r25
    1f08:	0e 5f       	subi	r16, 0xFE	; 254
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	f3 2d       	mov	r31, r3
    1f0e:	ff 76       	andi	r31, 0x6F	; 111
    1f10:	3f 2e       	mov	r3, r31
    1f12:	97 ff       	sbrs	r25, 7
    1f14:	09 c0       	rjmp	.+18     	; 0x1f28 <vfprintf+0x230>
    1f16:	90 95       	com	r25
    1f18:	80 95       	com	r24
    1f1a:	70 95       	com	r23
    1f1c:	61 95       	neg	r22
    1f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f20:	8f 4f       	sbci	r24, 0xFF	; 255
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	f0 68       	ori	r31, 0x80	; 128
    1f26:	3f 2e       	mov	r3, r31
    1f28:	2a e0       	ldi	r18, 0x0A	; 10
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	a3 01       	movw	r20, r6
    1f2e:	33 d1       	rcall	.+614    	; 0x2196 <__ultoa_invert>
    1f30:	88 2e       	mov	r8, r24
    1f32:	86 18       	sub	r8, r6
    1f34:	44 c0       	rjmp	.+136    	; 0x1fbe <vfprintf+0x2c6>
    1f36:	85 37       	cpi	r24, 0x75	; 117
    1f38:	31 f4       	brne	.+12     	; 0x1f46 <vfprintf+0x24e>
    1f3a:	23 2d       	mov	r18, r3
    1f3c:	2f 7e       	andi	r18, 0xEF	; 239
    1f3e:	b2 2e       	mov	r11, r18
    1f40:	2a e0       	ldi	r18, 0x0A	; 10
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	25 c0       	rjmp	.+74     	; 0x1f90 <vfprintf+0x298>
    1f46:	93 2d       	mov	r25, r3
    1f48:	99 7f       	andi	r25, 0xF9	; 249
    1f4a:	b9 2e       	mov	r11, r25
    1f4c:	8f 36       	cpi	r24, 0x6F	; 111
    1f4e:	c1 f0       	breq	.+48     	; 0x1f80 <vfprintf+0x288>
    1f50:	18 f4       	brcc	.+6      	; 0x1f58 <vfprintf+0x260>
    1f52:	88 35       	cpi	r24, 0x58	; 88
    1f54:	79 f0       	breq	.+30     	; 0x1f74 <vfprintf+0x27c>
    1f56:	ae c0       	rjmp	.+348    	; 0x20b4 <vfprintf+0x3bc>
    1f58:	80 37       	cpi	r24, 0x70	; 112
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <vfprintf+0x26a>
    1f5c:	88 37       	cpi	r24, 0x78	; 120
    1f5e:	21 f0       	breq	.+8      	; 0x1f68 <vfprintf+0x270>
    1f60:	a9 c0       	rjmp	.+338    	; 0x20b4 <vfprintf+0x3bc>
    1f62:	e9 2f       	mov	r30, r25
    1f64:	e0 61       	ori	r30, 0x10	; 16
    1f66:	be 2e       	mov	r11, r30
    1f68:	b4 fe       	sbrs	r11, 4
    1f6a:	0d c0       	rjmp	.+26     	; 0x1f86 <vfprintf+0x28e>
    1f6c:	fb 2d       	mov	r31, r11
    1f6e:	f4 60       	ori	r31, 0x04	; 4
    1f70:	bf 2e       	mov	r11, r31
    1f72:	09 c0       	rjmp	.+18     	; 0x1f86 <vfprintf+0x28e>
    1f74:	34 fe       	sbrs	r3, 4
    1f76:	0a c0       	rjmp	.+20     	; 0x1f8c <vfprintf+0x294>
    1f78:	29 2f       	mov	r18, r25
    1f7a:	26 60       	ori	r18, 0x06	; 6
    1f7c:	b2 2e       	mov	r11, r18
    1f7e:	06 c0       	rjmp	.+12     	; 0x1f8c <vfprintf+0x294>
    1f80:	28 e0       	ldi	r18, 0x08	; 8
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	05 c0       	rjmp	.+10     	; 0x1f90 <vfprintf+0x298>
    1f86:	20 e1       	ldi	r18, 0x10	; 16
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <vfprintf+0x298>
    1f8c:	20 e1       	ldi	r18, 0x10	; 16
    1f8e:	32 e0       	ldi	r19, 0x02	; 2
    1f90:	f8 01       	movw	r30, r16
    1f92:	b7 fe       	sbrs	r11, 7
    1f94:	07 c0       	rjmp	.+14     	; 0x1fa4 <vfprintf+0x2ac>
    1f96:	60 81       	ld	r22, Z
    1f98:	71 81       	ldd	r23, Z+1	; 0x01
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	0c 5f       	subi	r16, 0xFC	; 252
    1fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa2:	06 c0       	rjmp	.+12     	; 0x1fb0 <vfprintf+0x2b8>
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 5f       	subi	r16, 0xFE	; 254
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	a3 01       	movw	r20, r6
    1fb2:	f1 d0       	rcall	.+482    	; 0x2196 <__ultoa_invert>
    1fb4:	88 2e       	mov	r8, r24
    1fb6:	86 18       	sub	r8, r6
    1fb8:	fb 2d       	mov	r31, r11
    1fba:	ff 77       	andi	r31, 0x7F	; 127
    1fbc:	3f 2e       	mov	r3, r31
    1fbe:	36 fe       	sbrs	r3, 6
    1fc0:	0d c0       	rjmp	.+26     	; 0x1fdc <vfprintf+0x2e4>
    1fc2:	23 2d       	mov	r18, r3
    1fc4:	2e 7f       	andi	r18, 0xFE	; 254
    1fc6:	a2 2e       	mov	r10, r18
    1fc8:	89 14       	cp	r8, r9
    1fca:	58 f4       	brcc	.+22     	; 0x1fe2 <vfprintf+0x2ea>
    1fcc:	34 fe       	sbrs	r3, 4
    1fce:	0b c0       	rjmp	.+22     	; 0x1fe6 <vfprintf+0x2ee>
    1fd0:	32 fc       	sbrc	r3, 2
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <vfprintf+0x2ee>
    1fd4:	83 2d       	mov	r24, r3
    1fd6:	8e 7e       	andi	r24, 0xEE	; 238
    1fd8:	a8 2e       	mov	r10, r24
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <vfprintf+0x2ee>
    1fdc:	b8 2c       	mov	r11, r8
    1fde:	a3 2c       	mov	r10, r3
    1fe0:	03 c0       	rjmp	.+6      	; 0x1fe8 <vfprintf+0x2f0>
    1fe2:	b8 2c       	mov	r11, r8
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <vfprintf+0x2f0>
    1fe6:	b9 2c       	mov	r11, r9
    1fe8:	a4 fe       	sbrs	r10, 4
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <vfprintf+0x312>
    1fec:	fe 01       	movw	r30, r28
    1fee:	e8 0d       	add	r30, r8
    1ff0:	f1 1d       	adc	r31, r1
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 33       	cpi	r24, 0x30	; 48
    1ff6:	21 f4       	brne	.+8      	; 0x2000 <vfprintf+0x308>
    1ff8:	9a 2d       	mov	r25, r10
    1ffa:	99 7e       	andi	r25, 0xE9	; 233
    1ffc:	a9 2e       	mov	r10, r25
    1ffe:	09 c0       	rjmp	.+18     	; 0x2012 <vfprintf+0x31a>
    2000:	a2 fe       	sbrs	r10, 2
    2002:	06 c0       	rjmp	.+12     	; 0x2010 <vfprintf+0x318>
    2004:	b3 94       	inc	r11
    2006:	b3 94       	inc	r11
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <vfprintf+0x31a>
    200a:	8a 2d       	mov	r24, r10
    200c:	86 78       	andi	r24, 0x86	; 134
    200e:	09 f0       	breq	.+2      	; 0x2012 <vfprintf+0x31a>
    2010:	b3 94       	inc	r11
    2012:	a3 fc       	sbrc	r10, 3
    2014:	10 c0       	rjmp	.+32     	; 0x2036 <vfprintf+0x33e>
    2016:	a0 fe       	sbrs	r10, 0
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <vfprintf+0x32e>
    201a:	b2 14       	cp	r11, r2
    201c:	80 f4       	brcc	.+32     	; 0x203e <vfprintf+0x346>
    201e:	28 0c       	add	r2, r8
    2020:	92 2c       	mov	r9, r2
    2022:	9b 18       	sub	r9, r11
    2024:	0d c0       	rjmp	.+26     	; 0x2040 <vfprintf+0x348>
    2026:	b2 14       	cp	r11, r2
    2028:	58 f4       	brcc	.+22     	; 0x2040 <vfprintf+0x348>
    202a:	b6 01       	movw	r22, r12
    202c:	80 e2       	ldi	r24, 0x20	; 32
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	76 d0       	rcall	.+236    	; 0x211e <fputc>
    2032:	b3 94       	inc	r11
    2034:	f8 cf       	rjmp	.-16     	; 0x2026 <vfprintf+0x32e>
    2036:	b2 14       	cp	r11, r2
    2038:	18 f4       	brcc	.+6      	; 0x2040 <vfprintf+0x348>
    203a:	2b 18       	sub	r2, r11
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <vfprintf+0x34a>
    203e:	98 2c       	mov	r9, r8
    2040:	21 2c       	mov	r2, r1
    2042:	a4 fe       	sbrs	r10, 4
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <vfprintf+0x36c>
    2046:	b6 01       	movw	r22, r12
    2048:	80 e3       	ldi	r24, 0x30	; 48
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	68 d0       	rcall	.+208    	; 0x211e <fputc>
    204e:	a2 fe       	sbrs	r10, 2
    2050:	16 c0       	rjmp	.+44     	; 0x207e <vfprintf+0x386>
    2052:	a1 fc       	sbrc	r10, 1
    2054:	03 c0       	rjmp	.+6      	; 0x205c <vfprintf+0x364>
    2056:	88 e7       	ldi	r24, 0x78	; 120
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <vfprintf+0x368>
    205c:	88 e5       	ldi	r24, 0x58	; 88
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	b6 01       	movw	r22, r12
    2062:	0c c0       	rjmp	.+24     	; 0x207c <vfprintf+0x384>
    2064:	8a 2d       	mov	r24, r10
    2066:	86 78       	andi	r24, 0x86	; 134
    2068:	51 f0       	breq	.+20     	; 0x207e <vfprintf+0x386>
    206a:	a1 fe       	sbrs	r10, 1
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <vfprintf+0x37a>
    206e:	8b e2       	ldi	r24, 0x2B	; 43
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <vfprintf+0x37c>
    2072:	80 e2       	ldi	r24, 0x20	; 32
    2074:	a7 fc       	sbrc	r10, 7
    2076:	8d e2       	ldi	r24, 0x2D	; 45
    2078:	b6 01       	movw	r22, r12
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	50 d0       	rcall	.+160    	; 0x211e <fputc>
    207e:	89 14       	cp	r8, r9
    2080:	30 f4       	brcc	.+12     	; 0x208e <vfprintf+0x396>
    2082:	b6 01       	movw	r22, r12
    2084:	80 e3       	ldi	r24, 0x30	; 48
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	4a d0       	rcall	.+148    	; 0x211e <fputc>
    208a:	9a 94       	dec	r9
    208c:	f8 cf       	rjmp	.-16     	; 0x207e <vfprintf+0x386>
    208e:	8a 94       	dec	r8
    2090:	f3 01       	movw	r30, r6
    2092:	e8 0d       	add	r30, r8
    2094:	f1 1d       	adc	r31, r1
    2096:	80 81       	ld	r24, Z
    2098:	b6 01       	movw	r22, r12
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	40 d0       	rcall	.+128    	; 0x211e <fputc>
    209e:	81 10       	cpse	r8, r1
    20a0:	f6 cf       	rjmp	.-20     	; 0x208e <vfprintf+0x396>
    20a2:	22 20       	and	r2, r2
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <vfprintf+0x3b0>
    20a6:	4e ce       	rjmp	.-868    	; 0x1d44 <vfprintf+0x4c>
    20a8:	b6 01       	movw	r22, r12
    20aa:	80 e2       	ldi	r24, 0x20	; 32
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	37 d0       	rcall	.+110    	; 0x211e <fputc>
    20b0:	2a 94       	dec	r2
    20b2:	f7 cf       	rjmp	.-18     	; 0x20a2 <vfprintf+0x3aa>
    20b4:	f6 01       	movw	r30, r12
    20b6:	86 81       	ldd	r24, Z+6	; 0x06
    20b8:	97 81       	ldd	r25, Z+7	; 0x07
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <vfprintf+0x3c8>
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	9f ef       	ldi	r25, 0xFF	; 255
    20c0:	2b 96       	adiw	r28, 0x0b	; 11
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	1f 91       	pop	r17
    20d2:	0f 91       	pop	r16
    20d4:	ff 90       	pop	r15
    20d6:	ef 90       	pop	r14
    20d8:	df 90       	pop	r13
    20da:	cf 90       	pop	r12
    20dc:	bf 90       	pop	r11
    20de:	af 90       	pop	r10
    20e0:	9f 90       	pop	r9
    20e2:	8f 90       	pop	r8
    20e4:	7f 90       	pop	r7
    20e6:	6f 90       	pop	r6
    20e8:	5f 90       	pop	r5
    20ea:	4f 90       	pop	r4
    20ec:	3f 90       	pop	r3
    20ee:	2f 90       	pop	r2
    20f0:	08 95       	ret

000020f2 <strnlen_P>:
    20f2:	fc 01       	movw	r30, r24
    20f4:	05 90       	lpm	r0, Z+
    20f6:	61 50       	subi	r22, 0x01	; 1
    20f8:	70 40       	sbci	r23, 0x00	; 0
    20fa:	01 10       	cpse	r0, r1
    20fc:	d8 f7       	brcc	.-10     	; 0x20f4 <strnlen_P+0x2>
    20fe:	80 95       	com	r24
    2100:	90 95       	com	r25
    2102:	8e 0f       	add	r24, r30
    2104:	9f 1f       	adc	r25, r31
    2106:	08 95       	ret

00002108 <strnlen>:
    2108:	fc 01       	movw	r30, r24
    210a:	61 50       	subi	r22, 0x01	; 1
    210c:	70 40       	sbci	r23, 0x00	; 0
    210e:	01 90       	ld	r0, Z+
    2110:	01 10       	cpse	r0, r1
    2112:	d8 f7       	brcc	.-10     	; 0x210a <strnlen+0x2>
    2114:	80 95       	com	r24
    2116:	90 95       	com	r25
    2118:	8e 0f       	add	r24, r30
    211a:	9f 1f       	adc	r25, r31
    211c:	08 95       	ret

0000211e <fputc>:
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	fb 01       	movw	r30, r22
    2128:	23 81       	ldd	r18, Z+3	; 0x03
    212a:	21 fd       	sbrc	r18, 1
    212c:	03 c0       	rjmp	.+6      	; 0x2134 <fputc+0x16>
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	9f ef       	ldi	r25, 0xFF	; 255
    2132:	2c c0       	rjmp	.+88     	; 0x218c <fputc+0x6e>
    2134:	22 ff       	sbrs	r18, 2
    2136:	16 c0       	rjmp	.+44     	; 0x2164 <fputc+0x46>
    2138:	46 81       	ldd	r20, Z+6	; 0x06
    213a:	57 81       	ldd	r21, Z+7	; 0x07
    213c:	24 81       	ldd	r18, Z+4	; 0x04
    213e:	35 81       	ldd	r19, Z+5	; 0x05
    2140:	42 17       	cp	r20, r18
    2142:	53 07       	cpc	r21, r19
    2144:	44 f4       	brge	.+16     	; 0x2156 <fputc+0x38>
    2146:	a0 81       	ld	r26, Z
    2148:	b1 81       	ldd	r27, Z+1	; 0x01
    214a:	9d 01       	movw	r18, r26
    214c:	2f 5f       	subi	r18, 0xFF	; 255
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    2150:	31 83       	std	Z+1, r19	; 0x01
    2152:	20 83       	st	Z, r18
    2154:	8c 93       	st	X, r24
    2156:	26 81       	ldd	r18, Z+6	; 0x06
    2158:	37 81       	ldd	r19, Z+7	; 0x07
    215a:	2f 5f       	subi	r18, 0xFF	; 255
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	37 83       	std	Z+7, r19	; 0x07
    2160:	26 83       	std	Z+6, r18	; 0x06
    2162:	14 c0       	rjmp	.+40     	; 0x218c <fputc+0x6e>
    2164:	8b 01       	movw	r16, r22
    2166:	ec 01       	movw	r28, r24
    2168:	fb 01       	movw	r30, r22
    216a:	00 84       	ldd	r0, Z+8	; 0x08
    216c:	f1 85       	ldd	r31, Z+9	; 0x09
    216e:	e0 2d       	mov	r30, r0
    2170:	09 95       	icall
    2172:	89 2b       	or	r24, r25
    2174:	e1 f6       	brne	.-72     	; 0x212e <fputc+0x10>
    2176:	d8 01       	movw	r26, r16
    2178:	16 96       	adiw	r26, 0x06	; 6
    217a:	8d 91       	ld	r24, X+
    217c:	9c 91       	ld	r25, X
    217e:	17 97       	sbiw	r26, 0x07	; 7
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	17 96       	adiw	r26, 0x07	; 7
    2184:	9c 93       	st	X, r25
    2186:	8e 93       	st	-X, r24
    2188:	16 97       	sbiw	r26, 0x06	; 6
    218a:	ce 01       	movw	r24, r28
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	08 95       	ret

00002196 <__ultoa_invert>:
    2196:	fa 01       	movw	r30, r20
    2198:	aa 27       	eor	r26, r26
    219a:	28 30       	cpi	r18, 0x08	; 8
    219c:	51 f1       	breq	.+84     	; 0x21f2 <__ultoa_invert+0x5c>
    219e:	20 31       	cpi	r18, 0x10	; 16
    21a0:	81 f1       	breq	.+96     	; 0x2202 <__stack+0x3>
    21a2:	e8 94       	clt
    21a4:	6f 93       	push	r22
    21a6:	6e 7f       	andi	r22, 0xFE	; 254
    21a8:	6e 5f       	subi	r22, 0xFE	; 254
    21aa:	7f 4f       	sbci	r23, 0xFF	; 255
    21ac:	8f 4f       	sbci	r24, 0xFF	; 255
    21ae:	9f 4f       	sbci	r25, 0xFF	; 255
    21b0:	af 4f       	sbci	r26, 0xFF	; 255
    21b2:	b1 e0       	ldi	r27, 0x01	; 1
    21b4:	3e d0       	rcall	.+124    	; 0x2232 <__stack+0x33>
    21b6:	b4 e0       	ldi	r27, 0x04	; 4
    21b8:	3c d0       	rcall	.+120    	; 0x2232 <__stack+0x33>
    21ba:	67 0f       	add	r22, r23
    21bc:	78 1f       	adc	r23, r24
    21be:	89 1f       	adc	r24, r25
    21c0:	9a 1f       	adc	r25, r26
    21c2:	a1 1d       	adc	r26, r1
    21c4:	68 0f       	add	r22, r24
    21c6:	79 1f       	adc	r23, r25
    21c8:	8a 1f       	adc	r24, r26
    21ca:	91 1d       	adc	r25, r1
    21cc:	a1 1d       	adc	r26, r1
    21ce:	6a 0f       	add	r22, r26
    21d0:	71 1d       	adc	r23, r1
    21d2:	81 1d       	adc	r24, r1
    21d4:	91 1d       	adc	r25, r1
    21d6:	a1 1d       	adc	r26, r1
    21d8:	20 d0       	rcall	.+64     	; 0x221a <__stack+0x1b>
    21da:	09 f4       	brne	.+2      	; 0x21de <__ultoa_invert+0x48>
    21dc:	68 94       	set
    21de:	3f 91       	pop	r19
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	26 9f       	mul	r18, r22
    21e4:	11 24       	eor	r1, r1
    21e6:	30 19       	sub	r19, r0
    21e8:	30 5d       	subi	r19, 0xD0	; 208
    21ea:	31 93       	st	Z+, r19
    21ec:	de f6       	brtc	.-74     	; 0x21a4 <__ultoa_invert+0xe>
    21ee:	cf 01       	movw	r24, r30
    21f0:	08 95       	ret
    21f2:	46 2f       	mov	r20, r22
    21f4:	47 70       	andi	r20, 0x07	; 7
    21f6:	40 5d       	subi	r20, 0xD0	; 208
    21f8:	41 93       	st	Z+, r20
    21fa:	b3 e0       	ldi	r27, 0x03	; 3
    21fc:	0f d0       	rcall	.+30     	; 0x221c <__stack+0x1d>
    21fe:	c9 f7       	brne	.-14     	; 0x21f2 <__ultoa_invert+0x5c>
    2200:	f6 cf       	rjmp	.-20     	; 0x21ee <__ultoa_invert+0x58>
    2202:	46 2f       	mov	r20, r22
    2204:	4f 70       	andi	r20, 0x0F	; 15
    2206:	40 5d       	subi	r20, 0xD0	; 208
    2208:	4a 33       	cpi	r20, 0x3A	; 58
    220a:	18 f0       	brcs	.+6      	; 0x2212 <__stack+0x13>
    220c:	49 5d       	subi	r20, 0xD9	; 217
    220e:	31 fd       	sbrc	r19, 1
    2210:	40 52       	subi	r20, 0x20	; 32
    2212:	41 93       	st	Z+, r20
    2214:	02 d0       	rcall	.+4      	; 0x221a <__stack+0x1b>
    2216:	a9 f7       	brne	.-22     	; 0x2202 <__stack+0x3>
    2218:	ea cf       	rjmp	.-44     	; 0x21ee <__ultoa_invert+0x58>
    221a:	b4 e0       	ldi	r27, 0x04	; 4
    221c:	a6 95       	lsr	r26
    221e:	97 95       	ror	r25
    2220:	87 95       	ror	r24
    2222:	77 95       	ror	r23
    2224:	67 95       	ror	r22
    2226:	ba 95       	dec	r27
    2228:	c9 f7       	brne	.-14     	; 0x221c <__stack+0x1d>
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	61 05       	cpc	r22, r1
    222e:	71 05       	cpc	r23, r1
    2230:	08 95       	ret
    2232:	9b 01       	movw	r18, r22
    2234:	ac 01       	movw	r20, r24
    2236:	0a 2e       	mov	r0, r26
    2238:	06 94       	lsr	r0
    223a:	57 95       	ror	r21
    223c:	47 95       	ror	r20
    223e:	37 95       	ror	r19
    2240:	27 95       	ror	r18
    2242:	ba 95       	dec	r27
    2244:	c9 f7       	brne	.-14     	; 0x2238 <__stack+0x39>
    2246:	62 0f       	add	r22, r18
    2248:	73 1f       	adc	r23, r19
    224a:	84 1f       	adc	r24, r20
    224c:	95 1f       	adc	r25, r21
    224e:	a0 1d       	adc	r26, r0
    2250:	08 95       	ret

00002252 <_exit>:
    2252:	f8 94       	cli

00002254 <__stop_program>:
    2254:	ff cf       	rjmp	.-2      	; 0x2254 <__stop_program>
