
cc_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  00800200  00800200  00000498  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001371  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db9  00000000  00000000  00001951  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000811  00000000  00000000  0000270a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f3  00000000  00000000  00003194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000766  00000000  00000000  00003987  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000040ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	7f c0       	rjmp	.+254    	; 0x104 <__bad_interrupt>
   6:	00 00       	nop
   8:	7d c0       	rjmp	.+250    	; 0x104 <__bad_interrupt>
   a:	00 00       	nop
   c:	7b c0       	rjmp	.+246    	; 0x104 <__bad_interrupt>
   e:	00 00       	nop
  10:	79 c0       	rjmp	.+242    	; 0x104 <__bad_interrupt>
  12:	00 00       	nop
  14:	77 c0       	rjmp	.+238    	; 0x104 <__bad_interrupt>
  16:	00 00       	nop
  18:	75 c0       	rjmp	.+234    	; 0x104 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	73 c0       	rjmp	.+230    	; 0x104 <__bad_interrupt>
  1e:	00 00       	nop
  20:	71 c0       	rjmp	.+226    	; 0x104 <__bad_interrupt>
  22:	00 00       	nop
  24:	6f c0       	rjmp	.+222    	; 0x104 <__bad_interrupt>
  26:	00 00       	nop
  28:	6d c0       	rjmp	.+218    	; 0x104 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6b c0       	rjmp	.+214    	; 0x104 <__bad_interrupt>
  2e:	00 00       	nop
  30:	69 c0       	rjmp	.+210    	; 0x104 <__bad_interrupt>
  32:	00 00       	nop
  34:	67 c0       	rjmp	.+206    	; 0x104 <__bad_interrupt>
  36:	00 00       	nop
  38:	65 c0       	rjmp	.+202    	; 0x104 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	63 c0       	rjmp	.+198    	; 0x104 <__bad_interrupt>
  3e:	00 00       	nop
  40:	61 c0       	rjmp	.+194    	; 0x104 <__bad_interrupt>
  42:	00 00       	nop
  44:	5f c0       	rjmp	.+190    	; 0x104 <__bad_interrupt>
  46:	00 00       	nop
  48:	5d c0       	rjmp	.+186    	; 0x104 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5b c0       	rjmp	.+182    	; 0x104 <__bad_interrupt>
  4e:	00 00       	nop
  50:	59 c0       	rjmp	.+178    	; 0x104 <__bad_interrupt>
  52:	00 00       	nop
  54:	9c c0       	rjmp	.+312    	; 0x18e <__vector_21>
  56:	00 00       	nop
  58:	55 c0       	rjmp	.+170    	; 0x104 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	53 c0       	rjmp	.+166    	; 0x104 <__bad_interrupt>
  5e:	00 00       	nop
  60:	51 c0       	rjmp	.+162    	; 0x104 <__bad_interrupt>
  62:	00 00       	nop
  64:	bb c0       	rjmp	.+374    	; 0x1dc <__vector_25>
  66:	00 00       	nop
  68:	17 c1       	rjmp	.+558    	; 0x298 <__vector_26>
  6a:	00 00       	nop
  6c:	4b c0       	rjmp	.+150    	; 0x104 <__bad_interrupt>
  6e:	00 00       	nop
  70:	49 c0       	rjmp	.+146    	; 0x104 <__bad_interrupt>
  72:	00 00       	nop
  74:	47 c0       	rjmp	.+142    	; 0x104 <__bad_interrupt>
  76:	00 00       	nop
  78:	45 c0       	rjmp	.+138    	; 0x104 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	43 c0       	rjmp	.+134    	; 0x104 <__bad_interrupt>
  7e:	00 00       	nop
  80:	41 c0       	rjmp	.+130    	; 0x104 <__bad_interrupt>
  82:	00 00       	nop
  84:	3f c0       	rjmp	.+126    	; 0x104 <__bad_interrupt>
  86:	00 00       	nop
  88:	3d c0       	rjmp	.+122    	; 0x104 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3b c0       	rjmp	.+118    	; 0x104 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d4 c0       	rjmp	.+424    	; 0x23a <__vector_36>
  92:	00 00       	nop
  94:	2f c1       	rjmp	.+606    	; 0x2f4 <__vector_37>
  96:	00 00       	nop
  98:	35 c0       	rjmp	.+106    	; 0x104 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	33 c0       	rjmp	.+102    	; 0x104 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	31 c0       	rjmp	.+98     	; 0x104 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	2f c0       	rjmp	.+94     	; 0x104 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2d c0       	rjmp	.+90     	; 0x104 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2b c0       	rjmp	.+86     	; 0x104 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	29 c0       	rjmp	.+82     	; 0x104 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	27 c0       	rjmp	.+78     	; 0x104 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	25 c0       	rjmp	.+74     	; 0x104 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	23 c0       	rjmp	.+70     	; 0x104 <__bad_interrupt>
  be:	00 00       	nop
  c0:	21 c0       	rjmp	.+66     	; 0x104 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	1f c0       	rjmp	.+62     	; 0x104 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1d c0       	rjmp	.+58     	; 0x104 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1b c0       	rjmp	.+54     	; 0x104 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	19 c0       	rjmp	.+50     	; 0x104 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	17 c0       	rjmp	.+46     	; 0x104 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	15 c0       	rjmp	.+42     	; 0x104 <__bad_interrupt>
  da:	00 00       	nop
  dc:	13 c0       	rjmp	.+38     	; 0x104 <__bad_interrupt>
  de:	00 00       	nop
  e0:	11 c0       	rjmp	.+34     	; 0x104 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	ac 38       	cpi	r26, 0x8C	; 140
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	02 d0       	rcall	.+4      	; 0x106 <main>
 102:	8e c1       	rjmp	.+796    	; 0x420 <_exit>

00000104 <__bad_interrupt>:
 104:	7d cf       	rjmp	.-262    	; 0x0 <__vectors>

00000106 <main>:
void oneKHzTimer(void);
volatile uint8_t tempArm = 0;

int main(void)
{
	uart_init(19200);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	9b e4       	ldi	r25, 0x4B	; 75
 10a:	22 d1       	rcall	.+580    	; 0x350 <uart_init>
    uart1_init(19200);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	9b e4       	ldi	r25, 0x4B	; 75
 110:	3b d1       	rcall	.+630    	; 0x388 <uart1_init>
	DDRD |= 8;				//PD3 = UART1_TX
 112:	53 9a       	sbi	0x0a, 3	; 10
	DDRE |= 2;				//PE1 = UART0_TX
 114:	69 9a       	sbi	0x0d, 1	; 13
	DDRK |= 32;				//PK5 = LED
 116:	e7 e0       	ldi	r30, 0x07	; 7
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	80 81       	ld	r24, Z
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	80 83       	st	Z, r24
	
	PORTK = 32;				//LED on
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7e0108>
	PORTJ |= 64;
 126:	e5 e0       	ldi	r30, 0x05	; 5
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
	
	TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
 130:	84 b5       	in	r24, 0x24	; 36
 132:	82 60       	ori	r24, 0x02	; 2
 134:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
 136:	85 b5       	in	r24, 0x25	; 37
 138:	83 60       	ori	r24, 0x03	; 3
 13a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
 13c:	8a ef       	ldi	r24, 0xFA	; 250
 13e:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);                // Enable COMPA interupt
 140:	ee e6       	ldi	r30, 0x6E	; 110
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 60       	ori	r24, 0x02	; 2
 148:	80 83       	st	Z, r24
	
	sei();
	
	uart_putc(68);			//send a "D"
 14a:	78 94       	sei
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	38 d1       	rcall	.+624    	; 0x3c0 <uart_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	84 e3       	ldi	r24, 0x34	; 52
 154:	9c e0       	ldi	r25, 0x0C	; 12
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x50>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x5a>
 160:	00 00       	nop
    while (1) 
    {
		//_delay_ms(100);
		//uart_putc(68);
		if(tempArm > 0) PORTK |= 32;
		else PORTK &= ~32;
 162:	e8 e0       	ldi	r30, 0x08	; 8
 164:	f1 e0       	ldi	r31, 0x01	; 1
	_delay_ms(250);
    while (1) 
    {
		//_delay_ms(100);
		//uart_putc(68);
		if(tempArm > 0) PORTK |= 32;
 166:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 16a:	88 23       	and	r24, r24
 16c:	21 f0       	breq	.+8      	; 0x176 <main+0x70>
 16e:	80 81       	ld	r24, Z
 170:	80 62       	ori	r24, 0x20	; 32
 172:	80 83       	st	Z, r24
 174:	f8 cf       	rjmp	.-16     	; 0x166 <main+0x60>
		else PORTK &= ~32;
 176:	80 81       	ld	r24, Z
 178:	8f 7d       	andi	r24, 0xDF	; 223
 17a:	80 83       	st	Z, r24
 17c:	f4 cf       	rjmp	.-24     	; 0x166 <main+0x60>

0000017e <oneKHzTimer>:
	oneKHzTimer();
}

void oneKHzTimer (void)
{
	if((PINJ & 64) == 0)tempArm = 1;
 17e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7e0103>
 182:	86 fd       	sbrc	r24, 6
 184:	03 c0       	rjmp	.+6      	; 0x18c <oneKHzTimer+0xe>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 18c:	08 95       	ret

0000018e <__vector_21>:
		else PORTK &= ~32;
    }
}

ISR(TIMER0_COMPA_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	0b b6       	in	r0, 0x3b	; 59
 19a:	0f 92       	push	r0
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	oneKHzTimer();
 1b4:	e4 df       	rcall	.-56     	; 0x17e <oneKHzTimer>
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0b be       	out	0x3b, r0	; 59
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_25>:
    /* get data from receive buffer */
    data1 = UART1_RxBuf[tmptail1];
    
    return (UART1_LastRxError << 8) + data1;

}/* uart1_getc */
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	0b b6       	in	r0, 0x3b	; 59
 1e8:	0f 92       	push	r0
 1ea:	2f 93       	push	r18
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
 1f4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1f8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1fc:	88 71       	andi	r24, 0x18	; 24
 1fe:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <UART_RxHead>
 202:	ef 5f       	subi	r30, 0xFF	; 255
 204:	ef 71       	andi	r30, 0x1F	; 31
 206:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <UART_RxTail>
 20a:	e9 17       	cp	r30, r25
 20c:	39 f0       	breq	.+14     	; 0x21c <__vector_25+0x40>
 20e:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <UART_RxHead>
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e5 5b       	subi	r30, 0xB5	; 181
 216:	fd 4f       	sbci	r31, 0xFD	; 253
 218:	20 83       	st	Z, r18
 21a:	01 c0       	rjmp	.+2      	; 0x21e <__vector_25+0x42>
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <UART_LastRxError>
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0b be       	out	0x3b, r0	; 59
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_36>:
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	0b b6       	in	r0, 0x3b	; 59
 246:	0f 92       	push	r0
 248:	2f 93       	push	r18
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
 252:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 256:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 25a:	88 71       	andi	r24, 0x18	; 24
 25c:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <UART1_RxHead>
 260:	ef 5f       	subi	r30, 0xFF	; 255
 262:	ef 71       	andi	r30, 0x1F	; 31
 264:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <UART1_RxTail>
 268:	e9 17       	cp	r30, r25
 26a:	39 f0       	breq	.+14     	; 0x27a <__vector_36+0x40>
 26c:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <UART1_RxHead>
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	ea 5f       	subi	r30, 0xFA	; 250
 274:	fd 4f       	sbci	r31, 0xFD	; 253
 276:	20 83       	st	Z, r18
 278:	01 c0       	rjmp	.+2      	; 0x27c <__vector_36+0x42>
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <UART1_LastRxError>
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0b be       	out	0x3b, r0	; 59
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_26>:
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	0b b6       	in	r0, 0x3b	; 59
 2a4:	0f 92       	push	r0
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
 2ae:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <UART_TxHead>
 2b2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <UART_TxTail>
 2b6:	98 17       	cp	r25, r24
 2b8:	69 f0       	breq	.+26     	; 0x2d4 <__vector_26+0x3c>
 2ba:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <UART_TxTail>
 2be:	ef 5f       	subi	r30, 0xFF	; 255
 2c0:	ef 71       	andi	r30, 0x1F	; 31
 2c2:	e0 93 49 02 	sts	0x0249, r30	; 0x800249 <UART_TxTail>
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e5 59       	subi	r30, 0x95	; 149
 2ca:	fd 4f       	sbci	r31, 0xFD	; 253
 2cc:	80 81       	ld	r24, Z
 2ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <__vector_26+0x46>
 2d4:	e1 ec       	ldi	r30, 0xC1	; 193
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	8f 7d       	andi	r24, 0xDF	; 223
 2dc:	80 83       	st	Z, r24
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0b be       	out	0x3b, r0	; 59
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <__vector_37>:
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	0b b6       	in	r0, 0x3b	; 59
 300:	0f 92       	push	r0
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <UART1_TxHead>
 30e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <UART1_TxTail>
 312:	98 17       	cp	r25, r24
 314:	69 f0       	breq	.+26     	; 0x330 <__vector_37+0x3c>
 316:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <UART1_TxTail>
 31a:	ef 5f       	subi	r30, 0xFF	; 255
 31c:	ef 71       	andi	r30, 0x1F	; 31
 31e:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <UART1_TxTail>
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ea 5d       	subi	r30, 0xDA	; 218
 326:	fd 4f       	sbci	r31, 0xFD	; 253
 328:	80 81       	ld	r24, Z
 32a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 32e:	05 c0       	rjmp	.+10     	; 0x33a <__vector_37+0x46>
 330:	e9 ec       	ldi	r30, 0xC9	; 201
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	8f 7d       	andi	r24, 0xDF	; 223
 338:	80 83       	st	Z, r24
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	0f 90       	pop	r0
 344:	0b be       	out	0x3b, r0	; 59
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <uart_init>:
 350:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <UART_TxHead>
 354:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <UART_TxTail>
 358:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <UART_RxHead>
 35c:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <UART_RxTail>
 360:	e1 e6       	ldi	r30, 0x61	; 97
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 e8       	ldi	r24, 0x80	; 128
 366:	80 83       	st	Z, r24
 368:	10 82       	st	Z, r1
 36a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 36e:	87 e6       	ldi	r24, 0x67	; 103
 370:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 37a:	88 e1       	ldi	r24, 0x18	; 24
 37c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 380:	86 e0       	ldi	r24, 0x06	; 6
 382:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 386:	08 95       	ret

00000388 <uart1_init>:
 388:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <UART1_TxHead>
 38c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <UART1_TxTail>
 390:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <UART1_RxHead>
 394:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <UART1_RxTail>
 398:	e1 e6       	ldi	r30, 0x61	; 97
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	80 83       	st	Z, r24
 3a0:	10 82       	st	Z, r1
 3a2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 3a6:	87 e6       	ldi	r24, 0x67	; 103
 3a8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 3b2:	88 e1       	ldi	r24, 0x18	; 24
 3b4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 3b8:	86 e0       	ldi	r24, 0x06	; 6
 3ba:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 3be:	08 95       	ret

000003c0 <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{	
	unsigned char tmphead;
	
	if (portKey == 0)
 3c0:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <portKey>
 3c4:	91 11       	cpse	r25, r1
 3c6:	15 c0       	rjmp	.+42     	; 0x3f2 <uart_putc+0x32>
	{
		tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 3c8:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <UART_TxHead>
 3cc:	2f 5f       	subi	r18, 0xFF	; 255
 3ce:	2f 71       	andi	r18, 0x1F	; 31
    
		while ( tmphead == UART_TxTail ){
 3d0:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <UART_TxTail>
 3d4:	29 17       	cp	r18, r25
 3d6:	e1 f3       	breq	.-8      	; 0x3d0 <uart_putc+0x10>
			;// wait for free space in buffer 
		}
    
		UART_TxBuf[tmphead] = data;
 3d8:	e2 2f       	mov	r30, r18
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	e5 59       	subi	r30, 0x95	; 149
 3de:	fd 4f       	sbci	r31, 0xFD	; 253
 3e0:	80 83       	st	Z, r24
		UART_TxHead = tmphead;
 3e2:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <UART_TxHead>

		// enable UDRE interrupt 
		UART0_CONTROL |= (1 << UART0_UDRIE);
 3e6:	e1 ec       	ldi	r30, 0xC1	; 193
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 62       	ori	r24, 0x20	; 32
 3ee:	80 83       	st	Z, r24
 3f0:	08 95       	ret
		
	}
	
	else if (portKey == 1)
 3f2:	91 30       	cpi	r25, 0x01	; 1
 3f4:	a1 f4       	brne	.+40     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	{
		tmphead  = (UART1_TxHead + 1) & UART1_TX_BUFFER_MASK;
 3f6:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <UART1_TxHead>
 3fa:	2f 5f       	subi	r18, 0xFF	; 255
 3fc:	2f 71       	andi	r18, 0x1F	; 31
    
		while ( tmphead == UART1_TxTail ){
 3fe:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <UART1_TxTail>
 402:	29 17       	cp	r18, r25
 404:	e1 f3       	breq	.-8      	; 0x3fe <uart_putc+0x3e>
			;// wait for free space in buffer 		
		}
		//PORTH &= 251;
    
		UART1_TxBuf[tmphead] = data;
 406:	e2 2f       	mov	r30, r18
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	ea 5d       	subi	r30, 0xDA	; 218
 40c:	fd 4f       	sbci	r31, 0xFD	; 253
 40e:	80 83       	st	Z, r24
		UART1_TxHead = tmphead;
 410:	20 93 05 02 	sts	0x0205, r18	; 0x800205 <UART1_TxHead>

		// enable UDRE interrupt 
		UART1_CONTROL |= (1 << UART1_UDRIE);	
 414:	e9 ec       	ldi	r30, 0xC9	; 201
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	80 83       	st	Z, r24
 41e:	08 95       	ret

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
